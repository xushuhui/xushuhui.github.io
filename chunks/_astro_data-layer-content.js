const _astro_dataLayerContent=[["Map",1,2,9,10,27,28],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.6.1","content-config-digest","4c3b74303b60abdf","astro-config-digest",'{"root":{},"srcDir":{},"publicDir":{},"outDir":{},"cacheDir":{},"site":"https://xushuhui.github.io","compressHTML":true,"base":"/","trailingSlash":"always","output":"static","scopedStyleStrategy":"attribute","build":{"format":"directory","client":{},"server":{},"assets":"assets","serverEntry":"entry.mjs","redirects":true,"inlineStylesheets":"auto","concurrency":1},"server":{"open":false,"host":false,"port":4321,"streaming":true,"allowedHosts":[]},"redirects":{},"prefetch":{"prefetchAll":true,"defaultStrategy":"viewport"},"image":{"endpoint":{"route":"/_image/"},"service":{"entrypoint":"astro/assets/services/sharp","config":{}},"domains":[],"remotePatterns":[]},"devToolbar":{"enabled":false},"markdown":{"syntaxHighlight":{"type":"shiki","excludeLangs":["math"]},"shikiConfig":{"langs":[],"langAlias":{},"theme":"github-dark","themes":{"light":"github-light","dark":"github-dark"},"wrap":false,"transformers":[]},"remarkPlugins":[null,null],"rehypePlugins":[null,null,[null,{"target":"_blank","rel":["nofollow","noopener","noreferrer","external"],"protocols":["http","https","mailto"]}]],"remarkRehype":{},"gfm":true,"smartypants":true},"i18n":{"defaultLocale":"zh","locales":[{"path":"zh","codes":["zh-CN"]},{"path":"zh-tw","codes":["zh-TW"]},{"path":"ja","codes":["ja-JP"]},{"path":"en","codes":["en-US"]},{"path":"es","codes":["es-ES"]},{"path":"ru","codes":["ru-RU"]}],"routing":{"prefixDefaultLocale":false,"redirectToDefaultLocale":true,"fallbackType":"redirect"}},"security":{"checkOrigin":true},"env":{"schema":{},"validateSecrets":false},"experimental":{"clientPrerender":false,"contentIntellisense":false,"responsiveImages":false,"svg":false,"serializeConfig":false,"headingIdCompat":false,"preserveScriptOrder":false},"legacy":{"collections":false}}',"about",["Map",11,12],"about-zh",{id:11,data:13,body:15,filePath:16,digest:17,rendered:18},{lang:14},"zh","Retypeset 是一款基于 [Astro](https://astro.build/) 框架的静态博客主题，中文名为重新编排。本主题以 [活版印字](https://astro-theme-typography.vercel.app/) 为设计灵感，通过建立全新的视觉规范，对所有页面进行重新编排，打造纸质书页般的阅读体验，再现版式之美。所见皆为细节，方寸尽显优雅。","src/content/about/about-zh.md","68aea3147822fee0",{html:19,metadata:20},'<p>Retypeset 是一款基于 <a href="https://astro.build/" rel="nofollow noopener noreferrer external" target="_blank">Astro</a> 框架的静态博客主题，中文名为重新编排。本主题以 <a href="https://astro-theme-typography.vercel.app/" rel="nofollow noopener noreferrer external" target="_blank">活版印字</a> 为设计灵感，通过建立全新的视觉规范，对所有页面进行重新编排，打造纸质书页般的阅读体验，再现版式之美。所见皆为细节，方寸尽显优雅。</p>',{headings:21,localImagePaths:22,remoteImagePaths:23,frontmatter:24,imagePaths:26},[],[],[],{lang:14,minutes:25},1,[],"posts",["Map",29,30,68,69,126,127,160,161,195,196,226,227,276,277,318,319,349,350,390,391,421,422,441,442,462,463,488,489,521,522,581,582,609,610,632,633,660,661,681,682,708,709,733,734,763,764,870,871,895,896,931,932,953,954,994,995,1019,1020,1044,1045,1069,1070,1094,1095,1117,1118,1159,1160,1184,1185,1213,1214,1260,1261,1296,1297,1335,1336,1363,1364,1389,1390,1423,1424,1453,1454,1475,1476,1504,1505,1549,1550,1580,1581,1610,1611,1645,1646,1680,1681,1712,1713,1746,1747],"book/编程书籍推荐",{id:29,data:31,body:41,filePath:42,digest:43,rendered:44},{title:32,published:33,description:34,tags:35,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"编程书籍推荐",["Date","2016-01-07T13:41:08.000Z"],"",[36,37],"编程基础","书籍",!1,0,!0,"## 《编码：隐匿在计算机软硬件背后的语言》\r\n\r\n书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。\r\n\r\n## 《鸟哥的 linux 私房菜：基础学习篇》\r\n\r\n\r\n《鸟哥的 Linux 私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习 Linux 不可多得的一本入门好书。\r\n\r\n也可通过本书作者的官方网站阅读书籍的电子版。[电子版](http://cn.linux.vbird.org/linux_basic/linux_basic.php)\r\n\r\n[豆瓣链接](https://book.douban.com/subject/4889838/)\r\n\r\n## 《深入理解计算机系统（原书第 3 版）》\r\n\r\n\r\n《深入理解计算机系统（原书第 3 版）》这是一本非常出名的书，是理解计算机系统首选书目，是 10 余万程序员的共同选择。卡内基 - 梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。\r\n\r\n[豆瓣链接](https://book.douban.com/subject/26912767/)\r\n\r\n## 《TCP/IP 详解 卷 1：协议》\r\n\r\n\r\n很经典的一本书籍，对 TCP/IP 四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。","src/content/posts/book/编程书籍推荐.md","4130b6066ef31d8a",{html:45,metadata:46},'<h2 id="编码隐匿在计算机软硬件背后的语言">《编码：隐匿在计算机软硬件背后的语言》</h2>\n<p>书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。</p>\n<h2 id="鸟哥的-linux-私房菜基础学习篇">《鸟哥的 linux 私房菜：基础学习篇》</h2>\n<p>《鸟哥的 Linux 私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习 Linux 不可多得的一本入门好书。</p>\n<p>也可通过本书作者的官方网站阅读书籍的电子版。<a href="http://cn.linux.vbird.org/linux_basic/linux_basic.php" rel="nofollow noopener noreferrer external" target="_blank">电子版</a></p>\n<p><a href="https://book.douban.com/subject/4889838/" rel="nofollow noopener noreferrer external" target="_blank">豆瓣链接</a></p>\n<h2 id="深入理解计算机系统原书第-3-版">《深入理解计算机系统（原书第 3 版）》</h2>\n<p>《深入理解计算机系统（原书第 3 版）》这是一本非常出名的书，是理解计算机系统首选书目，是 10 余万程序员的共同选择。卡内基 - 梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。</p>\n<p><a href="https://book.douban.com/subject/26912767/" rel="nofollow noopener noreferrer external" target="_blank">豆瓣链接</a></p>\n<h2 id="tcpip-详解-卷-1协议">《TCP/IP 详解 卷 1：协议》</h2>\n<p>很经典的一本书籍，对 TCP/IP 四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。</p>',{headings:47,localImagePaths:61,remoteImagePaths:62,frontmatter:63,imagePaths:67},[48,52,55,58],{depth:49,slug:50,text:51},2,"编码隐匿在计算机软硬件背后的语言","《编码：隐匿在计算机软硬件背后的语言》",{depth:49,slug:53,text:54},"鸟哥的-linux-私房菜基础学习篇","《鸟哥的 linux 私房菜：基础学习篇》",{depth:49,slug:56,text:57},"深入理解计算机系统原书第-3-版","《深入理解计算机系统（原书第 3 版）》",{depth:49,slug:59,text:60},"tcpip-详解-卷-1协议","《TCP/IP 详解 卷 1：协议》",[],[],{title:32,published:64,tags:65,categories:66,minutes:49},["Date","2016-01-07T13:41:08.000Z"],[36,37],[37],[],"c/重学-c-语言",{id:68,data:70,body:75,filePath:76,digest:77,rendered:78},{title:71,published:72,description:34,tags:73,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"重学 C 语言",["Date","2021-02-03T13:59:58.000Z"],[74],"C",'## 前言\n\n近几年一直在做 Web 开发，从`PHP`到`Go`，从数据库到缓存。随着技术的深入，越发感到非科班转行写代码的我在理解源码和技术细节的力不从心。万丈高楼平地起，基础知识不牢固很难继续提升。我计划近期重学 `C` 语言，夯实基础知识。\n\n## 步骤\n\n我不是为了应付学校考试，不会花太多时间在记忆语法上。过一遍语法后开始动手写代码，遇到问题后再去查资料解决。有其他语言语法基础不用在语法上过多纠结，专注于 `C` 语言和其他语言相比的不同特性上。\n\n1. 视频教程\n可能有人觉得看视频比看书花时间更多，而我个人更喜欢看视频教程。\n\n一方面是因为看视频能产生具体形象，加深记忆。另一方面每天通勤时间很长，在地铁上近 50 分钟，这段时间不能浪费，我随身携带 `Kindle` 看电子书，但是嘈杂喧闹的地铁上无法集中注意力，尤其看比较枯燥的技术类书籍。当然并不只是看了视频就会了，书籍是后续补充。\n\nB 站各类自学视频资源非常多，可以充分利用起来。\n\n2. 代码实战\n"光说不念假把式"。编程是一门偏实践的学科，只有在不断实践的过程中才能真正烂熟于心，不断挖坑踩坑填坑中成长。用 `C` 语言写个简单的 `web` 服务器，支持`HTTP`和`Tcp`协议。后续阅读开源项目比如`Redis`的源代码，加深理解。\n\n3. 记录心得体会\n在实践和学习过程中，以文章的形式持续输出。把C语言的特点和高级语言做对比，也会推荐比价好的教程。\n\n## 重点目标\n\n### 第一阶段：内存分区、函数调用模型\n\n- 数据类型、变量的含义\n- 内存四区特点\n- 函数调用模型\n- 内存操作函数\n- 宏定义与预处理\n\n### 第二阶段：指针高级\n\n- 指针基本使用\n- 指针的步长的概念\n- 指针简介赋值\n- 指针以及多级指针做函数参数的特性与使用\n- 通过指针操作字符串\n- const 类型修饰符\n- 位的逻辑运算符 \n- 移位运算符\n- 数组指针与指针数组\n- 多维数组做函数参数\n- 结构体嵌套一级指针\n- 结构体嵌套二级指针浅\n- 拷贝深拷贝\n\n### 第三阶段：函数指针与回调函数\n\n- 封装和设计思想\n- 函数指针定义的三种方式\n- 回调函数\n\n### 第四阶段：数据结构与链表\n\n- 链表的基本概念\n- 单链表的相关操作\n\n### 第五阶段：递归函数\n\n- 递归函数的概念\n- 递归的使用\n\n### 第六阶段：数据结构与算法\n\n- 大 O 表示法基本概念\n- 线性表顺序存储和链式存储概念\n- 线性表的顺序存储（数组）\n- 线性表的链式存储（链表）\n- 队列的顺序与链式存储\n- 栈的顺序与链式存储\n- 二叉树基本操作\n- 常用排序算法\n\n### 第七阶段：接口的封装和设计\n\n- 函数的封装设计\n- 解耦合的设计理念\n- 模块实现与业务分离的思想\n\n### 本阶段可以掌握的核心能力：\n\n1. 掌握 C 语言当中的字符串、一堆数组、二维数组的用法；\n2. 掌握一级指针，二级指针，三级指针的高级用法，理解 N 级指针概念，指针数组和数组指针；\n3. 学会结构体、文件的使用 C 语言接口封装设计\n\n### 可解决的显示问题：\n\n1. 可以实现自己开发小程序，例如贪吃蛇一类的用 C 语言写的程序；\n2. 应用 C 语言接口封装设计的方法，进行企业项目开发\n\n## 总结\n我学 C 语言的目的不是要在工作中用它开发web应用，而是要帮助我更加深刻理解计算机工作原理。以前的技术老大说过一句话，“C语言开发者看其他语言都是语法糖”。\n\n与君共勉。',"src/content/posts/c/重学 C 语言.md","61e86d80c3e83a4d",{html:79,metadata:80},'<h2 id="前言">前言</h2>\n<p>近几年一直在做 Web 开发，从<code>PHP</code>到<code>Go</code>，从数据库到缓存。随着技术的深入，越发感到非科班转行写代码的我在理解源码和技术细节的力不从心。万丈高楼平地起，基础知识不牢固很难继续提升。我计划近期重学 <code>C</code> 语言，夯实基础知识。</p>\n<h2 id="步骤">步骤</h2>\n<p>我不是为了应付学校考试，不会花太多时间在记忆语法上。过一遍语法后开始动手写代码，遇到问题后再去查资料解决。有其他语言语法基础不用在语法上过多纠结，专注于 <code>C</code> 语言和其他语言相比的不同特性上。</p>\n<ol>\n<li>视频教程\n可能有人觉得看视频比看书花时间更多，而我个人更喜欢看视频教程。</li>\n</ol>\n<p>一方面是因为看视频能产生具体形象，加深记忆。另一方面每天通勤时间很长，在地铁上近 50 分钟，这段时间不能浪费，我随身携带 <code>Kindle</code> 看电子书，但是嘈杂喧闹的地铁上无法集中注意力，尤其看比较枯燥的技术类书籍。当然并不只是看了视频就会了，书籍是后续补充。</p>\n<p>B 站各类自学视频资源非常多，可以充分利用起来。</p>\n<ol start="2">\n<li>\n<p>代码实战\n“光说不念假把式”。编程是一门偏实践的学科，只有在不断实践的过程中才能真正烂熟于心，不断挖坑踩坑填坑中成长。用 <code>C</code> 语言写个简单的 <code>web</code> 服务器，支持<code>HTTP</code>和<code>Tcp</code>协议。后续阅读开源项目比如<code>Redis</code>的源代码，加深理解。</p>\n</li>\n<li>\n<p>记录心得体会\n在实践和学习过程中，以文章的形式持续输出。把C语言的特点和高级语言做对比，也会推荐比价好的教程。</p>\n</li>\n</ol>\n<h2 id="重点目标">重点目标</h2>\n<h3 id="第一阶段内存分区函数调用模型">第一阶段：内存分区、函数调用模型</h3>\n<ul>\n<li>数据类型、变量的含义</li>\n<li>内存四区特点</li>\n<li>函数调用模型</li>\n<li>内存操作函数</li>\n<li>宏定义与预处理</li>\n</ul>\n<h3 id="第二阶段指针高级">第二阶段：指针高级</h3>\n<ul>\n<li>指针基本使用</li>\n<li>指针的步长的概念</li>\n<li>指针简介赋值</li>\n<li>指针以及多级指针做函数参数的特性与使用</li>\n<li>通过指针操作字符串</li>\n<li>const 类型修饰符</li>\n<li>位的逻辑运算符</li>\n<li>移位运算符</li>\n<li>数组指针与指针数组</li>\n<li>多维数组做函数参数</li>\n<li>结构体嵌套一级指针</li>\n<li>结构体嵌套二级指针浅</li>\n<li>拷贝深拷贝</li>\n</ul>\n<h3 id="第三阶段函数指针与回调函数">第三阶段：函数指针与回调函数</h3>\n<ul>\n<li>封装和设计思想</li>\n<li>函数指针定义的三种方式</li>\n<li>回调函数</li>\n</ul>\n<h3 id="第四阶段数据结构与链表">第四阶段：数据结构与链表</h3>\n<ul>\n<li>链表的基本概念</li>\n<li>单链表的相关操作</li>\n</ul>\n<h3 id="第五阶段递归函数">第五阶段：递归函数</h3>\n<ul>\n<li>递归函数的概念</li>\n<li>递归的使用</li>\n</ul>\n<h3 id="第六阶段数据结构与算法">第六阶段：数据结构与算法</h3>\n<ul>\n<li>大 O 表示法基本概念</li>\n<li>线性表顺序存储和链式存储概念</li>\n<li>线性表的顺序存储（数组）</li>\n<li>线性表的链式存储（链表）</li>\n<li>队列的顺序与链式存储</li>\n<li>栈的顺序与链式存储</li>\n<li>二叉树基本操作</li>\n<li>常用排序算法</li>\n</ul>\n<h3 id="第七阶段接口的封装和设计">第七阶段：接口的封装和设计</h3>\n<ul>\n<li>函数的封装设计</li>\n<li>解耦合的设计理念</li>\n<li>模块实现与业务分离的思想</li>\n</ul>\n<h3 id="本阶段可以掌握的核心能力">本阶段可以掌握的核心能力：</h3>\n<ol>\n<li>掌握 C 语言当中的字符串、一堆数组、二维数组的用法；</li>\n<li>掌握一级指针，二级指针，三级指针的高级用法，理解 N 级指针概念，指针数组和数组指针；</li>\n<li>学会结构体、文件的使用 C 语言接口封装设计</li>\n</ol>\n<h3 id="可解决的显示问题">可解决的显示问题：</h3>\n<ol>\n<li>可以实现自己开发小程序，例如贪吃蛇一类的用 C 语言写的程序；</li>\n<li>应用 C 语言接口封装设计的方法，进行企业项目开发</li>\n</ol>\n<h2 id="总结">总结</h2>\n<p>我学 C 语言的目的不是要在工作中用它开发web应用，而是要帮助我更加深刻理解计算机工作原理。以前的技术老大说过一句话，“C语言开发者看其他语言都是语法糖”。</p>\n<p>与君共勉。</p>',{headings:81,localImagePaths:118,remoteImagePaths:119,frontmatter:120,imagePaths:125},[82,84,86,88,92,95,98,101,104,107,110,113,116],{depth:49,slug:83,text:83},"前言",{depth:49,slug:85,text:85},"步骤",{depth:49,slug:87,text:87},"重点目标",{depth:89,slug:90,text:91},3,"第一阶段内存分区函数调用模型","第一阶段：内存分区、函数调用模型",{depth:89,slug:93,text:94},"第二阶段指针高级","第二阶段：指针高级",{depth:89,slug:96,text:97},"第三阶段函数指针与回调函数","第三阶段：函数指针与回调函数",{depth:89,slug:99,text:100},"第四阶段数据结构与链表","第四阶段：数据结构与链表",{depth:89,slug:102,text:103},"第五阶段递归函数","第五阶段：递归函数",{depth:89,slug:105,text:106},"第六阶段数据结构与算法","第六阶段：数据结构与算法",{depth:89,slug:108,text:109},"第七阶段接口的封装和设计","第七阶段：接口的封装和设计",{depth:89,slug:111,text:112},"本阶段可以掌握的核心能力","本阶段可以掌握的核心能力：",{depth:89,slug:114,text:115},"可解决的显示问题","可解决的显示问题：",{depth:49,slug:117,text:117},"总结",[],[],{title:71,published:121,tags:122,categories:123,minutes:124},["Date","2021-02-03T13:59:58.000Z"],[74],[74],5,[],"go/go并发编程",{id:126,data:128,body:133,filePath:134,digest:135,rendered:136},{title:129,published:130,description:34,tags:131,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Go并发编程",["Date","2022-01-03T13:59:58.000Z"],[132],"Go","## Mutex\r\n### Mutex几种状态\r\n- mutexLocked \r\n互斥锁的锁定状态\r\n- mutexWoken\r\n从正常模式被唤醒\r\n- mutexStarving\r\n当前的互斥锁进入饥饿状态\r\n- waitersCount\r\n当前互斥锁上等待的Goroutine个数\r\n\r\n### Mutex正常模式和饥饿模式\r\n#### 正常模式（非公平锁）\r\n正常模式下，使用等待锁的goroutine按照先进先出的顺序等待。唤醒的Gorotine不会直接拥有锁，而是会和新请求goroutine竞争锁。新请求的goroutine更容易抢占，因为它正在CPU上执行，所以刚刚唤醒的goroutine有很大可能在锁竞争中失败，在这种情况下，这个被唤醒的goroutine会加入到等待队列的前面","src/content/posts/go/Go并发编程.md","cbfb0c79023733c8",{html:137,metadata:138},'<h2 id="mutex">Mutex</h2>\n<h3 id="mutex几种状态">Mutex几种状态</h3>\n<ul>\n<li>mutexLocked\r\n互斥锁的锁定状态</li>\n<li>mutexWoken\r\n从正常模式被唤醒</li>\n<li>mutexStarving\r\n当前的互斥锁进入饥饿状态</li>\n<li>waitersCount\r\n当前互斥锁上等待的Goroutine个数</li>\n</ul>\n<h3 id="mutex正常模式和饥饿模式">Mutex正常模式和饥饿模式</h3>\n<h4 id="正常模式非公平锁">正常模式（非公平锁）</h4>\n<p>正常模式下，使用等待锁的goroutine按照先进先出的顺序等待。唤醒的Gorotine不会直接拥有锁，而是会和新请求goroutine竞争锁。新请求的goroutine更容易抢占，因为它正在CPU上执行，所以刚刚唤醒的goroutine有很大可能在锁竞争中失败，在这种情况下，这个被唤醒的goroutine会加入到等待队列的前面</p>',{headings:139,localImagePaths:153,remoteImagePaths:154,frontmatter:155,imagePaths:159},[140,143,146,149],{depth:49,slug:141,text:142},"mutex","Mutex",{depth:89,slug:144,text:145},"mutex几种状态","Mutex几种状态",{depth:89,slug:147,text:148},"mutex正常模式和饥饿模式","Mutex正常模式和饥饿模式",{depth:150,slug:151,text:152},4,"正常模式非公平锁","正常模式（非公平锁）",[],[],{title:129,published:156,tags:157,categories:158,minutes:25},["Date","2022-01-03T13:59:58.000Z"],[132],[132],[],"elasticsearch/极限网关初探2配置",{id:160,data:162,body:167,filePath:168,digest:169,rendered:170},{title:163,published:164,description:34,tags:165,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"极限网关初探（2）配置",["Date","2022-05-07T07:50:34.000Z"],[166],"Elasticsearch",'## 配置\n上一篇我们先学习了极限网关的安装和启动，今天学习配置。\n### 读写分离\n[配置文档](https://xn--d6q905cs0q16u.com/zh/docs/overview/)\n现在我们遇到读写分离的需求，用网关该怎么做呢？\n假设服务端现在从 http://127.0.0.1:8000 写入数据，从 http://127.0.0.1:9000 读取数据，怎么设计呢？\n\n我们在 gateway.yml 中定义两个 entry，分别绑定不同的端口，配置不同的 router\n```yaml\nentry:\n  - name: write_es\n    enabled: true\n    router: write_router\n    network:\n      binding: 0.0.0.0:8000\n  - name: read_es\n    enabled: true\n    router: read_router\n    network:\n      binding: 0.0.0.0:9000\n\nrouter:\n  - name: write_router\n    default_flow: default_flow\n    tracing_flow: logging\n  - name: read_router\n    default_flow: default_flow\n    tracing_flow: logging\n```\n为了演示效果，只配置一个 Elasticsearch\n```yaml\nelasticsearch:\n- name: dev\n  enabled: true\n  schema: http\n  hosts:\n    - 192.168.3.188:9206\n```\n启动项目\n\n我们从 http://127.0.0.1:8000 写入一条数据，再从 http://127.0.0.1:9000 读取该条数据\n\n\n### 添加接口\n#### 返回字符串\n我们想自定义添加一个接口，怎么在不写代码的情况下通过配置实现返回字符串\n```yaml\nflow:\n  - name: hello_flow\n    filter:\n      - echo:\n          message: "hello flow"\n\nrouter:\n  - name: read_router\n    default_flow: hello_flow\n```\n修改配置后启动\n#### 返回 json 数据\n返回字符串不符合标准的 restful 接口规范，怎么返回给调用方标准 json 数据？\n```yaml\nfilter:\n  - set_response:\n      content_type: application/json\n      body: \'{"message":"hello world"}\'\n```\n修改配置后启动\n\n### 修改路由\n我们已经新加了接口，返回 json 数据，但是接口是直接定义在 http://127.0.0.1:9000 中，之前网关的接口就无法使用，所以我们需要单独为自定义的接口指定单独的路由\n```yaml\nrouter:\n  - name: read_router\n    default_flow: default_flow\n    tracing_flow: logging\n    rules:\n      - method:\n          - GET\n        pattern:\n          - "/hello"\n        flow:\n          - hello_flow\n```\ndefault_flow: 默认的处理流，也就是业务处理的主流程，请求转发、过滤、缓存等操作都在这里面进行\n\ntracing_flow：用于追踪请求状态的流，用于记录请求日志、统计等\n\n如果我们有过开发经验，了解 MVC 模式，flow 就类似 MVC 中的 Controller，rules 中类似路由规则，当请求匹配到配置中的路由规则时，由配置的 flow 处理业务逻辑。\n\n数据整体流向，从服务端发到网关，网关为每个 Elasticsearch 绑定不同的 IP 地址，每个 Elasticsearch 都有唯一一个 router 和它对应，根据请求的 method 和 path 匹配到 router 中的一个 flow，flow 中包含多个 filter 处理对数据进行**流式处理**。\n\n如下图所示\n\n流式处理是什么，假设水从一个管子里面流出来，管子旁边每一段依次站了几个人，第一个人往水里放点鱼，鱼和水到了第二个人，第二个人往水里放点草，鱼、水和草到了第三人等等，每个人对水做一定的操作，水经过这些操作后最后到达水池里。\n\n我们可以把数据当成水，filter 是管子旁边的人，水池就是 Elasticsearch\n## 总结\n在学习了router/flow/filter后，我们已经对极限网关的配置有了初步的了解，后续开发的时候直接查阅文档就行了',"src/content/posts/elasticsearch/极限网关初探（2）配置.md","251fc1ad1b551a16",{html:171,metadata:172},'<h2 id="配置">配置</h2>\n<p>上一篇我们先学习了极限网关的安装和启动，今天学习配置。</p>\n<h3 id="读写分离">读写分离</h3>\n<p><a href="https://xn--d6q905cs0q16u.com/zh/docs/overview/" rel="nofollow noopener noreferrer external" target="_blank">配置文档</a>\n现在我们遇到读写分离的需求，用网关该怎么做呢？\n假设服务端现在从 <a href="http://127.0.0.1:8000" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:8000</a> 写入数据，从 <a href="http://127.0.0.1:9000" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:9000</a> 读取数据，怎么设计呢？</p>\n<p>我们在 gateway.yml 中定义两个 entry，分别绑定不同的端口，配置不同的 router</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">entry</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">write_es</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">write_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    network</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      binding</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">0.0.0.0:8000</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">read_es</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">read_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    network</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      binding</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">0.0.0.0:9000</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">write_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    default_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">default_flow</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    tracing_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">logging</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">read_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    default_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">default_flow</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    tracing_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">logging</span></span></code></pre>\n<p>为了演示效果，只配置一个 Elasticsearch</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">elasticsearch</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">- </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">dev</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  schema</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">http</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  hosts</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    - </span><span style="color:#032F62;--shiki-dark:#9ECBFF">192.168.3.188:9206</span></span></code></pre>\n<p>启动项目</p>\n<p>我们从 <a href="http://127.0.0.1:8000" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:8000</a> 写入一条数据，再从 <a href="http://127.0.0.1:9000" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:9000</a> 读取该条数据</p>\n<h3 id="添加接口">添加接口</h3>\n<h4 id="返回字符串">返回字符串</h4>\n<p>我们想自定义添加一个接口，怎么在不写代码的情况下通过配置实现返回字符串</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">hello_flow</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    filter</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="color:#22863A;--shiki-dark:#85E89D">echo</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">          message</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"hello flow"</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">read_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    default_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">hello_flow</span></span></code></pre>\n<p>修改配置后启动</p>\n<h4 id="返回-json-数据">返回 json 数据</h4>\n<p>返回字符串不符合标准的 restful 接口规范，怎么返回给调用方标准 json 数据？</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">filter</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">set_response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      content_type</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">application/json</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      body</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'{"message":"hello world"}\'</span></span></code></pre>\n<p>修改配置后启动</p>\n<h3 id="修改路由">修改路由</h3>\n<p>我们已经新加了接口，返回 json 数据，但是接口是直接定义在 <a href="http://127.0.0.1:9000" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:9000</a> 中，之前网关的接口就无法使用，所以我们需要单独为自定义的接口指定单独的路由</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">read_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    default_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">default_flow</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    tracing_flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">logging</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    rules</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      - </span><span style="color:#22863A;--shiki-dark:#85E89D">method</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">          - </span><span style="color:#032F62;--shiki-dark:#9ECBFF">GET</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">        pattern</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">          - </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"/hello"</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">        flow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">          - </span><span style="color:#032F62;--shiki-dark:#9ECBFF">hello_flow</span></span></code></pre>\n<p>default_flow: 默认的处理流，也就是业务处理的主流程，请求转发、过滤、缓存等操作都在这里面进行</p>\n<p>tracing_flow：用于追踪请求状态的流，用于记录请求日志、统计等</p>\n<p>如果我们有过开发经验，了解 MVC 模式，flow 就类似 MVC 中的 Controller，rules 中类似路由规则，当请求匹配到配置中的路由规则时，由配置的 flow 处理业务逻辑。</p>\n<p>数据整体流向，从服务端发到网关，网关为每个 Elasticsearch 绑定不同的 IP 地址，每个 Elasticsearch 都有唯一一个 router 和它对应，根据请求的 method 和 path 匹配到 router 中的一个 flow，flow 中包含多个 filter 处理对数据进行<strong>流式处理</strong>。</p>\n<p>如下图所示</p>\n<p>流式处理是什么，假设水从一个管子里面流出来，管子旁边每一段依次站了几个人，第一个人往水里放点鱼，鱼和水到了第二个人，第二个人往水里放点草，鱼、水和草到了第三人等等，每个人对水做一定的操作，水经过这些操作后最后到达水池里。</p>\n<p>我们可以把数据当成水，filter 是管子旁边的人，水池就是 Elasticsearch</p>\n<h2 id="总结">总结</h2>\n<p>在学习了router/flow/filter后，我们已经对极限网关的配置有了初步的了解，后续开发的时候直接查阅文档就行了</p>',{headings:173,localImagePaths:188,remoteImagePaths:189,frontmatter:190,imagePaths:194},[174,176,178,180,182,185,187],{depth:49,slug:175,text:175},"配置",{depth:89,slug:177,text:177},"读写分离",{depth:89,slug:179,text:179},"添加接口",{depth:150,slug:181,text:181},"返回字符串",{depth:150,slug:183,text:184},"返回-json-数据","返回 json 数据",{depth:89,slug:186,text:186},"修改路由",{depth:49,slug:117,text:117},[],[],{title:163,published:191,tags:192,categories:193,minutes:150},["Date","2022-05-07T07:50:34.000Z"],[166],[166],[],"go/代码重构之图片上传",{id:195,data:197,body:201,filePath:202,digest:203,rendered:204},{title:198,published:199,description:34,tags:200,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"代码重构之图片上传",["Date","2021-06-01T13:59:58.000Z"],[132],'## 背景\n\n用户头像上传功能中，服务端上传流程如下：\n\n1.  `base64` 解码成字符串\n2.  图片写入服务器本地临时目录\n3.  上传到 ` 阿里云 OSS`/七牛云存储\n4.  图片审核\n\n代码如下\n\n```go\ntype Parms struct {\n    Head string //客户端发送 base64 字符串\n}\nfunc Upload ( p Params ) {\n    if p.Head == ""{\n        return errors.New ( "img is empty" )\n }\n    str,err := Base64Decode ( p.Head )\n    if err != nil{\n        return err\n }\n    filename := makeUniqueName ( )\n    if err := FileWrite ( filename,str ) ;err != nil{\n         return err\n }\n    err := UploadAliOss ( filename )\n    if err != nil{\n        return err\n }\n    err := VerifyImg ( filename )\n    if err != nil{\n        return err\n }\n\n}\n```\n## 问题\n\n以前多个项目通过 `jenkins` 发布不同的上线指令，每新建一个项目，运维需要单独写一套 `shell` 命令，无法复用之前的，维护成本比较高。后来我们升级部署方式，只需要修改项目部署目录配置文件，具体后续再介绍。\n\n一直以来稳定运行，周末收到反馈出现问题，用户无法上传头像。\n\n-   检查代码的 `git` 历史提交记录，近期没有修改代码，排除代码 `bug`\n-   报错提示只在调用 `FileWrite` 和 `UploadAliOss` 两个方法时出现\n-   在打包镜像的时候没有在容器中创建临时目录，所以无法写入文件，用户头像无法上传\n\n## 临时解决\n手动在容器中创建一个临时目录，保存图片文件。\n\n## 完全解决\n我认为，图片文件全部保存在第三方对象存储中，服务器保存一份是完全没必要的，只会占用磁盘空间。\n\n我们可以创建 `Reader` 对象把图片文件读取到缓冲区，再上传到第三方对象存储。\n\n代码如下\n```go\nfunc Upload ( p Params ) {\n    if p.Head == ""{\n        return errors.New ( "img is empty" )\n }\n    str,err := Base64Decode ( p.Head )\n    if err != nil{\n        return err\n }\n    filename := makeUniqueName ( )\n    buf := bytes.NewReader ( []byte ( str ))\n    err := UploadAliOssBuff ( filename,buf )\n    if err != nil{\n        return err\n }\n    err := VerifyImg ( filename )\n    if err != nil{\n        return err\n }\n\n}\n```\n\n## 总结\n\n在接手维护老项目时候，避免不了遇到坑。除了吐槽前人写的糟糕外，我们可以尽我所能提升代码维护质量，让后来者更容易维护。\n\n一片空地，可能开始只有几片垃圾。如果一直不清理，你来丢，他也丢，很快就会变成垃圾堆。\n\n## 微信公众号',"src/content/posts/go/代码重构之图片上传.md","9cf937f3838fb691",{html:205,metadata:206},'<h2 id="背景">背景</h2>\n<p>用户头像上传功能中，服务端上传流程如下：</p>\n<ol>\n<li><code>base64</code> 解码成字符串</li>\n<li>图片写入服务器本地临时目录</li>\n<li>上传到 <code> 阿里云 OSS</code>/七牛云存储</li>\n<li>图片审核</li>\n</ol>\n<p>代码如下</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Parms</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Head </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#6A737D;--shiki-dark:#6A737D"> //客户端发送 base64 字符串</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Upload ( </span><span style="color:#E36209;--shiki-dark:#FFAB70">p</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Params</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> p.Head </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.New ( </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"img is empty"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> )</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    str,err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Base64Decode ( p.Head )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    filename </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> makeUniqueName ( )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> FileWrite ( filename,str ) ;err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">         return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> UploadAliOss ( filename )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VerifyImg ( filename )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="问题">问题</h2>\n<p>以前多个项目通过 <code>jenkins</code> 发布不同的上线指令，每新建一个项目，运维需要单独写一套 <code>shell</code> 命令，无法复用之前的，维护成本比较高。后来我们升级部署方式，只需要修改项目部署目录配置文件，具体后续再介绍。</p>\n<p>一直以来稳定运行，周末收到反馈出现问题，用户无法上传头像。</p>\n<ul>\n<li>检查代码的 <code>git</code> 历史提交记录，近期没有修改代码，排除代码 <code>bug</code></li>\n<li>报错提示只在调用 <code>FileWrite</code> 和 <code>UploadAliOss</code> 两个方法时出现</li>\n<li>在打包镜像的时候没有在容器中创建临时目录，所以无法写入文件，用户头像无法上传</li>\n</ul>\n<h2 id="临时解决">临时解决</h2>\n<p>手动在容器中创建一个临时目录，保存图片文件。</p>\n<h2 id="完全解决">完全解决</h2>\n<p>我认为，图片文件全部保存在第三方对象存储中，服务器保存一份是完全没必要的，只会占用磁盘空间。</p>\n<p>我们可以创建 <code>Reader</code> 对象把图片文件读取到缓冲区，再上传到第三方对象存储。</p>\n<p>代码如下</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Upload ( </span><span style="color:#E36209;--shiki-dark:#FFAB70">p</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Params</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> p.Head </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.New ( </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"img is empty"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> )</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    str,err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Base64Decode ( p.Head )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    filename </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> makeUniqueName ( )</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    buf </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> bytes.NewReader ( []</span><span style="color:#D73A49;--shiki-dark:#F97583">byte</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ( str ))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> UploadAliOssBuff ( filename,buf )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> VerifyImg ( filename )</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>在接手维护老项目时候，避免不了遇到坑。除了吐槽前人写的糟糕外，我们可以尽我所能提升代码维护质量，让后来者更容易维护。</p>\n<p>一片空地，可能开始只有几片垃圾。如果一直不清理，你来丢，他也丢，很快就会变成垃圾堆。</p>\n<h2 id="微信公众号">微信公众号</h2>',{headings:207,localImagePaths:219,remoteImagePaths:220,frontmatter:221,imagePaths:225},[208,210,212,214,216,217],{depth:49,slug:209,text:209},"背景",{depth:49,slug:211,text:211},"问题",{depth:49,slug:213,text:213},"临时解决",{depth:49,slug:215,text:215},"完全解决",{depth:49,slug:117,text:117},{depth:49,slug:218,text:218},"微信公众号",[],[],{title:198,published:222,tags:223,categories:224,minutes:89},["Date","2021-06-01T13:59:58.000Z"],[132],[132],[],"go/错误处理",{id:226,data:228,body:232,filePath:233,digest:234,rendered:235},{title:229,published:230,description:34,tags:231,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"错误处理",["Date","2022-01-01T13:59:58.000Z"],[132],'## Sentinel Error\r\n\r\n预定义的特定错误，我们叫为 *sentinel error*，这个名字来源于计算机编程中使用一个特定值来表示不可能进行进一步处理的做法。所以对于 Go，我们使用特定的值来表示错误。\r\n\r\n `if err == ErrSomething{ … }`\r\n\r\n类似的 *io.EOF*，更底层的 *syscall.ENOENT*。\r\n\r\n*使用 sentinel 值是最不灵活的错误处理策略，因为调用方必须使用 == 将结果与预先声明的值进行比较。当您想要提供更多的上下文时，这就出现了一个问题，因为返回一个不同的错误将破坏相等性检查。*\r\n*甚至是一些有意义的 fmt. Errorf 携带一些上下文，也会破坏调用者的 ==，调用者将被迫查看 error. Error() 方法的输出，以查看它是否与特定的字符串匹配。*\r\n\r\n不依赖检查 *error.Error* 的输出。\r\n\r\n*不应该依赖检测 error. Error 的输出，Error 方法存在于 error 接口主要用于方便程序员使用，但不是程序编写测试可能会依赖这个返回。这个输出的字符串用于记录日志、输出到 stdout 等。*\r\n\r\n### Sentinel errors 成为你 API 公共部分。\r\n\r\n如果您的公共函数或方法返回一个特定值的错误，那么该值必须是公共的，当然要有文档记录，这会增加 API 的表面积。\r\n如果 API 定义了一个返回特定错误的 interface，则该接口的所有实现都将被限制为仅返回该错误，即使它们可以提供更具描述性的错误。\r\n比如 io. Reader。像 io. Copy 这类函数需要 reader 的实现者比如返回 io. EOF 来告诉调用者没有更多数据了，但这又不是错误。\r\n\r\n### Sentinel errors 在两个包之间创建了依赖。\r\n\r\nsentinel errors 最糟糕的问题是它们在两个包之间创建了源代码依赖关系。例如，检查错误是否等于 io. EOF，您的代码必须导入 io 包。这个特定的例子听起来并不那么糟糕，因为它非常常见，但是想象一下，当项目中的许多包导出错误值时，存在耦合，项目中的其他包必须导入这些错误值才能检查特定的错误条件。\r\n\r\n### 结论：尽可能避免 sentinel errors。\r\n\r\n我的建议是避免在编写的代码中使用 sentinel errors。在标准库中有一些使用它们的情况，但这不是一个您应该模仿的模式。\r\n\r\n## Error Type\r\n\r\nError type 是实现了 error 接口的自定义类型。例如 MyError 类型记录了文件和行号以展示发生了什么。\r\n\r\n## Error\r\n\r\nGo error  就是普通的一个接口，普通的值。\r\n[http://golang.org/pkg/builtin/#error](http://golang.org/pkg/builtin/#error)\r\n\r\n```go\r\ntype error interface {\r\n    Error() string\r\n}\r\n```\r\n\r\n我们经常使用 errors.New() 来返回一个 error 对象。\r\n[https://golang.org/src/errors/errors.go](https://golang.org/src/errors/errors.go)\r\n\r\n```go\r\ntype errorString struct {\r\n\ts string\r\n}\r\n\r\nfunc (e *errorString) Error() string {\r\n\treturn e.s\r\n}\r\n```\r\n\r\n基础库中大量自定义的 error。\r\n[https://golang.org/src/bufio/bufio.go](https://golang.org/src/bufio/bufio.go)\r\n\r\n```go\r\nvar (\r\n\tErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte")\r\n\tErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune")\r\n\tErrBufferFull        = errors.New("bufio: buffer full")\r\n\tErrNegativeCount     = errors.New("bufio: negative count")\r\n)\r\n```\r\n\r\nerrors.New() 返回的是 内部 errorString 对象的指针。\r\n\r\n```go\r\nfunc New(text string) error {\r\n\treturn &errorString{text}\r\n}\r\n```\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n)\r\n\r\ntype errorString string\r\n\r\nfunc (e errorString) Error() string {\r\n\treturn string(e)\r\n}\r\n\r\nfunc New(text string) error {\r\n\treturn errorString(text)\r\n}\r\n\r\nvar ErrNamedType = New("EOF")\r\nvar ErrStructType = errors.New("EOF")\r\nfunc main()  {\r\n\tif ErrNamedType == New("EOF"){\r\n\t\tfmt.Println("Named Type Error")\r\n\t}\r\n\tif ErrStructType == errors.New("EOF"){\r\n\t\tfmt.Println("Struct Type Error")\r\n\t}\r\n}\r\n\r\n```\r\n\r\n## Error vs Exception\r\n\r\n各个语言的演进历史：\r\n\r\n### C\r\n\r\n- 单返回值，一般通过传递指针作为入参，返回值为 int 表示成功还是失败。\r\n\r\n```\r\n    ngx_int_t ngx_create_path(ngx_file_t *file, ngx_path_t *path);\r\n\r\n```\r\n\r\n### C++\r\n\r\n- 引入了 exception，但是无法知道被调用方会抛出什么异常。\r\n\r\n### Java\r\n\r\n- 引入了 checked exception，方法的所有者必须申明，调用者必须处理。在启动时抛出大量的异常是司空见惯的事情，并在它们的调用堆栈中尽职地记录下来。Java 异常不再是异常，而是变得司空见惯了。它们从良性到灾难性都有使用，异常的严重性由函数的调用者来区分。\r\n\r\nGo 的处理异常逻辑是不引入 exception，支持多参数返回，所以你很容易的在函数签名中带上实现了 error interface 的对象，交由调用者来判定。\r\n\r\n**如果一个函数返回了 value, error，你不能对这个 value 做任何假设，必须先判定 error。唯一可以忽略 error 的是，如果你连 value 也不关心。**\r\nGo 中有 panic 的机制，如果你认为和其他语言的 exception 一样，那你就错了。当我们抛出异常的时候，相当于你把 exception 扔给了调用者来处理。\r\n**比如，你在 C++ 中，把 string 转为 int，如果转换失败，会抛出异常。或者在 java 中转换 string 为 date 失败时，会抛出异常。**\r\n\r\n```\r\nthrow new exception();\r\n```\r\n\r\nGo panic 意味着 fatal error（就是挂了）。不能假设调用者来解决 panic，意味着代码不能继续运行。\r\n\r\n使用多个返回值和一个简单的约定，Go 解决了让程序员知道什么时候出了问题，并为真正的异常情况保留了 panic。\r\n\r\n```\r\npanic("this is a error")\r\n```\r\n\r\n对于真正意外的情况，那些表示不可恢复的程序错误，例如索引越界、不可恢复的环境问题、栈溢出，我们才使用 panic。对于其他的错误情况，我们应该是期望使用 error 来进行判定。\r\n\r\n- 简单。\r\n- 考虑失败，而不是成功 (Plan for failure, not success)。\r\n- 没有隐藏的控制流。\r\n- 完全交给你来控制 error。\r\n- Error are values。',"src/content/posts/go/错误处理.md","996dea5f8a557179",{html:236,metadata:237},'<h2 id="sentinel-error">Sentinel Error</h2>\n<p>预定义的特定错误，我们叫为 <em>sentinel error</em>，这个名字来源于计算机编程中使用一个特定值来表示不可能进行进一步处理的做法。所以对于 Go，我们使用特定的值来表示错误。</p>\n<p><code>if err == ErrSomething{ … }</code></p>\n<p>类似的 <em>io.EOF</em>，更底层的 <em>syscall.ENOENT</em>。</p>\n<p><em>使用 sentinel 值是最不灵活的错误处理策略，因为调用方必须使用 == 将结果与预先声明的值进行比较。当您想要提供更多的上下文时，这就出现了一个问题，因为返回一个不同的错误将破坏相等性检查。</em>\r\n<em>甚至是一些有意义的 fmt. Errorf 携带一些上下文，也会破坏调用者的 ==，调用者将被迫查看 error. Error() 方法的输出，以查看它是否与特定的字符串匹配。</em></p>\n<p>不依赖检查 <em>error.Error</em> 的输出。</p>\n<p><em>不应该依赖检测 error. Error 的输出，Error 方法存在于 error 接口主要用于方便程序员使用，但不是程序编写测试可能会依赖这个返回。这个输出的字符串用于记录日志、输出到 stdout 等。</em></p>\n<h3 id="sentinel-errors-成为你-api-公共部分">Sentinel errors 成为你 API 公共部分。</h3>\n<p>如果您的公共函数或方法返回一个特定值的错误，那么该值必须是公共的，当然要有文档记录，这会增加 API 的表面积。\r\n如果 API 定义了一个返回特定错误的 interface，则该接口的所有实现都将被限制为仅返回该错误，即使它们可以提供更具描述性的错误。\r\n比如 io. Reader。像 io. Copy 这类函数需要 reader 的实现者比如返回 io. EOF 来告诉调用者没有更多数据了，但这又不是错误。</p>\n<h3 id="sentinel-errors-在两个包之间创建了依赖">Sentinel errors 在两个包之间创建了依赖。</h3>\n<p>sentinel errors 最糟糕的问题是它们在两个包之间创建了源代码依赖关系。例如，检查错误是否等于 io. EOF，您的代码必须导入 io 包。这个特定的例子听起来并不那么糟糕，因为它非常常见，但是想象一下，当项目中的许多包导出错误值时，存在耦合，项目中的其他包必须导入这些错误值才能检查特定的错误条件。</p>\n<h3 id="结论尽可能避免-sentinel-errors">结论：尽可能避免 sentinel errors。</h3>\n<p>我的建议是避免在编写的代码中使用 sentinel errors。在标准库中有一些使用它们的情况，但这不是一个您应该模仿的模式。</p>\n<h2 id="error-type">Error Type</h2>\n<p>Error type 是实现了 error 接口的自定义类型。例如 MyError 类型记录了文件和行号以展示发生了什么。</p>\n<h2 id="error">Error</h2>\n<p>Go error  就是普通的一个接口，普通的值。\r\n<a href="http://golang.org/pkg/builtin/#error" rel="nofollow noopener noreferrer external" target="_blank">http://golang.org/pkg/builtin/#error</a></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#D73A49;--shiki-dark:#F97583"> error</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>我们经常使用 errors.New() 来返回一个 error 对象。\r\n<a href="https://golang.org/src/errors/errors.go" rel="nofollow noopener noreferrer external" target="_blank">https://golang.org/src/errors/errors.go</a></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> errorString</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\ts </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">e </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#6F42C1;--shiki-dark:#B392F0">errorString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> e.s</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>基础库中大量自定义的 error。\r\n<a href="https://golang.org/src/bufio/bufio.go" rel="nofollow noopener noreferrer external" target="_blank">https://golang.org/src/bufio/bufio.go</a></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tErrInvalidUnreadByte </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"bufio: invalid use of UnreadByte"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tErrInvalidUnreadRune </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"bufio: invalid use of UnreadRune"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tErrBufferFull        </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"bufio: buffer full"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tErrNegativeCount     </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"bufio: negative count"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<p>errors.New() 返回的是 内部 errorString 对象的指针。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">text</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#D73A49;--shiki-dark:#F97583"> &#x26;</span><span style="color:#6F42C1;--shiki-dark:#B392F0">errorString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{text}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">package</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">errors</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fmt</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> errorString</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">e </span><span style="color:#6F42C1;--shiki-dark:#B392F0">errorString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(e)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">text</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> errorString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(text)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrNamedType </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"EOF"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrStructType </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"EOF"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()  {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrNamedType </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"EOF"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\tfmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Println</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Named Type Error"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrStructType </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"EOF"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\tfmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Println</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Struct Type Error"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h2 id="error-vs-exception">Error vs Exception</h2>\n<p>各个语言的演进历史：</p>\n<h3 id="c">C</h3>\n<ul>\n<li>单返回值，一般通过传递指针作为入参，返回值为 int 表示成功还是失败。</li>\n</ul>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>    ngx_int_t ngx_create_path(ngx_file_t *file, ngx_path_t *path);</span></span>\n<span class="line"><span></span></span></code></pre>\n<h3 id="c-1">C++</h3>\n<ul>\n<li>引入了 exception，但是无法知道被调用方会抛出什么异常。</li>\n</ul>\n<h3 id="java">Java</h3>\n<ul>\n<li>引入了 checked exception，方法的所有者必须申明，调用者必须处理。在启动时抛出大量的异常是司空见惯的事情，并在它们的调用堆栈中尽职地记录下来。Java 异常不再是异常，而是变得司空见惯了。它们从良性到灾难性都有使用，异常的严重性由函数的调用者来区分。</li>\n</ul>\n<p>Go 的处理异常逻辑是不引入 exception，支持多参数返回，所以你很容易的在函数签名中带上实现了 error interface 的对象，交由调用者来判定。</p>\n<p><strong>如果一个函数返回了 value, error，你不能对这个 value 做任何假设，必须先判定 error。唯一可以忽略 error 的是，如果你连 value 也不关心。</strong>\r\nGo 中有 panic 的机制，如果你认为和其他语言的 exception 一样，那你就错了。当我们抛出异常的时候，相当于你把 exception 扔给了调用者来处理。\r\n<strong>比如，你在 C++ 中，把 string 转为 int，如果转换失败，会抛出异常。或者在 java 中转换 string 为 date 失败时，会抛出异常。</strong></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>throw new exception();</span></span></code></pre>\n<p>Go panic 意味着 fatal error（就是挂了）。不能假设调用者来解决 panic，意味着代码不能继续运行。</p>\n<p>使用多个返回值和一个简单的约定，Go 解决了让程序员知道什么时候出了问题，并为真正的异常情况保留了 panic。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>panic("this is a error")</span></span></code></pre>\n<p>对于真正意外的情况，那些表示不可恢复的程序错误，例如索引越界、不可恢复的环境问题、栈溢出，我们才使用 panic。对于其他的错误情况，我们应该是期望使用 error 来进行判定。</p>\n<ul>\n<li>简单。</li>\n<li>考虑失败，而不是成功 (Plan for failure, not success)。</li>\n<li>没有隐藏的控制流。</li>\n<li>完全交给你来控制 error。</li>\n<li>Error are values。</li>\n</ul>',{headings:238,localImagePaths:268,remoteImagePaths:269,frontmatter:270,imagePaths:275},[239,242,245,248,251,254,257,260,262,265],{depth:49,slug:240,text:241},"sentinel-error","Sentinel Error",{depth:89,slug:243,text:244},"sentinel-errors-成为你-api-公共部分","Sentinel errors 成为你 API 公共部分。",{depth:89,slug:246,text:247},"sentinel-errors-在两个包之间创建了依赖","Sentinel errors 在两个包之间创建了依赖。",{depth:89,slug:249,text:250},"结论尽可能避免-sentinel-errors","结论：尽可能避免 sentinel errors。",{depth:49,slug:252,text:253},"error-type","Error Type",{depth:49,slug:255,text:256},"error","Error",{depth:49,slug:258,text:259},"error-vs-exception","Error vs Exception",{depth:89,slug:261,text:74},"c",{depth:89,slug:263,text:264},"c-1","C++",{depth:89,slug:266,text:267},"java","Java",[],[],{title:229,published:271,tags:272,categories:273,minutes:274},["Date","2022-01-01T13:59:58.000Z"],[132],[132],7,[],"go/xerrors",{id:276,data:278,body:282,filePath:283,digest:284,rendered:285},{title:279,published:280,description:34,tags:281,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Go 1.13版本 xerrors 包装错误",["Date","2021-01-03T13:59:58.000Z"],[132],'> 翻译自 https://crawshaw.io/blog/xerrors\r\n\r\n# Go 1.13: xerrors\r\n\r\nGo 2 系列语言更改的一部分是新的[错误检查提案](https://go.googlesource.com/proposal/+/master/design/29934-error-values.md)。\r\n\r\n\r\n错误检查提案为其他地方（在 github.com/pkg/errors 等包中）尝试过的错误添加了几个功能，并带有一些新的实现技巧。 该提案已在提示中实施，为 Go 1.13 做准备。 您今天可以通过使用 Go from tip 或使用包 golang.org/x/xerrors 和 Go 1.12 来尝试一下。\r\n\r\n\r\n额外的功能完全基于库，不涉及对编译器或运行时的更改。 一个重要的新功能是错误包装。\r\n\r\n\r\n## 一个工作示例：包装“key not found” 错误\r\n\r\n我们正在为 [Tailscale](https://tailscale.io/)  构建的产品包括一个名为 taildb 的简单键值存储。 与许多简单的 KV 存储一样，您可以读取键值。 \r\n\r\n\r\n\r\n```go\r\n// Get fetches and unmarshals the JSON blob for the key k into v.\r\n// If the key is not found, Get reports a "key not found" error.\r\nfunc (tx *Tx) Get(k string, v interface{}) (err error)\r\n```\r\n\r\n让我们来谈谈 "key not found."\r\n\r\n### 版本 1\r\n\r\n\r\n第一个 API 版本将"key not found"错误定义为：\r\n\r\n```go\r\nvar ErrNotFound = errors.New("taildb: key not found")\r\n```\r\n\r\n使用taildb的代码可以轻松使用:\r\n\r\n```go\r\nvar val Value\r\nif err := tx.Get("my-key", &val); err == taildb.ErrNotFound {\r\n\t// no such key\r\n} else if err != nil {\r\n\t// something went very wrong\r\n} else {\r\n\t// use val\r\n}\r\n```\r\n\r\n这很好，直到我进行一些调试并遇到一个归结为:\r\n\r\n```go\r\nmy_http_handler: taildb: key not found\r\n```\r\n这不是一个非常有用的错误消息.\r\n\r\n### 版本 2\r\n\r\n鉴于 `Get` 方法具有键名，最好将其包含在错误消息中。\r\n\r\n所以我遵循了 Go 中的一个常见策略，即在 taildb 包中引入错误类型：\r\n\r\n```go\r\ntype KeyNotFoundError struct {\r\n\tName string\r\n}\r\n\r\nfunc (e KeyNotFoundError) Error() string {\r\n\treturn fmt.Errorf("taildb: key %q not found")\r\n}\r\n```\r\n\r\n这很好用！检查此特定错误的代码有点混乱，但它可以工作:\r\n\r\n```go\r\nvar val Value\r\nerr := tx.Get("my-key", &val)\r\nif err != nil {\r\n\tif _, isNotFound := err.(taildb.KeyNotFoundError); isNotFound {\r\n\t\t// no such key\r\n\t} else {\r\n\t\t// something went very wrong\r\n\t}\r\n} else {\r\n\t// use val\r\n}\r\n```\r\n但这种直接搭配的风格有一个缺陷。如果任何中间代码将信息添加到错误中，我们将无法再检查错误的类型。考虑如下函数:\r\n\r\n```go\r\nfunc accessCheck(tx *taildb.Tx, key string) error {\r\n\tvar val Value\r\n\tif err := tx.Get(key, &val); err != nil {\r\n\t\treturn fmt.Errorf("access check: %v", err)\r\n\t}\r\n\tif !val.AccessGranted {\r\n\t\treturn errAccessDenied\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\r\n在这里，我们在数据库之上实现逻辑，检查用户是否具有某种访问权限。报告 nil 错误将授予访问权限，否则访问将被拒绝。拒绝访问的原因可能是 `!AccessGranted` 或一些底层数据库错误。所有关于错误的文本信息都被保留了，但是使用 `fmt.Errorf` 意味着我们不能再检查访问错误是否是 `KeyNotFoundError`。\r\n\r\n### 版本 3\r\n\r\n新的 xerrors 库通过提供一个版本的 Errorf 来解决此问题，该版本保留了新错误中的底层错误对象:\r\n\r\n```go\r\n\tif err := tx.Get(key, &val); err != nil {\r\n\t\treturn xerrors.Errorf("access check: %w", err)\r\n\t}\r\n```\r\n\r\n%w for wrap.\r\n\r\n从表面上看，Errorf 的这种实现与 fmt 中的实现完全一样。在底层，保留类型意味着我们现在可以检查 KeyNotFoundError 的原因链:\r\n\r\n```go\r\nvar val Value\r\nif err := accessCheck(tx, "my-key"); err != nil {\r\n\tvar notFoundErr taildb.KeyNotFoundError\r\n\tif xerrors.As(err, &notFoundErr) {\r\n\t\t// no such key\r\n\t} else {\r\n\t\t// something went very wrong\r\n\t}\r\n} else {\r\n\t// use val\r\n}\r\n```\r\n\r\nGreat!\r\n\r\n### 版本 4\r\n\r\n我们可以做得更好。我们替换导出的 KeyNotFoundError 的唯一原因是我们可以在错误消息中添加一些额外的文本，同时使类型可测试。新的 xerrors 为我们提供了一种更简单的方法来做到这一点。\r\n\r\n所以让我们回到第一个定义:\r\n\r\n```go\r\nvar ErrNotFound = errors.New("key not found")\r\n```\r\n\r\n在taildb里面我们可以写:\r\n\r\n```go\r\nfunc (tx *Tx) Get(k string, v interface{}) (err error) {\r\n\t// ...\r\n\tif noSuchKey {\r\n\t\treturn xerrors.Errorf("taildb: %q: %w", k, ErrNotFound)\r\n\t}\r\n}\r\n```\r\n\r\n我们想要的所有信息都在这里。当我们将错误打印到日志时，我们会看到 `taildb: "my-key": key not found`。要检查从 `accessCheck` 返回的错误，我们可以编写:\r\n\r\n```go\r\nvar val Value\r\nif err := accessCheck(tx, "my-key"); xerrors.Is(err, taildb.ErrNotFound) {\r\n\t// no such key\r\n} else if err != nil {\r\n\t// something went very wrong\r\n} else {\r\n\t// use val\r\n}\r\n```\r\n\r\n简单！\r\n\r\n## Go 1.13\r\n\r\n新的 xerrors 将在 Go 1.13 中升级到标准库的错误包中。\r\n\r\n链接不是 xerrors.Errorf，而是直接构建到我们今天使用的 [fmt.Errorf](https://tip.golang.org/pkg/fmt/#Errorf) 函数中：\r\n\r\n如果最后一个参数是错误的并且格式字符串以“: %w”结尾，\r\n返回的错误实现 errors.Wrapper 并带有返回它的 Unwrap 方法。\r\n\r\n当然，这看起来不错。然而，距离 Go 1.13 仅三个月之遥！在那之后，所有这些新的变化（这篇文章只介绍一个）将在[Go 1 兼容性承诺]（https://golang.org/doc/go1compat）下的标准库中被永久冻结。对于如此高的标准，这个包[可悲地测试不足]（https://godoc.org/golang.org/x/xerrors?importers）。\r\n\r\n我鼓励你从今天开始使用 golang.org/x/xerrors，或者更好的是，通过 [从源代码安装](https://golang.org/doc/install/source) 直接针对 Go 提示开始开发。更多的人需要尝试一下。',"src/content/posts/go/xerrors.md","71b2898d61bc2c50",{html:286,metadata:287},'<blockquote>\n<p>翻译自 <a href="https://crawshaw.io/blog/xerrors" rel="nofollow noopener noreferrer external" target="_blank">https://crawshaw.io/blog/xerrors</a></p>\n</blockquote>\n<h1 id="go-113-xerrors">Go 1.13: xerrors</h1>\n<p>Go 2 系列语言更改的一部分是新的<a href="https://go.googlesource.com/proposal/+/master/design/29934-error-values.md" rel="nofollow noopener noreferrer external" target="_blank">错误检查提案</a>。</p>\n<p>错误检查提案为其他地方（在 github.com/pkg/errors 等包中）尝试过的错误添加了几个功能，并带有一些新的实现技巧。 该提案已在提示中实施，为 Go 1.13 做准备。 您今天可以通过使用 Go from tip 或使用包 golang.org/x/xerrors 和 Go 1.12 来尝试一下。</p>\n<p>额外的功能完全基于库，不涉及对编译器或运行时的更改。 一个重要的新功能是错误包装。</p>\n<h2 id="一个工作示例包装key-not-found-错误">一个工作示例：包装“key not found” 错误</h2>\n<p>我们正在为 <a href="https://tailscale.io/" rel="nofollow noopener noreferrer external" target="_blank">Tailscale</a>  构建的产品包括一个名为 taildb 的简单键值存储。 与许多简单的 KV 存储一样，您可以读取键值。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// Get fetches and unmarshals the JSON blob for the key k into v.</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// If the key is not found, Get reports a "key not found" error.</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">tx </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Tx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">k</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">v</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{}) (</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#D73A49;--shiki-dark:#F97583"> error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<p>让我们来谈谈 “key not found.”</p>\n<h3 id="版本-1">版本 1</h3>\n<p>第一个 API 版本将”key not found”错误定义为：</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrNotFound </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"taildb: key not found"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<p>使用taildb的代码可以轻松使用:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> val </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tx.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"my-key"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">val); err </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> taildb.ErrNotFound {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// no such key</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#D73A49;--shiki-dark:#F97583"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// something went very wrong</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// use val</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>这很好，直到我进行一些调试并遇到一个归结为:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">my_http_handler: taildb: key not found</span></span></code></pre>\n<p>这不是一个非常有用的错误消息.</p>\n<h3 id="版本-2">版本 2</h3>\n<p>鉴于 <code>Get</code> 方法具有键名，最好将其包含在错误消息中。</p>\n<p>所以我遵循了 Go 中的一个常见策略，即在 taildb 包中引入错误类型：</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> KeyNotFoundError</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tName </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">e </span><span style="color:#6F42C1;--shiki-dark:#B392F0">KeyNotFoundError</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#D73A49;--shiki-dark:#F97583">string</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Errorf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"taildb: key </span><span style="color:#005CC5;--shiki-dark:#79B8FF">%q</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> not found"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>这很好用！检查此特定错误的代码有点混乱，但它可以工作:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> val </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tx.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"my-key"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">val)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> _, isNotFound </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err.(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">taildb</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">KeyNotFoundError</span><span style="color:#24292E;--shiki-dark:#E1E4E8">); isNotFound {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t\t// no such key</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t\t// something went very wrong</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// use val</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>但这种直接搭配的风格有一个缺陷。如果任何中间代码将信息添加到错误中，我们将无法再检查错误的类型。考虑如下函数:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> accessCheck</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">tx</span><span style="color:#D73A49;--shiki-dark:#F97583"> *</span><span style="color:#6F42C1;--shiki-dark:#B392F0">taildb</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Tx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">key</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tvar</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> val </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tx.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">val); err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Errorf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"access check: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">%v</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, err)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#D73A49;--shiki-dark:#F97583"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8">val.AccessGranted {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errAccessDenied</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>在这里，我们在数据库之上实现逻辑，检查用户是否具有某种访问权限。报告 nil 错误将授予访问权限，否则访问将被拒绝。拒绝访问的原因可能是 <code>!AccessGranted</code> 或一些底层数据库错误。所有关于错误的文本信息都被保留了，但是使用 <code>fmt.Errorf</code> 意味着我们不能再检查访问错误是否是 <code>KeyNotFoundError</code>。</p>\n<h3 id="版本-3">版本 3</h3>\n<p>新的 xerrors 库通过提供一个版本的 Errorf 来解决此问题，该版本保留了新错误中的底层错误对象:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> tx.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">val); err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> xerrors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Errorf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"access check: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">%w</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, err)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span></code></pre>\n<p>%w for wrap.</p>\n<p>从表面上看，Errorf 的这种实现与 fmt 中的实现完全一样。在底层，保留类型意味着我们现在可以检查 KeyNotFoundError 的原因链:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> val </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> accessCheck</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(tx, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"my-key"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">); err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tvar</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> notFoundErr </span><span style="color:#6F42C1;--shiki-dark:#B392F0">taildb</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">KeyNotFoundError</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> xerrors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">As</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">notFoundErr) {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t\t// no such key</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t\t// something went very wrong</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// use val</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>Great!</p>\n<h3 id="版本-4">版本 4</h3>\n<p>我们可以做得更好。我们替换导出的 KeyNotFoundError 的唯一原因是我们可以在错误消息中添加一些额外的文本，同时使类型可测试。新的 xerrors 为我们提供了一种更简单的方法来做到这一点。</p>\n<p>所以让我们回到第一个定义:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ErrNotFound </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"key not found"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<p>在taildb里面我们可以写:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">tx </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Tx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">k</span><span style="color:#D73A49;--shiki-dark:#F97583"> string</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">v</span><span style="color:#D73A49;--shiki-dark:#F97583"> interface</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{}) (</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#D73A49;--shiki-dark:#F97583"> error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// ...</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> noSuchKey {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> xerrors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Errorf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"taildb: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">%q</span><span style="color:#032F62;--shiki-dark:#9ECBFF">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">%w</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, k, ErrNotFound)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>我们想要的所有信息都在这里。当我们将错误打印到日志时，我们会看到 <code>taildb: "my-key": key not found</code>。要检查从 <code>accessCheck</code> 返回的错误，我们可以编写:</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> val </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Value</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> accessCheck</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(tx, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"my-key"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">); xerrors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Is</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err, taildb.ErrNotFound) {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// no such key</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#D73A49;--shiki-dark:#F97583"> if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// something went very wrong</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">} </span><span style="color:#D73A49;--shiki-dark:#F97583">else</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">\t// use val</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>简单！</p>\n<h2 id="go-113">Go 1.13</h2>\n<p>新的 xerrors 将在 Go 1.13 中升级到标准库的错误包中。</p>\n<p>链接不是 xerrors.Errorf，而是直接构建到我们今天使用的 <a href="https://tip.golang.org/pkg/fmt/#Errorf" rel="nofollow noopener noreferrer external" target="_blank">fmt.Errorf</a> 函数中：</p>\n<p>如果最后一个参数是错误的并且格式字符串以“: %w”结尾，\r\n返回的错误实现 errors.Wrapper 并带有返回它的 Unwrap 方法。</p>\n<p>当然，这看起来不错。然而，距离 Go 1.13 仅三个月之遥！在那之后，所有这些新的变化（这篇文章只介绍一个）将在[Go 1 兼容性承诺]（<a href="https://golang.org/doc/go1compat%EF%BC%89%E4%B8%8B%E7%9A%84%E6%A0%87%E5%87%86%E5%BA%93%E4%B8%AD%E8%A2%AB%E6%B0%B8%E4%B9%85%E5%86%BB%E7%BB%93%E3%80%82%E5%AF%B9%E4%BA%8E%E5%A6%82%E6%AD%A4%E9%AB%98%E7%9A%84%E6%A0%87%E5%87%86%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%8C%85%5B%E5%8F%AF%E6%82%B2%E5%9C%B0%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%B6%B3%5D%EF%BC%88https://godoc.org/golang.org/x/xerrors?importers%EF%BC%89%E3%80%82" rel="nofollow noopener noreferrer external" target="_blank">https://golang.org/doc/go1compat）下的标准库中被永久冻结。对于如此高的标准，这个包[可悲地测试不足]（https://godoc.org/golang.org/x/xerrors?importers）。</a></p>\n<p>我鼓励你从今天开始使用 golang.org/x/xerrors，或者更好的是，通过 <a href="https://golang.org/doc/install/source" rel="nofollow noopener noreferrer external" target="_blank">从源代码安装</a> 直接针对 Go 提示开始开发。更多的人需要尝试一下。</p>',{headings:288,localImagePaths:310,remoteImagePaths:311,frontmatter:312,imagePaths:317},[289,292,295,298,301,304,307],{depth:25,slug:290,text:291},"go-113-xerrors","Go 1.13: xerrors",{depth:49,slug:293,text:294},"一个工作示例包装key-not-found-错误","一个工作示例：包装“key not found” 错误",{depth:89,slug:296,text:297},"版本-1","版本 1",{depth:89,slug:299,text:300},"版本-2","版本 2",{depth:89,slug:302,text:303},"版本-3","版本 3",{depth:89,slug:305,text:306},"版本-4","版本 4",{depth:49,slug:308,text:309},"go-113","Go 1.13",[],[],{title:279,published:313,tags:314,categories:315,minutes:316},["Date","2021-01-03T13:59:58.000Z"],[132],[132],6,[],"go/go搭建内网代理",{id:318,data:320,body:324,filePath:325,digest:326,rendered:327},{title:321,published:322,description:34,tags:323,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Go 搭建内网代理",["Date","2020-01-03T13:59:58.000Z"],[132],"## 前言\r\n\r\ngitlab地址：gitlab.example.com:82\r\n代理地址： test.com\r\n\r\n## 修改host\r\n\r\n## nginx配置\r\n\r\n### conf\r\n\r\n```sh\r\nserver {\r\n    listen 80;\r\n    server_name www.test.com test.com;\r\n  \r\n    # ssl_certificate           ../cert/cert.crt; \r\n    # ssl_certificate_key       ../cert/cert.key; \r\n\r\n    error_log logs/error.log;   #指定错误日志文件路径\r\n    access_log logs/access.log; #指定访问日志文件路径\r\n      \r\n    if ($args ~* \"^go-get=1\") {\r\n         return 200 \"<!DOCTYPE html><html><head><meta name='go-import' content='test.com$uri git http://gitlab.example.com:82$uri.git'></head></html>\";\r\n   }\r\n\r\n \r\n}\r\n```\r\n\r\n## go环境变量配置\r\n\r\n```sh\r\ngo env -w GONOPROXY=test.com\r\n```\r\n\r\n## 安装\r\n\r\ngo get test.com/grestful/session","src/content/posts/go/go搭建内网代理.md","8400caecf2f449c7",{html:328,metadata:329},'<h2 id="前言">前言</h2>\n<p>gitlab地址：gitlab.example.com:82\r\n代理地址： test.com</p>\n<h2 id="修改host">修改host</h2>\n<h2 id="nginx配置">nginx配置</h2>\n<h3 id="conf">conf</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    listen</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 80</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    server_name</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> www.test.com</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> test.com</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    # ssl_certificate           ../cert/cert.crt; </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    # ssl_certificate_key       ../cert/cert.key; </span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    error_log</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> logs/error.log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;   </span><span style="color:#6A737D;--shiki-dark:#6A737D">#指定错误日志文件路径</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    access_log</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> logs/access.log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">#指定访问日志文件路径</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      </span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ($args </span><span style="color:#D73A49;--shiki-dark:#F97583">~*</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "^go-get=1"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">         return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 200</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "&#x3C;!DOCTYPE html>&#x3C;html>&#x3C;head>&#x3C;meta name=\'go-import\' content=\'test.com</span><span style="color:#24292E;--shiki-dark:#E1E4E8">$uri</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> git http://gitlab.example.com:82</span><span style="color:#24292E;--shiki-dark:#E1E4E8">$uri</span><span style="color:#032F62;--shiki-dark:#9ECBFF">.git\'>&#x3C;/head>&#x3C;/html>"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">   }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="go环境变量配置">go环境变量配置</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">go</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> env</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -w</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> GONOPROXY=test.com</span></span></code></pre>\n<h2 id="安装">安装</h2>\n<p>go get test.com/grestful/session</p>',{headings:330,localImagePaths:342,remoteImagePaths:343,frontmatter:344,imagePaths:348},[331,332,334,336,338,340],{depth:49,slug:83,text:83},{depth:49,slug:333,text:333},"修改host",{depth:49,slug:335,text:335},"nginx配置",{depth:89,slug:337,text:337},"conf",{depth:49,slug:339,text:339},"go环境变量配置",{depth:49,slug:341,text:341},"安装",[],[],{title:321,published:345,tags:346,categories:347,minutes:25},["Date","2020-01-03T13:59:58.000Z"],[132],[132],[],"elasticsearch/极限网关初探1-安装启动",{id:349,data:351,body:355,filePath:356,digest:357,rendered:358},{title:352,published:353,description:34,tags:354,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"极限网关初探（1） 安装启动",["Date","2022-04-07T07:57:34.000Z"],[166],"## 产品介绍\n极限网关（INFINI Gateway）是一个面向 Elasticsearch 的高性能应用网关。特性丰富，使用简单。\n\n它和其他业务型网关最大的区别是业务网关把请求转发给各个底层微服务，而它把请求转发给 Elasticsearch，更多是类似 Mycat 的中间件的作用。\n\n没有使用网关之前，服务端请求多个节点\n\n使用网关后\n## 下载地址\n打开 [下载地址](http://release.infinilabs.com/gateway/stable/)，根据操作系统版本选择。\n\n## Windows 安装和启动\n### 安装\n下载 gateway-1.6.0_SNAPSHOT-597-windows-amd64.zip，解压如下。\n\ngateway-windows-amd64.exe 是启动文件，gateway.yml 是默认配置文件。\n\n### 启动失败\n当 gateway.yml 的 elasticsearch 选项中的 hosts 不能正常响应请求的时候，启动界面如下。\n> 为什么 elasticsearch 不能访问的时候，网关还要继续提供服务呢，为什么不像业务接口启动时在基础业务组件如 MySQL/Redis 不能正常响应就直接 panic？\n\n一方面网关作为 elasticsearch 抵挡流量冲击的城墙，在 elasticsearch 不能提供服务的时候，对之前成功的请求缓存结果，继续提供有限度的服务，为 elasticsearch 修复后上线争取时间。\n\n另一方面业务接口和基础组件是强耦合关系，没有基础组件就完全无法对外提供数据读写服务，而网关与 elasticsearch 是松耦合关系，网关在没有 elasticsearch 的情况下也能对外提供有限度的服务。\n\n在 gateway.yml 的 elasticsearch 选项中的 hosts 改成能够正常响应的 elasticsearch 请求地址。\n### 启动成功\n双击 gateway-windows-amd64.exe 文件，启动成功界面如下\n\n\n### 访问\n#### API 访问\n由启动后终端显示可知，网关的 API 接口地址是 http://localhost:2900\n```sh\n[api.go:262] api listen at: http://0.0.0.0:2900\n```\n打开浏览器输入 http://localhost:2900，显示所有可以对外提供的 API 接口\n\n我们选择其中一个，在浏览器中输入 http://localhost:2900/_framework/api/_version 从路由上看该接口是查询产品的版本信息，显示如下\n\ngateway.yml 中可以看到有被注释掉的一段配置，看起来应该是配置 api 地址的地方。\n```yaml\n#api:\n#  enabled: true\n#  network:\n#    binding: 127.0.0.1:2900\n```\n把注释去掉后尝试把端口改成 2901。\n```yaml\napi:\n  enabled: true\n  network:\n    binding: 127.0.0.1:2901\n```\n改完后启动\n打开浏览器先输入 http://localhost:2900，无法正常响应请求，再输入 http://localhost:2901，可以正常响应，界面和修改配置前访问 http://localhost:2900 的界面一样，说明 API 请求地址成功修改\n#### Elasticsearch 访问\n启动日志中显示监听 8000 端口，猜测应该是 elasticsearch 请求地址，打开浏览器输入 http://127.0.0.1:8000/\n```sh\n entry [my_es_entry] listen at: http://0.0.0.0:8000\n```\ngateway.yml 中可以看到 my_es_entry 的 network 绑定 8000 端口，显而易见的这部分就是配置代理转发给 elasticsearch 的地址，所以安装后只需要把以前请求 elasticsearch 的地址修改为该地址。\n```yaml\nentry:\n  - name: my_es_entry\n    enabled: true\n    router: my_router\n    max_concurrency: 10000\n    network:\n      binding: 0.0.0.0:8000\n```\n\n## 总结\n我们成功安装和启动极限网关，接下来我们学习怎么根据需求修改配置。","src/content/posts/elasticsearch/极限网关初探（1） 安装启动.md","b6696bc7f3066baa",{html:359,metadata:360},'<h2 id="产品介绍">产品介绍</h2>\n<p>极限网关（INFINI Gateway）是一个面向 Elasticsearch 的高性能应用网关。特性丰富，使用简单。</p>\n<p>它和其他业务型网关最大的区别是业务网关把请求转发给各个底层微服务，而它把请求转发给 Elasticsearch，更多是类似 Mycat 的中间件的作用。</p>\n<p>没有使用网关之前，服务端请求多个节点</p>\n<p>使用网关后</p>\n<h2 id="下载地址">下载地址</h2>\n<p>打开 <a href="http://release.infinilabs.com/gateway/stable/" rel="nofollow noopener noreferrer external" target="_blank">下载地址</a>，根据操作系统版本选择。</p>\n<h2 id="windows-安装和启动">Windows 安装和启动</h2>\n<h3 id="安装">安装</h3>\n<p>下载 gateway-1.6.0_SNAPSHOT-597-windows-amd64.zip，解压如下。</p>\n<p>gateway-windows-amd64.exe 是启动文件，gateway.yml 是默认配置文件。</p>\n<h3 id="启动失败">启动失败</h3>\n<p>当 gateway.yml 的 elasticsearch 选项中的 hosts 不能正常响应请求的时候，启动界面如下。</p>\n<blockquote>\n<p>为什么 elasticsearch 不能访问的时候，网关还要继续提供服务呢，为什么不像业务接口启动时在基础业务组件如 MySQL/Redis 不能正常响应就直接 panic？</p>\n</blockquote>\n<p>一方面网关作为 elasticsearch 抵挡流量冲击的城墙，在 elasticsearch 不能提供服务的时候，对之前成功的请求缓存结果，继续提供有限度的服务，为 elasticsearch 修复后上线争取时间。</p>\n<p>另一方面业务接口和基础组件是强耦合关系，没有基础组件就完全无法对外提供数据读写服务，而网关与 elasticsearch 是松耦合关系，网关在没有 elasticsearch 的情况下也能对外提供有限度的服务。</p>\n<p>在 gateway.yml 的 elasticsearch 选项中的 hosts 改成能够正常响应的 elasticsearch 请求地址。</p>\n<h3 id="启动成功">启动成功</h3>\n<p>双击 gateway-windows-amd64.exe 文件，启动成功界面如下</p>\n<h3 id="访问">访问</h3>\n<h4 id="api-访问">API 访问</h4>\n<p>由启动后终端显示可知，网关的 API 接口地址是 <a href="http://localhost:2900" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2900</a></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[api.go:262] api listen at: http://0.0.0.0:2900</span></span></code></pre>\n<p>打开浏览器输入 <a href="http://localhost:2900%EF%BC%8C%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E7%9A%84" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2900，显示所有可以对外提供的</a> API 接口</p>\n<p>我们选择其中一个，在浏览器中输入 <a href="http://localhost:2900/_framework/api/_version" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2900/_framework/api/_version</a> 从路由上看该接口是查询产品的版本信息，显示如下</p>\n<p>gateway.yml 中可以看到有被注释掉的一段配置，看起来应该是配置 api 地址的地方。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">#api:</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">#  enabled: true</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">#  network:</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">#    binding: 127.0.0.1:2900</span></span></code></pre>\n<p>把注释去掉后尝试把端口改成 2901。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">api</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">  network</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    binding</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">127.0.0.1:2901</span></span></code></pre>\n<p>改完后启动\n打开浏览器先输入 <a href="http://localhost:2900%EF%BC%8C%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%86%8D%E8%BE%93%E5%85%A5" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2900，无法正常响应请求，再输入</a> <a href="http://localhost:2901%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E5%93%8D%E5%BA%94%EF%BC%8C%E7%95%8C%E9%9D%A2%E5%92%8C%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E5%89%8D%E8%AE%BF%E9%97%AE" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2901，可以正常响应，界面和修改配置前访问</a> <a href="http://localhost:2900" rel="nofollow noopener noreferrer external" target="_blank">http://localhost:2900</a> 的界面一样，说明 API 请求地址成功修改</p>\n<h4 id="elasticsearch-访问">Elasticsearch 访问</h4>\n<p>启动日志中显示监听 8000 端口，猜测应该是 elasticsearch 请求地址，打开浏览器输入 <a href="http://127.0.0.1:8000/" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:8000/</a></p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0"> entry</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> [my_es_entry] listen at: http://0.0.0.0:8000</span></span></code></pre>\n<p>gateway.yml 中可以看到 my_es_entry 的 network 绑定 8000 端口，显而易见的这部分就是配置代理转发给 elasticsearch 的地址，所以安装后只需要把以前请求 elasticsearch 的地址修改为该地址。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="yaml"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">entry</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  - </span><span style="color:#22863A;--shiki-dark:#85E89D">name</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">my_es_entry</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    router</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">my_router</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    max_concurrency</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">10000</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">    network</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">      binding</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">0.0.0.0:8000</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>我们成功安装和启动极限网关，接下来我们学习怎么根据需求修改配置。</p>',{headings:361,localImagePaths:383,remoteImagePaths:384,frontmatter:385,imagePaths:389},[362,364,366,369,370,372,374,376,379,382],{depth:49,slug:363,text:363},"产品介绍",{depth:49,slug:365,text:365},"下载地址",{depth:49,slug:367,text:368},"windows-安装和启动","Windows 安装和启动",{depth:89,slug:341,text:341},{depth:89,slug:371,text:371},"启动失败",{depth:89,slug:373,text:373},"启动成功",{depth:89,slug:375,text:375},"访问",{depth:150,slug:377,text:378},"api-访问","API 访问",{depth:150,slug:380,text:381},"elasticsearch-访问","Elasticsearch 访问",{depth:49,slug:117,text:117},[],[],{title:352,published:386,tags:387,categories:388,minutes:150},["Date","2022-04-07T07:57:34.000Z"],[166],[166],[],"life/怎么写简历",{id:390,data:392,body:397,filePath:398,digest:399,rendered:400},{title:393,published:394,description:34,tags:395,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"怎么写简历",["Date","2024-08-23T02:46:50.000Z"],[396],"职场","## 简历格式\n首先你要准备的是简历。简历很重要，这是别人了解你的第一个地方，所以简历要好好写。当然，我们知道真正的好简历是要用自己的经历去写的，比如，有人的简历就是一句话：我发明了 Unix。\n\n当然，并不是所有的人都有这样的经历，但这依然告诉我们，自己的经历才是简历最大的亮点。所以，你要去那些能让你的简历有更多含金量的公司工作，要做那些能让你的简历更闪亮的工作。这是写简历的最佳实践——用自己的经历聊，而不是用文字写。\n\n但从另一方面来说，简历这个文本也是要好好写的，况且，我们不是每个人都会有很耀眼的经历，所以，还是要好好写简历。基本上来说，简历上的信息不要写太多，信息太多相当于没有信息，不要单纯地罗列，要突出自己的长处和技能。一般来说，简历需要包括以下几项内容。\n\n-   自我简介。这个自我简介是用最简单的话来说明自己的情况，不超过 200 字。比如：10+ 年的软件开发经验 ( 说明你的主业 ) ，4+ 年的团队 leader 经验 ( 说明你的领导力 ) ，擅长高可用高性能的分布式架构 ( 说明你的专业和专攻 ) ，多年互联网和金融行业背景 ( 说明你的行业背景 ) ，任职于 XXX 公司的 XX 职位 ( 说明你的职业 ) ，负责 XXX 平台或系统 ( 说明你的业务场景 ) ……\n-   个人信息。这里有几点需要注意。\n    -   基本信息。电子邮箱建议用 Gmail，千万不要用 QQ 邮箱，要让人感觉职业化一些。\n    -   个人网站。如果你有个人主页、博客、GitHub 或是 Stack Overflow，请一定附上，这是加分项。如果个人主页或博客有独立域名，那更好，这会给人一种你爱动手做事的感觉。页面也要干净有美感，这样会让人感觉你有品味。\n    -   网站内容。一般来说这些项都会被面试官点看浏览，所以，里面的内容你需要小心组织和呈现，千万不要造假。另外，除了技术上的一些知识总结 ( 不要太初级，要有深度的、原理型的、刨根问底型的文章 ) ，你也可以秀一秀自己的技术价值观 ( 比如，对代码整洁的追求，对一些技术热点事件的看法 ) ，这会让你更容易获得面试官的好感。面试官的好感很重要。\n    -   作品展。如果你有一些作品展现，会更好。当然，对于前端程序员来说，这是比较容易的。而对于后端程序员来说，这会比较难一些，只能展示一下自己的 GitHub 了。如果你有一些比较不错的证书或奖项 ( 如微软的认证、Oracle 的认证 ) ，也可以展示一下。\n\n-   个人技能。个人信息下面你应该罗列几条个人的技能。这些内容要能很明显地让对方了解你掌握的技术和熟悉的领域。\n    -   技术技能栈。其中包括你擅长和会用的编程语言 ( 如 Java、Go、Python 等 ) ，编程框架或一些重要的库 ( 如 Spring Boot、Netty、React.js、gRPC 等 ) ，熟悉的一些技术软件 ( 如 Redis、Kafka、Docker 等 ) ，设计或架构 ( 如面向对象设计、分布式系统架构、异步编程、高性能调优等 ) 。\n    -   技术领域。前端、算法、机器学习、分布式、底层、数据库等。\n    -   业务领域。一方面是行业领域，如金融、电商、电信等，另一方面是业务领域，如 CRM、支付、物流、商品等。\n    -   经验和软技能。带过多少人的团队、有多少年的项目管理经验、学习能力如何、执行力怎么样、设计过什么样的系统。 ( 不要太多，几句话就好 )\n\n其实和用人单位发布的招聘信息中的职位技能需求很相似。有时候我都在想，明明用人单位的职位需求里写成那样，为什么应聘人还不依葫芦画瓢呢？所以，对应于你的简历，如果能和职位需求看齐有相类似的描述，这样可以快速地让人觉得你和要应聘的职位很匹配。\n\n-   工作经历和教育经历\n    -   列一下你的工作经历。每份工作完成的主要项目 ( 不要列一大堆项目，挑重要的 ) ，主要突出项目的难度、规模、挑战、职责，以及获得的认可和荣誉。\n    -   工作经历和教育经历，主要是对上述的个人技能的印证。不要东拉西扯，要紧紧地围绕着你的技能、特长和亮点来展开。\n\n一般来说，你简历中的内容最好控制在两页 A4 纸以内，最好有中英文版，简历不要是 Word 版的，最好是 PDF 版，然后简历的格式和风格请参考 LinkedIn 上的 ( 在 微软的 Office 模板网站 上也能找到一些不错的简历模板 ) 。简历的内容不要太多，内容太多，重点就不明显了。写简历的目的是呈现自己的特长、亮点和特点。只要你能呈现出 2-3 个亮点和特长，就可以吸引到人了。\n\n简历只是一块敲门砖。一些热门的公司和项目能够吸引到很多很多人的简历，所以，你要在众多的简历中脱颖而出。除了自己的经历和能力有亮点外，你还需要有吸引用人单位的方法。\n\n有很多公司都是 HR 先来筛一遍简历，HR 其实并不懂技术，她们只会看你的过往经历、能力是否和职位描述上的匹配。如果简历上的经历和技术亮点不足的话，那么你可以在简历的版式和形式的制作上花些心思，以及在简历的自我描述中加上一些「虚」的东西。\n\n比如「工作态度积极，不分份内和份外的事，只要对公司和个人有利，都会努力做好；勤奋踏实，热爱学习，喜欢做一个全栈工程师；善于发现问题，并解决问题……」表示我虽然现在的经历和技能不足以打动你，但是我的态度端正，潜力巨大，你不能错过……\n\n## 技术知识准备\n\n一般来说，你的简历上写什么，面试官就会问什么，所以，不要打自己的脸，精通就是精通，熟悉就是熟悉，了解就是了解。然后对于你列出来的这些技术，你一定要把其最基本的技术细节给掌握了。面试官一般也会逐步加大问题的难度和深度，看看你到底在哪个层次上。所以，你还是需要系统地看看书，才能应对面试官的问题。比如：\n\n-   你写上了 Java，那么 Java 的基本语法都要了解，并发编程、NIO、JVM 等，你多少要有点儿了解，Spring、Netty 这些框架也要了解。\n\n-   你写上了 Go，那么至少得把官网上的 Effective Go 给看了。\n\n-   你写上了 Redis，那么除了 Redis 的数据结构，Redis 的性能优化、高可用配置、分布式锁什么的，你多少也要把官网上的那几篇文章读一读。\n\n-   你写上了面向对象，那么怎么着也得把《设计模式》中的 23 个模式了解一下。\n\n-   你写上了分布式架构，那么 CAP 理论、微服务架构、弹力设计、Spring Cloud、Cloud Native 这些架构就要做到心里有数。\n\n-   你写上网络编程，那么 TCP/IP 的三次握手，四次挥手，两端的状态变化你得知道吧，Socket 编程的那几个系统调用，还有 select、poll、epoll 这些异步 IO 多路复用的东西，你得知道。\n\n总之，无论你在简历里写什么技术，这些技术的基础知识你都得学一下。本质上来说，这跟考试一样啊。你想想你是怎样准备期末考试的，是不是得把教科书上所有章节中的关键知识点都过一下？你不见得要记住所有的知识点，但是 80% 以上的关键知识点，你多少得知道吧。\n\n## 算法题准备\n\n国外的公司一般还会面算法题，他们用算法题来过滤掉那些非计算机专业出身的人。国内的一些公司也一样，尤其是一些校招面试，也有很多算法题。所以，算法是很重要的，是你需要努力学习和准备的。\n\nLeetCode 是一个不错的地方。如果你能完成其中 50% 的题，那么你基本上可以想面哪里就面哪里了。这里，你要知道，一些面试官也是新手，他们也是从网上找一些算法题来考你。所以，你不用太害怕算法题，都是有套路的。比如：\n\n1.  如果是数据排序方面的题，那基本上是和二分查找有关系的。\n\n2.  如果是在一个无序数组上的搜索或者统计，基本上来说需要动用 O ( 1 ) 时间复杂度的 hash 数据结构。\n\n3.  在一堆无序的数据中找 top n 的算法，基本上来说，就是使用最大堆或是最小堆的数据结构。\n\n4.  如果是穷举答案相关的题 ( 如八皇后、二叉树等 ) ，基本上来说，需要使用深度优先、广度优先或是回溯等递归的思路。\n\n5.  动态规划要重点准备一下，这样的题很多，如最大和子数组、买卖股票、背包问题、爬楼梯、改字符……这里有一个 Top 20 的动态规划题的列表 。\n\n6.  一些经典的数据结构算法也要看一下，比如，二叉树、链表和数组上的经典算法，LRU 算法，Trie 树，字符串子串匹配，回文等，这些常见的题都是经常会被考到的。\n\n基本上来说，算法题主要是考察应聘者是否是计算机专业出身的，对于基本的数据结构和算法有没有相应的认识。你做得多了，就是能感觉得到其中的套路和方法的。所以，本质来说，还是要多练多做。\n\n## 工作项目准备\n\n无论什么公司的面试，都会让你说一个你做过的项目，或是你过去解决过的一个难题。但我很好奇怪，这种必问的题，为什么很多应聘者都没有好好准备一下。\n\n一般来说，会有下面这样的几个经典的面试问题。\n\n1.  说一个你做过的最自豪的项目，或是最近做过的一个项目。\n\n2.  说一个你解决过的最难的技术问题，或是最有技术含量的问题。\n\n3.  说一个你最痛苦的项目，或最艰难的项目。\n\n4.  说一个犯过的最大的技术错误，或是引发的技术故障。\n\n对于上面这四个问题：第一个问题，主要是想看看你过去工作中做过的最高级的事是什么，还有你的兴趣点和兴奋点是什么；第二和第三个问题，主要是想看看你解决难题的能力，以及面对压力和困难时的心态；第四个问题，主要是想了解一下你面对错误时的态度，还要了解你是否会对错误有所总结和改进。\n\n这些问题都会伴随着对各种细节的不停追问，因为这样的问题太容易造假了。所以，面试官会不停地追问细节，就像审问一样。因为一个谎言需要用更多的谎言来掩盖，如果没有经过高强度和专业的训练的话，最好不要撒谎。因此对于业余的不是做特工或是间谍的人来说，谎言是经不起追问的。\n\n怎样准备这样的题，我这里有几个提示。\n\n-   要有框架。讲故事要学会使用 STAR. Situation - 在什么样的环境和背景下，Task - 你要干什么样的事，Action - 你采取了什么样的行动和努力，Result - 最终得到了什么样的效果。这是整个语言组织的框架，不要冗长啰嗦。\n\n-   要有细节。没有细节的故事听起来就很假，所以，其中要有很多细节。因为是技术方面的，所以，一定要有很多技术细节。\n\n-   要有感情。讲这些故事一定要带感情。要让面试官感受到你的热情、骄傲、坚韧和顽强。一定要是真实的，只有真实的事才会有真实的感情。\n\n-   要有思考。只有细节和故事还不够，还要有自己的思考和得失总结，以及后续的改进。\n\n要做到上述，是不容易的。一般来说，你也是需要训练的。首先，你要形成及时总结的习惯，对自己的日常工作和经历做总结，否则难免会有「书到用时方恨少」的感觉。另外，你还需要训练自己的语言组织能力。最后，你还要有对这些事件的思考，这需要和其他人进行讨论和总结。\n\n对此，如果你想有一个比较好的面试回答效果，这不是你能临时准备出来的，工夫都是花在平时的。而训练这方面能力的最好方式就是在工作中写文档 ，在工作之余写博客。只有写得多了，写得好了，你这样的能力才能训练出来。","src/content/posts/life/怎么写简历.md","d9e71590a464ea72",{html:401,metadata:402},'<h2 id="简历格式">简历格式</h2>\n<p>首先你要准备的是简历。简历很重要，这是别人了解你的第一个地方，所以简历要好好写。当然，我们知道真正的好简历是要用自己的经历去写的，比如，有人的简历就是一句话：我发明了 Unix。</p>\n<p>当然，并不是所有的人都有这样的经历，但这依然告诉我们，自己的经历才是简历最大的亮点。所以，你要去那些能让你的简历有更多含金量的公司工作，要做那些能让你的简历更闪亮的工作。这是写简历的最佳实践——用自己的经历聊，而不是用文字写。</p>\n<p>但从另一方面来说，简历这个文本也是要好好写的，况且，我们不是每个人都会有很耀眼的经历，所以，还是要好好写简历。基本上来说，简历上的信息不要写太多，信息太多相当于没有信息，不要单纯地罗列，要突出自己的长处和技能。一般来说，简历需要包括以下几项内容。</p>\n<ul>\n<li>\n<p>自我简介。这个自我简介是用最简单的话来说明自己的情况，不超过 200 字。比如：10+ 年的软件开发经验 ( 说明你的主业 ) ，4+ 年的团队 leader 经验 ( 说明你的领导力 ) ，擅长高可用高性能的分布式架构 ( 说明你的专业和专攻 ) ，多年互联网和金融行业背景 ( 说明你的行业背景 ) ，任职于 XXX 公司的 XX 职位 ( 说明你的职业 ) ，负责 XXX 平台或系统 ( 说明你的业务场景 ) ……</p>\n</li>\n<li>\n<p>个人信息。这里有几点需要注意。</p>\n<ul>\n<li>基本信息。电子邮箱建议用 Gmail，千万不要用 QQ 邮箱，要让人感觉职业化一些。</li>\n<li>个人网站。如果你有个人主页、博客、GitHub 或是 Stack Overflow，请一定附上，这是加分项。如果个人主页或博客有独立域名，那更好，这会给人一种你爱动手做事的感觉。页面也要干净有美感，这样会让人感觉你有品味。</li>\n<li>网站内容。一般来说这些项都会被面试官点看浏览，所以，里面的内容你需要小心组织和呈现，千万不要造假。另外，除了技术上的一些知识总结 ( 不要太初级，要有深度的、原理型的、刨根问底型的文章 ) ，你也可以秀一秀自己的技术价值观 ( 比如，对代码整洁的追求，对一些技术热点事件的看法 ) ，这会让你更容易获得面试官的好感。面试官的好感很重要。</li>\n<li>作品展。如果你有一些作品展现，会更好。当然，对于前端程序员来说，这是比较容易的。而对于后端程序员来说，这会比较难一些，只能展示一下自己的 GitHub 了。如果你有一些比较不错的证书或奖项 ( 如微软的认证、Oracle 的认证 ) ，也可以展示一下。</li>\n</ul>\n</li>\n<li>\n<p>个人技能。个人信息下面你应该罗列几条个人的技能。这些内容要能很明显地让对方了解你掌握的技术和熟悉的领域。</p>\n<ul>\n<li>技术技能栈。其中包括你擅长和会用的编程语言 ( 如 Java、Go、Python 等 ) ，编程框架或一些重要的库 ( 如 Spring Boot、Netty、React.js、gRPC 等 ) ，熟悉的一些技术软件 ( 如 Redis、Kafka、Docker 等 ) ，设计或架构 ( 如面向对象设计、分布式系统架构、异步编程、高性能调优等 ) 。</li>\n<li>技术领域。前端、算法、机器学习、分布式、底层、数据库等。</li>\n<li>业务领域。一方面是行业领域，如金融、电商、电信等，另一方面是业务领域，如 CRM、支付、物流、商品等。</li>\n<li>经验和软技能。带过多少人的团队、有多少年的项目管理经验、学习能力如何、执行力怎么样、设计过什么样的系统。 ( 不要太多，几句话就好 )</li>\n</ul>\n</li>\n</ul>\n<p>其实和用人单位发布的招聘信息中的职位技能需求很相似。有时候我都在想，明明用人单位的职位需求里写成那样，为什么应聘人还不依葫芦画瓢呢？所以，对应于你的简历，如果能和职位需求看齐有相类似的描述，这样可以快速地让人觉得你和要应聘的职位很匹配。</p>\n<ul>\n<li>工作经历和教育经历\n<ul>\n<li>列一下你的工作经历。每份工作完成的主要项目 ( 不要列一大堆项目，挑重要的 ) ，主要突出项目的难度、规模、挑战、职责，以及获得的认可和荣誉。</li>\n<li>工作经历和教育经历，主要是对上述的个人技能的印证。不要东拉西扯，要紧紧地围绕着你的技能、特长和亮点来展开。</li>\n</ul>\n</li>\n</ul>\n<p>一般来说，你简历中的内容最好控制在两页 A4 纸以内，最好有中英文版，简历不要是 Word 版的，最好是 PDF 版，然后简历的格式和风格请参考 LinkedIn 上的 ( 在 微软的 Office 模板网站 上也能找到一些不错的简历模板 ) 。简历的内容不要太多，内容太多，重点就不明显了。写简历的目的是呈现自己的特长、亮点和特点。只要你能呈现出 2-3 个亮点和特长，就可以吸引到人了。</p>\n<p>简历只是一块敲门砖。一些热门的公司和项目能够吸引到很多很多人的简历，所以，你要在众多的简历中脱颖而出。除了自己的经历和能力有亮点外，你还需要有吸引用人单位的方法。</p>\n<p>有很多公司都是 HR 先来筛一遍简历，HR 其实并不懂技术，她们只会看你的过往经历、能力是否和职位描述上的匹配。如果简历上的经历和技术亮点不足的话，那么你可以在简历的版式和形式的制作上花些心思，以及在简历的自我描述中加上一些「虚」的东西。</p>\n<p>比如「工作态度积极，不分份内和份外的事，只要对公司和个人有利，都会努力做好；勤奋踏实，热爱学习，喜欢做一个全栈工程师；善于发现问题，并解决问题……」表示我虽然现在的经历和技能不足以打动你，但是我的态度端正，潜力巨大，你不能错过……</p>\n<h2 id="技术知识准备">技术知识准备</h2>\n<p>一般来说，你的简历上写什么，面试官就会问什么，所以，不要打自己的脸，精通就是精通，熟悉就是熟悉，了解就是了解。然后对于你列出来的这些技术，你一定要把其最基本的技术细节给掌握了。面试官一般也会逐步加大问题的难度和深度，看看你到底在哪个层次上。所以，你还是需要系统地看看书，才能应对面试官的问题。比如：</p>\n<ul>\n<li>\n<p>你写上了 Java，那么 Java 的基本语法都要了解，并发编程、NIO、JVM 等，你多少要有点儿了解，Spring、Netty 这些框架也要了解。</p>\n</li>\n<li>\n<p>你写上了 Go，那么至少得把官网上的 Effective Go 给看了。</p>\n</li>\n<li>\n<p>你写上了 Redis，那么除了 Redis 的数据结构，Redis 的性能优化、高可用配置、分布式锁什么的，你多少也要把官网上的那几篇文章读一读。</p>\n</li>\n<li>\n<p>你写上了面向对象，那么怎么着也得把《设计模式》中的 23 个模式了解一下。</p>\n</li>\n<li>\n<p>你写上了分布式架构，那么 CAP 理论、微服务架构、弹力设计、Spring Cloud、Cloud Native 这些架构就要做到心里有数。</p>\n</li>\n<li>\n<p>你写上网络编程，那么 TCP/IP 的三次握手，四次挥手，两端的状态变化你得知道吧，Socket 编程的那几个系统调用，还有 select、poll、epoll 这些异步 IO 多路复用的东西，你得知道。</p>\n</li>\n</ul>\n<p>总之，无论你在简历里写什么技术，这些技术的基础知识你都得学一下。本质上来说，这跟考试一样啊。你想想你是怎样准备期末考试的，是不是得把教科书上所有章节中的关键知识点都过一下？你不见得要记住所有的知识点，但是 80% 以上的关键知识点，你多少得知道吧。</p>\n<h2 id="算法题准备">算法题准备</h2>\n<p>国外的公司一般还会面算法题，他们用算法题来过滤掉那些非计算机专业出身的人。国内的一些公司也一样，尤其是一些校招面试，也有很多算法题。所以，算法是很重要的，是你需要努力学习和准备的。</p>\n<p>LeetCode 是一个不错的地方。如果你能完成其中 50% 的题，那么你基本上可以想面哪里就面哪里了。这里，你要知道，一些面试官也是新手，他们也是从网上找一些算法题来考你。所以，你不用太害怕算法题，都是有套路的。比如：</p>\n<ol>\n<li>\n<p>如果是数据排序方面的题，那基本上是和二分查找有关系的。</p>\n</li>\n<li>\n<p>如果是在一个无序数组上的搜索或者统计，基本上来说需要动用 O ( 1 ) 时间复杂度的 hash 数据结构。</p>\n</li>\n<li>\n<p>在一堆无序的数据中找 top n 的算法，基本上来说，就是使用最大堆或是最小堆的数据结构。</p>\n</li>\n<li>\n<p>如果是穷举答案相关的题 ( 如八皇后、二叉树等 ) ，基本上来说，需要使用深度优先、广度优先或是回溯等递归的思路。</p>\n</li>\n<li>\n<p>动态规划要重点准备一下，这样的题很多，如最大和子数组、买卖股票、背包问题、爬楼梯、改字符……这里有一个 Top 20 的动态规划题的列表 。</p>\n</li>\n<li>\n<p>一些经典的数据结构算法也要看一下，比如，二叉树、链表和数组上的经典算法，LRU 算法，Trie 树，字符串子串匹配，回文等，这些常见的题都是经常会被考到的。</p>\n</li>\n</ol>\n<p>基本上来说，算法题主要是考察应聘者是否是计算机专业出身的，对于基本的数据结构和算法有没有相应的认识。你做得多了，就是能感觉得到其中的套路和方法的。所以，本质来说，还是要多练多做。</p>\n<h2 id="工作项目准备">工作项目准备</h2>\n<p>无论什么公司的面试，都会让你说一个你做过的项目，或是你过去解决过的一个难题。但我很好奇怪，这种必问的题，为什么很多应聘者都没有好好准备一下。</p>\n<p>一般来说，会有下面这样的几个经典的面试问题。</p>\n<ol>\n<li>\n<p>说一个你做过的最自豪的项目，或是最近做过的一个项目。</p>\n</li>\n<li>\n<p>说一个你解决过的最难的技术问题，或是最有技术含量的问题。</p>\n</li>\n<li>\n<p>说一个你最痛苦的项目，或最艰难的项目。</p>\n</li>\n<li>\n<p>说一个犯过的最大的技术错误，或是引发的技术故障。</p>\n</li>\n</ol>\n<p>对于上面这四个问题：第一个问题，主要是想看看你过去工作中做过的最高级的事是什么，还有你的兴趣点和兴奋点是什么；第二和第三个问题，主要是想看看你解决难题的能力，以及面对压力和困难时的心态；第四个问题，主要是想了解一下你面对错误时的态度，还要了解你是否会对错误有所总结和改进。</p>\n<p>这些问题都会伴随着对各种细节的不停追问，因为这样的问题太容易造假了。所以，面试官会不停地追问细节，就像审问一样。因为一个谎言需要用更多的谎言来掩盖，如果没有经过高强度和专业的训练的话，最好不要撒谎。因此对于业余的不是做特工或是间谍的人来说，谎言是经不起追问的。</p>\n<p>怎样准备这样的题，我这里有几个提示。</p>\n<ul>\n<li>\n<p>要有框架。讲故事要学会使用 STAR. Situation - 在什么样的环境和背景下，Task - 你要干什么样的事，Action - 你采取了什么样的行动和努力，Result - 最终得到了什么样的效果。这是整个语言组织的框架，不要冗长啰嗦。</p>\n</li>\n<li>\n<p>要有细节。没有细节的故事听起来就很假，所以，其中要有很多细节。因为是技术方面的，所以，一定要有很多技术细节。</p>\n</li>\n<li>\n<p>要有感情。讲这些故事一定要带感情。要让面试官感受到你的热情、骄傲、坚韧和顽强。一定要是真实的，只有真实的事才会有真实的感情。</p>\n</li>\n<li>\n<p>要有思考。只有细节和故事还不够，还要有自己的思考和得失总结，以及后续的改进。</p>\n</li>\n</ul>\n<p>要做到上述，是不容易的。一般来说，你也是需要训练的。首先，你要形成及时总结的习惯，对自己的日常工作和经历做总结，否则难免会有「书到用时方恨少」的感觉。另外，你还需要训练自己的语言组织能力。最后，你还要有对这些事件的思考，这需要和其他人进行讨论和总结。</p>\n<p>对此，如果你想有一个比较好的面试回答效果，这不是你能临时准备出来的，工夫都是花在平时的。而训练这方面能力的最好方式就是在工作中写文档 ，在工作之余写博客。只有写得多了，写得好了，你这样的能力才能训练出来。</p>',{headings:403,localImagePaths:412,remoteImagePaths:413,frontmatter:414,imagePaths:420},[404,406,408,410],{depth:49,slug:405,text:405},"简历格式",{depth:49,slug:407,text:407},"技术知识准备",{depth:49,slug:409,text:409},"算法题准备",{depth:49,slug:411,text:411},"工作项目准备",[],[],{title:393,published:415,tags:416,categories:417,minutes:419},["Date","2024-08-23T02:46:50.000Z"],[396],[418],"生活",18,[],"java/rsa通信原理",{id:421,data:423,body:427,filePath:428,digest:429,rendered:430},{title:424,published:425,description:34,tags:426,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Rsa 通信原理",["Date","2020-07-24T02:23:14.000Z"],[],"## 原理\r\n\r\n- A 和 B 通信，双方生成各自的公钥和私钥，把各自的公钥给对方。\r\n- A 向 B 发送消息，A 使用 B 的公钥加密消息，发给 B。\r\n- B 收到消息，用 B 的私钥解密消息。\r\n- B 回复消息，用 A 的公钥加密消息，发送给 A。\r\n- A 收到消息，用 A 的私钥解密消息\r\n\r\n```sh\r\ncurl 'https://www.douyin.com/aweme/v1/web/channel/feed/?device_platform=webapp&aid=6383&channel=channel_pc_web&tag_id=&count=10&version_code=160100&version_name=16.1.0&_signature=_02B4Z6wo00f01JqNG5QAAIDBG-N4jKVOoLCajB8AAEZ3aa' \r\n-H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0' \r\n-H 'Accept: application/json, text/plain, */*' \r\n-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' \r\n--compressed -H 'withCredentials: true' \r\n-H 'Connection: keep-alive' \r\n-H 'Referer: https://www.douyin.com/' \r\n-H 'Cookie: ttwid=1%7CBiSfQKa4mBHj8ILfoXh4y0G_4pM1GRNRBOrMieRZr9c%7C1624347048%7Cdd6a2e488596fa1dc7a4de1691f5a58f9e9d8dc1e9c4303ed844235f11196ff9; douyin.com; MONITOR_WEB_ID=222cf879-7019-4458-bcc2-6a45c00364cf; s_v_web_id=verify_kq7qant4_Z8G4Jhqk_708o_4g5m_9Qjt_3HmGI4BX2QjZ; passport_csrf_token_default=2f4a83eea195e8eb919354b1f10e4946; passport_csrf_token=2f4a83eea195e8eb919354b1f10e4946' \r\n-H 'TE: Trailers'\r\n```\r\n```sh\r\ncurl 'https://www.douyin.com/aweme/v1/web/channel/feed/?device_platform=webapp&aid=6383&channel=channel_pc_web&tag_id=&count=10&version_code=160100&version_name=16.1.0&_signature=_02B4Z6wo00f01Nppj2wAAIDBWwfsdtWK5WzaaIvAAFZRd0' \r\n-H 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0' \r\n-H 'Accept: application/json, text/plain, */*' \r\n-H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' \r\n--compressed -H 'withCredentials: true' \r\n-H 'Connection: keep-alive' \r\n-H 'Referer: https://www.douyin.com/' -H 'Cookie: ttwid=1%7CBiSfQKa4mBHj8ILfoXh4y0G_4pM1GRNRBOrMieRZr9c%7C1624347048%7Cdd6a2e488596fa1dc7a4de1691f5a58f9e9d8dc1e9c4303ed844235f11196ff9; douyin.com; MONITOR_WEB_ID=222cf879-7019-4458-bcc2-6a45c00364cf; s_v_web_id=verify_kq7qant4_Z8G4Jhqk_708o_4g5m_9Qjt_3HmGI4BX2QjZ' \r\n-H 'TE: Trailers'\r\n```","src/content/posts/java/rsa通信原理.md","14cd7b35174433aa",{html:431,metadata:432},'<h2 id="原理">原理</h2>\n<ul>\n<li>A 和 B 通信，双方生成各自的公钥和私钥，把各自的公钥给对方。</li>\n<li>A 向 B 发送消息，A 使用 B 的公钥加密消息，发给 B。</li>\n<li>B 收到消息，用 B 的私钥解密消息。</li>\n<li>B 回复消息，用 A 的公钥加密消息，发送给 A。</li>\n<li>A 收到消息，用 A 的私钥解密消息</li>\n</ul>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">curl</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'https://www.douyin.com/aweme/v1/web/channel/feed/?device_platform=webapp&#x26;aid=6383&#x26;channel=channel_pc_web&#x26;tag_id=&#x26;count=10&#x26;version_code=160100&#x26;version_name=16.1.0&#x26;_signature=_02B4Z6wo00f01JqNG5QAAIDBG-N4jKVOoLCajB8AAEZ3aa\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Accept: application/json, text/plain, */*\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">--compressed</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'withCredentials: true\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Connection: keep-alive\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Referer: https://www.douyin.com/\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Cookie: ttwid=1%7CBiSfQKa4mBHj8ILfoXh4y0G_4pM1GRNRBOrMieRZr9c%7C1624347048%7Cdd6a2e488596fa1dc7a4de1691f5a58f9e9d8dc1e9c4303ed844235f11196ff9; douyin.com; MONITOR_WEB_ID=222cf879-7019-4458-bcc2-6a45c00364cf; s_v_web_id=verify_kq7qant4_Z8G4Jhqk_708o_4g5m_9Qjt_3HmGI4BX2QjZ; passport_csrf_token_default=2f4a83eea195e8eb919354b1f10e4946; passport_csrf_token=2f4a83eea195e8eb919354b1f10e4946\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'TE: Trailers\'</span></span></code></pre>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">curl</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'https://www.douyin.com/aweme/v1/web/channel/feed/?device_platform=webapp&#x26;aid=6383&#x26;channel=channel_pc_web&#x26;tag_id=&#x26;count=10&#x26;version_code=160100&#x26;version_name=16.1.0&#x26;_signature=_02B4Z6wo00f01Nppj2wAAIDBWwfsdtWK5WzaaIvAAFZRd0\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Accept: application/json, text/plain, */*\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">--compressed</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'withCredentials: true\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Connection: keep-alive\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Referer: https://www.douyin.com/\'</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'Cookie: ttwid=1%7CBiSfQKa4mBHj8ILfoXh4y0G_4pM1GRNRBOrMieRZr9c%7C1624347048%7Cdd6a2e488596fa1dc7a4de1691f5a58f9e9d8dc1e9c4303ed844235f11196ff9; douyin.com; MONITOR_WEB_ID=222cf879-7019-4458-bcc2-6a45c00364cf; s_v_web_id=verify_kq7qant4_Z8G4Jhqk_708o_4g5m_9Qjt_3HmGI4BX2QjZ\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">-H</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'TE: Trailers\'</span></span></code></pre>',{headings:433,localImagePaths:436,remoteImagePaths:437,frontmatter:438,imagePaths:440},[434],{depth:49,slug:435,text:435},"原理",[],[],{title:424,published:439,toc:40,minutes:25},["Date","2020-07-24T02:23:14.000Z"],[],"java/设计模式对我们的作用",{id:441,data:443,body:448,filePath:449,digest:450,rendered:451},{title:444,published:445,description:34,tags:446,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"设计模式对我们的作用",["Date","2020-01-01T13:59:58.000Z"],[267,447],"设计模式",'"note/geektime/设计模式之美/1.md"',"src/content/posts/java/设计模式对我们的作用.md","edd8a1ff95009e59",{html:452,metadata:453},"<p>“note/geektime/设计模式之美/1.md”</p>",{headings:454,localImagePaths:455,remoteImagePaths:456,frontmatter:457,imagePaths:461},[],[],[],{title:444,published:458,tags:459,categories:460,minutes:25},["Date","2020-01-01T13:59:58.000Z"],[267,447],[267],[],"java/vscode快捷键",{id:462,data:464,body:469,filePath:470,digest:471,rendered:472},{title:465,published:466,description:34,tags:467,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"vscode 快捷键和扩展",["Date","2017-04-03T14:39:39.000Z"],[468],"vscode","## 快捷键\r\n\r\n- 文件资源管理器 Ctrl + Shift + E\r\n- 跨文件搜索 Ctrl + Shift + F\r\n- 源代码管理 Ctrl + Shift + G\r\n- 启动和调试 Ctrl + Shift + D\r\n- 管理扩展 Ctrl + Shift + X\r\n- 查找并运行所有命令 Ctrl + Shift + P\r\n- 跳转单词     Ctrl + ← / Ctrl + →\r\n- 跳转行首 / 行末     Home / End\r\n- 代码块之间移动    Ctrl + Shift + \\\r\n- 跳转首行 / 末行    Ctrl + Home/End\r\n- 选中字符到左边 / 右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\r\n- 删除字符右边 Ctrl + Delete\r\n- 删除字符左边 Ctrl + Backspace\r\n- 删除一行代码 Ctrl + Shift + K\r\n- 另起下一行 Ctrl + Enter\r\n- 另起上一行 Ctrl + Shift + Enter\r\n- 上下移动一行 Alt + ↓ / Alt +  ↑\r\n- 复制当前行移动 Alt + shift + 上下方向键\r\n- 单行注释 Ctrl + /\r\n- 格式化代码 Alt + Shift + F\r\n- 列出最近文件 Ctrl + Tab\r\n- 跳转行 Ctrl + g\r\n- 跳转定义 F12/ Alt + ->\r\n- 跳转后回退 Alt + <-\r\n- 跳转引用 Shift + F12\r\n- 折叠 / 展开括号 Ctrl + Shift + [ / Ctrl + Shift + ]\r\n- 折叠 / 展开所有括号 Ctrl + K , Ctrl + 0 / Ctrl + K , Ctrl + J\r\n- 搜索当前页，由上往下跳转 F3\r\n- 搜索当前页，由上往下跳转  Shift + F3\r\n- 当前页搜索 Ctrl + F\r\n- 全局搜索  Ctrl + Shift + F\r\n- 当前页替换 Ctrl + H\r\n- 全局替换 Ctrl + Shift + H\r\n- 搜索框切换 Tab / Shift + Tab\r\n- 最近打开的文件夹 Ctrl + R\r\n- 跳转符号 Ctrl + Shift + O\r\n- 命令面板 Ctrl + P\r\n- 打开终端 Ctrl + `\r\n- 隐藏左侧 Ctrl + B\r\n- 隐藏面板  Ctrl + J\r\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\r\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\r\n- 切换禅模式 (Toggle Zen Mode)\r\n\r\n## 插件\r\n\r\n- Code Runner\r\n- GitLens — Git supercharged\r\n- Markdown Preview Enhanced\r\n- PHP Intelephense\r\n- PHP Namespace Resolver\r\n- Python","src/content/posts/java/vscode快捷键.md","04e4ca579a6d294e",{html:473,metadata:474},'<h2 id="快捷键">快捷键</h2>\n<ul>\n<li>文件资源管理器 Ctrl + Shift + E</li>\n<li>跨文件搜索 Ctrl + Shift + F</li>\n<li>源代码管理 Ctrl + Shift + G</li>\n<li>启动和调试 Ctrl + Shift + D</li>\n<li>管理扩展 Ctrl + Shift + X</li>\n<li>查找并运行所有命令 Ctrl + Shift + P</li>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首 / 行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行 / 末行    Ctrl + Home/End</li>\n<li>选中字符到左边 / 右边   Ctrl + Shift + &#x3C;- /  Ctrl + Shift + -></li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转定义 F12/ Alt + -></li>\n<li>跳转后回退 Alt + &#x3C;-</li>\n<li>跳转引用 Shift + F12</li>\n<li>折叠 / 展开括号 Ctrl + Shift + [ / Ctrl + Shift + ]</li>\n<li>折叠 / 展开所有括号 Ctrl + K , Ctrl + 0 / Ctrl + K , Ctrl + J</li>\n<li>搜索当前页，由上往下跳转 F3</li>\n<li>搜索当前页，由上往下跳转  Shift + F3</li>\n<li>当前页搜索 Ctrl + F</li>\n<li>全局搜索  Ctrl + Shift + F</li>\n<li>当前页替换 Ctrl + H</li>\n<li>全局替换 Ctrl + Shift + H</li>\n<li>搜索框切换 Tab / Shift + Tab</li>\n<li>最近打开的文件夹 Ctrl + R</li>\n<li>跳转符号 Ctrl + Shift + O</li>\n<li>命令面板 Ctrl + P</li>\n<li>打开终端 Ctrl + `</li>\n<li>隐藏左侧 Ctrl + B</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式 (Toggle Zen Mode)</li>\n</ul>\n<h2 id="插件">插件</h2>\n<ul>\n<li>Code Runner</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>Python</li>\n</ul>',{headings:475,localImagePaths:480,remoteImagePaths:481,frontmatter:482,imagePaths:487},[476,478],{depth:49,slug:477,text:477},"快捷键",{depth:49,slug:479,text:479},"插件",[],[],{title:465,published:483,tags:484,categories:485,minutes:49},["Date","2017-04-03T14:39:39.000Z"],[468],[486],"工具",[],"life/程序员路在何方",{id:488,data:490,body:494,filePath:495,digest:496,rendered:497},{title:491,published:492,description:34,tags:493,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"程序员路在何方",["Date","2023-01-07T07:50:34.000Z"],[396],'## 前言\n\n程序员的未来在哪里？作为一个写了六年代码程序员，我对这个问题有亲身体会，也是我一直思考的问题。\n\n程序员 35 岁后大概有这么几个方向：\n1.  管理方向，CTO/技术总监\n2.  技术方向，架构师\n3.  自由职业/副业\n4.  创业\n5.  得过且过 ( 大部分人 )\n\n### 管理方向\n\n如果我们在一个公司待的比较久，老板对工作能力和工作态度比较认可，就有可能提拔到管理岗位，负责技术团队的管理工作。`title` 可能是 CTO 或技术总监，不论 `title` 是什么，总是做管理方面的工作。\n\n管理工作包括招聘人员，培养团队，规划项目进度 ( 如果没有项目经理岗位 ) ，梳理业务需求 ( 辅助产品经理 ) ，决定技术方案等。\n\n做管理重心不是在技术，而在沟通协作。\n\n> ps:管理岗是否需要写代码？这点不同公司情况不一样，后续将讨论这个问题。\n\n### 技术方向\n\n当我们在技术上持续精进，从网络协议到分布式算法，从前端到后端，从数据库到缓存，一个人能扛起整个公司架构设计，同时你也对公司业务非常熟悉，你就可以往架构方向努力。小公司一般没有专门的架构师岗位，由技术负责人兼任架构工作。\n\n架构要求在技术和业务两个维度都有深刻理解。有业务壁垒的行业甚至业务比技术更重要，比如医疗。国内的互联网公司靠业务赚钱而不是靠技术，程序员的话语权不高。小公司里，老板不会关心你用到的编程是 `PHP/Java`，框架是 `Laravel/SpringBoot`，他关心的是按时甚至提前交付项目给客户，项目稳定没有 Bug，公司收到钱。\n\n> 后续也会专门讨论一个合格的架构师需要具备哪些能力。\n\n### 自由职业/副业\n\n结婚生娃，养家糊口的经济压力推动我们去思考和实践更多收入渠道，这就是副业。如果副业收入赶上甚至超过主业，有可能放弃主页转去做副业 ( 这种情况很少，大部分人做不好副业 ) 。\n我了解和接触的副业有以下几种：\n\n-   接外包单\n这里的外包指小型项目外包，创业公司要做个产品，你用业余时间写代码，做完收钱。看起来很简单，实际上最坑。\n\n找人做外包的老板自己是不懂技术的，一开始可能连他自己也不知道自己想要什么产品，或者给你个竞品要求你照着实现。做着做着你发现需求越来越多，老板想法越来越多，你疲于奔命，一边写代码一边沟通确认需求，远比在公司上班累 ( 是不是很想念产品经理的大脸 ) 。而且，不懂技术的老板可能觉得这个需求很简单，"就是购物下单，照着淘宝京东的来，3000 块，不能再多了"。\n\n-   做个人产品\n对程序员而言，在互联网浪潮中，最大的优势是能独立生产一个产品。代码？那是我你饭的本事。产品经理提需求？那是你天天撕逼的对象。运营推广产品？坐旁边的运营小姐姐每天上班干了啥你还不知道吗。很有可能一个想法就改变世界，下一个乔布斯就是你哦。\n\n-   投资\n在街上大妈都在讨论股市的时代，不懂投资似乎已经落伍了。看着别人在股市大杀特杀，你也心动了，拿着多年的积蓄一把砸进股市。\n\n听小道消息，研究 K 线涨跌，看别人买你也赶紧买，上班第一件事看买的股票涨跌，红了沾沾自喜，「我可真厉害」，绿了捶胸顿足，「应该早点抛」。不割你割谁，你就是鲜嫩的韭菜。\n\n投资是一门学问，跟编程一样要持续学习。\n\n-   知识付费\n\n\n当我们在互联网行业有一定经验和知名度时，可以通过一些方式将知识变现。录制视频课、写技术文章、出书等等。现在知名的知识付费平台有，极客时间，有利于打造个人 IP。\n\n### 创业\n\n做个人产品进一步就是创业，也有可能是和朋友几个人合伙。自己当老板。创业风险更大，不适合普通人。\n\n### 得过且过 ( 大部分人 )\n如果不持续学习，努力提升自我，35 岁危机是无法避免的。35 岁，你靠什么和年轻人竞争呢？拼加班？上有老下有小。拼体力？多年坐在电脑前不运动。\n\n与君共勉。',"src/content/posts/life/程序员路在何方.md","5813d3e63666f4e2",{html:498,metadata:499},'<h2 id="前言">前言</h2>\n<p>程序员的未来在哪里？作为一个写了六年代码程序员，我对这个问题有亲身体会，也是我一直思考的问题。</p>\n<p>程序员 35 岁后大概有这么几个方向：</p>\n<ol>\n<li>管理方向，CTO/技术总监</li>\n<li>技术方向，架构师</li>\n<li>自由职业/副业</li>\n<li>创业</li>\n<li>得过且过 ( 大部分人 )</li>\n</ol>\n<h3 id="管理方向">管理方向</h3>\n<p>如果我们在一个公司待的比较久，老板对工作能力和工作态度比较认可，就有可能提拔到管理岗位，负责技术团队的管理工作。<code>title</code> 可能是 CTO 或技术总监，不论 <code>title</code> 是什么，总是做管理方面的工作。</p>\n<p>管理工作包括招聘人员，培养团队，规划项目进度 ( 如果没有项目经理岗位 ) ，梳理业务需求 ( 辅助产品经理 ) ，决定技术方案等。</p>\n<p>做管理重心不是在技术，而在沟通协作。</p>\n<blockquote>\n<p>ps:管理岗是否需要写代码？这点不同公司情况不一样，后续将讨论这个问题。</p>\n</blockquote>\n<h3 id="技术方向">技术方向</h3>\n<p>当我们在技术上持续精进，从网络协议到分布式算法，从前端到后端，从数据库到缓存，一个人能扛起整个公司架构设计，同时你也对公司业务非常熟悉，你就可以往架构方向努力。小公司一般没有专门的架构师岗位，由技术负责人兼任架构工作。</p>\n<p>架构要求在技术和业务两个维度都有深刻理解。有业务壁垒的行业甚至业务比技术更重要，比如医疗。国内的互联网公司靠业务赚钱而不是靠技术，程序员的话语权不高。小公司里，老板不会关心你用到的编程是 <code>PHP/Java</code>，框架是 <code>Laravel/SpringBoot</code>，他关心的是按时甚至提前交付项目给客户，项目稳定没有 Bug，公司收到钱。</p>\n<blockquote>\n<p>后续也会专门讨论一个合格的架构师需要具备哪些能力。</p>\n</blockquote>\n<h3 id="自由职业副业">自由职业/副业</h3>\n<p>结婚生娃，养家糊口的经济压力推动我们去思考和实践更多收入渠道，这就是副业。如果副业收入赶上甚至超过主业，有可能放弃主页转去做副业 ( 这种情况很少，大部分人做不好副业 ) 。\n我了解和接触的副业有以下几种：</p>\n<ul>\n<li>接外包单\n这里的外包指小型项目外包，创业公司要做个产品，你用业余时间写代码，做完收钱。看起来很简单，实际上最坑。</li>\n</ul>\n<p>找人做外包的老板自己是不懂技术的，一开始可能连他自己也不知道自己想要什么产品，或者给你个竞品要求你照着实现。做着做着你发现需求越来越多，老板想法越来越多，你疲于奔命，一边写代码一边沟通确认需求，远比在公司上班累 ( 是不是很想念产品经理的大脸 ) 。而且，不懂技术的老板可能觉得这个需求很简单，“就是购物下单，照着淘宝京东的来，3000 块，不能再多了”。</p>\n<ul>\n<li>\n<p>做个人产品\n对程序员而言，在互联网浪潮中，最大的优势是能独立生产一个产品。代码？那是我你饭的本事。产品经理提需求？那是你天天撕逼的对象。运营推广产品？坐旁边的运营小姐姐每天上班干了啥你还不知道吗。很有可能一个想法就改变世界，下一个乔布斯就是你哦。</p>\n</li>\n<li>\n<p>投资\n在街上大妈都在讨论股市的时代，不懂投资似乎已经落伍了。看着别人在股市大杀特杀，你也心动了，拿着多年的积蓄一把砸进股市。</p>\n</li>\n</ul>\n<p>听小道消息，研究 K 线涨跌，看别人买你也赶紧买，上班第一件事看买的股票涨跌，红了沾沾自喜，「我可真厉害」，绿了捶胸顿足，「应该早点抛」。不割你割谁，你就是鲜嫩的韭菜。</p>\n<p>投资是一门学问，跟编程一样要持续学习。</p>\n<ul>\n<li>知识付费</li>\n</ul>\n<p>当我们在互联网行业有一定经验和知名度时，可以通过一些方式将知识变现。录制视频课、写技术文章、出书等等。现在知名的知识付费平台有，极客时间，有利于打造个人 IP。</p>\n<h3 id="创业">创业</h3>\n<p>做个人产品进一步就是创业，也有可能是和朋友几个人合伙。自己当老板。创业风险更大，不适合普通人。</p>\n<h3 id="得过且过--大部分人-">得过且过 ( 大部分人 )</h3>\n<p>如果不持续学习，努力提升自我，35 岁危机是无法避免的。35 岁，你靠什么和年轻人竞争呢？拼加班？上有老下有小。拼体力？多年坐在电脑前不运动。</p>\n<p>与君共勉。</p>',{headings:500,localImagePaths:514,remoteImagePaths:515,frontmatter:516,imagePaths:520},[501,502,504,506,509,511],{depth:49,slug:83,text:83},{depth:89,slug:503,text:503},"管理方向",{depth:89,slug:505,text:505},"技术方向",{depth:89,slug:507,text:508},"自由职业副业","自由职业/副业",{depth:89,slug:510,text:510},"创业",{depth:89,slug:512,text:513},"得过且过--大部分人-","得过且过 ( 大部分人 )",[],[],{title:491,published:517,tags:518,categories:519,minutes:316},["Date","2023-01-07T07:50:34.000Z"],[396],[418],[],"guides/theme-guide-zh",{id:521,data:523,body:532,filePath:533,digest:534,rendered:535},{title:524,published:525,description:34,updated:526,tags:527,draft:38,pin:530,toc:40,lang:14,abbrlink:531},"主题上手指南",["Date","2025-01-26T00:00:00.000Z"],["Date","2025-03-12T00:00:00.000Z"],[528,529],"博客主题","指南",99,"theme-guide","Retypeset 是一款基于 [Astro](https://astro.build/) 框架的静态博客主题，中文名为重新编排。本主题以 [活版印字](https://astro-theme-typography.vercel.app/) 为设计灵感，通过建立全新的视觉规范，对所有页面进行重新编排，打造纸质书页般的阅读体验，再现版式之美。所见皆为细节，方寸尽显优雅。\n\n## 主题配置\n\n以下为 Retypeset 的主题配置介绍。通过修改配置文件 [src/config.ts](https://github.com/radishzzz/astro-theme-retypeset/blob/master/src/config.ts) 来自定义你的博客。\n\n### 站点信息\n\n```ts\nsite: {\n  // 站点标题\n  title: 'Retypeset'\n  // 站点副标题\n  subtitle: 'Revive the beauty of typography'\n  // 站点介绍\n  description: 'Retypeset is a static blog theme...'\n  // 使用 src/i18n/ui.ts 中的多语言标题/副标题/站点描述，替换以上静态配置\n  i18nTitle: true // true, false\n  // 作者名称\n  author: 'radishzz'\n  // 站点地址\n  url: 'https://retypeset.radishzz.cc'\n  // 站点图标\n  // 推荐格式: svg, png, ico\n  favicon: '/icon/favicon.svg' // 或 https://example.com/favicon.svg\n}\n```\n\n### 主题配色\n\n```ts\ncolor: {\n  // 默认主题\n  mode: 'light' // light, dark, auto\n  // 亮色模式\n  light: {\n    // 高亮颜色\n    // 用于站点标题、鼠标悬停效果等\n    primary: 'oklch(25% 0.005 298)'\n    // 次要颜色\n    // 用于普通文本\n    secondary: 'oklch(40% 0.005 298)'\n    // 背景色\n    background: 'oklch(96% 0.005 298)'\n  }\n  // 暗色模式\n  dark: {\n    // 高亮颜色\n    // 用于站点标题、鼠标悬停效果等\n    primary: 'oklch(92% 0.005 298)'\n    // 次要颜色\n    // 用于普通文本\n    secondary: 'oklch(77% 0.005 298)'\n    // 背景色\n    background: 'oklch(22% 0.005 298)'\n  }\n}\n```\n\n### 全局设置\n\n```ts\nglobal: {\n  // 默认语言\n  // 站点根路径 ‘/’ 的语言\n  locale: 'zh' // zh, zh-tw, ja, en, es, ru\n  // 更多语言\n  // 生成 ‘/ja/' '/en/’ 等多语言路径\n  // 不要重复填写默认语言，可以为空 []\n  moreLocales: ['zh-tw', 'ja', 'en', 'es', 'ru'] // ['zh', 'zh-tw', 'ja', 'en', 'es', 'ru']\n  // 字体样式\n  fontStyle: 'sans' // sans, serif\n  // 文章日期格式\n  dateFormat: 'YYYY-MM-DD' // YYYY-MM-DD, MM-DD-YYYY, DD-MM-YYYY, MONTH DAY YYYY, DAY MONTH YYYY\n  // 标题与副标题之间的距离\n  titleGap: 2 // 1, 2, 3\n  // 启用 KaTeX 数学公式渲染\n  katex: true // true, false\n}\n```\n\n### 评论服务\n\n```ts\ncomment: {\n  // 开启评论\n  enabled: true // true, false\n  // waline 评论\n  waline: {\n    // 服务器地址\n    serverURL: 'https://retypeset-comment.radishzz.cc'\n    // emoji 表情地址\n    emoji: [\n      'https://unpkg.com/@waline/emojis@1.2.0/tw-emoji'\n      // 'https://unpkg.com/@waline/emojis@1.2.0/bmoji'\n      // 更多表情: https://waline.js.org/en/guide/features/emoji.html\n    ]\n    // gif 搜索\n    search: false // true, false\n    // 图片上传\n    imageUploader: false // true, false\n  }\n}\n```\n\n### 搜索引擎优化\n\n```ts\nseo: {\n  // @twitter ID\n  twitterID: '@radishzz_'\n  // 站点验证\n  verification: {\n    // google 搜索控制台\n    google: 'AUCrz5F1e5qbnmKKDXl2Sf8u6y0kOpEO1wLs6HMMmlM'\n    // bing 网站管理员工具\n    bing: '64708CD514011A7965C84DDE1D169F87'\n    // yandex 网站管理员\n    yandex: ''\n    // baidu 站长工具\n    baidu: ''\n  }\n  // google 网站分析\n  googleAnalyticsID: ''\n  // umami 网站分析\n  umamiAnalyticsID: '520af332-bfb7-4e7c-9386-5f273ee3d697'\n  // follow 验证\n  follow: {\n    // 订阅 ID\n    feedID: ''\n    // 用户 ID\n    userID: ''\n  }\n  // apiflash access key 访问密钥\n  // 自动生成网站截图用于 open graph\n  // 获取访问密钥: https://apiflash.com/\n  apiflashKey: ''\n}\n```\n\n### 自定义页脚\n\n```ts\nfooter: {\n  // 社交链接\n  links: [\n    {\n      name: 'RSS',\n      url: '/rss.xml', // rss.xml, atom.xml\n    },\n    {\n      name: 'GitHub',\n      url: 'https://github.com/radishzzz/astro-theme-retypeset',\n    },\n    {\n      name: 'Twitter',\n      url: 'https://x.com/radishzz_',\n    },\n    // {\n    //   name: 'Email',\n    //   url: 'https://example@gmail.com',\n    // }\n  ]\n  // 建站年份\n  startYear: 2024\n}\n```\n\n### 资源预加载\n\n```ts\npreload: {\n  // 链接预加载策略\n  linkPrefetch: 'viewport' // hover, tap, viewport, load\n  // 评论服务器地址\n  commentURL: 'https://retypeset-comment.radishzz.cc'\n  // 图床地址\n  imageHostURL: 'https://image.radishzz.cc'\n  // 定制 google analytics js\n  // 适用于路由 google analytics js 到自定义域名的用户\n  customGoogleAnalyticsJS: ''\n  // 定制 umami analytics js\n  // 适用于自部署 umami，或路由 umami analytics js 到自定义域名的用户\n  customUmamiAnalyticsJS: 'https://js.radishzz.cc/jquery.min.js'\n}\n```\n\n## 创建新文章\n\n在 `src/content/posts/` 目录中新建以 `.md` 或 `.mdx` 为后缀的文件，并在文件顶部添加 Front Matter 元数据。\n\n### Front Matter\n\n```markdown\n---\n# 必填\ntitle: 主题上手指南\npublished: 2025-01-26\n\n# 可选\ndescription: 自动选取文章前 120 字作为描述。\nupdated: 2025-03-26\ntags: [博客主题, 指南]\n\n# 进阶，可选\ndraft: true/false\npin: 1-99\ntoc: true/false\nlang: zh/zh-tw/ja/en/es/ru\nabbrlink: theme-guide\n---\n```\n\n### 进阶配置介绍\n\n#### draft\n\n是否标记文章为草稿。设为 true 时无法发布文章，仅供本地开发预览。默认为 false。\n\n#### pin\n\n是否置顶文章。数字越大，文章的置顶优先级越高。默认为 0，即不置顶。\n\n#### toc\n\n是否生成目录。默认为 true。\n\n#### lang\n\n指定文章语言。只能指定一种语言，不指定则默认显示在所有语言路径下。\n\n```md\n# src/config.ts\n# locale: 'en'\n# moreLocales: ['es', 'ru']\n\n# lang: ''\nsrc/content/posts/apple.md   -> example.com/posts/apple/\n                             -> example.com/es/posts/apple/\n                             -> example.com/ru/posts/apple/\n# lang: en\nsrc/content/posts/apple.md   -> example.com/posts/apple/\n# lang: es\nsrc/content/posts/apple.md   -> example.com/es/posts/apple/\n# lang: ru\nsrc/content/posts/apple.md   -> example.com/ru/posts/apple/\n```\n\n#### abbrlink\n\n自定义文章 URL。\n\n```md\n# src/config.ts\n# locale: 'en'\n# moreLocales: ['es', 'ru']\n# lang: 'es'\n\n# abbrlink: ''\nsrc/content/posts/apple.md           ->  example.com/es/posts/apple/\nsrc/content/posts/guide/apple.md     ->  example.com/es/posts/guide/apple/\nsrc/content/posts/2025/03/apple.md   ->  example.com/es/posts/2025/03/apple/\n\n# abbrlink: 'banana'\nsrc/content/posts/apple.md           ->  example.com/es/posts/banana/\nsrc/content/posts/guide/apple.md     ->  example.com/es/posts/banana/\nsrc/content/posts/2025/03/apple.md   ->  example.com/es/posts/banana/\n```\n\n### 自动化配置介绍\n\n自动计算文章阅读时间。自动为每篇文章生成 Open Graph 图片。相同 abbrlink 的文章会自动共享 Waline 评论，且不受 lang 配置影响。","src/content/posts/guides/Theme Guide-zh.md","3edf64fb8c52f645",{html:536,metadata:537},'<p>Retypeset 是一款基于 <a href="https://astro.build/" rel="nofollow noopener noreferrer external" target="_blank">Astro</a> 框架的静态博客主题，中文名为重新编排。本主题以 <a href="https://astro-theme-typography.vercel.app/" rel="nofollow noopener noreferrer external" target="_blank">活版印字</a> 为设计灵感，通过建立全新的视觉规范，对所有页面进行重新编排，打造纸质书页般的阅读体验，再现版式之美。所见皆为细节，方寸尽显优雅。</p>\n<h2 id="主题配置">主题配置</h2>\n<p>以下为 Retypeset 的主题配置介绍。通过修改配置文件 <a href="https://github.com/radishzzz/astro-theme-retypeset/blob/master/src/config.ts" rel="nofollow noopener noreferrer external" target="_blank">src/config.ts</a> 来自定义你的博客。</p>\n<h3 id="站点信息">站点信息</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">site</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点标题</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  title</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Retypeset\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点副标题</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  subtitle</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Revive the beauty of typography\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点介绍</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  description</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Retypeset is a static blog theme...\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 使用 src/i18n/ui.ts 中的多语言标题/副标题/站点描述，替换以上静态配置</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  i18nTitle</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // true, false</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 作者名称</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  author</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'radishzz\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点地址</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  url</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://retypeset.radishzz.cc\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点图标</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 推荐格式: svg, png, ico</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  favicon</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/icon/favicon.svg\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // 或 https://example.com/favicon.svg</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="主题配色">主题配色</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">color</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 默认主题</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  mode</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'light\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // light, dark, auto</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 亮色模式</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  light</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 高亮颜色</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 用于站点标题、鼠标悬停效果等</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    primary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(25% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 次要颜色</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 用于普通文本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    secondary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(40% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 背景色</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    background</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(96% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 暗色模式</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  dark</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 高亮颜色</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 用于站点标题、鼠标悬停效果等</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    primary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(92% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 次要颜色</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 用于普通文本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    secondary</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(77% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 背景色</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    background</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'oklch(22% 0.005 298)\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="全局设置">全局设置</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">global</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 默认语言</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点根路径 ‘/’ 的语言</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  locale</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'zh\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // zh, zh-tw, ja, en, es, ru</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 更多语言</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 生成 ‘/ja/\' \'/en/’ 等多语言路径</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 不要重复填写默认语言，可以为空 []</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  moreLocales</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'zh-tw\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'ja\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'en\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'es\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'ru\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#6A737D;--shiki-dark:#6A737D">// [\'zh\', \'zh-tw\', \'ja\', \'en\', \'es\', \'ru\']</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 字体样式</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  fontStyle</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'sans\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // sans, serif</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 文章日期格式</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  dateFormat</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'YYYY-MM-DD\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // YYYY-MM-DD, MM-DD-YYYY, DD-MM-YYYY, MONTH DAY YYYY, DAY MONTH YYYY</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 标题与副标题之间的距离</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  titleGap</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // 1, 2, 3</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 启用 KaTeX 数学公式渲染</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  katex</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // true, false</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="评论服务">评论服务</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">comment</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 开启评论</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  enabled</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // true, false</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // waline 评论</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  waline</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 服务器地址</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    serverURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://retypeset-comment.radishzz.cc\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // emoji 表情地址</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    emoji</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: [</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">      \'https://unpkg.com/@waline/emojis@1.2.0/tw-emoji\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      // \'https://unpkg.com/@waline/emojis@1.2.0/bmoji\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">      // 更多表情: https://waline.js.org/en/guide/features/emoji.html</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // gif 搜索</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    search</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // true, false</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 图片上传</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    imageUploader</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">false</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // true, false</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="搜索引擎优化">搜索引擎优化</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">seo</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // @twitter ID</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  twitterID</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'@radishzz_\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 站点验证</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  verification</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // google 搜索控制台</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    google</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'AUCrz5F1e5qbnmKKDXl2Sf8u6y0kOpEO1wLs6HMMmlM\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // bing 网站管理员工具</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    bing</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'64708CD514011A7965C84DDE1D169F87\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // yandex 网站管理员</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    yandex</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // baidu 站长工具</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    baidu</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // google 网站分析</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  googleAnalyticsID</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // umami 网站分析</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  umamiAnalyticsID</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'520af332-bfb7-4e7c-9386-5f273ee3d697\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // follow 验证</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  follow</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 订阅 ID</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    feedID</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 用户 ID</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    userID</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // apiflash access key 访问密钥</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 自动生成网站截图用于 open graph</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 获取访问密钥: https://apiflash.com/</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  apiflashKey</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="自定义页脚">自定义页脚</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">footer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 社交链接</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  links</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: [</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'RSS\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      url: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/rss.xml\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6A737D;--shiki-dark:#6A737D">// rss.xml, atom.xml</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    },</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'GitHub\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      url: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://github.com/radishzzz/astro-theme-retypeset\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    },</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      name: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Twitter\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      url: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://x.com/radishzz_\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    },</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    //   name: \'Email\',</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    //   url: \'https://example@gmail.com\',</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  ]</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 建站年份</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  startYear</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">2024</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h3 id="资源预加载">资源预加载</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="ts"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">preload</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 链接预加载策略</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  linkPrefetch</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'viewport\'</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // hover, tap, viewport, load</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 评论服务器地址</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  commentURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://retypeset-comment.radishzz.cc\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 图床地址</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  imageHostURL</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://image.radishzz.cc\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 定制 google analytics js</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 适用于路由 google analytics js 到自定义域名的用户</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  customGoogleAnalyticsJS</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'\'</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 定制 umami analytics js</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">  // 适用于自部署 umami，或路由 umami analytics js 到自定义域名的用户</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  customUmamiAnalyticsJS</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'https://js.radishzz.cc/jquery.min.js\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="创建新文章">创建新文章</h2>\n<p>在 <code>src/content/posts/</code> 目录中新建以 <code>.md</code> 或 <code>.mdx</code> 为后缀的文件，并在文件顶部添加 Front Matter 元数据。</p>\n<h3 id="front-matter">Front Matter</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">---</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 必填</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">title</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">主题上手指南</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">published</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">2025-01-26</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 可选</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">description</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">自动选取文章前 120 字作为描述。</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">updated</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">2025-03-26</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">tags</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: [</span><span style="color:#032F62;--shiki-dark:#9ECBFF">博客主题</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">指南</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 进阶，可选</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">draft</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">true/false</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">pin</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">1-99</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">toc</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">true/false</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">lang</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">zh/zh-tw/ja/en/es/ru</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">abbrlink</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">theme-guide</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">---</span></span></code></pre>\n<h3 id="进阶配置介绍">进阶配置介绍</h3>\n<h4 id="draft">draft</h4>\n<p>是否标记文章为草稿。设为 true 时无法发布文章，仅供本地开发预览。默认为 false。</p>\n<h4 id="pin">pin</h4>\n<p>是否置顶文章。数字越大，文章的置顶优先级越高。默认为 0，即不置顶。</p>\n<h4 id="toc">toc</h4>\n<p>是否生成目录。默认为 true。</p>\n<h4 id="lang">lang</h4>\n<p>指定文章语言。只能指定一种语言，不指定则默认显示在所有语言路径下。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="md"><code><span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># src/config.ts</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># locale: \'en\'</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># moreLocales: [\'es\', \'ru\']</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># lang: \'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md   -> example.com/posts/apple/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">                             -> example.com/es/posts/apple/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">                             -> example.com/ru/posts/apple/</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># lang: en</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md   -> example.com/posts/apple/</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># lang: es</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md   -> example.com/es/posts/apple/</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># lang: ru</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md   -> example.com/ru/posts/apple/</span></span></code></pre>\n<h4 id="abbrlink">abbrlink</h4>\n<p>自定义文章 URL。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="md"><code><span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># src/config.ts</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># locale: \'en\'</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># moreLocales: [\'es\', \'ru\']</span></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># lang: \'es\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># abbrlink: \'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md           ->  example.com/es/posts/apple/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/guide/apple.md     ->  example.com/es/posts/guide/apple/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/2025/03/apple.md   ->  example.com/es/posts/2025/03/apple/</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold"># abbrlink: \'banana\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/apple.md           ->  example.com/es/posts/banana/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/guide/apple.md     ->  example.com/es/posts/banana/</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">src/content/posts/2025/03/apple.md   ->  example.com/es/posts/banana/</span></span></code></pre>\n<h3 id="自动化配置介绍">自动化配置介绍</h3>\n<p>自动计算文章阅读时间。自动为每篇文章生成 Open Graph 图片。相同 abbrlink 的文章会自动共享 Waline 评论，且不受 lang 配置影响。</p>',{headings:538,localImagePaths:574,remoteImagePaths:575,frontmatter:576,imagePaths:580},[539,541,543,545,547,549,551,553,555,557,560,562,564,566,568,570,572],{depth:49,slug:540,text:540},"主题配置",{depth:89,slug:542,text:542},"站点信息",{depth:89,slug:544,text:544},"主题配色",{depth:89,slug:546,text:546},"全局设置",{depth:89,slug:548,text:548},"评论服务",{depth:89,slug:550,text:550},"搜索引擎优化",{depth:89,slug:552,text:552},"自定义页脚",{depth:89,slug:554,text:554},"资源预加载",{depth:49,slug:556,text:556},"创建新文章",{depth:89,slug:558,text:559},"front-matter","Front Matter",{depth:89,slug:561,text:561},"进阶配置介绍",{depth:150,slug:563,text:563},"draft",{depth:150,slug:565,text:565},"pin",{depth:150,slug:567,text:567},"toc",{depth:150,slug:569,text:569},"lang",{depth:150,slug:571,text:571},"abbrlink",{depth:89,slug:573,text:573},"自动化配置介绍",[],[],{title:524,published:577,updated:578,tags:579,pin:530,lang:14,abbrlink:531,minutes:316},["Date","2025-01-26T00:00:00.000Z"],["Date","2025-03-12T00:00:00.000Z"],[528,529],[],"node/node新手课0项目介绍",{id:581,data:583,body:588,filePath:589,digest:590,rendered:591},{title:584,published:585,description:34,tags:586,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（0）项目介绍",["Date","2020-01-07T07:57:34.000Z"],[587],"Node","## 简介\r\n\r\n果酱团队历时一年精心打造，理论 + 实战打造前端全栈商业级应用开发课程 -《前端新星计划 - 果酱先生》，学完就能上手开发公司产品。\r\n从前端到全栈，层层突破技术瓶颈，拓宽前端工程师职业边界，带你全栈开发上线产品。\r\n\r\n## 后端干货\r\n\r\n* nodejs 和 nvm 环境搭建\r\n* nodejs 处理 http 请求\r\n* koa2 框架路由和中间件详解\r\n* callback、promise 和 async、await\r\n* mysql+redis 安装和配置\r\n* jwt 和小程序用户注册登录\r\n* redis 缓存\r\n* 日志记录\r\n* 项目分层设计架构\r\n* sql 注入，xss 攻击和产品安全\r\n* nginx 配置\r\n* 产品部署和 pm2 进程管理\r\n\r\n## 授课形式和增值服务\r\n\r\n文章 + 代码 + 课程答疑服务，你将和志同道合的小伙伴一起学习，共同进步。欢迎小伙伴们在留言区进行留言提问，老师会集中时间一一回复解答。课程案例代码完全开放给你，你可以根据所学知识自行修改、优化。\r\n\r\n## 总结\r\n\r\n是不是很心动呢？学完课程后你将胜任公司小程序和 nodejs 开发工作。\r\n\r\n从前端到全栈，开拓技术视野，为职场进阶提供更多可能。\r\n\r\n有问题欢迎到群里和志同道合的小伙伴一起交流，下节课我们将正式开始实战课程，搭建 node 环境。继续加油吧，Let's go！","src/content/posts/node/node新手课（0）项目介绍.md","db4274a5f867d491",{html:592,metadata:593},'<h2 id="简介">简介</h2>\n<p>果酱团队历时一年精心打造，理论 + 实战打造前端全栈商业级应用开发课程 -《前端新星计划 - 果酱先生》，学完就能上手开发公司产品。\r\n从前端到全栈，层层突破技术瓶颈，拓宽前端工程师职业边界，带你全栈开发上线产品。</p>\n<h2 id="后端干货">后端干货</h2>\n<ul>\n<li>nodejs 和 nvm 环境搭建</li>\n<li>nodejs 处理 http 请求</li>\n<li>koa2 框架路由和中间件详解</li>\n<li>callback、promise 和 async、await</li>\n<li>mysql+redis 安装和配置</li>\n<li>jwt 和小程序用户注册登录</li>\n<li>redis 缓存</li>\n<li>日志记录</li>\n<li>项目分层设计架构</li>\n<li>sql 注入，xss 攻击和产品安全</li>\n<li>nginx 配置</li>\n<li>产品部署和 pm2 进程管理</li>\n</ul>\n<h2 id="授课形式和增值服务">授课形式和增值服务</h2>\n<p>文章 + 代码 + 课程答疑服务，你将和志同道合的小伙伴一起学习，共同进步。欢迎小伙伴们在留言区进行留言提问，老师会集中时间一一回复解答。课程案例代码完全开放给你，你可以根据所学知识自行修改、优化。</p>\n<h2 id="总结">总结</h2>\n<p>是不是很心动呢？学完课程后你将胜任公司小程序和 nodejs 开发工作。</p>\n<p>从前端到全栈，开拓技术视野，为职场进阶提供更多可能。</p>\n<p>有问题欢迎到群里和志同道合的小伙伴一起交流，下节课我们将正式开始实战课程，搭建 node 环境。继续加油吧，Let’s go！</p>',{headings:594,localImagePaths:602,remoteImagePaths:603,frontmatter:604,imagePaths:608},[595,597,599,601],{depth:49,slug:596,text:596},"简介",{depth:49,slug:598,text:598},"后端干货",{depth:49,slug:600,text:600},"授课形式和增值服务",{depth:49,slug:117,text:117},[],[],{title:584,published:605,tags:606,categories:607,minutes:49},["Date","2020-01-07T07:57:34.000Z"],[587],[587],[],"php/swoole异步task",{id:609,data:611,body:616,filePath:617,digest:618,rendered:619},{title:612,published:613,description:34,tags:614,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"swoole 异步 task",["Date","2017-03-29T14:41:35.000Z"],[615],"PHP","## 记录\r\n\r\n今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。\r\n\r\n服务端\r\n\r\n```PHP\r\nclass Server\r\n{\r\n    private $server;\r\n    public function __construct()\r\n    {\r\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\r\n        $this->server->set([\r\n            'worker_num'      => 2,\r\n            'daemonize'       => true,\r\n            'task_worker_num' => 2  # task 进程数\r\n        ]);\r\n        $this->server->on('Start', [$this, 'onStart']);\r\n        $this->server->on('Connect', [$this, 'onConnect']);\r\n        $this->server->on('Receive', [$this, 'onReceive']);\r\n        $this->server->on('Task', [$this, 'onTask']);\r\n        $this->server->on('Finish', [$this, 'onFinish']);\r\n        $this->server->on('Close', [$this, 'onClose']);\r\n        $this->server->start();\r\n    }\r\n    // 主进程启动时回调函数\r\n    public function onStart(\\swoole_server $server)\r\n    {\r\n        echo \"开始、n\";\r\n    }\r\n    // 建立连接时回调函数\r\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\r\n    {\r\n        echo \"连接上了、n\";\r\n    }\r\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\r\n    {\r\n        // 投递异步任务\r\n        $task_id = $server->task($data);\r\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\r\n        // 将受到的客户端消息再返回给客户端\r\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\r\n    }\r\n\r\n    // 异步任务处理函数\r\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\r\n    {\r\n        echo \" \\n {$task_id}, start task \\n\";\r\n        sleep(5);\r\n        echo \" \\n {$task_id}, end task  \\n\";\r\n        $server->finish('t');\r\n    }\r\n\r\n    public function onFinish(\\swoole_server $server, $task_id, $data)\r\n    {\r\n        echo \"finish\";\r\n    }\r\n    // 关闭连时回调函数\r\n    public function onClose(\\swoole_server $server, $fd, $from_id)\r\n    {\r\n        echo \"close \\n\";\r\n    }\r\n}\r\n$server = new Server();\r\n\r\n```\r\n\r\n客户端\r\n\r\n```PHP\r\nclass Client\r\n{\r\n\r\n    private $client;\r\n    function __construct()\r\n    {\r\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\r\n    }\r\n    public function send($data)\r\n    {\r\n        if (!$this->client->connect('127.0.0.1', 9501)) {\r\n            die('connect failed.');\r\n        }\r\n        return $this->client->send(json_encode($data));\r\n    }\r\n}\r\n```","src/content/posts/php/swoole异步task.md","9cd40e06fda31329",{html:620,metadata:621},'<h2 id="记录">记录</h2>\n<p>今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>class Server</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span>    private $server;</span></span>\n<span class="line"><span>    public function __construct()</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        $this->server = new \\swoole_server("0.0.0.0", 9501);</span></span>\n<span class="line"><span>        $this->server->set([</span></span>\n<span class="line"><span>            \'worker_num\'      => 2,</span></span>\n<span class="line"><span>            \'daemonize\'       => true,</span></span>\n<span class="line"><span>            \'task_worker_num\' => 2  # task 进程数</span></span>\n<span class="line"><span>        ]);</span></span>\n<span class="line"><span>        $this->server->on(\'Start\', [$this, \'onStart\']);</span></span>\n<span class="line"><span>        $this->server->on(\'Connect\', [$this, \'onConnect\']);</span></span>\n<span class="line"><span>        $this->server->on(\'Receive\', [$this, \'onReceive\']);</span></span>\n<span class="line"><span>        $this->server->on(\'Task\', [$this, \'onTask\']);</span></span>\n<span class="line"><span>        $this->server->on(\'Finish\', [$this, \'onFinish\']);</span></span>\n<span class="line"><span>        $this->server->on(\'Close\', [$this, \'onClose\']);</span></span>\n<span class="line"><span>        $this->server->start();</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 主进程启动时回调函数</span></span>\n<span class="line"><span>    public function onStart(\\swoole_server $server)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        echo "开始、n";</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 建立连接时回调函数</span></span>\n<span class="line"><span>    public function onConnect(\\swoole_server $server, $fd, $from_id)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        echo "连接上了、n";</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        // 投递异步任务</span></span>\n<span class="line"><span>        $task_id = $server->task($data);</span></span>\n<span class="line"><span>        // echo "Dispath AsyncTask: id={$task_id}\\n";</span></span>\n<span class="line"><span>        // 将受到的客户端消息再返回给客户端</span></span>\n<span class="line"><span>        $server->send($fd, "Message form Server: {$data}, task_id: {$task_id}");</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 异步任务处理函数</span></span>\n<span class="line"><span>    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        echo " \\n {$task_id}, start task \\n";</span></span>\n<span class="line"><span>        sleep(5);</span></span>\n<span class="line"><span>        echo " \\n {$task_id}, end task  \\n";</span></span>\n<span class="line"><span>        $server->finish(\'t\');</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public function onFinish(\\swoole_server $server, $task_id, $data)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        echo "finish";</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    // 关闭连时回调函数</span></span>\n<span class="line"><span>    public function onClose(\\swoole_server $server, $fd, $from_id)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        echo "close \\n";</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>$server = new Server();</span></span>\n<span class="line"><span></span></span></code></pre>\n<p>客户端</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>class Client</span></span>\n<span class="line"><span>{</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private $client;</span></span>\n<span class="line"><span>    function __construct()</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    public function send($data)</span></span>\n<span class="line"><span>    {</span></span>\n<span class="line"><span>        if (!$this->client->connect(\'127.0.0.1\', 9501)) {</span></span>\n<span class="line"><span>            die(\'connect failed.\');</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>        return $this->client->send(json_encode($data));</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre>',{headings:622,localImagePaths:625,remoteImagePaths:626,frontmatter:627,imagePaths:631},[623],{depth:49,slug:624,text:624},"记录",[],[],{title:612,published:628,tags:629,categories:630,minutes:49},["Date","2017-03-29T14:41:35.000Z"],[615],[615],[],"node/node开发cms",{id:632,data:634,body:638,filePath:639,digest:640,rendered:641},{title:635,published:636,description:34,tags:637,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 开发 cms",["Date","2020-07-01T07:57:34.000Z"],[587],"## 简介\r\n\r\n\r\n所有的互联网产品都需要 CMS（内容管理系统），也就是我们常说的后台管理系统。它用于展示用户数据和产品信息，以及运营和推广产品。\r\n\r\n曾经，CMS 是世界上最好的编程语言 --PHP 的天下。帝国、织梦、wordpress、phpcms 风靡一时，他们以易上手、部署方便、插件众多扛起了 CMS 的大旗。而近些年，其他语言开发的 CMS 也如雨后春笋般冒出来，为不会 PHP 的开发者提供更多选择。\r\n\r\n今天就给大家介绍一个用 nodejs 开发的 CMS\r\n\r\n## DoraCMS\r\n\r\n开源地址：https://github.com/doramart/DoraCMS\r\n\r\nDoraCMS 是基于 Nodejs+eggjs+mongodb 编写的一套内容管理系统，结构简单，较目前一些开源的 cms，易于拓展，特别适合前端开发工程师做二次开发。\r\n\r\n它设计思想很简单，以简洁为原则，结构清晰，非常容易定制和二次开发，当然在开发过程中也吸取了优秀框架一些可取之处。\r\n\r\n它还支持 docker 部署和源码安装部署。\r\n\r\n### 说明\r\n\r\n技术栈：`` `nodejs 12 + eggjs 2 +  vue-cli + mongodb 4+` ``\r\n\r\n文档： https://www.doracms.com/\r\n\r\nAPI： https://www.html-js.cn/static/apidoc/index.html\r\n\r\n演示地址： https://www.html-js.cn/\r\n\r\n后台登录： https://www.html-js.cn/dr-admin\r\n\r\n测试账号：doracms/123456\r\n\r\n视频教程：https://www.bilibili.com/video/av77251989/\r\n\r\n#### 后台界面\r\n\r\n\r\n常用的 CMS 功能都有，包括系统日志、权限管理、用户管理、角色管理等。我们就不用自己再造一遍轮子，能够节省工作时间，提升工作效率。\r\n\r\n从前端页面到数据接口，前端工程师直接上手完成，开拓了我们的职业边界，提升了竞争力。\r\n\r\n迄今为止，它在 github 已经有了 2500 多个 star，当前最新版本是 2.1.6，作者也一直在更新和维护代码。推荐大家开发 CMS 的时候使用，Let's go !","src/content/posts/node/node开发cms.md","870c0673e83cb19f",{html:642,metadata:643},'<h2 id="简介">简介</h2>\n<p>所有的互联网产品都需要 CMS（内容管理系统），也就是我们常说的后台管理系统。它用于展示用户数据和产品信息，以及运营和推广产品。</p>\n<p>曾经，CMS 是世界上最好的编程语言 —PHP 的天下。帝国、织梦、wordpress、phpcms 风靡一时，他们以易上手、部署方便、插件众多扛起了 CMS 的大旗。而近些年，其他语言开发的 CMS 也如雨后春笋般冒出来，为不会 PHP 的开发者提供更多选择。</p>\n<p>今天就给大家介绍一个用 nodejs 开发的 CMS</p>\n<h2 id="doracms">DoraCMS</h2>\n<p>开源地址：<a href="https://github.com/doramart/DoraCMS" rel="nofollow noopener noreferrer external" target="_blank">https://github.com/doramart/DoraCMS</a></p>\n<p>DoraCMS 是基于 Nodejs+eggjs+mongodb 编写的一套内容管理系统，结构简单，较目前一些开源的 cms，易于拓展，特别适合前端开发工程师做二次开发。</p>\n<p>它设计思想很简单，以简洁为原则，结构清晰，非常容易定制和二次开发，当然在开发过程中也吸取了优秀框架一些可取之处。</p>\n<p>它还支持 docker 部署和源码安装部署。</p>\n<h3 id="说明">说明</h3>\n<p>技术栈：<code>`nodejs 12 + eggjs 2 +  vue-cli + mongodb 4+`</code></p>\n<p>文档： <a href="https://www.doracms.com/" rel="nofollow noopener noreferrer external" target="_blank">https://www.doracms.com/</a></p>\n<p>API： <a href="https://www.html-js.cn/static/apidoc/index.html" rel="nofollow noopener noreferrer external" target="_blank">https://www.html-js.cn/static/apidoc/index.html</a></p>\n<p>演示地址： <a href="https://www.html-js.cn/" rel="nofollow noopener noreferrer external" target="_blank">https://www.html-js.cn/</a></p>\n<p>后台登录： <a href="https://www.html-js.cn/dr-admin" rel="nofollow noopener noreferrer external" target="_blank">https://www.html-js.cn/dr-admin</a></p>\n<p>测试账号：doracms/123456</p>\n<p>视频教程：<a href="https://www.bilibili.com/video/av77251989/" rel="nofollow noopener noreferrer external" target="_blank">https://www.bilibili.com/video/av77251989/</a></p>\n<h4 id="后台界面">后台界面</h4>\n<p>常用的 CMS 功能都有，包括系统日志、权限管理、用户管理、角色管理等。我们就不用自己再造一遍轮子，能够节省工作时间，提升工作效率。</p>\n<p>从前端页面到数据接口，前端工程师直接上手完成，开拓了我们的职业边界，提升了竞争力。</p>\n<p>迄今为止，它在 github 已经有了 2500 多个 star，当前最新版本是 2.1.6，作者也一直在更新和维护代码。推荐大家开发 CMS 的时候使用，Let’s go !</p>',{headings:644,localImagePaths:653,remoteImagePaths:654,frontmatter:655,imagePaths:659},[645,646,649,651],{depth:49,slug:596,text:596},{depth:49,slug:647,text:648},"doracms","DoraCMS",{depth:89,slug:650,text:650},"说明",{depth:150,slug:652,text:652},"后台界面",[],[],{title:635,published:656,tags:657,categories:658,minutes:49},["Date","2020-07-01T07:57:34.000Z"],[587],[587],[],"node/nginx配置socketio负载均衡",{id:660,data:662,body:667,filePath:668,digest:669,rendered:670},{title:663,published:664,description:34,tags:665,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Nginx 配置 Socket.IO 负载均衡",["Date","2019-05-07T07:57:34.000Z"],[587,666],"Nginx","nginx 配置\n\n```shell\nupstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\nsocket.io\n\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```","src/content/posts/node/nginx配置socket.io负载均衡.md","d21565d279970b65",{html:671,metadata:672},'<p>nginx 配置</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="shell"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">upstream</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> nodes</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  ip_hash</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 192.168.1.114:3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 192.168.1.114:3001</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">  server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 192.168.1.114:3002</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    listen</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 80</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    server_name</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ws</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    index</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> index.html</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> index.htm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> index.php</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    location</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> /{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_pass</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://nodes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">#反向代理集群</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_set_header</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> X-Forwarded-For</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $proxy_add_x_forwarded_for;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_set_header</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> Host</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $http_host;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_set_header</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> X-NginX-Proxy</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_redirect</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> off</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_http_version</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1.1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_set_header</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> Upgrade</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $http_upgrade;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">\t\tproxy_set_header</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> Connection</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "upgrade"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>socket.io</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> express </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'express\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> app </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> express</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'path\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> server </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'http\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createServer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(app);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> io </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'socket.io\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)(server);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">var</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> port </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> process.env.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">PORT</span><span style="color:#D73A49;--shiki-dark:#F97583"> ||</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">server.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(port, () </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Server listening at port %d\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, port);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>',{headings:673,localImagePaths:674,remoteImagePaths:675,frontmatter:676,imagePaths:680},[],[],[],{title:663,published:677,tags:678,categories:679,minutes:25},["Date","2019-05-07T07:57:34.000Z"],[587,666],[587],[],"node/node新手课10nodejs操作redis",{id:681,data:683,body:687,filePath:688,digest:689,rendered:690},{title:684,published:685,description:34,tags:686,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（10）nodejs 操作 redis",["Date","2020-03-27T07:57:34.000Z"],[587],"上节课我们讲了 nodejs 操作 mysql，今天我们来讲解 nodejs 操作 redis\r\n\r\n## 安装 redis 包\r\n\r\n在 sir-koa 目录下执行\r\n\r\n```sh\r\n$ npm i ioredis --save\r\n```\r\n\r\n## redis 配置和操作\r\n\r\n> config/redis.js\r\n\r\n```js\r\nconst Config = {\r\n    host: \"127.0.0.1\", // Redis host\r\n    port: 6379, // Redis port\r\n    password: \"\",\r\n    db: 0,\r\n}\r\nexports = {\r\n    Config\r\n}\r\n```\r\n\r\n> model/redis.js\r\n\r\n```js\r\nconst ioRedis = require('ioredis');\r\nconst { Config } = require('../../config/redis') //redis 配置\r\nclass Redis {\r\n    constructor() {\r\n        this.redis = new ioRedis(Config);//创建 redis 连接\r\n    }\r\n    async get(key) {\r\n        const data = await this.redis.get(key);\r\n        return JSON.parse(data);\r\n    }\r\n    async set(key, value) {\r\n        await this.redis.set(\r\n            key,\r\n            JSON.stringify(value)\r\n        );\r\n    }\r\n    async destroy(key) {\r\n        return await this.redis.del(key);\r\n    }\r\n}\r\n\r\nmodule.exports = Redis;\r\n\r\n```\r\n\r\n现在我们可以在项目中使用 redis 做数据缓存了。当然只是针对简单的字符串操作，你也可以拓展，加入对其他数据结构的操作方法\r\n\r\n## 总结\r\n\r\nnodejs 操作 redis 就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解微信小程序登录，继续加油吧，Let's go！","src/content/posts/node/node新手课（10）nodejs操作redis.md","bbce735f169fc0d6",{html:691,metadata:692},'<p>上节课我们讲了 nodejs 操作 mysql，今天我们来讲解 nodejs 操作 redis</p>\n<h2 id="安装-redis-包">安装 redis 包</h2>\n<p>在 sir-koa 目录下执行</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> i</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ioredis</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --save</span></span></code></pre>\n<h2 id="redis-配置和操作">redis 配置和操作</h2>\n<blockquote>\n<p>config/redis.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Config</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    host: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"127.0.0.1"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6A737D;--shiki-dark:#6A737D">// Redis host</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    port: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">6379</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#6A737D;--shiki-dark:#6A737D">// Redis port</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    password: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    db: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Config</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/redis.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> ioRedis</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'ioredis\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF">Config</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../../config/redis\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6A737D;--shiki-dark:#6A737D">//redis 配置</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Redis</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    constructor</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.redis </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ioRedis</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Config);</span><span style="color:#6A737D;--shiki-dark:#6A737D">//创建 redis 连接</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    async</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> data</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.redis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(data);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    async</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">value</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        await</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.redis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            key,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(value)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        );</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    async</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> destroy</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">key</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> this</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.redis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">del</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(key);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Redis;</span></span>\n<span class="line"></span></code></pre>\n<p>现在我们可以在项目中使用 redis 做数据缓存了。当然只是针对简单的字符串操作，你也可以拓展，加入对其他数据结构的操作方法</p>\n<h2 id="总结">总结</h2>\n<p>nodejs 操作 redis 就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解微信小程序登录，继续加油吧，Let’s go！</p>',{headings:693,localImagePaths:701,remoteImagePaths:702,frontmatter:703,imagePaths:707},[694,697,700],{depth:49,slug:695,text:696},"安装-redis-包","安装 redis 包",{depth:49,slug:698,text:699},"redis-配置和操作","redis 配置和操作",{depth:49,slug:117,text:117},[],[],{title:684,published:704,tags:705,categories:706,minutes:25},["Date","2020-03-27T07:57:34.000Z"],[587],[587],[],"node/node新手课11微信小程序登录",{id:708,data:710,body:714,filePath:715,digest:716,rendered:717},{title:711,published:712,description:34,tags:713,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（11）微信小程序登录",["Date","2020-04-07T07:57:34.000Z"],[587],'上节课我们讲了 nodejs 操作 redis，今天我们来讲解微信小程序登录。\r\n\r\n## 代码\r\n\r\n微信服务端接口文档地址\r\n\r\nhttps://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html\r\n\r\n> 简而言之，小程序前端调用 wx.login 获取 code, 传给服务端。服务端携带 code 和 appid，secret 发给微信服务器，获取到用户 openid 和 sessionkey。\r\n\r\n新增小程序的配置文件\r\n\r\n> routes/user.js\r\n\r\n```js\r\nrouter.post(\'/wechatlogin\',function (ctx, next) {\r\n  return userApi.wechatLogin(ctx)\r\n})\r\n```\r\n\r\n> config/miniapp.js\r\n\r\n```js\r\nconst appid = \'\'\r\nconst secret = \'\'\r\n\r\nmodule.exports={\r\n    appid,secret\r\n}\r\n```\r\n\r\napi/user.js 文件，里面写用户 api 的相关方法。model/usermodel.js 文件，里面写用户模型相关方法。\r\n\r\n> api/user.js\r\n\r\n```js\r\nconst miniappConfig = require(\'../../config/miniapp\')\r\nconst koa2Req = require(\'koa2-request\')\r\nconst response = require(\'../core/response\')\r\nconst userModel = require(\'../model/usermodel\')\r\nconst request = require(\'koa2-request\')\r\nconst { md5 } = require(\'../util/cryp\')\r\nconst Redis = require(\'../model/redis\')\r\nconst redis = new Redis()\r\nconst resp = new response()\r\n\r\nconst wechatLogin = async (ctx) => {\r\n\r\n    const code = ctx.request.body.code\r\n    const body = await wxUser(code)\r\n\r\n    if (body.errcode > 0) {\r\n        ctx.body = resp.fail(10001, body.errmsg)\r\n        return\r\n    }\r\n    let userId = await userModel.getUserByOpenid(body.openid)\r\n    if(userId == 0){\r\n        userId = await userModel.createUser(body.openid)\r\n    }\r\n    const token = md5(body.openid)\r\n    redis.set(token,{ "openid": body.openid,"userId":userId })\r\n    ctx.body = resp.setData({ "token": token })\r\n    return\r\n}\r\nconst wxUser = async (code) => {\r\n    const appid = miniappConfig.appid\r\n    const secret = miniappConfig.secret\r\n    const loginUrl = "https://api.weixin.qq.com/sns/jscode2session?appid=" + appid + "&secret=" + secret + "&js_code=" + code + "&grant_type=authorization_code"\r\n    const wxresult = await koa2Req(loginUrl).catch((err) => {\r\n        console.log("err", err);\r\n    });\r\n    return JSON.parse(wxresult.body)\r\n}\r\n```\r\n\r\n> model/usermodel.js\r\n\r\n```js\r\nconst mysql = require("./mysql")\r\n\r\nconst getUserByOpenid = async(openid)=>{\r\n    let sql = "select id from user where openid=?"\r\n    return await mysql.exec(sql,[openid])\r\n}\r\nconst createUser= async(openid)=>{\r\n    let sql = "insert into `user` (openid)values(?) "\r\n    const insertData = await mysql.exec(sql,[openid])\r\n    return insertData.insertId\r\n}\r\nmodule.exports = {\r\n    getUserByOpenid,createUser\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPOST http://localhost:3000/user/wechatlogin\r\n\r\n{\r\n    "code":""\r\n}\r\n```\r\n\r\ntoken 是客户端调用用户相关接口需要携带的凭据，服务端通过 token 识别用户身份信息，相当于 session。\r\n\r\n## 总结\r\n\r\n微信小程序登录就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解手机号登录，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（11）微信小程序登录.md","b5e50165974fea3e",{html:718,metadata:719},'<p>上节课我们讲了 nodejs 操作 redis，今天我们来讲解微信小程序登录。</p>\n<h2 id="代码">代码</h2>\n<p>微信服务端接口文档地址</p>\n<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html" rel="nofollow noopener noreferrer external" target="_blank">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html</a></p>\n<blockquote>\n<p>简而言之，小程序前端调用 wx.login 获取 code, 传给服务端。服务端携带 code 和 appid，secret 发给微信服务器，获取到用户 openid 和 sessionkey。</p>\n</blockquote>\n<p>新增小程序的配置文件</p>\n<blockquote>\n<p>routes/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/wechatlogin\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">wechatLogin</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>config/miniapp.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> appid</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'\'</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> secret</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'\'</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    appid,secret</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>api/user.js 文件，里面写用户 api 的相关方法。model/usermodel.js 文件，里面写用户模型相关方法。</p>\n<blockquote>\n<p>api/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> miniappConfig</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../../config/miniapp\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> koa2Req</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'koa2-request\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> response</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../core/response\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userModel</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../model/usermodel\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> request</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'koa2-request\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF">md5</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../util/cryp\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Redis</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../model/redis\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> redis</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Redis</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> resp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> wechatLogin</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> code</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.body.code</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> body</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> wxUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(code)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (body.errcode </span><span style="color:#D73A49;--shiki-dark:#F97583">></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fail</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">10001</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, body.errmsg)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userId </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getUserByOpenid</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(body.openid)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(userId </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        userId </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(body.openid)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> token</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> md5</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(body.openid)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    redis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">set</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(token,{ </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"openid"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: body.openid,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"userId"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:userId })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="color:#24292E;--shiki-dark:#E1E4E8">({ </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"token"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: token })</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> wxUser</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">code</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> appid</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> miniappConfig.appid</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> secret</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> miniappConfig.secret</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> loginUrl</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "https://api.weixin.qq.com/sns/jscode2session?appid="</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> appid </span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "&#x26;secret="</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> secret </span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "&#x26;js_code="</span><span style="color:#D73A49;--shiki-dark:#F97583"> +</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> code </span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "&#x26;grant_type=authorization_code"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> wxresult</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> koa2Req</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(loginUrl).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">catch</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"err"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, err);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    });</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(wxresult.body)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/usermodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"./mysql"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getUserByOpenid</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">openid</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "select id from user where openid=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[openid])</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> createUser</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">openid</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "insert into `user` (openid)values(?) "</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> insertData</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[openid])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> insertData.insertId</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    getUserByOpenid,createUser</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/user/wechatlogin</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "code"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">""</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>token 是客户端调用用户相关接口需要携带的凭据，服务端通过 token 识别用户身份信息，相当于 session。</p>\n<h2 id="总结">总结</h2>\n<p>微信小程序登录就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解手机号登录，继续加油吧，Let’s go！</p>',{headings:720,localImagePaths:726,remoteImagePaths:727,frontmatter:728,imagePaths:732},[721,723,725],{depth:49,slug:722,text:722},"代码",{depth:49,slug:724,text:724},"运行",{depth:49,slug:117,text:117},[],[],{title:711,published:729,tags:730,categories:731,minutes:49},["Date","2020-04-07T07:57:34.000Z"],[587],[587],[],"node/node新手课12手机登录",{id:733,data:735,body:739,filePath:740,digest:741,rendered:742},{title:736,published:737,description:34,tags:738,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（12）手机登录",["Date","2020-04-22T07:57:34.000Z"],[587],"上节课我们讲了微信小程序登录，今天我们来讲绑定手机号。\r\n\r\n## 需求\r\n\r\n用户微信登录后绑定自己的手机号。\r\n\r\n## 功能流程\r\n\r\n通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，把前端传来的手机号更新到记录中。\r\n\r\n## 中间件\r\n\r\nsir-koa 目录下新建 middleware 目录，存放项目的中间件。\r\n\r\n> middleware/auth.js\r\n\r\n```js\r\nconst response = require('../app/core/response')\r\nconst Redis = require('../app/model/redis')\r\nconst redis = new Redis()\r\nconst resp = new response()\r\nmodule.exports = async (ctx, next) => {\r\n     let token = ctx.request.headers[\"token\"];\r\n    // 解码\r\n    let user = await redis.get(token)\r\n    if (!token || !user) {\r\n        //过期\r\n        ctx.body = resp.fail(10001, \"请重新登录\")\r\n        return\r\n    }\r\n\r\n    ctx.state.userId = user.userId\r\n    // 未过期\r\n    await next();\r\n}\r\n```\r\n\r\n> middleware/jsonHeader.js\r\n\r\n```js\r\nmodule.exports = async (ctx, next) => {\r\n    ctx.response.type = 'application/json';\r\n    await next();\r\n  }\r\n```\r\n\r\n绑定中间件。\r\n\r\n> app.js\r\n\r\n```js\r\nconst jsonHeader = require('./middleware/jsonHeader')\r\napp.use(jsonHeader);\r\n// routes\r\n```\r\n\r\n> routes/user.js\r\n\r\n```js\r\nconst auth = require('../middleware/auth')\r\n// 手机号登录\r\nrouter.post('/login', auth,function (ctx, next) {\r\n  return userApi.login(ctx)\r\n})\r\n```\r\n\r\n## 手机号登录\r\n\r\n客户端传手机号给到服务端，服务端更新用户信息。\r\n\r\n> model/usermodel.js\r\n\r\n```js\r\nconst updateUser = async(userId,phone)=>{\r\n    let sql = \"update `user` set phone=? where id=?\"\r\n    return await mysql.exec(sql,[phone,userId])\r\n}\r\n```\r\n\r\n> api/user.js\r\n\r\n```js\r\nconst login = async(ctx) => {\r\n    const phone = ctx.request.body.phone\r\n    const userId = ctx.state.userId\r\n    await userModel.updateUser(userId,phone)\r\n    ctx.body = resp.succeed()\r\n    return\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPOST http://localhost:3000/user/login\r\n\r\n{\r\n    \"phone\":\"\"\r\n}\r\n```\r\n\r\n\r\n## 总结\r\n\r\n绑定手机号就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解用户信息展示接口，继续加油吧，Let's go！","src/content/posts/node/node新手课（12）手机登录.md","a2f47043aee2b30d",{html:743,metadata:744},'<p>上节课我们讲了微信小程序登录，今天我们来讲绑定手机号。</p>\n<h2 id="需求">需求</h2>\n<p>用户微信登录后绑定自己的手机号。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，把前端传来的手机号更新到记录中。</p>\n<h2 id="中间件">中间件</h2>\n<p>sir-koa 目录下新建 middleware 目录，存放项目的中间件。</p>\n<blockquote>\n<p>middleware/auth.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> response</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../app/core/response\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Redis</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../app/model/redis\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> redis</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Redis</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> resp</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">     let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> token </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.headers[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"token"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 解码</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> redis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(token)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">token </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#D73A49;--shiki-dark:#F97583"> !</span><span style="color:#24292E;--shiki-dark:#E1E4E8">user) {</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        //过期</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fail</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">10001</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"请重新登录"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.state.userId </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> user.userId</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 未过期</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>middleware/jsonHeader.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.response.type </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'application/json\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  }</span></span></code></pre>\n<p>绑定中间件。</p>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> jsonHeader</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'./middleware/jsonHeader\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(jsonHeader);</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// routes</span></span></code></pre>\n<blockquote>\n<p>routes/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> auth</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../middleware/auth\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 手机号登录</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/login\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, auth,</span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">login</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<h2 id="手机号登录">手机号登录</h2>\n<p>客户端传手机号给到服务端，服务端更新用户信息。</p>\n<blockquote>\n<p>model/usermodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> updateUser</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">phone</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "update `user` set phone=? where id=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[phone,userId])</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>api/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> login</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> phone</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.body.phone</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userId</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.state.userId</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">updateUser</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(userId,phone)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/user/login</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "phone"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">""</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>绑定手机号就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解用户信息展示接口，继续加油吧，Let’s go！</p>',{headings:745,localImagePaths:756,remoteImagePaths:757,frontmatter:758,imagePaths:762},[746,748,750,752,754,755],{depth:49,slug:747,text:747},"需求",{depth:49,slug:749,text:749},"功能流程",{depth:49,slug:751,text:751},"中间件",{depth:49,slug:753,text:753},"手机号登录",{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:736,published:759,tags:760,categories:761,minutes:49},["Date","2020-04-22T07:57:34.000Z"],[587],[587],[],"guides/markdown-style-guide-zh",{id:763,data:765,body:771,filePath:772,digest:773,rendered:774},{title:766,published:767,description:34,updated:768,tags:769,draft:38,pin:25,toc:38,lang:14,abbrlink:770},"Markdown 样式指南",["Date","2025-03-08T00:00:00.000Z"],["Date","2025-03-23T00:00:00.000Z"],[529],"markdown-style-guide",'以下是一些基本的 Markdown 语法示例，及其在 Retypeset 主题中的样式效果。\n\n## 标题\n\n在文本前添加井号 `#` 与空格，即可创建标题。井号数量对应标题等级。\n\n### 语法\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n```\n\n### 效果\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n## 段落\n\n使用空行分隔文本，即可创建段落。\n\n### 语法\n\n```\n孔乙己一到店，所有喝酒的人便都看着他笑，有的叫道：“孔乙己，你脸上又添上新伤疤了！”他不回答，对柜里说：“温两碗酒，要一碟茴香豆。”便排出九文大钱。他们又故意的高声嚷道：“你一定又偷了人家的东西了！”孔乙己睁大眼睛说：“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了何家的书，吊着打。”孔乙己便涨红了脸，额上的青筋条条绽出，争辩道：“窃书不能算偷……窃书！……读书人的事，能算偷么？”接连便是难懂的话，什么“君子固穷”，什么“者乎”之类，引得众人都哄笑起来：店内外充满了快活的空气。\n\n听人家背地里谈论，孔乙己原来也读过书，但终于没有进学，又不会营生；于是愈过愈穷，弄到将要讨饭了。\n```\n\n### 效果\n\n孔乙己一到店，所有喝酒的人便都看着他笑，有的叫道：“孔乙己，你脸上又添上新伤疤了！”他不回答，对柜里说：“温两碗酒，要一碟茴香豆。”便排出九文大钱。他们又故意的高声嚷道：“你一定又偷了人家的东西了！”孔乙己睁大眼睛说：“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了何家的书，吊着打。”孔乙己便涨红了脸，额上的青筋条条绽出，争辩道：“窃书不能算偷……窃书！……读书人的事，能算偷么？”接连便是难懂的话，什么“君子固穷”，什么“者乎”之类，引得众人都哄笑起来：店内外充满了快活的空气。\n\n听人家背地里谈论，孔乙己原来也读过书，但终于没有进学，又不会营生；于是愈过愈穷，弄到将要讨饭了。\n\n## 图片\n\n使用感叹号 `!` 方括号 `[]` 与圆括号 `()`，即可添加图片。这些符号都是英文半角符号，而非中文全角符号。\n\n### 语法\n\n```markdown\n![图片描述](./full/or/relative/path/of/image)\n```\n\n### 效果\n\n![图片描述](/image-placeholder)\n\n## 块引用\n\n在段落前添加 `>` 符号和空格，即可创建块引用。在段落间的空行添加 `>` 符号，即可包含多个段落。若需标注引用来源，可使用 `<cite>`  或 `<footer>` 标签添加文献来源，同时可通过 `[^1]` 或 `[^note]` 格式插入脚注。\n\n### 多个段落\n\n#### 语法\n\n```markdown\n> 天地不仁，以万物为刍狗。\n>\n> **提示**：引用块内可使用 _Markdown 语法_。\n```\n\n#### 效果\n\n> 天地不仁，以万物为刍狗。\n>\n> **提示**：引用块内可使用 _Markdown 语法_。\n\n### 标注引用来源\n\n#### 语法\n\n```markdown\n> 在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。\n>\n> —— <cite>《秋夜》[^1]</cite>\n\n[^1]: [《秋夜》](https://zh.wikisource.org/wiki/%E7%A7%8B%E5%A4%9C_(%E9%AD%AF%E8%BF%85)) 是鲁迅散文诗集《野草》中的第一首散文诗，创作于1924年。\n```\n\n#### 效果\n\n> 在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。\n>\n> —— <cite>《秋夜》[^1]</cite>\n\n[^1]: [《秋夜》](https://zh.wikisource.org/wiki/%E7%A7%8B%E5%A4%9C_(%E9%AD%AF%E8%BF%85)) 是鲁迅散文诗集《野草》中的第一首散文诗，创作于1924年。\n\n## 表格\n\n使用三个或多个连字符 `---` 分隔标题，并使用管道符 `|` 分隔每列，即可创建表格。\n\n### 语法\n\n```markdown\n| 斜体   | 粗体     | 代码   |\n| ----- | ------- | ------ |\n| _斜体_ | **粗体** | `代码` |\n| _斜体_ | **粗体** | `代码` |\n```\n\n### 效果\n\n| 斜体   | 粗体     | 代码   |\n| ----- | -------- | ----- |\n| _斜体_ | **粗体** | `代码` |\n| _斜体_ | **粗体** | `代码` |\n\n## 代码块\n\n在代码的顶部与底部添加三个反引号 ```` ``` ````，即可创建代码块。在顶部的反引号后标注语言类型，例如 html、javascript、css、markdown 等，即可实现语法高亮。\n\n### 语法\n\n````markdown\n```html\n<!doctype html>\n<html lang="zh-CN">\n  <head>\n    <meta charset="utf-8" />\n    <title>HTML5 示例文档</title>\n  </head>\n  <body>\n    <p>测试</p>\n  </body>\n</html>\n```\n````\n\n### 效果\n\n```html\n<!doctype html>\n<html lang="zh-CN">\n  <head>\n    <meta charset="utf-8" />\n    <title>HTML5 示例文档</title>\n  </head>\n  <body>\n    <p>测试</p>\n  </body>\n</html>\n```\n\n## 列表\n\n### 有序列表\n\n#### 语法\n\n```markdown\n1. 第一项\n2. 第二项\n3. 第三项\n```\n\n#### 效果\n\n1. 第一项\n2. 第二项\n3. 第三项\n\n### 无序列表\n\n#### 语法\n\n```markdown\n- 列表项\n- 图表项\n- 更多项\n```\n\n#### 效果\n\n- 列表项\n- 图表项\n- 更多项\n\n### 嵌套列表\n\n#### 语法\n\n```markdown\n- 水果\n  - 苹果\n  - 橙子\n  - 香蕉\n- 蔬菜\n  - 青菜\n  - 萝卜\n```\n\n#### 效果\n\n- 水果\n  - 苹果\n  - 橙子\n  - 香蕉\n- 蔬菜\n  - 青菜\n  - 萝卜\n\n## 其他元素\n\n包括 `<sup>` 上标，`<sub>` 下标，`<abbr>` 缩写，`<del>` 删除线，`<u>` 波浪线，`<kbd>` 键盘输入，`<mark>` 高亮。\n\n### 语法\n\n```markdown\nH<sub>2</sub>O\n\nX<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>\n\n<abbr title="Graphics Interchange Format">GIF</abbr> 是一种位图图像格式。\n\n书籍是人类进步的<del>楼梯</del>阶梯。\n\n优秀的作者总是会仔细检查<u title="拼">拚</u>写错误。\n\n按下 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Delete</kbd> 以结束会话。\n\n大多数<mark>蝾螈</mark>昼伏夜出，以昆虫、蠕虫等小生物为食。\n```\n\n### 效果\n\nH<sub>2</sub>O\n\nX<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>\n\n<abbr title="Graphics Interchange Format">GIF</abbr> 是一种位图图像格式。\n\n书籍是人类进步的<del>楼梯</del>阶梯。\n\n优秀的作家总是会仔细检查<u title="拼写">拚写</u>问题。\n\n按下 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Delete</kbd> 以结束会话。\n\n大多数<mark>蝾螈</mark>昼伏夜出，以昆虫、蠕虫等小生物为食。\n\n\x3c!-- <details>\n  <summary>\n    我有钥匙却无门，有空间却无房间。你能进入却无法离开。我是什么？\n  </summary>\n  键盘。\n</details>\n\n<figure>\n  <img src="https://image.radishzz.cc/picsmaller/03.webp">\n  <figcaption text-center="">Node 模块检查器 - 概览</figcaption>\n</figure> --\x3e',"src/content/posts/guides/Markdown Style Guide-zh.md","587ee29c3d184b34",{html:775,metadata:776},'<p>以下是一些基本的 Markdown 语法示例，及其在 Retypeset 主题中的样式效果。</p>\n<h2 id="标题">标题</h2>\n<p>在文本前添加井号 <code>#</code> 与空格，即可创建标题。井号数量对应标题等级。</p>\n<h3 id="语法">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span># 一级标题</span></span>\n<span class="line"><span>## 二级标题</span></span>\n<span class="line"><span>### 三级标题</span></span>\n<span class="line"><span>#### 四级标题</span></span>\n<span class="line"><span>##### 五级标题</span></span>\n<span class="line"><span>###### 六级标题</span></span></code></pre>\n<h3 id="效果">效果</h3>\n<h1 id="一级标题">一级标题</h1>\n<h2 id="二级标题">二级标题</h2>\n<h3 id="三级标题">三级标题</h3>\n<h4 id="四级标题">四级标题</h4>\n<h5 id="五级标题">五级标题</h5>\n<h6 id="六级标题">六级标题</h6>\n<h2 id="段落">段落</h2>\n<p>使用空行分隔文本，即可创建段落。</p>\n<h3 id="语法-1">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>孔乙己一到店，所有喝酒的人便都看着他笑，有的叫道：“孔乙己，你脸上又添上新伤疤了！”他不回答，对柜里说：“温两碗酒，要一碟茴香豆。”便排出九文大钱。他们又故意的高声嚷道：“你一定又偷了人家的东西了！”孔乙己睁大眼睛说：“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了何家的书，吊着打。”孔乙己便涨红了脸，额上的青筋条条绽出，争辩道：“窃书不能算偷……窃书！……读书人的事，能算偷么？”接连便是难懂的话，什么“君子固穷”，什么“者乎”之类，引得众人都哄笑起来：店内外充满了快活的空气。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>听人家背地里谈论，孔乙己原来也读过书，但终于没有进学，又不会营生；于是愈过愈穷，弄到将要讨饭了。</span></span></code></pre>\n<h3 id="效果-1">效果</h3>\n<p>孔乙己一到店，所有喝酒的人便都看着他笑，有的叫道：“孔乙己，你脸上又添上新伤疤了！”他不回答，对柜里说：“温两碗酒，要一碟茴香豆。”便排出九文大钱。他们又故意的高声嚷道：“你一定又偷了人家的东西了！”孔乙己睁大眼睛说：“你怎么这样凭空污人清白……”“什么清白？我前天亲眼见你偷了何家的书，吊着打。”孔乙己便涨红了脸，额上的青筋条条绽出，争辩道：“窃书不能算偷……窃书！……读书人的事，能算偷么？”接连便是难懂的话，什么“君子固穷”，什么“者乎”之类，引得众人都哄笑起来：店内外充满了快活的空气。</p>\n<p>听人家背地里谈论，孔乙己原来也读过书，但终于没有进学，又不会营生；于是愈过愈穷，弄到将要讨饭了。</p>\n<h2 id="图片">图片</h2>\n<p>使用感叹号 <code>!</code> 方括号 <code>[]</code> 与圆括号 <code>()</code>，即可添加图片。这些符号都是英文半角符号，而非中文全角符号。</p>\n<h3 id="语法-2">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">![</span><span style="color:#032F62;text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline">图片描述</span><span style="color:#24292E;--shiki-dark:#E1E4E8">](</span><span style="color:#24292E;text-decoration:underline;--shiki-dark:#E1E4E8;--shiki-dark-text-decoration:underline">./full/or/relative/path/of/image</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<h3 id="效果-2">效果</h3>\n<p><img src="/image-placeholder" alt="图片描述"></p>\n<h2 id="块引用">块引用</h2>\n<p>在段落前添加 <code>></code> 符号和空格，即可创建块引用。在段落间的空行添加 <code>></code> 符号，即可包含多个段落。若需标注引用来源，可使用 <code>&#x3C;cite></code>  或 <code>&#x3C;footer></code> 标签添加文献来源，同时可通过 <code>[^1]</code> 或 <code>[^note]</code> 格式插入脚注。</p>\n<h3 id="多个段落">多个段落</h3>\n<h4 id="语法-3">语法</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">> 天地不仁，以万物为刍狗。</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">></span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">> </span><span style="color:#24292E;font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold">**提示**</span><span style="color:#22863A;--shiki-dark:#85E89D">：引用块内可使用 </span><span style="color:#24292E;font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic">_Markdown 语法_</span><span style="color:#22863A;--shiki-dark:#85E89D">。</span></span></code></pre>\n<h4 id="效果-3">效果</h4>\n<blockquote>\n<p>天地不仁，以万物为刍狗。</p>\n<p><strong>提示</strong>：引用块内可使用 <em>Markdown 语法</em>。</p>\n</blockquote>\n<h3 id="标注引用来源">标注引用来源</h3>\n<h4 id="语法-4">语法</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">> 在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。</span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">></span></span>\n<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">> —— &#x3C;cite>《秋夜》[</span><span style="color:#032F62;text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline">^1</span><span style="color:#22863A;--shiki-dark:#85E89D">]&#x3C;/cite></span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[</span><span style="color:#032F62;text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline">^1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]: [</span><span style="color:#032F62;text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline">《秋夜》</span><span style="color:#24292E;--shiki-dark:#E1E4E8">](</span><span style="color:#24292E;text-decoration:underline;--shiki-dark:#E1E4E8;--shiki-dark-text-decoration:underline">https://zh.wikisource.org/wiki/%E7%A7%8B%E5%A4%9C_(%E9%AD%AF%E8%BF%85)</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) 是鲁迅散文诗集《野草》中的第一首散文诗，创作于1924年。</span></span></code></pre>\n<h4 id="效果-4">效果</h4>\n<blockquote>\n<p>在我的后园，可以看见墙外有两株树，一株是枣树，还有一株也是枣树。</p>\n<p>—— <cite>《秋夜》<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup></cite></p>\n</blockquote>\n<h2 id="表格">表格</h2>\n<p>使用三个或多个连字符 <code>---</code> 分隔标题，并使用管道符 <code>|</code> 分隔每列，即可创建表格。</p>\n<h3 id="语法-5">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">| 斜体   | 粗体     | 代码   |</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">| ----- | ------- | ------ |</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">| </span><span style="color:#24292E;font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic">_斜体_</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> | </span><span style="color:#24292E;font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold">**粗体**</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> | </span><span style="color:#005CC5;--shiki-dark:#79B8FF">`代码`</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> |</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">| </span><span style="color:#24292E;font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic">_斜体_</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> | </span><span style="color:#24292E;font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold">**粗体**</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> | </span><span style="color:#005CC5;--shiki-dark:#79B8FF">`代码`</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> |</span></span></code></pre>\n<h3 id="效果-5">效果</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>斜体</th><th>粗体</th><th>代码</th></tr></thead><tbody><tr><td><em>斜体</em></td><td><strong>粗体</strong></td><td><code>代码</code></td></tr><tr><td><em>斜体</em></td><td><strong>粗体</strong></td><td><code>代码</code></td></tr></tbody></table>\n<h2 id="代码块">代码块</h2>\n<p>在代码的顶部与底部添加三个反引号 <code>```</code>，即可创建代码块。在顶部的反引号后标注语言类型，例如 html、javascript、css、markdown 等，即可实现语法高亮。</p>\n<h3 id="语法-6">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">```html</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;!doctype html></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;html lang="zh-CN"></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;head></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;meta charset="utf-8" /></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;title>HTML5 示例文档&#x3C;/title></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/head></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;body></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;p>测试&#x3C;/p></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/body></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;/html></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">```</span></span></code></pre>\n<h3 id="效果-6">效果</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="html"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;!</span><span style="color:#22863A;--shiki-dark:#85E89D">doctype</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> html</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">html</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> lang</span><span style="color:#24292E;--shiki-dark:#E1E4E8">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"zh-CN"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">head</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">meta</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> charset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"utf-8"</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> /></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">title</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>HTML5 示例文档&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">title</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">head</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">body</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    &#x3C;</span><span style="color:#22863A;--shiki-dark:#85E89D">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8">>测试&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">p</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  &#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">body</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;/</span><span style="color:#22863A;--shiki-dark:#85E89D">html</span><span style="color:#24292E;--shiki-dark:#E1E4E8">></span></span></code></pre>\n<h2 id="列表">列表</h2>\n<h3 id="有序列表">有序列表</h3>\n<h4 id="语法-7">语法</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">1.</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 第一项</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">2.</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 第二项</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">3.</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 第三项</span></span></code></pre>\n<h4 id="效果-7">效果</h4>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n<h3 id="无序列表">无序列表</h3>\n<h4 id="语法-8">语法</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 列表项</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 图表项</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 更多项</span></span></code></pre>\n<h4 id="效果-8">效果</h4>\n<ul>\n<li>列表项</li>\n<li>图表项</li>\n<li>更多项</li>\n</ul>\n<h3 id="嵌套列表">嵌套列表</h3>\n<h4 id="语法-9">语法</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 水果</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">  -</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 苹果</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">  -</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 橙子</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">  -</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 香蕉</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 蔬菜</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">  -</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 青菜</span></span>\n<span class="line"><span style="color:#E36209;--shiki-dark:#FFAB70">  -</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> 萝卜</span></span></code></pre>\n<h4 id="效果-9">效果</h4>\n<ul>\n<li>水果\n<ul>\n<li>苹果</li>\n<li>橙子</li>\n<li>香蕉</li>\n</ul>\n</li>\n<li>蔬菜\n<ul>\n<li>青菜</li>\n<li>萝卜</li>\n</ul>\n</li>\n</ul>\n<h2 id="其他元素">其他元素</h2>\n<p>包括 <code>&#x3C;sup></code> 上标，<code>&#x3C;sub></code> 下标，<code>&#x3C;abbr></code> 缩写，<code>&#x3C;del></code> 删除线，<code>&#x3C;u></code> 波浪线，<code>&#x3C;kbd></code> 键盘输入，<code>&#x3C;mark></code> 高亮。</p>\n<h3 id="语法-10">语法</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="markdown"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">H&#x3C;sub>2&#x3C;/sub>O</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">X&#x3C;sup>n&#x3C;/sup> + Y&#x3C;sup>n&#x3C;/sup> = Z&#x3C;sup>n&#x3C;/sup></span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">&#x3C;abbr title="Graphics Interchange Format">GIF&#x3C;/abbr> 是一种位图图像格式。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">书籍是人类进步的&#x3C;del>楼梯&#x3C;/del>阶梯。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">优秀的作者总是会仔细检查&#x3C;u title="拼">拚&#x3C;/u>写错误。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">按下 &#x3C;kbd>Ctrl&#x3C;/kbd> + &#x3C;kbd>Alt&#x3C;/kbd> + &#x3C;kbd>Delete&#x3C;/kbd> 以结束会话。</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">大多数&#x3C;mark>蝾螈&#x3C;/mark>昼伏夜出，以昆虫、蠕虫等小生物为食。</span></span></code></pre>\n<h3 id="效果-10">效果</h3>\n<p>H<sub>2</sub>O</p>\n<p>X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup></p>\n<p><abbr title="Graphics Interchange Format">GIF</abbr> 是一种位图图像格式。</p>\n<p>书籍是人类进步的<del>楼梯</del>阶梯。</p>\n<p>优秀的作家总是会仔细检查<u title="拼写">拚写</u>问题。</p>\n<p>按下 <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>Delete</kbd> 以结束会话。</p>\n<p>大多数<mark>蝾螈</mark>昼伏夜出，以昆虫、蠕虫等小生物为食。</p>\n\x3c!-- <details>\n  <summary>\n    我有钥匙却无门，有空间却无房间。你能进入却无法离开。我是什么？\n  </summary>\n  键盘。\n</details>\n\n<figure>\n  <img src="https://image.radishzz.cc/picsmaller/03.webp">\n  <figcaption text-center="">Node 模块检查器 - 概览</figcaption>\n</figure> --\x3e\n<section data-footnotes="" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>\n<ol>\n<li id="user-content-fn-1">\n<p><a href="https://zh.wikisource.org/wiki/%E7%A7%8B%E5%A4%9C_(%E9%AD%AF%E8%BF%85)" rel="nofollow noopener noreferrer external" target="_blank">《秋夜》</a> 是鲁迅散文诗集《野草》中的第一首散文诗，创作于1924年。 <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>\n</li>\n</ol>\n</section>',{headings:777,localImagePaths:863,remoteImagePaths:864,frontmatter:865,imagePaths:869},[778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860],{depth:49,slug:779,text:779},"标题",{depth:89,slug:781,text:781},"语法",{depth:89,slug:783,text:783},"效果",{depth:25,slug:785,text:785},"一级标题",{depth:49,slug:787,text:787},"二级标题",{depth:89,slug:789,text:789},"三级标题",{depth:150,slug:791,text:791},"四级标题",{depth:124,slug:793,text:793},"五级标题",{depth:316,slug:795,text:795},"六级标题",{depth:49,slug:797,text:797},"段落",{depth:89,slug:799,text:781},"语法-1",{depth:89,slug:801,text:783},"效果-1",{depth:49,slug:803,text:803},"图片",{depth:89,slug:805,text:781},"语法-2",{depth:89,slug:807,text:783},"效果-2",{depth:49,slug:809,text:809},"块引用",{depth:89,slug:811,text:811},"多个段落",{depth:150,slug:813,text:781},"语法-3",{depth:150,slug:815,text:783},"效果-3",{depth:89,slug:817,text:817},"标注引用来源",{depth:150,slug:819,text:781},"语法-4",{depth:150,slug:821,text:783},"效果-4",{depth:49,slug:823,text:823},"表格",{depth:89,slug:825,text:781},"语法-5",{depth:89,slug:827,text:783},"效果-5",{depth:49,slug:829,text:829},"代码块",{depth:89,slug:831,text:781},"语法-6",{depth:89,slug:833,text:783},"效果-6",{depth:49,slug:835,text:835},"列表",{depth:89,slug:837,text:837},"有序列表",{depth:150,slug:839,text:781},"语法-7",{depth:150,slug:841,text:783},"效果-7",{depth:89,slug:843,text:843},"无序列表",{depth:150,slug:845,text:781},"语法-8",{depth:150,slug:847,text:783},"效果-8",{depth:89,slug:849,text:849},"嵌套列表",{depth:150,slug:851,text:781},"语法-9",{depth:150,slug:853,text:783},"效果-9",{depth:49,slug:855,text:855},"其他元素",{depth:89,slug:857,text:781},"语法-10",{depth:89,slug:859,text:783},"效果-10",{depth:49,slug:861,text:862},"footnote-label","Footnotes",[],[],{title:766,published:866,updated:867,tags:868,pin:25,toc:38,lang:14,abbrlink:770,minutes:274},["Date","2025-03-08T00:00:00.000Z"],["Date","2025-03-23T00:00:00.000Z"],[529],[],"node/node新手课13用户信息",{id:870,data:872,body:876,filePath:877,digest:878,rendered:879},{title:873,published:874,description:34,tags:875,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（13）用户信息",["Date","2020-05-01T07:57:34.000Z"],[587],'上节课我们讲了手机号登录，今天我们来讲展示用户信息接口。\r\n\r\n## 需求\r\n\r\n用户查看自己的信息，如头像，昵称，手机号等。\r\n\r\n## 功能流程\r\n\r\n通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，返回前端用户的昵称和手机号。\r\n\r\n## 代码\r\n\r\n> routes/user.js\r\n\r\n```js\r\nrouter.get(\'/me\', auth,function (ctx, next) {\r\n  return userApi.me(ctx)\r\n})\r\n```\r\n\r\n> api/user.js\r\n\r\n```js\r\nconst me = async(ctx) => {\r\n    const userId = ctx.state.userId\r\n    const user = await userModel.getUserById(userId)\r\n    ctx.body = resp.setData(user)\r\n    return\r\n}\r\n```\r\n\r\n> model/usermodel.js\r\n\r\n```js\r\nconst getUserById = async(id)=>{\r\n    let sql = "select nickname,phone from user where id=?"\r\n    let user = await mysql.queryOne(sql,[id])\r\n    return user ? user : []\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nGET http://localhost:3000/user/me\r\n\r\n```\r\n\r\n响应数据\r\n\r\n```json\r\n{\r\n    "message":"OK",\r\n    "data":{\r\n        "nickname":"昵称","phone":"13012341236"\r\n    }\r\n}\r\n```\r\n\r\n## 总结\r\n\r\n用户信息展示接口就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解修改用户信息，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（13）用户信息.md","26f5a8c9eb597199",{html:880,metadata:881},'<p>上节课我们讲了手机号登录，今天我们来讲展示用户信息接口。</p>\n<h2 id="需求">需求</h2>\n<p>用户查看自己的信息，如头像，昵称，手机号等。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，返回前端用户的昵称和手机号。</p>\n<h2 id="代码">代码</h2>\n<blockquote>\n<p>routes/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/me\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, auth,</span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">me</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> me</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userId</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.state.userId</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> user</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getUserById</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(userId)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(user)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/usermodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getUserById</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">id</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "select nickname,phone from user where id=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">queryOne</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[id])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> user </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> []</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">GET</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/user/me</span></span>\n<span class="line"></span></code></pre>\n<p>响应数据</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="json"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "message"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"OK"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "data"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:{</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        "nickname"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"昵称"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">"phone"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"13012341236"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>用户信息展示接口就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解修改用户信息，继续加油吧，Let’s go！</p>',{headings:882,localImagePaths:888,remoteImagePaths:889,frontmatter:890,imagePaths:894},[883,884,885,886,887],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:873,published:891,tags:892,categories:893,minutes:25},["Date","2020-05-01T07:57:34.000Z"],[587],[587],[],"php/php运行模式",{id:895,data:897,body:901,filePath:902,digest:903,rendered:904},{title:898,published:899,description:34,tags:900,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"PHP 运行模式",["Date","2016-03-29T14:52:24.000Z"],[615],'## 运行模式\r\n\r\nphp 分为五大运行模式\r\n\r\n* cgi（通用网关接口 Common Gateway Interface)\r\n* fast-cgi(cgi 升级版本）\r\n* cli（命令行模式 Command Line Interface)\r\n* isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）\r\n* apache2handler（将 php 作为 apache 的模块）\r\n* 其他 (continuity, embed, litespeed, milter 等）\r\n\r\n本地查看运行模式的方法\r\n\r\n``` php\r\nphpinfo()\r\nphp -r "echo php_sapi_name()"\r\n```\r\n\r\n选择运行模式前提\r\n\r\n* 了解运行模式优缺点和应用场景\r\n* 根据业务本身结合上一条\r\n\r\n## CLI 模式\r\n\r\n* Command Line Interface 的简称，支持 windows 和 Linux 平台\r\n* 直接在命令行运行，不需要 http server, 例如 php test.php\r\n* 应用场景\r\n    - 定时任务\r\n    - 开发桌面应用使用 PHP-CLI 和 GTK 包\r\n\r\n## CGI 模式\r\n\r\n* Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台\r\n* 执行过程\r\n    - http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行\r\n    - 生成一个 php-cgi 进程，并执行 php 程序\r\n    - 执行结果返回给 http 服务器\r\n* 应用场景\r\n    - 提供 http 服务\r\n* 优缺点\r\n    - 跨平台，几乎能在任何操作系统实现\r\n    - web 和 server 是独立的，结构清晰，可控性强\r\n    - 性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）\r\n    - 逐渐少见\r\n\r\n## FastCGI 模式\r\n\r\n* 快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求\r\n* 执行过程\r\n    - web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)\r\n    - FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接\r\n    - 当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi\r\n    - FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了\r\n* 应用场景\r\n    - 提供 http 服务\r\n* 优缺点\r\n    - 跨平台，几乎能在任何操作系统实现\r\n    - web 和 server 是独立的，结构清晰，可控性强\r\n    - 支持大并发\r\n    - 多进程，消耗较多内存\r\n\r\n## 模块模式\r\n\r\n* 模块模式指把 PHP 作为 web 服务器的一个模块运行\r\n* IIS 的 ISAPI 和 Apache 的 apache2handler\r\n\r\napache2handler\r\n\r\n* apache 监听一个用户请求 index.php\r\n* apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP\r\n* 在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook\r\n* php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。\r\n* php 执行完成后数据通过。so 或 dll 返回给 apache\r\n* apache 将数据返回到客户端\r\n* 应用场景\r\n    - 提供 http 服务\r\n* 优缺点\r\n    - 安装配置方便，不需要安装代码解析程序\r\n    - 支持多线程，占用资源少\r\n    - 支持大并发\r\n\r\n## 欢迎扫描下方二维码，[个人博客](https://www.phpst.cn)，持续关注：\r\n\r\n\r\n\r\n互联网工程师（id:phpstcn），我们一起学习，一起进步',"src/content/posts/php/PHP运行模式.md","cf58e4edc829d5ea",{html:905,metadata:906},'<h2 id="运行模式">运行模式</h2>\n<p>php 分为五大运行模式</p>\n<ul>\n<li>cgi（通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi 升级版本）</li>\n<li>cli（命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）</li>\n<li>apache2handler（将 php 作为 apache 的模块）</li>\n<li>其他 (continuity, embed, litespeed, milter 等）</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">phpinfo</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">php</span><span style="color:#D73A49;--shiki-dark:#F97583"> -</span><span style="color:#005CC5;--shiki-dark:#79B8FF">r</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "echo php_sapi_name()"</span></span></code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h2 id="cli-模式">CLI 模式</h2>\n<ul>\n<li>Command Line Interface 的简称，支持 windows 和 Linux 平台</li>\n<li>直接在命令行运行，不需要 http server, 例如 php test.php</li>\n<li>应用场景\n<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用 PHP-CLI 和 GTK 包</li>\n</ul>\n</li>\n</ul>\n<h2 id="cgi-模式">CGI 模式</h2>\n<ul>\n<li>Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台</li>\n<li>执行过程\n<ul>\n<li>http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行</li>\n<li>生成一个 php-cgi 进程，并执行 php 程序</li>\n<li>执行结果返回给 http 服务器</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点\n<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h2 id="fastcgi-模式">FastCGI 模式</h2>\n<ul>\n<li>快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程\n<ul>\n<li>web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)</li>\n<li>FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接</li>\n<li>当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点\n<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h2 id="模块模式">模块模式</h2>\n<ul>\n<li>模块模式指把 PHP 作为 web 服务器的一个模块运行</li>\n<li>IIS 的 ISAPI 和 Apache 的 apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache 监听一个用户请求 index.php</li>\n<li>apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP</li>\n<li>在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook</li>\n<li>php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。</li>\n<li>php 执行完成后数据通过。so 或 dll 返回给 apache</li>\n<li>apache 将数据返回到客户端</li>\n<li>应用场景\n<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点\n<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h2 id="欢迎扫描下方二维码个人博客持续关注">欢迎扫描下方二维码，<a href="https://www.phpst.cn" rel="nofollow noopener noreferrer external" target="_blank">个人博客</a>，持续关注：</h2>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>',{headings:907,localImagePaths:924,remoteImagePaths:925,frontmatter:926,imagePaths:930},[908,910,913,916,919,921],{depth:49,slug:909,text:909},"运行模式",{depth:49,slug:911,text:912},"cli-模式","CLI 模式",{depth:49,slug:914,text:915},"cgi-模式","CGI 模式",{depth:49,slug:917,text:918},"fastcgi-模式","FastCGI 模式",{depth:49,slug:920,text:920},"模块模式",{depth:49,slug:922,text:923},"欢迎扫描下方二维码个人博客持续关注","欢迎扫描下方二维码，个人博客，持续关注：",[],[],{title:898,published:927,tags:928,categories:929,top:39,minutes:124},["Date","2016-03-29T14:52:24.000Z"],[615],[615],[],"php/php和go通过jsonrpc通信",{id:931,data:933,body:937,filePath:938,digest:939,rendered:940},{title:934,published:935,description:34,tags:936,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"PHP 和 Go 通过 jsonrpc 通信",["Date","2019-08-01T16:19:27.000Z"],[615,132],'## 说明\r\n\r\nPHP 和 GO 通过 jsonrpc 通信\r\n\r\n## 代码\r\n\r\n``` go\r\npackage main\r\n\r\nimport (\r\n\t"errors"\r\n\t"fmt"\r\n\t"log"\r\n\t"net"\r\n\t"net/rpc"\r\n\t"net/rpc/jsonrpc"\r\n\t"os"\r\n)\r\n\r\n// 算数运算结构体\r\ntype Arith struct {\r\n}\r\n\r\n// 算数运算请求结构体\r\ntype ArithRequest struct {\r\n\tA int\r\n\tB int\r\n}\r\n\r\n// 算数运算响应结构体\r\ntype ArithResponse struct {\r\n\tPro int // 乘积\r\n\tQuo int // 商\r\n\tRem int // 余数\r\n}\r\n\r\n// 乘法运算方法\r\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\r\n\tres.Pro = req.A * req.B\r\n\treturn nil\r\n}\r\n\r\n// 除法运算方法\r\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\r\n\tif req.B == 0 {\r\n\t\treturn errors.New("divide by zero")\r\n\t}\r\n\tres.Quo = req.A / req.B\r\n\tres.Rem = req.A % req.B\r\n\treturn nil\r\n}\r\n\r\nfunc main() {\r\n\trpc.Register(new(Arith)) // 注册rpc服务\r\n\tlis, err := net.Listen("tcp", "127.0.0.1:8096")\r\n\tif err != nil {\r\n\t\tlog.Fatalln("fatal error: ", err)\r\n\t}\r\n\tfmt.Fprintf(os.Stdout, "%s", "wait connection")\r\n\tfor {\r\n\t\tconn, err := lis.Accept() // 接收客户端连接请求\r\n\t\tif err != nil {\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tgo func(conn net.Conn) { // 并发处理客户端请求\r\n\t\t\tfmt.Fprintf(os.Stdout, "%s", "\\n new client in coming\\n")\r\n\t\t\tjsonrpc.ServeConn(conn)\r\n\t\t}(conn)\r\n\t}\r\n}\r\n\r\n```\r\n\r\n``` php\r\nclass JsonRPC {\r\n\r\n    private $conn;\r\n\r\n    function __construct($host, $port) {\r\n        $this->conn = fsockopen($host, $port, $errno, $errstr, 3);\r\n        if (!$this->conn) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public function Call($method, $params) {\r\n        if (!$this->conn) {\r\n            return false;\r\n        }\r\n        $err = fwrite($this->conn, json_encode(array(\r\n                \'method\' => $method,\r\n                \'params\' => array($params),\r\n                \'id\'     => 0,\r\n            ))."\\n");\r\n        if ($err === false) {\r\n            return false;\r\n        }\r\n        stream_set_timeout($this->conn, 0, 3000);\r\n        $line = fgets($this->conn);\r\n        if ($line === false) {\r\n            return NULL;\r\n        }\r\n        return json_decode($line,true);\r\n    }\r\n}\r\n\r\n$client = new JsonRPC("127.0.0.1", 8096);\r\n$args = array(\'A\'=>9, \'B\'=>2);\r\n$r = $client->Call("Arith.Multiply", $args);\r\nprintf("%d * %d = %d\\n", $args[\'A\'], $args[\'B\'], $r[\'result\'][\'Pro\']);\r\n$r = $client->Call("Arith.Divide", $args);\r\nprintf("%d / %d, Quo is %d, Rem is %d\\n", $args[\'A\'], $args[\'B\'], $r[\'result\'][\'Quo\'], $r[\'result\'][\'Rem\']);\r\n```',"src/content/posts/php/PHP和Go通过jsonrpc通信.md","49655dd0c949771c",{html:941,metadata:942},'<h2 id="说明">说明</h2>\n<p>PHP 和 GO 通过 jsonrpc 通信</p>\n<h2 id="代码">代码</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">package</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">errors</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fmt</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">net</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">net/rpc</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">net/rpc/jsonrpc</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">\t"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">os</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 算数运算结构体</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Arith</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 算数运算请求结构体</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ArithRequest</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tA </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tB </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 算数运算响应结构体</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">type</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ArithResponse</span><span style="color:#D73A49;--shiki-dark:#F97583"> struct</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tPro </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // 乘积</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tQuo </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // 商</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tRem </span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6A737D;--shiki-dark:#6A737D"> // 余数</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 乘法运算方法</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">this </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Arith</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Multiply</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">req</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ArithRequest</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">res</span><span style="color:#D73A49;--shiki-dark:#F97583"> *</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ArithResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tres.Pro </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.A </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.B</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 除法运算方法</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">this </span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Arith</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6F42C1;--shiki-dark:#B392F0">Divide</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">req</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> ArithRequest</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">res</span><span style="color:#D73A49;--shiki-dark:#F97583"> *</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ArithResponse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.B </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\treturn</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> errors.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">New</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"divide by zero"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tres.Quo </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.A </span><span style="color:#D73A49;--shiki-dark:#F97583">/</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.B</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tres.Rem </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.A </span><span style="color:#D73A49;--shiki-dark:#F97583">%</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> req.B</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\treturn</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\trpc.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Register</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">new</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Arith</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 注册rpc服务</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tlis, err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> net.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"tcp"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"127.0.0.1:8096"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\tlog.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Fatalln</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"fatal error: "</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, err)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\tfmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Fprintf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(os.Stdout, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">%s</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"wait connection"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\tfor</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\tconn, err </span><span style="color:#D73A49;--shiki-dark:#F97583">:=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> lis.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Accept</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 接收客户端连接请求</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\tif</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> err </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nil</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\t\tcontinue</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\t}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">\t\tgo</span><span style="color:#D73A49;--shiki-dark:#F97583"> func</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">conn</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> net</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Conn</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) { </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 并发处理客户端请求</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\t\tfmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Fprintf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(os.Stdout, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">%s</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> new client in coming</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\t\tjsonrpc.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">ServeConn</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(conn)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t\t}(conn)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> JsonRPC</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    private</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $conn;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    function</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> __construct</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($host, $port) {</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        $this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fsockopen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($host, $port, $errno, $errstr, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Call</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($method, $params) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $err </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fwrite</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">json_encode</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">array</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">                \'method\'</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $method,</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">                \'params\'</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($params),</span></span>\n<span class="line"><span style="color:#032F62;--shiki-dark:#9ECBFF">                \'id\'</span><span style="color:#D73A49;--shiki-dark:#F97583">     =></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            ))</span><span style="color:#D73A49;--shiki-dark:#F97583">.</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ($err </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        stream_set_timeout</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        $line </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fgets</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">$this</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#24292E;--shiki-dark:#E1E4E8">conn);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ($line </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> NULL</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> json_decode</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($line,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$client </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> JsonRPC</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"127.0.0.1"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">8096</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$args </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> array</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'A\'</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#005CC5;--shiki-dark:#79B8FF">9</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'B\'</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$r </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $client</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#6F42C1;--shiki-dark:#B392F0">Call</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Arith.Multiply"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $args);</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">printf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"%d * %d = %d</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $args[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'A\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], $args[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'B\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], $r[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'result\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">][</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Pro\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$r </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $client</span><span style="color:#D73A49;--shiki-dark:#F97583">-></span><span style="color:#6F42C1;--shiki-dark:#B392F0">Call</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Arith.Divide"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $args);</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">printf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"%d / %d, Quo is %d, Rem is %d</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, $args[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'A\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], $args[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'B\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], $r[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'result\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">][</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Quo\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], $r[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'result\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">][</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Rem\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]);</span></span></code></pre>',{headings:943,localImagePaths:946,remoteImagePaths:947,frontmatter:948,imagePaths:952},[944,945],{depth:49,slug:650,text:650},{depth:49,slug:722,text:722},[],[],{title:934,published:949,tags:950,categories:951,minutes:49},["Date","2019-08-01T16:19:27.000Z"],[615,132],[615],[],"php/php7新特性",{id:953,data:955,body:959,filePath:960,digest:961,rendered:962},{title:956,published:957,description:34,tags:958,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"PHP 7 新特性",["Date","2016-04-03T09:03:42.000Z"],[615],"## 1. 太空船运算符\r\n\r\n``` php\r\necho 1<=>1; //0\r\necho 2<=>1; //1\r\necho 1<=>2; //-1\r\n```\r\n\r\n## 2. 类型声明\r\n\r\n``` php\r\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\r\nfunction sumOfInts(int ...$ints):int{\r\n    return array_sum($ints);\r\n}\r\n```\r\n\r\n## 3.null 合并操作符\r\n\r\n``` php\r\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\r\n$page = $_GET['page'] ?? 0;\r\n```\r\n\r\n## 4. 常量数组\r\n\r\n``` php\r\ndefine('ANIMALS',['dog','cat']);\r\n```\r\n\r\n## 5.namespace 批量导入\r\n\r\n``` php\r\nuse Space\\{ClassA,ClassB as B,ClassC}\r\n```\r\n\r\n## 6.intdiv 函数\r\n\r\n``` php\r\nintdiv(10,3);\r\n```\r\n\r\n## 7.list 方括号\r\n\r\n``` php\r\n$arr = [1,2,3];\r\nlist($a,$b,$c) = $arr;\r\n\r\n$arr = [1,2,3];\r\n[$a,$b,$c] = $arr;\r\n```","src/content/posts/php/PHP7新特性.md","eed18bcabd69e00d",{html:963,metadata:964},'<h2 id="1-太空船运算符">1. 太空船运算符</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">echo</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;=></span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">//0</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">echo</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;=></span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">//1</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">echo</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;=></span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; </span><span style="color:#6A737D;--shiki-dark:#6A737D">//-1</span></span></code></pre>\n<h2 id="2-类型声明">2. 类型声明</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">declare</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">strict_type</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#6A737D;--shiki-dark:#6A737D">//strict_type=1表示开启严格模式</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> sumOfInts</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#D73A49;--shiki-dark:#F97583"> ...</span><span style="color:#24292E;--shiki-dark:#E1E4E8">$ints)</span><span style="color:#D73A49;--shiki-dark:#F97583">:int</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> array_sum</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($ints);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="3null-合并操作符">3.null 合并操作符</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$page </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> isset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($_GET[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'page\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]) </span><span style="color:#D73A49;--shiki-dark:#F97583">?</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $_GET[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'page\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">:</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$page </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $_GET[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'page\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">??</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></code></pre>\n<h2 id="4-常量数组">4. 常量数组</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">define</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'ANIMALS\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'dog\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'cat\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]);</span></span></code></pre>\n<h2 id="5namespace-批量导入">5.namespace 批量导入</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">use</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Space\\</span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ClassA</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ClassB</span><span style="color:#D73A49;--shiki-dark:#F97583"> as</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> B</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">ClassC</span><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="6intdiv-函数">6.intdiv 函数</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">intdiv</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">10</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>\n<h2 id="7list-方括号">7.list 方括号</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$arr </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">list</span><span style="color:#24292E;--shiki-dark:#E1E4E8">($a,$b,$c) </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $arr;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$arr </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> [</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">[$a,$b,$c] </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> $arr;</span></span></code></pre>',{headings:965,localImagePaths:987,remoteImagePaths:988,frontmatter:989,imagePaths:993},[966,969,972,975,978,981,984],{depth:49,slug:967,text:968},"1-太空船运算符","1. 太空船运算符",{depth:49,slug:970,text:971},"2-类型声明","2. 类型声明",{depth:49,slug:973,text:974},"3null-合并操作符","3.null 合并操作符",{depth:49,slug:976,text:977},"4-常量数组","4. 常量数组",{depth:49,slug:979,text:980},"5namespace-批量导入","5.namespace 批量导入",{depth:49,slug:982,text:983},"6intdiv-函数","6.intdiv 函数",{depth:49,slug:985,text:986},"7list-方括号","7.list 方括号",[],[],{title:956,published:990,tags:991,categories:992,top:39,minutes:25},["Date","2016-04-03T09:03:42.000Z"],[615],[615],[],"node/node新手课16打卡",{id:994,data:996,body:1e3,filePath:1001,digest:1002,rendered:1003},{title:997,published:998,description:34,tags:999,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（16）打卡",["Date","2020-05-25T07:57:34.000Z"],[587],'上节课我们讲了图片上传，今天我们来讲打卡。\r\n\r\n## 需求\r\n\r\n用户填写文字内容，上传图片，发送后首页列表可以展示出来。\r\n\r\n## 功能流程\r\n\r\n上传图片后前端获得图片地址，再把用户输入的文字内容 content 和 image 发到后端，后端插入记录到 card 表。\r\n\r\n## 代码\r\n\r\n> routes/index.js\r\n\r\n```js\r\n//打卡\r\nrouter.post(\'/card\',auth, async (ctx, next) => {\r\n  return indexApi.addCard(ctx)\r\n})\r\n```\r\n\r\n> api/index.js\r\n\r\n```js\r\nconst addCard = async(ctx) => {\r\n    const userId = ctx.state.userId\r\n    const content =ctx.request.body.content\r\n    const image = ctx.request.body.image\r\n    await cardModel.addCard(userId,content,image)\r\n    ctx.body = resp.succeed()\r\n    return\r\n}\r\n```\r\n\r\n> model/cardmodel.js\r\n\r\n```js\r\nconst addCard = async(userId,content,image)=>{\r\n    let sql = "insert into `card` (user_id,content,image)values(?,?,?) "\r\n    const insertData = await mysql.exec(sql,[userId,content,image])\r\n    return insertData.insertId\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPOST http://localhost:3000/card\r\n\r\n{\r\n    "content":"test",\r\n    "image":"https://cdn.guojiang.club/Fo6qftIGMQq8uM7ANRdWs9Kskow5"\r\n}\r\n```\r\n\r\n\r\n## 总结\r\n\r\n打卡功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解点赞，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（16）打卡.md","e51190cd11ebd9f1",{html:1004,metadata:1005},'<p>上节课我们讲了图片上传，今天我们来讲打卡。</p>\n<h2 id="需求">需求</h2>\n<p>用户填写文字内容，上传图片，发送后首页列表可以展示出来。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>上传图片后前端获得图片地址，再把用户输入的文字内容 content 和 image 发到后端，后端插入记录到 card 表。</p>\n<h2 id="代码">代码</h2>\n<blockquote>\n<p>routes/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//打卡</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/card\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,auth, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">addCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> addCard</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userId</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.state.userId</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> content</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8">ctx.request.body.content</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> image</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.body.image</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> cardModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">addCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(userId,content,image)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/cardmodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> addCard</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">content</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">image</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "insert into `card` (user_id,content,image)values(?,?,?) "</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> insertData</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[userId,content,image])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> insertData.insertId</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/card</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "content"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">"test"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">,</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "image"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">"https://cdn.guojiang.club/Fo6qftIGMQq8uM7ANRdWs9Kskow5"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>打卡功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解点赞，继续加油吧，Let’s go！</p>',{headings:1006,localImagePaths:1012,remoteImagePaths:1013,frontmatter:1014,imagePaths:1018},[1007,1008,1009,1010,1011],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:997,published:1015,tags:1016,categories:1017,minutes:25},["Date","2020-05-25T07:57:34.000Z"],[587],[587],[],"node/node新手课14修改用户信息",{id:1019,data:1021,body:1025,filePath:1026,digest:1027,rendered:1028},{title:1022,published:1023,description:34,tags:1024,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（14）修改用户信息",["Date","2020-05-07T07:57:34.000Z"],[587],'上节课我们讲了用户信息展示，今天我们来讲修改用户信息功能。\r\n\r\n## 需求\r\n\r\n用户修改自己的信息，如头像，昵称，手机号等，我们以修改昵称为例。\r\n\r\n## 功能流程\r\n\r\n通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，把前端传来的昵称更新到记录中。\r\n\r\n## 代码\r\n\r\n> routes/user.js\r\n\r\n```js\r\n//更新个人信息\r\nuserrouter.put(\'/info\',auth, function (ctx, next) {\r\n  return userApi.info(ctx)\r\n})\r\n```\r\n\r\n> api/user.js\r\n\r\n```js\r\nconst info = async(ctx) => {\r\n    const nickname = ctx.request.body.nickname\r\n    await userModel.updateUserInfo(userId,nickname)\r\n    ctx.body = resp.succeed()\r\n    return\r\n}\r\n```\r\n\r\n> model/usermodel.js\r\n\r\n```js\r\nconst updateUserInfo = async(userId,nickname)=>{\r\n    let sql = "update `user` set nickname=? where id=?"\r\n    const res = await mysql.exec(sql,[nickname,userId])\r\n    return res.affectedRows\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPUT http://localhost:3000/user/info\r\n\r\n{\r\n    "nickname":"test"\r\n}\r\n```\r\n\r\n\r\n## 总结\r\n\r\n修改用户信息功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解图片上传，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（14）修改用户信息.md","4804a927d8bf35d6",{html:1029,metadata:1030},'<p>上节课我们讲了用户信息展示，今天我们来讲修改用户信息功能。</p>\n<h2 id="需求">需求</h2>\n<p>用户修改自己的信息，如头像，昵称，手机号等，我们以修改昵称为例。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>通过用户凭据 token 获取到用户 id，在数据库 user 表中找到用户记录，把前端传来的昵称更新到记录中。</p>\n<h2 id="代码">代码</h2>\n<blockquote>\n<p>routes/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//更新个人信息</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">userrouter.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">put</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/info\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,auth, </span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">info</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> info</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> nickname</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.body.nickname</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> userModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">updateUserInfo</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(userId,nickname)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/usermodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> updateUserInfo</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">nickname</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "update `user` set nickname=? where id=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[nickname,userId])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> res.affectedRows</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">PUT</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/user/info</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "nickname"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">"test"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>修改用户信息功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解图片上传，继续加油吧，Let’s go！</p>',{headings:1031,localImagePaths:1037,remoteImagePaths:1038,frontmatter:1039,imagePaths:1043},[1032,1033,1034,1035,1036],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:1022,published:1040,tags:1041,categories:1042,minutes:25},["Date","2020-05-07T07:57:34.000Z"],[587],[587],[],"node/node新手课17点赞",{id:1044,data:1046,body:1050,filePath:1051,digest:1052,rendered:1053},{title:1047,published:1048,description:34,tags:1049,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（17）点赞",["Date","2020-06-08T07:57:34.000Z"],[587],'上节课我们讲了讲和打卡，今天我们来讲点赞。\r\n\r\n## 需求\r\n\r\n用户对信息列表中的信息进行点赞操作。\r\n\r\n## 功能流程\r\n\r\n前端传到后端信息 card_id，后端根据 card_id 和 token 解析出来的 user_id，查询 card_praise 表，如果记录存在说明已经点赞过了，返回给前端提示。否则插入 card_praise，再更新 card 表的 praise 字段的值。\r\n\r\n## 代码\r\n\r\n> routes/index.js\r\n\r\n```js\r\n//点赞\r\nrouter.post(\'/praise\', auth,async (ctx, next) => {\r\n  return indexApi.praise(ctx)\r\n})\r\n```\r\n\r\n> api/index.js\r\n\r\n```js\r\nconst praise = async(ctx) => {\r\n    const cardId = ctx.request.body.card_id\r\n    const userId = ctx.state.userId\r\n    let id =  await cardModel.getCardPraise(cardId,userId)\r\n    if(id > 0){\r\n        ctx.body = resp.fail(20001,"不要重复点赞")\r\n        return\r\n    }\r\n    await cardModel.createCardPraise(cardId,userId)\r\n    await cardModel.incrCardPraise(cardId)\r\n    ctx.body = resp.succeed()\r\n    return\r\n}\r\n```\r\n\r\n> model/cardmodel.js\r\n\r\n```js\r\nconst createCardPraise = async(cardId,userId)=>{\r\n    let sql = "insert into `card_praise` (card_id,user_id)values(?,?) "\r\n    const insertData = await mysql.exec(sql,[cardId,userId])\r\n    return insertData.insertId\r\n}\r\nconst getCardPraise = async(cardId,userId)=>{\r\n    let sql = "select id from `card_praise` where card_id=? and user_id=?"\r\n    const res = await mysql.queryOne(sql,[cardId,userId])\r\n    return res.id\r\n}\r\nconst incrCardPraise = async(cardId)=>{\r\n    let sql = "update `card` set praise=praise+1 where id=?"\r\n    const res = await mysql.exec(sql,[cardId])\r\n    return res.affectedRows\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```bash\r\nPOST http://localhost:3000/praise\r\n\r\n{\r\n    "card_id":1\r\n}\r\n```\r\n\r\n\r\n## 总结\r\n\r\n点赞功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解查询首页列表，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（17）点赞.md","567a90f1509077ac",{html:1054,metadata:1055},'<p>上节课我们讲了讲和打卡，今天我们来讲点赞。</p>\n<h2 id="需求">需求</h2>\n<p>用户对信息列表中的信息进行点赞操作。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>前端传到后端信息 card_id，后端根据 card_id 和 token 解析出来的 user_id，查询 card_praise 表，如果记录存在说明已经点赞过了，返回给前端提示。否则插入 card_praise，再更新 card 表的 praise 字段的值。</p>\n<h2 id="代码">代码</h2>\n<blockquote>\n<p>routes/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//点赞</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/praise\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, auth,</span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">praise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> praise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> cardId</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.body.card_id</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userId</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.state.userId</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> id </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583">  await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> cardModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getCardPraise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(cardId,userId)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(id </span><span style="color:#D73A49;--shiki-dark:#F97583">></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fail</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">20001</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"不要重复点赞"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> cardModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createCardPraise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(cardId,userId)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> cardModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">incrCardPraise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(cardId)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/cardmodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> createCardPraise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">cardId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "insert into `card_praise` (card_id,user_id)values(?,?) "</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> insertData</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[cardId,userId])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> insertData.insertId</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getCardPraise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">cardId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">userId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "select id from `card_praise` where card_id=? and user_id=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">queryOne</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[cardId,userId])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> res.id</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> incrCardPraise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">cardId</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "update `card` set praise=praise+1 where id=?"</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,[cardId])</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> res.affectedRows</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="bash"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/praise</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "card_id"</span><span style="color:#6F42C1;--shiki-dark:#B392F0">:1</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>点赞功能就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解查询首页列表，继续加油吧，Let’s go！</p>',{headings:1056,localImagePaths:1062,remoteImagePaths:1063,frontmatter:1064,imagePaths:1068},[1057,1058,1059,1060,1061],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:1047,published:1065,tags:1066,categories:1067,minutes:25},["Date","2020-06-08T07:57:34.000Z"],[587],[587],[],"node/node新手课15图片上传",{id:1069,data:1071,body:1075,filePath:1076,digest:1077,rendered:1078},{title:1072,published:1073,description:34,tags:1074,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（15）图片上传",["Date","2020-05-15T07:57:34.000Z"],[587],"上节课我们讲了修改用户信息功能，今天我们来讲图片上传。\r\n\r\n## 需求\r\n\r\n用户在打卡功能中，选择图片上传。类似微信发朋友圈的功能。\r\n\r\n## 功能流程\r\n\r\n安装 koa-body 包，用来接收图片上传的文件流。然后保存到 public 目录。\r\n\r\n## 代码\r\n\r\n```sh\r\n$ npm i koa-body --save\r\n```\r\n\r\n> app.js\r\n\r\n```js\r\nconst koaBody = require('koa-body');\r\n\r\napp.use(koaBody({\r\n    multipart: true,\r\n    formidable: {\r\n        maxFileSize: 1200*1024*1024,\t// 设置上传文件大小最大限制，默认2M\r\n    }\r\n}));\r\n```\r\n\r\n> routes/index.js\r\n\r\n```js\r\nrouter.post('/upload', async (ctx, next) => {\r\n  return indexApi.upload(ctx)\r\n})\r\n```\r\n\r\n> api/index.js\r\n\r\n```js\r\n  const file = ctx.request.files.file;\r\n    const fileName = file.name;\r\n    // 创建可读流\r\n    const render = fs.createReadStream(file.path);\r\n    let filePath = path.join('public/images',fileName);\r\n    const fileDir = path.join('public/images');\r\n    if (!fs.existsSync(fileDir)) {\r\n      fs.mkdirSync(fileDir, err => {\r\n        console.log('创建失败',err)\r\n      });\r\n      return\r\n    }\r\n    // 创建写入流\r\n    const upStream = fs.createWriteStream(filePath);\r\n    render.pipe(upStream);\r\n    ctx.body = resp.succeed()\r\n    return\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPOST http://localhost:3000/upload\r\n\r\n{\r\n    \"message\": \"OK\",\r\n    \"data\": {\r\n        \"url\": \"http://localhost:3000/public\\\\images\\\\f9a15976ab.jpg\"\r\n    }\r\n}\r\n```\r\n\r\n## 总结\r\n\r\n图片上传就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解打卡，继续加油吧，Let's go！","src/content/posts/node/node新手课（15）图片上传.md","d883f00e9eef425b",{html:1079,metadata:1080},'<p>上节课我们讲了修改用户信息功能，今天我们来讲图片上传。</p>\n<h2 id="需求">需求</h2>\n<p>用户在打卡功能中，选择图片上传。类似微信发朋友圈的功能。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>安装 koa-body 包，用来接收图片上传的文件流。然后保存到 public 目录。</p>\n<h2 id="代码">代码</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> i</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> koa-body</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --save</span></span></code></pre>\n<blockquote>\n<p>app.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> koaBody</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'koa-body\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">koaBody</span><span style="color:#24292E;--shiki-dark:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    multipart: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    formidable: {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        maxFileSize: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1200</span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1024</span><span style="color:#D73A49;--shiki-dark:#F97583">*</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1024</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,\t</span><span style="color:#6A737D;--shiki-dark:#6A737D">// 设置上传文件大小最大限制，默认2M</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}));</span></span></code></pre>\n<blockquote>\n<p>routes/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/upload\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">upload</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> file</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ctx.request.files.file;</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fileName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> file.name;</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 创建可读流</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> render</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createReadStream</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(file.path);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> filePath </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'public/images\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,fileName);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fileDir</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">join</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'public/images\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8">fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">existsSync</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fileDir)) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">mkdirSync</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fileDir, </span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#D73A49;--shiki-dark:#F97583"> =></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'创建失败\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,err)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">      });</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">      return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 创建写入流</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> upStream</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createWriteStream</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(filePath);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    render.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">pipe</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(upStream);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">succeed</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/upload</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "message"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "OK",</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "data"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">        "url"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "http://localhost:3000/public</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\\\</span><span style="color:#032F62;--shiki-dark:#9ECBFF">images</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\\\</span><span style="color:#032F62;--shiki-dark:#9ECBFF">f9a15976ab.jpg"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>图片上传就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解打卡，继续加油吧，Let’s go！</p>',{headings:1081,localImagePaths:1087,remoteImagePaths:1088,frontmatter:1089,imagePaths:1093},[1082,1083,1084,1085,1086],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:1072,published:1090,tags:1091,categories:1092,minutes:25},["Date","2020-05-15T07:57:34.000Z"],[587],[587],[],"node/node新手课19项目打包和部署",{id:1094,data:1096,body:1100,filePath:1101,digest:1102,rendered:1103},{title:1097,published:1098,description:34,tags:1099,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（19）项目打包和部署",["Date","2020-06-25T07:57:34.000Z"],[587],"上节课我们讲了首页列表，我们所有开发功能模块就已经讲完了，今天是最后一课，我们来讲项目部署到服务器。\r\n\r\n## 需求\r\n\r\n把项目部署到云服务器上，能够对外网提供接口服务。\r\n\r\n## 功能流程\r\n\r\n1）在云服务器上安装 nodejs 环境。\r\n\r\n2） 将我们写好的 koa2 项目就是 sir-koa 目录 全部放到服务器上 （除了 node_modules 文件夹）。\r\n\r\n3）云服务切换到你项目所在路径，以 /home/sir-koa 目录为例。\r\n\r\n```sh\r\n$ cd /home/sir-koa\r\n$ npm install  //安装相关依赖文件\r\n$ npm run start //测试下你的 koa2 项目能不能跑起来\r\n```\r\n\r\n> ps：这样还不够，因为退出服务器后 node 进程就自动关了，项目也就自动关闭了\r\n\r\n所以我们需要 pm2 来守护进程。\r\n\r\n4）安装 pm2\r\n\r\n我们选择全局安装 pm2。\r\n\r\n```sh\r\n$ npm install pm2 -g\r\n```\r\n\r\n安装完成后云服务切换到项目所在路径 /home/sir-koa。\r\n\r\n```sh\r\n$ pm2 start ./bin/www --watch\r\n```\r\n\r\n一般我们都是通过 npm start 启动应用，其实就是调用 node ./bin/www。那么，换成 pm2 就是`` `pm2 start` ``\r\n\r\n> 注意，这里用了 --watch 参数，意味着当你的 koa2 应用代码发生变化时，pm2 会帮你重启服务。\r\n\r\n\r\n## 总结\r\n\r\nnode 教程已经全部更新完，大家可以在教程基础上根据需求扩展新功能。\r\n青山不改，绿水长流，江湖再见，后会有期。","src/content/posts/node/node新手课（19）项目打包和部署.md","1866290194496611",{html:1104,metadata:1105},'<p>上节课我们讲了首页列表，我们所有开发功能模块就已经讲完了，今天是最后一课，我们来讲项目部署到服务器。</p>\n<h2 id="需求">需求</h2>\n<p>把项目部署到云服务器上，能够对外网提供接口服务。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>1）在云服务器上安装 nodejs 环境。</p>\n<p>2） 将我们写好的 koa2 项目就是 sir-koa 目录 全部放到服务器上 （除了 node_modules 文件夹）。</p>\n<p>3）云服务切换到你项目所在路径，以 /home/sir-koa 目录为例。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> cd</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> /home/sir-koa</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF">  //安装相关依赖文件</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> start</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> //测试下你的</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> koa2</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 项目能不能跑起来</span></span></code></pre>\n<blockquote>\n<p>ps：这样还不够，因为退出服务器后 node 进程就自动关了，项目也就自动关闭了</p>\n</blockquote>\n<p>所以我们需要 pm2 来守护进程。</p>\n<p>4）安装 pm2</p>\n<p>我们选择全局安装 pm2。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> pm2</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -g</span></span></code></pre>\n<p>安装完成后云服务切换到项目所在路径 /home/sir-koa。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> pm2</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> start</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ./bin/www</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --watch</span></span></code></pre>\n<p>一般我们都是通过 npm start 启动应用，其实就是调用 node ./bin/www。那么，换成 pm2 就是<code>`pm2 start`</code></p>\n<blockquote>\n<p>注意，这里用了 —watch 参数，意味着当你的 koa2 应用代码发生变化时，pm2 会帮你重启服务。</p>\n</blockquote>\n<h2 id="总结">总结</h2>\n<p>node 教程已经全部更新完，大家可以在教程基础上根据需求扩展新功能。\r\n青山不改，绿水长流，江湖再见，后会有期。</p>',{headings:1106,localImagePaths:1110,remoteImagePaths:1111,frontmatter:1112,imagePaths:1116},[1107,1108,1109],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:117,text:117},[],[],{title:1097,published:1113,tags:1114,categories:1115,minutes:49},["Date","2020-06-25T07:57:34.000Z"],[587],[587],[],"node/node新手课1nodejs-下载安装",{id:1117,data:1119,body:1123,filePath:1124,digest:1125,rendered:1126},{title:1120,published:1121,description:34,tags:1122,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（1）nodejs 下载安装",["Date","2020-01-17T07:57:34.000Z"],[587],"上节课我们介绍了项目和课程，俗话说：工欲善其事必先利其器，今天我们就开始搭建 node 环境。\r\n\r\n## 普通安装\r\n\r\n* 访问 [http://nodejs.cn](http://nodejs.cn)，下载并且安装\r\n\r\n\r\n\r\n* 打开 cmd 命令行\r\n\r\n```sh\r\n# 查看 node 版本\r\n$ node -v\r\n$ v12.9.1\r\n# 查看 npm 版本\r\n$ npm -v\r\n$ 6.14.5\r\n\r\n```\r\n\r\n## nvm(Node Version Manager) 安装\r\n\r\n* nvm，nodejs 版本管理工具，可切换多个 nodejs 版本\r\n\r\n### mac\r\n\r\n```sh\r\nbrew install nvm \r\n```\r\n\r\n### windows\r\n\r\n* 访问 [https://github.com/coreybutler/nvm/releases](https://github.com/coreybutler/nvm/releases), 下载安装\r\n\r\n\r\n### linux\r\n\r\n* 访问 [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm), 执行以下命令\r\n\r\n```\r\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\r\n```\r\n\r\n### nvm 常用命令\r\n\r\n```sh\r\n# 查看当前所有的 node 版本\r\nnvm list/nvm ls\r\n# 安装指定 10.13.0 版本\r\nnvm install 10.13.0\r\n# 切换到指定 10.13.0 版本\r\nnvm use  10.13.0 \r\n# 删除 10.13.0 版本的 node\r\nnvm uninstall 10.13.0   \r\n# 罗列远程的 node 版本\r\nnvm ls-remote   \r\n#  查看当前正在使用的 node 版本\r\nnvm current \r\n# 切换 v.10.13.0 为默认版本，每次新建的命令行中就是默认的版本了\r\nnvm alias default v10.13.0   \r\n# 查看全局都安装了那些 np\r\nnpm list --depth=0 -g  \r\n```\r\n## npm 下载加速\r\n\r\nnpm 默认下载地址在国外，下载 npm 包会很慢，所以我们需要配置 npm 淘宝镜像，能大大提升下载速度\r\n\r\n### 配置淘宝镜像\r\n\r\n```sh\r\n$ npm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n### 恢复国外下载地址\r\n\r\n```sh\r\n$ npm config set registry https://registry.npmjs.org\r\n```\r\n\r\n> 如果你需要同时使用多个 node 版本，推荐使用 nvm。\r\n\r\n> 无论使用哪种方式安装 node, 版本要》=8.0。\r\n\r\n## 总结\r\n\r\n你的 node 环境搭建好了吗，有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们开始第一个 node 程序 --hello world，继续加油吧，Let's go！","src/content/posts/node/node新手课（1）nodejs 下载安装.md","a6c027442c623667",{html:1127,metadata:1128},'<p>上节课我们介绍了项目和课程，俗话说：工欲善其事必先利其器，今天我们就开始搭建 node 环境。</p>\n<h2 id="普通安装">普通安装</h2>\n<ul>\n<li>\n<p>访问 <a href="http://nodejs.cn" rel="nofollow noopener noreferrer external" target="_blank">http://nodejs.cn</a>，下载并且安装</p>\n</li>\n<li>\n<p>打开 cmd 命令行</p>\n</li>\n</ul>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 查看 node 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> node</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -v</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> v12.9.1</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 查看 npm 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -v</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 6.14.5</span></span>\n<span class="line"></span></code></pre>\n<h2 id="nvmnode-version-manager-安装">nvm(Node Version Manager) 安装</h2>\n<ul>\n<li>nvm，nodejs 版本管理工具，可切换多个 nodejs 版本</li>\n</ul>\n<h3 id="mac">mac</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">brew</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> nvm</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span></code></pre>\n<h3 id="windows">windows</h3>\n<ul>\n<li>访问 <a href="https://github.com/coreybutler/nvm/releases" rel="nofollow noopener noreferrer external" target="_blank">https://github.com/coreybutler/nvm/releases</a>, 下载安装</li>\n</ul>\n<h3 id="linux">linux</h3>\n<ul>\n<li>访问 <a href="https://github.com/nvm-sh/nvm" rel="nofollow noopener noreferrer external" target="_blank">https://github.com/nvm-sh/nvm</a>, 执行以下命令</li>\n</ul>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span></span></code></pre>\n<h3 id="nvm-常用命令">nvm 常用命令</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 查看当前所有的 node 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> list/nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ls</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 安装指定 10.13.0 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 10.13.0</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 切换到指定 10.13.0 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> use</span><span style="color:#005CC5;--shiki-dark:#79B8FF">  10.13.0</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 删除 10.13.0 版本的 node</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> uninstall</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 10.13.0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">   </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 罗列远程的 node 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ls-remote</span><span style="color:#24292E;--shiki-dark:#E1E4E8">   </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">#  查看当前正在使用的 node 版本</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> current</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 切换 v.10.13.0 为默认版本，每次新建的命令行中就是默认的版本了</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">nvm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> alias</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> default</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> v10.13.0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">   </span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D"># 查看全局都安装了那些 np</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> list</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --depth=0</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -g</span><span style="color:#24292E;--shiki-dark:#E1E4E8">  </span></span></code></pre>\n<h2 id="npm-下载加速">npm 下载加速</h2>\n<p>npm 默认下载地址在国外，下载 npm 包会很慢，所以我们需要配置 npm 淘宝镜像，能大大提升下载速度</p>\n<h3 id="配置淘宝镜像">配置淘宝镜像</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> config</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> set</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> registry</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> https://registry.npm.taobao.org</span></span></code></pre>\n<h3 id="恢复国外下载地址">恢复国外下载地址</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> config</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> set</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> registry</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> https://registry.npmjs.org</span></span></code></pre>\n<blockquote>\n<p>如果你需要同时使用多个 node 版本，推荐使用 nvm。</p>\n</blockquote>\n<blockquote>\n<p>无论使用哪种方式安装 node, 版本要》=8.0。</p>\n</blockquote>\n<h2 id="总结">总结</h2>\n<p>你的 node 环境搭建好了吗，有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们开始第一个 node 程序 —hello world，继续加油吧，Let’s go！</p>',{headings:1129,localImagePaths:1152,remoteImagePaths:1153,frontmatter:1154,imagePaths:1158},[1130,1132,1135,1137,1139,1141,1144,1147,1149,1151],{depth:49,slug:1131,text:1131},"普通安装",{depth:49,slug:1133,text:1134},"nvmnode-version-manager-安装","nvm(Node Version Manager) 安装",{depth:89,slug:1136,text:1136},"mac",{depth:89,slug:1138,text:1138},"windows",{depth:89,slug:1140,text:1140},"linux",{depth:89,slug:1142,text:1143},"nvm-常用命令","nvm 常用命令",{depth:49,slug:1145,text:1146},"npm-下载加速","npm 下载加速",{depth:89,slug:1148,text:1148},"配置淘宝镜像",{depth:89,slug:1150,text:1150},"恢复国外下载地址",{depth:49,slug:117,text:117},[],[],{title:1120,published:1155,tags:1156,categories:1157,minutes:49},["Date","2020-01-17T07:57:34.000Z"],[587],[587],[],"node/node新手课18首页列表",{id:1159,data:1161,body:1165,filePath:1166,digest:1167,rendered:1168},{title:1162,published:1163,description:34,tags:1164,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（18）首页列表",["Date","2020-06-17T07:57:34.000Z"],[587],'上节课我们讲了点赞，今天我们来讲查询首页列表。\r\n\r\n## 需求\r\n\r\n用户打卡小程序的首页就以列表的形式展示所有用户打卡发布的图片和内容。用户可以点赞某一条打卡。\r\n\r\n## 功能流程\r\n\r\n查询数据库中 card 表的所有记录，后期可以扩展加入分页或分类、标签等功能。\r\n\r\n## 代码\r\n\r\n> routes/index.js\r\n\r\n```js\r\nrouter.get(\'/card\', async (ctx, next) => {\r\n  return indexApi.getCard(ctx)\r\n})\r\n```\r\n\r\n> api/index.js\r\n\r\n```js\r\nconst getCard = async(ctx) => {\r\n    const list = await cardModel.getCards()\r\n    ctx.body = resp.setData(list)\r\n    return\r\n}\r\n```\r\n\r\n> model/cardmodel.js\r\n\r\n```js\r\nconst getCards = async()=>{\r\n    let sql = "select id,content,image from `card` "\r\n    const res = await mysql.exec(sql)\r\n    return res\r\n}\r\n```\r\n\r\n## 运行\r\n\r\n```sh\r\nPOST http://localhost:3000/card\r\n\r\n{\r\n    "content":"content"\r\n}\r\n```\r\n\r\n响应数据\r\n\r\n```json\r\n{\r\n    "message": "OK",\r\n    "data": [\r\n        {\r\n            "id": 1,\r\n            "content": "111",\r\n            "image": ""\r\n        },\r\n        {\r\n            "id": 2,\r\n            "content": "13012341234",\r\n            "image": "https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1593516228269&di=b24a61eb023e7b2d324c77921960d1f7&imgtype=0&src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg"\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## 总结\r\n\r\n查询首页列表就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解项目部署上线，继续加油吧，Let\'s go！',"src/content/posts/node/node新手课（18）首页列表.md","60ceafa3415d2786",{html:1169,metadata:1170},'<p>上节课我们讲了点赞，今天我们来讲查询首页列表。</p>\n<h2 id="需求">需求</h2>\n<p>用户打卡小程序的首页就以列表的形式展示所有用户打卡发布的图片和内容。用户可以点赞某一条打卡。</p>\n<h2 id="功能流程">功能流程</h2>\n<p>查询数据库中 card 表的所有记录，后期可以扩展加入分页或分类、标签等功能。</p>\n<h2 id="代码">代码</h2>\n<blockquote>\n<p>routes/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/card\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">  return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<blockquote>\n<p>api/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getCard</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> list</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> cardModel.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getCards</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ctx.body </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> resp.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setData</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(list)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<blockquote>\n<p>model/cardmodel.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getCards</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> async</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sql </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "select id,content,image from `card` "</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> res</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> res</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="运行">运行</h2>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">POST</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://localhost:3000/card</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    "content"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">:</span><span style="color:#6F42C1;--shiki-dark:#B392F0">"content"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>响应数据</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="json"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "message"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"OK"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">    "data"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: [</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        {</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "id"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "content"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"111"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "image"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">""</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        },</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        {</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "id"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "content"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"13012341234"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">            "image"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"https://timgsa.baidu.com/timg?image&#x26;quality=80&#x26;size=b9999_10000&#x26;sec=1593516228269&#x26;di=b24a61eb023e7b2d324c77921960d1f7&#x26;imgtype=0&#x26;src=http%3A%2F%2Fa3.att.hudong.com%2F14%2F75%2F01300000164186121366756803686.jpg"</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    ]</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>查询首页列表就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解项目部署上线，继续加油吧，Let’s go！</p>',{headings:1171,localImagePaths:1177,remoteImagePaths:1178,frontmatter:1179,imagePaths:1183},[1172,1173,1174,1175,1176],{depth:49,slug:747,text:747},{depth:49,slug:749,text:749},{depth:49,slug:722,text:722},{depth:49,slug:724,text:724},{depth:49,slug:117,text:117},[],[],{title:1162,published:1180,tags:1181,categories:1182,minutes:25},["Date","2020-06-17T07:57:34.000Z"],[587],[587],[],"node/node新手课2hello-world",{id:1184,data:1186,body:1190,filePath:1191,digest:1192,rendered:1193},{title:1187,published:1188,description:34,tags:1189,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（2）Hello World",["Date","2020-01-23T07:57:34.000Z"],[587],"上节课我们讲解了 node 环境的搭建，按照编程语言的惯例，我们首先开始个 HelloWorld 程序。\r\n\r\n### 创建项目\r\n\r\n创建 sir-node 文件夹，这个就是我们要开发的项目\r\n\r\n```sh \r\n\r\n$ mkdir sir-node\r\n$ cd sir-node\r\n\r\n```\r\n\r\n### 新建 hello.js\r\n\r\n新建 hello.js，输入以下内容\r\n\r\n```js\r\n// 引入 Http 模块：我们可以使用 require 指令来载入 Http 模块。\r\nconst http = require(\"http\")\r\n\r\n// 创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。\r\nhttp.createServer((request,response)=>{\r\n    // 设置响应的 http 头部信息\r\n    response.writeHead(200, {'Content-Type': 'text/plain'});\r\n    // 设置响应的 http 数据\r\n    response.end('Hello World\\n');\r\n}).listen(3000)\r\n\r\nconsole.log('Server running at http://127.0.0.1:3000/');\r\n```\r\n\r\n### 启动 hello.js\r\n\r\n```js\r\n$ node hello.js\r\nServer running at http://127.0.0.1:3000/\r\n```\r\n\r\n客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据\r\n\r\n\r\n## 总结\r\n\r\n现在我们成功开启了一个 http 服务，写了个 helloworld。\r\n\r\n这是一个良好的开始，你学得怎么样呢？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解 nodejs 和 javascript 区别，继续加油吧，Let's go！","src/content/posts/node/node新手课（2）Hello World.md","e89301701db8ac26",{html:1194,metadata:1195},'<p>上节课我们讲解了 node 环境的搭建，按照编程语言的惯例，我们首先开始个 HelloWorld 程序。</p>\n<h3 id="创建项目">创建项目</h3>\n<p>创建 sir-node 文件夹，这个就是我们要开发的项目</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mkdir</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> sir-node</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> cd</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> sir-node</span></span>\n<span class="line"></span></code></pre>\n<h3 id="新建-hellojs">新建 hello.js</h3>\n<p>新建 hello.js，输入以下内容</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 引入 Http 模块：我们可以使用 require 指令来载入 Http 模块。</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> http</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"http"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">http.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createServer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">request</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 设置响应的 http 头部信息</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">writeHead</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">200</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, {</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Content-Type\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'text/plain\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 设置响应的 http 数据</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Hello World</span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Server running at http://127.0.0.1:3000/\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>\n<h3 id="启动-hellojs">启动 hello.js</h3>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$ node hello.js</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Server running at </span><span style="color:#6F42C1;--shiki-dark:#B392F0">http</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#6A737D;--shiki-dark:#6A737D">//127.0.0.1:3000/</span></span></code></pre>\n<p>客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据</p>\n<h2 id="总结">总结</h2>\n<p>现在我们成功开启了一个 http 服务，写了个 helloworld。</p>\n<p>这是一个良好的开始，你学得怎么样呢？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解 nodejs 和 javascript 区别，继续加油吧，Let’s go！</p>',{headings:1196,localImagePaths:1206,remoteImagePaths:1207,frontmatter:1208,imagePaths:1212},[1197,1199,1202,1205],{depth:89,slug:1198,text:1198},"创建项目",{depth:89,slug:1200,text:1201},"新建-hellojs","新建 hello.js",{depth:89,slug:1203,text:1204},"启动-hellojs","启动 hello.js",{depth:49,slug:117,text:117},[],[],{title:1187,published:1209,tags:1210,categories:1211,minutes:25},["Date","2020-01-23T07:57:34.000Z"],[587],[587],[],"node/node新手课3nodejs-和-javascript-区别",{id:1213,data:1215,body:1219,filePath:1220,digest:1221,rendered:1222},{title:1216,published:1217,description:34,tags:1218,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（3）nodejs 和 javascript 区别",["Date","2020-01-27T07:57:34.000Z"],[587],"上节课我们成功用开启了一个 http 服务，写了个 helloworld，今天我们讲解下 nodejs 和 javascript 区别。\r\n\r\n### ECMAScript\r\n\r\n* 定义了语法，写 javascript 和 nodejs 必须遵守它的语法规范\r\n* 变量定义、循环、判断、函数\r\n* 原型和原型链、作用域和闭包、异步\r\n* 不能操作 DOM，不能监听 click 事件，不能发送 ajax 请求\r\n* 不能处理 http 请求，不能操作文件\r\n* 如果只有 ECMAScript，几乎做不了任何实际的项目\r\n\r\n### Javascript\r\n\r\n* Javascript 由 ECMAScript 语法规范 +Web Api 组成，两者结合即可完成浏览器端的操作\r\n* Javascript 可以执行 DOM 操作，BOM 操作，事件绑定，Ajax 等\r\n\r\n### Nodejs\r\n\r\n*  ECMAScript 语法规范 +Nodejs Api 组成，两者结合即可完成服务器端的操作\r\n* Nodejs 可以处理 http，处理文件等，具体参考 http://nodejs.cn/api/\r\n\r\n### 总结\r\n\r\n* ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。\r\n\r\n按类和对象比喻，ECMAScrpt 是类，Javascript 是对象\r\n\r\n### 前端和服务端的区别\r\n\r\n客户端可能有多个不同的版本，统一从服务端获取数据。\r\n\r\n\r\n#### 稳定性\r\n\r\n* 当个客户端可以意外挂掉，服务端不能，因为服务端是给无数个客户端提供数据，一旦宕机，影响非常大。\r\n* nodejs 一般使用 PM2 管理进程，断开的进程自动重启\r\n\r\n#### 内存和 CPU\r\n\r\n* 客户端独占一个浏览器，无需考虑内存和 CPU 占用情况\r\n* 服务端需要承载很多客户端请求，处理由客户端的大批量数据，内存和 CPU 比较稀缺\r\n* 课程会使用 stream 写入日志，使用 redis 存储 session\r\n\r\n#### 日志记录\r\n\r\n* 客户端会参与日志写入，但只是发起方，不考虑后续影响和结果\r\n* 服务端详细地记录日志，存储日志，分析日志\r\n* 课程会解决多种日志记录方式，以及如何分析日志\r\n\r\n#### 安全\r\n\r\n* 服务端可能会遭受各种恶意攻击和误操作，比如越权操作，SQL 注入等，前端就很少遇到\r\n* 课程会讲解登录验证，预防 xss 攻击和 SQL 注入。\r\n\r\n#### 集群和服务拆分\r\n\r\n* 产品发展速度快，流量可能会迅速增加。我们要通过扩展服务器集群和服务拆分承载更大流量。\r\n* 课程虽然是单台机器部署，但是支持服务拆分，后续也会增加这部分内容。\r\n\r\n### 相关文档\r\n\r\n* https://es6.ruanyifeng.com/\r\n\r\n### 总结\r\n\r\n你了解了 nodejs 和 javascript 区别，有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解 nodejs 处理 http 请求，继续加油吧，Let's go！","src/content/posts/node/node新手课（3）nodejs 和 javascript 区别.md","53d6a1f17e32f4df",{html:1223,metadata:1224},'<p>上节课我们成功用开启了一个 http 服务，写了个 helloworld，今天我们讲解下 nodejs 和 javascript 区别。</p>\n<h3 id="ecmascript">ECMAScript</h3>\n<ul>\n<li>定义了语法，写 javascript 和 nodejs 必须遵守它的语法规范</li>\n<li>变量定义、循环、判断、函数</li>\n<li>原型和原型链、作用域和闭包、异步</li>\n<li>不能操作 DOM，不能监听 click 事件，不能发送 ajax 请求</li>\n<li>不能处理 http 请求，不能操作文件</li>\n<li>如果只有 ECMAScript，几乎做不了任何实际的项目</li>\n</ul>\n<h3 id="javascript">Javascript</h3>\n<ul>\n<li>Javascript 由 ECMAScript 语法规范 +Web Api 组成，两者结合即可完成浏览器端的操作</li>\n<li>Javascript 可以执行 DOM 操作，BOM 操作，事件绑定，Ajax 等</li>\n</ul>\n<h3 id="nodejs">Nodejs</h3>\n<ul>\n<li>ECMAScript 语法规范 +Nodejs Api 组成，两者结合即可完成服务器端的操作</li>\n<li>Nodejs 可以处理 http，处理文件等，具体参考 <a href="http://nodejs.cn/api/" rel="nofollow noopener noreferrer external" target="_blank">http://nodejs.cn/api/</a></li>\n</ul>\n<h3 id="总结">总结</h3>\n<ul>\n<li>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</li>\n</ul>\n<p>按类和对象比喻，ECMAScrpt 是类，Javascript 是对象</p>\n<h3 id="前端和服务端的区别">前端和服务端的区别</h3>\n<p>客户端可能有多个不同的版本，统一从服务端获取数据。</p>\n<h4 id="稳定性">稳定性</h4>\n<ul>\n<li>当个客户端可以意外挂掉，服务端不能，因为服务端是给无数个客户端提供数据，一旦宕机，影响非常大。</li>\n<li>nodejs 一般使用 PM2 管理进程，断开的进程自动重启</li>\n</ul>\n<h4 id="内存和-cpu">内存和 CPU</h4>\n<ul>\n<li>客户端独占一个浏览器，无需考虑内存和 CPU 占用情况</li>\n<li>服务端需要承载很多客户端请求，处理由客户端的大批量数据，内存和 CPU 比较稀缺</li>\n<li>课程会使用 stream 写入日志，使用 redis 存储 session</li>\n</ul>\n<h4 id="日志记录">日志记录</h4>\n<ul>\n<li>客户端会参与日志写入，但只是发起方，不考虑后续影响和结果</li>\n<li>服务端详细地记录日志，存储日志，分析日志</li>\n<li>课程会解决多种日志记录方式，以及如何分析日志</li>\n</ul>\n<h4 id="安全">安全</h4>\n<ul>\n<li>服务端可能会遭受各种恶意攻击和误操作，比如越权操作，SQL 注入等，前端就很少遇到</li>\n<li>课程会讲解登录验证，预防 xss 攻击和 SQL 注入。</li>\n</ul>\n<h4 id="集群和服务拆分">集群和服务拆分</h4>\n<ul>\n<li>产品发展速度快，流量可能会迅速增加。我们要通过扩展服务器集群和服务拆分承载更大流量。</li>\n<li>课程虽然是单台机器部署，但是支持服务拆分，后续也会增加这部分内容。</li>\n</ul>\n<h3 id="相关文档">相关文档</h3>\n<ul>\n<li><a href="https://es6.ruanyifeng.com/" rel="nofollow noopener noreferrer external" target="_blank">https://es6.ruanyifeng.com/</a></li>\n</ul>\n<h3 id="总结-1">总结</h3>\n<p>你了解了 nodejs 和 javascript 区别，有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解 nodejs 处理 http 请求，继续加油吧，Let’s go！</p>',{headings:1225,localImagePaths:1253,remoteImagePaths:1254,frontmatter:1255,imagePaths:1259},[1226,1229,1232,1235,1236,1238,1240,1243,1245,1247,1249,1251],{depth:89,slug:1227,text:1228},"ecmascript","ECMAScript",{depth:89,slug:1230,text:1231},"javascript","Javascript",{depth:89,slug:1233,text:1234},"nodejs","Nodejs",{depth:89,slug:117,text:117},{depth:89,slug:1237,text:1237},"前端和服务端的区别",{depth:150,slug:1239,text:1239},"稳定性",{depth:150,slug:1241,text:1242},"内存和-cpu","内存和 CPU",{depth:150,slug:1244,text:1244},"日志记录",{depth:150,slug:1246,text:1246},"安全",{depth:150,slug:1248,text:1248},"集群和服务拆分",{depth:89,slug:1250,text:1250},"相关文档",{depth:89,slug:1252,text:117},"总结-1",[],[],{title:1216,published:1256,tags:1257,categories:1258,minutes:89},["Date","2020-01-27T07:57:34.000Z"],[587],[587],[],"c/重学c语言helloworld篇",{id:1260,data:1262,body:1266,filePath:1267,digest:1268,rendered:1269},{title:1263,published:1264,description:34,tags:1265,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"重学 C 语言 HelloWorld 篇",["Date","2021-03-03T13:59:58.000Z"],[74],'## 前言\n\n按照编程界的惯例，学习一门语言第一件事就是输出“Hello World”，这大概是专属程序员的情节（类似格子衫和植发）。\n\n以下就是各个主流编程语言的 HelloWorld 写法，为什么要列出各个语言的 HelloWorld？我们比较他们的不同之处，从中学到语言设计哲学和编程理念。\n\n网上各个入门教程中只会告诉你 HelloWorld 的每一行代码是什么意思，然后你一脸懵逼，为什么要这么写，为什么要引入包，而你的疑问得到的解答可能是以后学到了你就明白了。等你学完后上手实践一段时间你确实明白，开头要引入包，Java 要写 Class，你认为你明白了，但是你真的理解每一行代码后面得编程理念吗？\n\n## 示例\n\nC\n\n```c\n\n#include <stdio.h>\n\nint main(void)\n{\n\n   printf("Hello, World! \\n");\n\n   return 0;\n}\n\n```\n\nGo\n\n```go\npackage main\n\nimport "fmt"\n\nfunc main() {\n\n    fmt.Println("Hello, World!")\n\n}\n```\n\nJava\n\n```java\nimport static java.lang.System.out;\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n\n        System.out.println("Hello World");\n\n    }\n}\n\n```\n\nPHP\n\n```php\n<?php\n\necho "Hello World!";\n\n```\n\nPython\n\n```python\n\nprint("Hello, World!")\n\n```\n\n## 说明\n\n以上主流编程语言大部分人都接触过，前 3 种都是编译型语言，后 2 种是解释型语言。\n\n我们观察下前 3 种第一行，Java 和 Go 都有 `import xx`，C 有`include`，都是包含、引入的意思。\n\n编程语言中，不同功能划分到不同模块中去，字符串、网络、http 等等，在不同的编程语言有不同的命名。Java 和 Go 中叫包，C 语言叫头文件。设计包目的是降低代码耦合度，提高代码复用性和可维护性。假设你要处理字符串，就只要在字符串的包中查找对应的方法。\n\n为什么 PHP 和 Python 没有 import 包呢，因为它们为了提高开发者开发效率，把很多函数在语言内部实现了，你可以直接调用。\n\n两者孰优孰劣，后面我们在讲编译型语言和解释型语言时会详细分析。\n\n### 代码解析\n\n#### 第一行\n\n```c\n\n#include <stdio.h>\n\n```\n\nC 语言后缀名 h 的文件就是头文件，它包含了函数声明和定义，没有具体实现的代码。\n\n这句话的意思是你不用管也不用看这个方法怎么实现，代码细节是什么。你只需要按头文件中指定的函数的名字，传入的参数，返回的结果调用。\n\n为什么要这样？比方说 A 写的函数 a 调用 B 写的的一个方法 b，\n- a 直接依赖 b，如果 B 修改了 b 的返回结果类型，a 也需要修改。\n- a 依赖 b 的头文件，b 修改返回结果类型后，为了兼容头文件，内部转换成头文件定义的返回类型，a 就不需要修改。\n\n#### 第二行\n\n```c\n\nint main(void)\n{\n\n}\n\n```\n\nC 语言程序都需要包含 main() 函数， 代码从 main() 函数开始执行。main 函数就是进入一个房间的大门，所有函数执行的起点。Go 和 Java 也是这样设计的。\n\n为什么需要 main 函数？一个文件中可以定义多个函数，编程语言怎么知道要从哪个开始执行呢？就像进入一个房间，肯定要先找大门，从门进入（别抬杠走窗户）。\n\n`int`是函数的返回值数据类型关键字，每个函数都要定义返回值类型，如果类型不符合要求，编译就无法通过，无法执行。有些函数执行所需的操作而不返回值，在这种情况下，关键字是`void`。\n\n`main`是函数名，文件中函数名不能重复。\n\n`void`是参数，当函数被调用时，向参数传递一个值，这个值被称为实际参数。如果函数不包含参数，就传入`void`。\n\n#### 第三行\n\n```c\n\nprintf("Hello, World! \\n");\n\n```\n\n`printf` 用于格式化输出到屏幕。printf() 函数在 `"stdio.h"` 头文件中声明。\n\n#### 第四行\n\n```c\n\nreturn 0;\n\n```\n\n用于表示退出程序。在程序逻辑执行完后，如果返回类型不是`void`，就必须返回指定类型数据，这里要求必须返回`int`类型数据，就返回`0`\n\n## 总结\n\n在介绍 C 语言 HelloWorld 后，和其他语言 HelloWorld 比较。介绍了语言本身的设计理念。详细解释 HelloWorld 中每一行代码的意义。万丈高楼平地起，这还只是学习 C 语言的第一步。\n\n与君共勉。\n\n## 微信公众号\n\n\n> 加好友深入交流，解答问题。',"src/content/posts/c/重学C语言Helloworld篇.md","2f414bdd549abc0c",{html:1270,metadata:1271},'<h2 id="前言">前言</h2>\n<p>按照编程界的惯例，学习一门语言第一件事就是输出“Hello World”，这大概是专属程序员的情节（类似格子衫和植发）。</p>\n<p>以下就是各个主流编程语言的 HelloWorld 写法，为什么要列出各个语言的 HelloWorld？我们比较他们的不同之处，从中学到语言设计哲学和编程理念。</p>\n<p>网上各个入门教程中只会告诉你 HelloWorld 的每一行代码是什么意思，然后你一脸懵逼，为什么要这么写，为什么要引入包，而你的疑问得到的解答可能是以后学到了你就明白了。等你学完后上手实践一段时间你确实明白，开头要引入包，Java 要写 Class，你认为你明白了，但是你真的理解每一行代码后面得编程理念吗？</p>\n<h2 id="示例">示例</h2>\n<p>C</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="c"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">#include</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> &#x3C;stdio.h></span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">void</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">   printf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Hello, World! </span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">   return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<p>Go</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="go"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">package</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fmt</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">func</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    fmt.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">Println</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Hello, World!"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>Java</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="java"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">import</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> java.lang.System.out;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">public</span><span style="color:#D73A49;--shiki-dark:#F97583"> class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> HelloWorld</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    public</span><span style="color:#D73A49;--shiki-dark:#F97583"> static</span><span style="color:#D73A49;--shiki-dark:#F97583"> void</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">String</span><span style="color:#24292E;--shiki-dark:#E1E4E8">[] </span><span style="color:#E36209;--shiki-dark:#FFAB70">args</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        System.out.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">println</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Hello World"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<p>PHP</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="php"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;?</span><span style="color:#005CC5;--shiki-dark:#79B8FF">php</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">echo</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "Hello World!"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"></span></code></pre>\n<p>Python</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="python"><code><span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">print</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Hello, World!"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span></code></pre>\n<h2 id="说明">说明</h2>\n<p>以上主流编程语言大部分人都接触过，前 3 种都是编译型语言，后 2 种是解释型语言。</p>\n<p>我们观察下前 3 种第一行，Java 和 Go 都有 <code>import xx</code>，C 有<code>include</code>，都是包含、引入的意思。</p>\n<p>编程语言中，不同功能划分到不同模块中去，字符串、网络、http 等等，在不同的编程语言有不同的命名。Java 和 Go 中叫包，C 语言叫头文件。设计包目的是降低代码耦合度，提高代码复用性和可维护性。假设你要处理字符串，就只要在字符串的包中查找对应的方法。</p>\n<p>为什么 PHP 和 Python 没有 import 包呢，因为它们为了提高开发者开发效率，把很多函数在语言内部实现了，你可以直接调用。</p>\n<p>两者孰优孰劣，后面我们在讲编译型语言和解释型语言时会详细分析。</p>\n<h3 id="代码解析">代码解析</h3>\n<h4 id="第一行">第一行</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="c"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">#include</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> &#x3C;stdio.h></span></span>\n<span class="line"></span></code></pre>\n<p>C 语言后缀名 h 的文件就是头文件，它包含了函数声明和定义，没有具体实现的代码。</p>\n<p>这句话的意思是你不用管也不用看这个方法怎么实现，代码细节是什么。你只需要按头文件中指定的函数的名字，传入的参数，返回的结果调用。</p>\n<p>为什么要这样？比方说 A 写的函数 a 调用 B 写的的一个方法 b，</p>\n<ul>\n<li>a 直接依赖 b，如果 B 修改了 b 的返回结果类型，a 也需要修改。</li>\n<li>a 依赖 b 的头文件，b 修改返回结果类型后，为了兼容头文件，内部转换成头文件定义的返回类型，a 就不需要修改。</li>\n</ul>\n<h4 id="第二行">第二行</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="c"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">void</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<p>C 语言程序都需要包含 main() 函数， 代码从 main() 函数开始执行。main 函数就是进入一个房间的大门，所有函数执行的起点。Go 和 Java 也是这样设计的。</p>\n<p>为什么需要 main 函数？一个文件中可以定义多个函数，编程语言怎么知道要从哪个开始执行呢？就像进入一个房间，肯定要先找大门，从门进入（别抬杠走窗户）。</p>\n<p><code>int</code>是函数的返回值数据类型关键字，每个函数都要定义返回值类型，如果类型不符合要求，编译就无法通过，无法执行。有些函数执行所需的操作而不返回值，在这种情况下，关键字是<code>void</code>。</p>\n<p><code>main</code>是函数名，文件中函数名不能重复。</p>\n<p><code>void</code>是参数，当函数被调用时，向参数传递一个值，这个值被称为实际参数。如果函数不包含参数，就传入<code>void</code>。</p>\n<h4 id="第三行">第三行</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="c"><code><span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">printf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"Hello, World! </span><span style="color:#005CC5;--shiki-dark:#79B8FF">\\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<p><code>printf</code> 用于格式化输出到屏幕。printf() 函数在 <code>"stdio.h"</code> 头文件中声明。</p>\n<h4 id="第四行">第四行</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="c"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"></span></code></pre>\n<p>用于表示退出程序。在程序逻辑执行完后，如果返回类型不是<code>void</code>，就必须返回指定类型数据，这里要求必须返回<code>int</code>类型数据，就返回<code>0</code></p>\n<h2 id="总结">总结</h2>\n<p>在介绍 C 语言 HelloWorld 后，和其他语言 HelloWorld 比较。介绍了语言本身的设计理念。详细解释 HelloWorld 中每一行代码的意义。万丈高楼平地起，这还只是学习 C 语言的第一步。</p>\n<p>与君共勉。</p>\n<h2 id="微信公众号">微信公众号</h2>\n<blockquote>\n<p>加好友深入交流，解答问题。</p>\n</blockquote>',{headings:1272,localImagePaths:1289,remoteImagePaths:1290,frontmatter:1291,imagePaths:1295},[1273,1274,1276,1277,1279,1281,1283,1285,1287,1288],{depth:49,slug:83,text:83},{depth:49,slug:1275,text:1275},"示例",{depth:49,slug:650,text:650},{depth:89,slug:1278,text:1278},"代码解析",{depth:150,slug:1280,text:1280},"第一行",{depth:150,slug:1282,text:1282},"第二行",{depth:150,slug:1284,text:1284},"第三行",{depth:150,slug:1286,text:1286},"第四行",{depth:49,slug:117,text:117},{depth:49,slug:218,text:218},[],[],{title:1263,published:1292,tags:1293,categories:1294,minutes:316},["Date","2021-03-03T13:59:58.000Z"],[74],[74],[],"node/node新手课6项目需求分析和展示",{id:1296,data:1298,body:1302,filePath:1303,digest:1304,rendered:1305},{title:1299,published:1300,description:34,tags:1301,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（6）项目需求分析和展示",["Date","2020-02-15T07:57:34.000Z"],[587],"上节课我们讲解了 js 中的 callback，promise，async 和 await。这节课我们介绍项目功能和技术架构。\r\n\r\n## 项目介绍\r\n\r\n果酱先生是一个男士穿搭推荐社区，分享当下男士生活穿搭，记录生活仪式感，手把手教你如何培养自己的穿搭理念。\r\n\r\n## 项目展示\r\n\r\n\r\n\r\n## 功能模块\r\n\r\n* 主要功能有用户注册、用户登陆、分享、用户打卡、查看衣品圈和点赞等。\r\n\r\n## 项目架构\r\n\r\n### koa2\r\n\r\n* koa2 是一个优美的微框架，你可以按照自己的习惯和想法来组织你的项目，因此我们提供了模板项目，它是我们团队从诸多项目开发中提炼而来的一种规范，它不仅仅是结构，风格还有诸多细节。\r\n\r\n### mysql\r\n\r\n* mysql 是最流行的关系型数据库，作为服务端开发，我们避免不了与 mysql 打交道，所以 mysql 是服务端开发人员的必备技能。\r\n\r\n### pm2\r\n\r\n* PM2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\r\n\r\n### nginx\r\n\r\n* 轻量级 Web 服务器，它是一个高性能的 HTTP 和反向代理服务器，以事件驱动的方式编写。在性能上，它占用很少的系统资源，能支持更多的并发连接，达到更高的访问效率；在功能上，它是优秀的代理服务器和负载均衡服务器；在安装配置上，它安装简单、配置灵活。\r\n\r\n### redis\r\n\r\n* redis 是最常用的非关系型数据库，它是开源的基于键值的存储服务系统，支持多种数据结构，支持多种编程语言，高性能、功能丰富。\r\n\r\n## 总结\r\n\r\n你有没有被项目的技术架构吓到呢？不用担心，我们一步一个脚印，不断坚持，终将会成为更优秀的自己。\r\n\r\n有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们搭建项目结构，配置开发环境，是不是期待已久呢？继续加油吧，Let's go！","src/content/posts/node/node新手课（6）项目需求分析和展示.md","d7c05c5beddfde24",{html:1306,metadata:1307},'<p>上节课我们讲解了 js 中的 callback，promise，async 和 await。这节课我们介绍项目功能和技术架构。</p>\n<h2 id="项目介绍">项目介绍</h2>\n<p>果酱先生是一个男士穿搭推荐社区，分享当下男士生活穿搭，记录生活仪式感，手把手教你如何培养自己的穿搭理念。</p>\n<h2 id="项目展示">项目展示</h2>\n<h2 id="功能模块">功能模块</h2>\n<ul>\n<li>主要功能有用户注册、用户登陆、分享、用户打卡、查看衣品圈和点赞等。</li>\n</ul>\n<h2 id="项目架构">项目架构</h2>\n<h3 id="koa2">koa2</h3>\n<ul>\n<li>koa2 是一个优美的微框架，你可以按照自己的习惯和想法来组织你的项目，因此我们提供了模板项目，它是我们团队从诸多项目开发中提炼而来的一种规范，它不仅仅是结构，风格还有诸多细节。</li>\n</ul>\n<h3 id="mysql">mysql</h3>\n<ul>\n<li>mysql 是最流行的关系型数据库，作为服务端开发，我们避免不了与 mysql 打交道，所以 mysql 是服务端开发人员的必备技能。</li>\n</ul>\n<h3 id="pm2">pm2</h3>\n<ul>\n<li>PM2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</li>\n</ul>\n<h3 id="nginx">nginx</h3>\n<ul>\n<li>轻量级 Web 服务器，它是一个高性能的 HTTP 和反向代理服务器，以事件驱动的方式编写。在性能上，它占用很少的系统资源，能支持更多的并发连接，达到更高的访问效率；在功能上，它是优秀的代理服务器和负载均衡服务器；在安装配置上，它安装简单、配置灵活。</li>\n</ul>\n<h3 id="redis">redis</h3>\n<ul>\n<li>redis 是最常用的非关系型数据库，它是开源的基于键值的存储服务系统，支持多种数据结构，支持多种编程语言，高性能、功能丰富。</li>\n</ul>\n<h2 id="总结">总结</h2>\n<p>你有没有被项目的技术架构吓到呢？不用担心，我们一步一个脚印，不断坚持，终将会成为更优秀的自己。</p>\n<p>有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们搭建项目结构，配置开发环境，是不是期待已久呢？继续加油吧，Let’s go！</p>',{headings:1308,localImagePaths:1328,remoteImagePaths:1329,frontmatter:1330,imagePaths:1334},[1309,1311,1313,1315,1317,1319,1321,1323,1325,1327],{depth:49,slug:1310,text:1310},"项目介绍",{depth:49,slug:1312,text:1312},"项目展示",{depth:49,slug:1314,text:1314},"功能模块",{depth:49,slug:1316,text:1316},"项目架构",{depth:89,slug:1318,text:1318},"koa2",{depth:89,slug:1320,text:1320},"mysql",{depth:89,slug:1322,text:1322},"pm2",{depth:89,slug:1324,text:1324},"nginx",{depth:89,slug:1326,text:1326},"redis",{depth:49,slug:117,text:117},[],[],{title:1299,published:1331,tags:1332,categories:1333,minutes:89},["Date","2020-02-15T07:57:34.000Z"],[587],[587],[],"node/node新手课5callback-promise和async-await",{id:1335,data:1337,body:1341,filePath:1342,digest:1343,rendered:1344},{title:1338,published:1339,description:34,tags:1340,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（5）callback-promise 和 async-await",["Date","2020-02-10T07:57:34.000Z"],[587],"上节课我们讲解了 nodejs 处理 http 请求，今天我们讲下 callback, promise 和 async, await\r\n\r\n### callback\r\n\r\njs 代码处理逻辑都是异步，会造成 callback 层层嵌套。简称：回调地狱，非常不好维护，我们举例说明下\r\n我们在 sir-node 中新建个目录 callback-test, 里面新建个 callback.js\r\n\r\n```sh\r\n$ mkdir callback-test && cd callback-test/\r\n$ touch callback.js\r\n```\r\n\r\ncallback.js\r\n\r\n```js\r\nconst fs = require('fs')\r\nconst path  = require('path')\r\n//callback 方式获取文件内容\r\nfunction getFile(fileName,callback){\r\n    const fullName = path.resolve(__dirname,\"\",fileName)\r\n    fs.readFile(fullName,(err,data)=>{\r\n        if(err){\r\n            console.error(err)\r\n            return\r\n        }\r\n        callback(JSON.parse(data.toString()))\r\n    })\r\n}\r\n// 测试\r\ngetFile('a.json',aData=>{\r\n    console.log('aData',aData)\r\n    getFile(aData.next,bData=>{\r\n        console.log('bData',bData)\r\n        getFile(bData.next,cData=>{\r\n            console.log('cData',cData)\r\n        })\r\n    })\r\n})\r\n```\r\n\r\n再新建 3 个文件 a.json, b.json, c.json，内容如下\r\n\r\n```json\r\n// a.json\r\n\r\n{\"next\":\"b.json\"}\r\n\r\n// b.json\r\n\r\n{\"next\":\"c.json\"}\r\n\r\n// c.json\r\n\r\n{\"next\":\"test\"}\r\n```\r\n\r\n```sh\r\n$ node callback.js\r\naData { next: 'b.json' }\r\nbData { next: 'c.json' }\r\ncData { next: 'test' }\r\n\r\n```\r\n\r\n由此可见，callback 层层嵌套。当然现在只有 3 层，实际项目中可能会有很多层，可想而知维护的难度，接下来就是解决方案。\r\n\r\n### promise\r\n\r\n新建个 promise.js 文件，代码如下\r\n\r\n```js\r\nconst fs = require('fs')\r\nconst path  = require('path')\r\n//promise 方式获取文件内容\r\nfunction getFile(fileName){\r\n    const promise = new Promise((resolve,reject)=>{\r\n        const fullName = path.resolve(__dirname,\"\",fileName)\r\n        fs.readFile(fullName,(err,data)=>{\r\n            if(err){\r\n                reject(err)\r\n                return\r\n            }\r\n            resolve(JSON.parse(data.toString()))\r\n        })\r\n    })\r\n    return promise\r\n}\r\n// 测试\r\ngetFile('a.json').then(aData=>{\r\n    console.log('aData',aData)\r\n    return getFile(aData.next)\r\n}).then(bData=>{\r\n    console.log('bData',bData)\r\n    return getFile(bData.next)\r\n}).then(cData=>{\r\n    console.log('cData',cData)\r\n})\r\n```\r\n\r\n表面看上去代码略微繁琐，但是使用起来很简洁，promise 把 callback 层层嵌套的方式变成了很多个 then 平铺，当然 promise 无法解决把异步代码写成同步的风格，我们来讲下异步写法的终极解决方案，async 和 await\r\n\r\n### async 和 await\r\n\r\n新建个 async.js 文件，代码如下\r\n\r\n```js\r\nconst fs = require('fs')\r\nconst path  = require('path')\r\n//promise 方式获取文件内容\r\nfunction getFile(fileName){\r\n    const promise = new Promise((resolve,reject)=>{\r\n        const fullName = path.resolve(__dirname,\"\",fileName)\r\n        fs.readFile(fullName,(err,data)=>{\r\n            if(err){\r\n                reject(err)\r\n                return\r\n            }\r\n            resolve(JSON.parse(data.toString()))\r\n        })\r\n    })\r\n    return promise\r\n}\r\n// 测试\r\nasync function getFileContent(){\r\n    aData = await getFile('a.json')\r\n    console.log('aData',aData)\r\n    bData = await getFile(aData.next)\r\n    console.log('bData',bData)\r\n    cData = await getFile(bData.next)\r\n    console.log('cData',cData)\r\n}\r\ngetFileContent()\r\n```\r\n\r\nasync 和 await 也是基于 promise 的，代码写法和同步一样了。\r\n\r\n## 总结\r\n\r\n今天我们讲了 callback, promise 和 async, await。你掌握了吗？在项目中我们使用的 koa2 框架完全支持 async 和 await。\r\n有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n下节课我们介绍项目功能和技术架构，继续加油吧，Let's go！","src/content/posts/node/node新手课（5）callback-promise和async-await.md","450c22b2098d661b",{html:1345,metadata:1346},'<p>上节课我们讲解了 nodejs 处理 http 请求，今天我们讲下 callback, promise 和 async, await</p>\n<h3 id="callback">callback</h3>\n<p>js 代码处理逻辑都是异步，会造成 callback 层层嵌套。简称：回调地狱，非常不好维护，我们举例说明下\r\n我们在 sir-node 中新建个目录 callback-test, 里面新建个 callback.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mkdir</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> callback-test</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#x26;&#x26; </span><span style="color:#005CC5;--shiki-dark:#79B8FF">cd</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> callback-test/</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> touch</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> callback.js</span></span></code></pre>\n<p>callback.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fs</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'fs\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="color:#D73A49;--shiki-dark:#F97583">  =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'path\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//callback 方式获取文件内容</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">fileName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fullName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(__dirname,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,fileName)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fullName,(</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">        callback</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(data.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'a.json\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">aData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'aData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,aData)</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(aData.next,</span><span style="color:#E36209;--shiki-dark:#FFAB70">bData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'bData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,bData)</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">        getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(bData.next,</span><span style="color:#E36209;--shiki-dark:#FFAB70">cData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'cData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,cData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<p>再新建 3 个文件 a.json, b.json, c.json，内容如下</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="json"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// a.json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span><span style="color:#005CC5;--shiki-dark:#79B8FF">"next"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"b.json"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// b.json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span><span style="color:#005CC5;--shiki-dark:#79B8FF">"next"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"c.json"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// c.json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span><span style="color:#005CC5;--shiki-dark:#79B8FF">"next"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"test"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> node</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> callback.js</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">aData</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> next:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'b.json\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">bData</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> next:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'c.json\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">cData</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> {</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> next:</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'test\'</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> }</span></span>\n<span class="line"></span></code></pre>\n<p>由此可见，callback 层层嵌套。当然现在只有 3 层，实际项目中可能会有很多层，可想而知维护的难度，接下来就是解决方案。</p>\n<h3 id="promise">promise</h3>\n<p>新建个 promise.js 文件，代码如下</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fs</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'fs\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="color:#D73A49;--shiki-dark:#F97583">  =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'path\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//promise 方式获取文件内容</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">fileName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> promise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fullName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(__dirname,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,fileName)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fullName,(</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err){</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">                reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(data.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    })</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> promise</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'a.json\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">aData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'aData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,aData)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(aData.next)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">bData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'bData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,bData)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(bData.next)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">then</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">cData</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'cData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,cData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<p>表面看上去代码略微繁琐，但是使用起来很简洁，promise 把 callback 层层嵌套的方式变成了很多个 then 平铺，当然 promise 无法解决把异步代码写成同步的风格，我们来讲下异步写法的终极解决方案，async 和 await</p>\n<h3 id="async-和-await">async 和 await</h3>\n<p>新建个 async.js 文件，代码如下</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fs</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'fs\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="color:#D73A49;--shiki-dark:#F97583">  =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'path\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//promise 方式获取文件内容</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">fileName</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> promise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> fullName</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> path.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(__dirname,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">""</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,fileName)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        fs.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">readFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fullName,(</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">data</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err){</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">                reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(data.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    })</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> promise</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 测试</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFileContent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    aData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'a.json\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'aData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,aData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    bData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(aData.next)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'bData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,bData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    cData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#D73A49;--shiki-dark:#F97583"> await</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> getFile</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(bData.next)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'cData\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,cData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">getFileContent</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>\n<p>async 和 await 也是基于 promise 的，代码写法和同步一样了。</p>\n<h2 id="总结">总结</h2>\n<p>今天我们讲了 callback, promise 和 async, await。你掌握了吗？在项目中我们使用的 koa2 框架完全支持 async 和 await。\r\n有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n下节课我们介绍项目功能和技术架构，继续加油吧，Let’s go！</p>',{headings:1347,localImagePaths:1356,remoteImagePaths:1357,frontmatter:1358,imagePaths:1362},[1348,1350,1352,1355],{depth:89,slug:1349,text:1349},"callback",{depth:89,slug:1351,text:1351},"promise",{depth:89,slug:1353,text:1354},"async-和-await","async 和 await",{depth:49,slug:117,text:117},[],[],{title:1338,published:1359,tags:1360,categories:1361,minutes:89},["Date","2020-02-10T07:57:34.000Z"],[587],[587],[],"node/node新手课8路由",{id:1363,data:1365,body:1369,filePath:1370,digest:1371,rendered:1372},{title:1366,published:1367,description:34,tags:1368,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（8）路由",["Date","2020-03-10T07:57:34.000Z"],[587],"上节课我们来搭建项目架构，koa2 和 mysql。这节课我们讲解 koa2 的路由\r\n\r\n### 路由\r\n\r\n路由就是客户端的请求发送到服务端的的 url。我们打开浏览器输入 http://www.baidu.com 进入百度，这个网址就是路由。\r\n\r\n> 根据功能划分路由，把路由和数据处理分离，符合单一职责的设计原则\r\n\r\n上节课我们搭建的项目的 routes 目录就是用来存放所有路由文件。\r\n\r\n我们在 sir-koa 目录下新建 app 目录，在 app 目录中新建 api 和 model 目录，分别作为控制层和模型层。\r\n\r\n路由调用控制层的方法。控制层接收前端传过来的参数，调用模型层的方法进行数据库操作，处理后返回结果给前端。\r\n\r\n入口文件 app.js 中调用了路由模块\r\n\r\n```js\r\n// routes\r\napp.use(index.routes(), index.allowedMethods())\r\napp.use(users.routes(), users.allowedMethods())\r\n```\r\n\r\n## 功能模块\r\n\r\n功能分为用户模块和卡片模块，我们把列表每条信息当成一个卡片。\r\n\r\n> routes/user.js\r\n\r\n```js\r\nconst router = require('koa-router')()\r\nconst userApi = require('../app/api/user')\r\n\r\nrouter.prefix('/user')\r\n//微信登录\r\nrouter.post('/wechatlogin', function (ctx, next) {\r\n  userApi.wechatLogin(ctx)\r\n})\r\n// 手机号登录\r\nrouter.post('/login', function (ctx, next) {\r\n  userApi.login(ctx)\r\n})\r\n//更新个人信息\r\nrouter.put('/info', function (ctx, next) {\r\n  userApi.info(ctx)\r\n})\r\n//查询个人信息\r\nrouter.get('/me', function (ctx, next) {\r\n  userApi.me(ctx)\r\n})\r\n\r\nmodule.exports = router\r\n```\r\n\r\n> routes/index.js\r\n\r\n```js\r\n\r\nconst indexApi = require('../app/api/index')\r\n//首页列表\r\nrouter.get('/card', async (ctx, next) => {\r\n  indexApi.getCard(ctx)\r\n})\r\n//打卡\r\nrouter.post('/card', async (ctx, next) => {\r\n  indexApi.addCard(ctx)\r\n})\r\n//点赞\r\nrouter.post('/praise', async (ctx, next) => {\r\n  indexApi.praise(ctx)\r\n})\r\n```\r\n\r\n### 接口文档\r\n\r\nhttps://note.youdao.com/ynoteshare1/index.html?id=ae97d2c2bc96012409533ab7679061d2&type=note\r\n\r\n## 总结\r\n\r\nkoa2 的路由就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解 nodejs 操作 mysql，继续加油吧，Let's go！","src/content/posts/node/node新手课（8）路由.md","4aba95eb06734ae2",{html:1373,metadata:1374},'<p>上节课我们来搭建项目架构，koa2 和 mysql。这节课我们讲解 koa2 的路由</p>\n<h3 id="路由">路由</h3>\n<p>路由就是客户端的请求发送到服务端的的 url。我们打开浏览器输入 <a href="http://www.baidu.com" rel="nofollow noopener noreferrer external" target="_blank">http://www.baidu.com</a> 进入百度，这个网址就是路由。</p>\n<blockquote>\n<p>根据功能划分路由，把路由和数据处理分离，符合单一职责的设计原则</p>\n</blockquote>\n<p>上节课我们搭建的项目的 routes 目录就是用来存放所有路由文件。</p>\n<p>我们在 sir-koa 目录下新建 app 目录，在 app 目录中新建 api 和 model 目录，分别作为控制层和模型层。</p>\n<p>路由调用控制层的方法。控制层接收前端传过来的参数，调用模型层的方法进行数据库操作，处理后返回结果给前端。</p>\n<p>入口文件 app.js 中调用了路由模块</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// routes</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(index.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">routes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(), index.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">allowedMethods</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">app.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">use</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(users.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">routes</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(), users.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">allowedMethods</span><span style="color:#24292E;--shiki-dark:#E1E4E8">())</span></span></code></pre>\n<h2 id="功能模块">功能模块</h2>\n<p>功能分为用户模块和卡片模块，我们把列表每条信息当成一个卡片。</p>\n<blockquote>\n<p>routes/user.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> router</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'koa-router\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)()</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> userApi</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../app/api/user\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">prefix</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/user\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//微信登录</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/wechatlogin\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">wechatLogin</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 手机号登录</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/login\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">login</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//更新个人信息</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">put</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/info\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">info</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//查询个人信息</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/me\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">function</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  userApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">me</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> router</span></span></code></pre>\n<blockquote>\n<p>routes/index.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> indexApi</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../app/api/index\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//首页列表</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/card\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">getCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//打卡</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/card\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">addCard</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">//点赞</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">router.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'/praise\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">async</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#E36209;--shiki-dark:#FFAB70">ctx</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">next</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">  indexApi.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">praise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(ctx)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span></code></pre>\n<h3 id="接口文档">接口文档</h3>\n<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=ae97d2c2bc96012409533ab7679061d2&#x26;type=note" rel="nofollow noopener noreferrer external" target="_blank">https://note.youdao.com/ynoteshare1/index.html?id=ae97d2c2bc96012409533ab7679061d2&#x26;type=note</a></p>\n<h2 id="总结">总结</h2>\n<p>koa2 的路由就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解 nodejs 操作 mysql，继续加油吧，Let’s go！</p>',{headings:1375,localImagePaths:1382,remoteImagePaths:1383,frontmatter:1384,imagePaths:1388},[1376,1378,1379,1381],{depth:89,slug:1377,text:1377},"路由",{depth:49,slug:1314,text:1314},{depth:89,slug:1380,text:1380},"接口文档",{depth:49,slug:117,text:117},[],[],{title:1366,published:1385,tags:1386,categories:1387,minutes:49},["Date","2020-03-10T07:57:34.000Z"],[587],[587],[],"node/node新手课4nodejs处理http请求",{id:1389,data:1391,body:1395,filePath:1396,digest:1397,rendered:1398},{title:1392,published:1393,description:34,tags:1394,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（4）nodejs 处理 http 请求",["Date","2020-02-01T07:57:34.000Z"],[587],"上节课我们成功用开启了一个 http 服务，写了个 helloworld，今天我们讲解下 nodejs 是如何处理 http 的 get 和 post 请求。\r\n\r\n我们先新建个 http-test 目录，该目录主要是用做测试 nodejs 代码，现在切换到这个目录\r\n\r\n```js\r\n$ mkdir http-test\r\n$ cd http-test/\r\n```\r\n\r\n### get 请求\r\n\r\n* 客户端向服务端获取数据，如查询用户信息\r\n* 通过 querystring 传递数据，如 a.html?id=1&status=1\r\n* 浏览器输入网址直接访问，就是发送 get 请求\r\n\r\n#### 代码示例\r\n\r\n我们新建个 get.js 文件，编辑以下内容。\r\n\r\n```js\r\nconst http = require(\"http\")\r\nconst querystring = require('querystring')\r\n\r\nhttp.createServer((request,response)=>{\r\n    const url =request.url // 获取完整 url\r\n    console.log(\"method \",request.method) //GET\r\n    console.log(\"url \",url)\r\n    const query = querystring.parse(url.split(\"?\")[1])// 解析 querystring\r\n    response.end(JSON.stringify(query));// 把 querystring 返回到页面\r\n}).listen(3000)\r\n\r\nconsole.log('Server running at http://127.0.0.1:3000/');\r\n```\r\n\r\n启动 get.js\r\n\r\n```js\r\n$ node get.js\r\nServer running at http://127.0.0.1:3000/\r\n```\r\n\r\n打开浏览器输入 http://127.0.0.1:3000/user/list?i=1&word=abc\r\n\r\n\r\n控制台也打印出了 method 和 url\r\n\r\n### post 请求\r\n\r\n* 客户端向服务端发送数据，如用户注册\r\n* 浏览器无法直接模拟 post 请求，需要写 js 代码或通过接口测试工具，比如 postman\r\n\r\n我们新建个 post.js 文件，编辑以下内容。\r\n\r\n#### 代码示例\r\n\r\n```js\r\nconst http = require(\"http\")\r\n\r\nhttp.createServer((request,response)=>{\r\n    if(request.method === \"POST\"){\r\n        // 数据格式\r\n        console.log('content-type',request.headers['content-type']);\r\n        // 接收数据\r\n        let postData = \"\"\r\n        // 客户端请求传输数据的时候触发\r\n        request.on('data',chunk=>{\r\n            postData += chunk.toString()\r\n        })\r\n        // 客户端请求结束的时候触发\r\n        request.on('end',()=>{\r\n            console.log(postData)\r\n            response.end(\"post end ...\")// 异步方法，在这里返回\r\n        })\r\n\r\n    }\r\n\r\n}).listen(3000)\r\n\r\nconsole.log('Server running at http://127.0.0.1:3000/');\r\n```\r\n\r\n启动 post.js\r\n\r\n```js\r\n$ node post.js\r\nServer running at http://127.0.0.1:3000/\r\n```\r\n\r\n用 postman 模拟发送 post 请求\r\n结果如下\r\n\r\n\r\n### http 请求\r\n\r\n现在综合处理 get 和 post 请求，新建个 http.js，编辑以下内容。\r\n\r\n```js\r\nconst http = require(\"http\")\r\nconst querystring = require('querystring')\r\n\r\nhttp.createServer((request,response)=>{\r\n    const url =request.url // 获取完整 url\r\n    const path = url.split('?')[0]\r\n    const query = querystring.parse(url.split(\"?\")[1])// 解析 querystring\r\n    const method = request.method\r\n\r\n    // 设置返回格式为 json\r\n    response.setHeader('content-type','application/json')\r\n    // 返回的数据\r\n    const resData = {\r\n        method,url,path,query\r\n    }\r\n    if(method === 'GET'){\r\n        response.end(JSON.stringify(resData))\r\n    }\r\n    if(method === 'POST'){\r\n        let postData = ''\r\n        request.on('data',chunk=>{\r\n            postData += chunk.toString()\r\n        })\r\n        request.on('end',()=>{\r\n            resData.postData = postData\r\n            response.end(JSON.stringify(resData))\r\n        })\r\n    }\r\n}).listen(3000)\r\n\r\nconsole.log('Server running at http://127.0.0.1:3000/');\r\n```\r\n\r\n启动 http.js\r\n\r\n```sh\r\n$ node post.js\r\nServer running at http://127.0.0.1:3000/\r\n```\r\n\r\n现在不管是 get 请求还是 post 请求，我们都可以处理了。\r\n\r\n## 总结\r\n\r\n今天的内容你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们开始讲解 callback，promise，async 和 await，继续加油吧，Let's go！","src/content/posts/node/node新手课（4）nodejs处理http请求.md","b17bc63ad1e86e88",{html:1399,metadata:1400},'<p>上节课我们成功用开启了一个 http 服务，写了个 helloworld，今天我们讲解下 nodejs 是如何处理 http 的 get 和 post 请求。</p>\n<p>我们先新建个 http-test 目录，该目录主要是用做测试 nodejs 代码，现在切换到这个目录</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$ mkdir http</span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8">test</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$ cd http</span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8">test</span><span style="color:#D73A49;--shiki-dark:#F97583">/</span></span></code></pre>\n<h3 id="get-请求">get 请求</h3>\n<ul>\n<li>客户端向服务端获取数据，如查询用户信息</li>\n<li>通过 querystring 传递数据，如 a.html?id=1&#x26;status=1</li>\n<li>浏览器输入网址直接访问，就是发送 get 请求</li>\n</ul>\n<h4 id="代码示例">代码示例</h4>\n<p>我们新建个 get.js 文件，编辑以下内容。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> http</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"http"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> querystring</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'querystring\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">http.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createServer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">request</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> url</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8">request.url </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 获取完整 url</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"method "</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,request.method) </span><span style="color:#6A737D;--shiki-dark:#6A737D">//GET</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"url "</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,url)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> query</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> querystring.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(url.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">split</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"?"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">])</span><span style="color:#6A737D;--shiki-dark:#6A737D">// 解析 querystring</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(query));</span><span style="color:#6A737D;--shiki-dark:#6A737D">// 把 querystring 返回到页面</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Server running at http://127.0.0.1:3000/\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>\n<p>启动 get.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$ node get.js</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Server running at </span><span style="color:#6F42C1;--shiki-dark:#B392F0">http</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#6A737D;--shiki-dark:#6A737D">//127.0.0.1:3000/</span></span></code></pre>\n<p>打开浏览器输入 <a href="http://127.0.0.1:3000/user/list?i=1&#x26;word=abc" rel="nofollow noopener noreferrer external" target="_blank">http://127.0.0.1:3000/user/list?i=1&#x26;word=abc</a></p>\n<p>控制台也打印出了 method 和 url</p>\n<h3 id="post-请求">post 请求</h3>\n<ul>\n<li>客户端向服务端发送数据，如用户注册</li>\n<li>浏览器无法直接模拟 post 请求，需要写 js 代码或通过接口测试工具，比如 postman</li>\n</ul>\n<p>我们新建个 post.js 文件，编辑以下内容。</p>\n<h4 id="代码示例-1">代码示例</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> http</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"http"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">http.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createServer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">request</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(request.method </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "POST"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        // 数据格式</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'content-type\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,request.headers[</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'content-type\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]);</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        // 接收数据</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> postData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> ""</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        // 客户端请求传输数据的时候触发</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">on</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'data\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">chunk</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            postData </span><span style="color:#D73A49;--shiki-dark:#F97583">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> chunk.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">        // 客户端请求结束的时候触发</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">on</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'end\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,()</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(postData)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"post end ..."</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#6A737D;--shiki-dark:#6A737D">// 异步方法，在这里返回</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Server running at http://127.0.0.1:3000/\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>\n<p>启动 post.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">$ node post.js</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Server running at </span><span style="color:#6F42C1;--shiki-dark:#B392F0">http</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span><span style="color:#6A737D;--shiki-dark:#6A737D">//127.0.0.1:3000/</span></span></code></pre>\n<p>用 postman 模拟发送 post 请求\r\n结果如下</p>\n<h3 id="http-请求">http 请求</h3>\n<p>现在综合处理 get 和 post 请求，新建个 http.js，编辑以下内容。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> http</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"http"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> querystring</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'querystring\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">http.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createServer</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">request</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">response</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> url</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8">request.url </span><span style="color:#6A737D;--shiki-dark:#6A737D">// 获取完整 url</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> path</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> url.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">split</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'?\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> query</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> querystring.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">parse</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(url.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">split</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"?"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">])</span><span style="color:#6A737D;--shiki-dark:#6A737D">// 解析 querystring</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> method</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> request.method</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 设置返回格式为 json</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">setHeader</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'content-type\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'application/json\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // 返回的数据</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> resData</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        method,url,path,query</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(method </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'GET\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(resData))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(method </span><span style="color:#D73A49;--shiki-dark:#F97583">===</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'POST\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">){</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        let</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> postData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">on</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'data\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">chunk</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            postData </span><span style="color:#D73A49;--shiki-dark:#F97583">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> chunk.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">toString</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        request.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">on</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'end\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,()</span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            resData.postData </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> postData</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            response.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">JSON</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">stringify</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(resData))</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}).</span><span style="color:#6F42C1;--shiki-dark:#B392F0">listen</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3000</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'Server running at http://127.0.0.1:3000/\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></code></pre>\n<p>启动 http.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> node</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> post.js</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">Server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> running</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> at</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://127.0.0.1:3000/</span></span></code></pre>\n<p>现在不管是 get 请求还是 post 请求，我们都可以处理了。</p>\n<h2 id="总结">总结</h2>\n<p>今天的内容你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们开始讲解 callback，promise，async 和 await，继续加油吧，Let’s go！</p>',{headings:1401,localImagePaths:1416,remoteImagePaths:1417,frontmatter:1418,imagePaths:1422},[1402,1405,1407,1410,1412,1415],{depth:89,slug:1403,text:1404},"get-请求","get 请求",{depth:150,slug:1406,text:1406},"代码示例",{depth:89,slug:1408,text:1409},"post-请求","post 请求",{depth:150,slug:1411,text:1406},"代码示例-1",{depth:89,slug:1413,text:1414},"http-请求","http 请求",{depth:49,slug:117,text:117},[],[],{title:1392,published:1419,tags:1420,categories:1421,minutes:89},["Date","2020-02-01T07:57:34.000Z"],[587],[587],[],"node/node新手课9nodejs操作mysql",{id:1423,data:1425,body:1429,filePath:1430,digest:1431,rendered:1432},{title:1426,published:1427,description:34,tags:1428,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（9）nodejs 操作 mysql",["Date","2020-03-17T07:57:34.000Z"],[587],"上节课我们讲了 koa2 的路由，今天我们来讲解 nodejs 操作 mysql\r\n\r\n## 导入 sql 文件\r\n\r\nsql 文件地址\r\nhttps://github.com/guojiangclub/sir-node/blob/master/sir.sql\r\n\r\n安装 navicat，打开 navicat, 选择连接 - 新建连接，输入本地数据库地址，用户名和密码，成功连接到数据库。\r\n\r\n右键点击连接，选择新建数据库 sir\r\n\r\n右键点击 sir 数据库，选择运行数据库，导入 sql 文件。\r\n\r\n## mysql 测试\r\n\r\n新建 mysql-test 目录，新建 index.js\r\n\r\n```js\r\nconst mysql = require('mysql')\r\n\r\n// 创建链接对象\r\n const con = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: '数据库用户名',\r\n    password: '数据库密码',\r\n    port: '数据库端口，默认 3306',\r\n    database: 'sir'\r\n})\r\n\r\n// 开始连接\r\n con.connect()\r\n\r\n// 执行 sql 语句\r\nconst sql = `insert into test (title, content, author) values (' 标题 C', ' 内容 C','zhangsan');`\r\ncon.query(sql, (err, result) => {\r\n    if (err) {\r\n        console.error(err)\r\n        return\r\n    }\r\n    console.log(result)\r\n})\r\n\r\n// 关闭连接\r\n con.end()\r\n```\r\n\r\n执行如下操作\r\n\r\n```sh\r\n$ cd mysql-test/\r\n$ npm init -y\r\n$ npm i mysql --save\r\n$ node index.js\r\n```\r\n\r\n打开 sir 数据库，查看 test 表，现在已经新增了一条记录。\r\n\r\n## 项目添加 mysql 包\r\n\r\n在 sir-koa 目录执行\r\n\r\n```sh\r\n$ npm i mysql --save\r\n```\r\n\r\n在 sir-koa 目录下新建 config 目录，用来存放所有项目配置文件。\r\n\r\n> config/mysql.js\r\n\r\n```js\r\nconst Config = {\r\n    host     : 'localhost',\r\n    user     : '数据库用户名',\r\n    password : '数据库密码',\r\n    port:3306,\r\n    database : 'sir',\r\n\r\n}\r\nmodule.exports= {\r\n    Config\r\n}\r\n```\r\n\r\nmodel 目录中新建 mysql.js，用来在项目中调用 mysql\r\n\r\n> model/mysql.js\r\n\r\n```js\r\nconst mysql = require('mysql')\r\nconst { Config } = require('../../config/mysql')\r\n\r\n// 创建链接对象\r\n const con = mysql.createConnection(Config)\r\n\r\n// 开始链接\r\n con.connect()\r\n\r\n// 统一执行 sql 的函数\r\n function exec(sql,params) {\r\n    const promise = new Promise((resolve, reject) => {\r\n        con.query(sql,params, (err, result) => {\r\n            if (err) {\r\n                reject(err)\r\n                return\r\n            }\r\n            resolve(result)\r\n        })\r\n    })\r\n    return promise\r\n}\r\n\r\nmodule.exports = {\r\n    exec,\r\n    escape: mysql.escape\r\n}\r\n```\r\n\r\n## 总结\r\n\r\nnodejs 操作 mysql 就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解微信小程序注册和登录，继续加油吧，Let's go！","src/content/posts/node/node新手课（9）nodejs操作mysql.md","8652e5fc792843d4",{html:1433,metadata:1434},'<p>上节课我们讲了 koa2 的路由，今天我们来讲解 nodejs 操作 mysql</p>\n<h2 id="导入-sql-文件">导入 sql 文件</h2>\n<p>sql 文件地址\r\n<a href="https://github.com/guojiangclub/sir-node/blob/master/sir.sql" rel="nofollow noopener noreferrer external" target="_blank">https://github.com/guojiangclub/sir-node/blob/master/sir.sql</a></p>\n<p>安装 navicat，打开 navicat, 选择连接 - 新建连接，输入本地数据库地址，用户名和密码，成功连接到数据库。</p>\n<p>右键点击连接，选择新建数据库 sir</p>\n<p>右键点击 sir 数据库，选择运行数据库，导入 sql 文件。</p>\n<h2 id="mysql-测试">mysql 测试</h2>\n<p>新建 mysql-test 目录，新建 index.js</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'mysql\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 创建链接对象</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583"> const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> con</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createConnection</span><span style="color:#24292E;--shiki-dark:#E1E4E8">({</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    host: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'localhost\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    user: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'数据库用户名\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    password: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'数据库密码\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    port: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'数据库端口，默认 3306\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    database: </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'sir\'</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 开始连接</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> con.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">connect</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 执行 sql 语句</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> sql</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> `insert into test (title, content, author) values (\' 标题 C\', \' 内容 C\',\'zhangsan\');`</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">con.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql, (</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (err) {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">error</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    console.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">log</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(result)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 关闭连接</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> con.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">end</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span></code></pre>\n<p>执行如下操作</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> cd</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql-test/</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> init</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -y</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> i</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --save</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> node</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> index.js</span></span></code></pre>\n<p>打开 sir 数据库，查看 test 表，现在已经新增了一条记录。</p>\n<h2 id="项目添加-mysql-包">项目添加 mysql 包</h2>\n<p>在 sir-koa 目录执行</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> i</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --save</span></span></code></pre>\n<p>在 sir-koa 目录下新建 config 目录，用来存放所有项目配置文件。</p>\n<blockquote>\n<p>config/mysql.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Config</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    host     : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'localhost\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    user     : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'数据库用户名\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    password : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'数据库密码\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    port:</span><span style="color:#005CC5;--shiki-dark:#79B8FF">3306</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    database : </span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'sir\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    Config</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<p>model 目录中新建 mysql.js，用来在项目中调用 mysql</p>\n<blockquote>\n<p>model/mysql.js</p>\n</blockquote>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="js"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'mysql\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">const</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> { </span><span style="color:#005CC5;--shiki-dark:#79B8FF">Config</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> } </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> require</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">\'../../config/mysql\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 创建链接对象</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583"> const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> con</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> mysql.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">createConnection</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(Config)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 开始链接</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8"> con.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">connect</span><span style="color:#24292E;--shiki-dark:#E1E4E8">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">// 统一执行 sql 的函数</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583"> function</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> exec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#E36209;--shiki-dark:#FFAB70">sql</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,</span><span style="color:#E36209;--shiki-dark:#FFAB70">params</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    const</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> promise</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#D73A49;--shiki-dark:#F97583"> new</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> Promise</span><span style="color:#24292E;--shiki-dark:#E1E4E8">((</span><span style="color:#E36209;--shiki-dark:#FFAB70">resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        con.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">query</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(sql,params, (</span><span style="color:#E36209;--shiki-dark:#FFAB70">err</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#E36209;--shiki-dark:#FFAB70">result</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">=></span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (err) {</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">                reject</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(err)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">                return</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">            }</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">            resolve</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(result)</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        })</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    })</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> promise</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">module</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span><span style="color:#005CC5;--shiki-dark:#79B8FF">exports</span><span style="color:#D73A49;--shiki-dark:#F97583"> =</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    exec,</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    escape: mysql.escape</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></code></pre>\n<h2 id="总结">总结</h2>\n<p>nodejs 操作 mysql 就讲完了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解微信小程序注册和登录，继续加油吧，Let’s go！</p>',{headings:1435,localImagePaths:1446,remoteImagePaths:1447,frontmatter:1448,imagePaths:1452},[1436,1439,1442,1445],{depth:49,slug:1437,text:1438},"导入-sql-文件","导入 sql 文件",{depth:49,slug:1440,text:1441},"mysql-测试","mysql 测试",{depth:49,slug:1443,text:1444},"项目添加-mysql-包","项目添加 mysql 包",{depth:49,slug:117,text:117},[],[],{title:1426,published:1449,tags:1450,categories:1451,minutes:49},["Date","2020-03-17T07:57:34.000Z"],[587],[587],[],"python/python在类中实现swith功能",{id:1453,data:1455,body:1460,filePath:1461,digest:1462,rendered:1463},{title:1456,published:1457,description:34,tags:1458,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Python 在类中实现 swith 功能",["Date","2019-03-29T14:51:12.000Z"],[1459],"Python",'## 问题\n\nPython 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码\n\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print("get")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == \'__main__\':\n    client = RunMethod()\n    client.main("post")("http://www.baidu.com")\n```\n\n其中主要用到 getattr 这个函数，用于返回一个对象属性值。\n\n```python\ngetattr(object, name[, default])\n```\n\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。',"src/content/posts/python/python在类中实现swith功能.md","89a0c0bfbc83f002",{html:1464,metadata:1465},'<h2 id="问题">问题</h2>\n<p>Python 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="python"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">class</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> RunMethod</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    def</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> post</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(self,url</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,data</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,header</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">):</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        print</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(url)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    def</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> get</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(self,url</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,data</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">,header</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">None</span><span style="color:#24292E;--shiki-dark:#E1E4E8">):</span></span>\n<span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">        print</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"get"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    def</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(self,method):</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        method </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> getattr</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">self</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, method)</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> method</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">if</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> __name__</span><span style="color:#D73A49;--shiki-dark:#F97583"> ==</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> \'__main__\'</span><span style="color:#24292E;--shiki-dark:#E1E4E8">:</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    client </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> RunMethod()</span></span>\n<span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    client.main(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"post"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)(</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"http://www.baidu.com"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span></code></pre>\n<p>其中主要用到 getattr 这个函数，用于返回一个对象属性值。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="python"><code><span class="line"><span style="color:#005CC5;--shiki-dark:#79B8FF">getattr</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">object</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, name[, default])</span></span></code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>',{headings:1466,localImagePaths:1468,remoteImagePaths:1469,frontmatter:1470,imagePaths:1474},[1467],{depth:49,slug:211,text:211},[],[],{title:1456,published:1471,tags:1472,categories:1473,top:39,minutes:25},["Date","2019-03-29T14:51:12.000Z"],[1459],[1459],[],"redis/1redis基础架构",{id:1475,data:1477,body:1482,filePath:1483,digest:1484,rendered:1485},{title:1478,published:1479,description:34,tags:1480,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis基础架构",["Date","2020-04-03T19:03:42.000Z"],[1481],"Redis","### 前言\r\n\r\n我们应该怎样学习 Redis，大部分网上的教程从安装部署、介绍 API 开始，字符串、列表、集合等等。然后是发布订阅、持久化，再到主从复制，集群部署。这样的好处是我们能立刻掌握一个具体的知识点，甚至能马上解决一些现实业务场景中遇到的问题，但是这样我们也很容易陷入一些具体的技术细节中，忘记本来学习的目的。\r\n\r\n## 系统学习法\r\n\r\n在学习一个新知识点时，我们首先要站在全局的角度看待它，对这个知识点的总体架构和关键模块有清晰的认知，了解它的系统脉络，然后深入到每个具体的技术点，学完一个知识点后再回头看系统架构，理解这个知识点在系统中的作用和地位，分析它和其它模块的联系和不同点。我把这种学习法叫做系统学习法。\r\n\r\n我们学习 Redis 也可以用系统学习法，我们在遇到和解决实际问题的时候，分析出问题点所属模块，按照系统中各模块的关联关系，能更快定位到问题出现的原因，更快解决问题。当然，我们还可以把系统学习法用到学习其他知识点中，让学习事半功倍。\r\n\r\n## 键值数据库\r\n\r\n我们都知道 Redis 是一个键值数据库，它具有键值数据库都有的特性，所以我们可以通过剖析一个最简单的键值数据库 simpleKV 来学习 Redis。simpleKV 是我们虚拟的，并不是真正存在。我们可以把 simpleKV 看成 Redis 和 Memcached 这类键值数据库的共有特点的本质抽象，比方说 simpleKV 就是 Java 的类，Redis/Memcached 就是 Java 类实例化后的对象。\r\n\r\n我们都知道关系型数据库 Mysql，它的核心功能就是存储和操作数据，也就是数据模型和操作接口。simpleKV 也是数据库，数据模型和操作接口是我们理解 Redis 的应用场景的重要基础，基础牢固，万丈高楼才能平地而起。\r\n\r\n在存储用户信息（用户 ID、姓名、年龄、性别等）通常用关系型数据库保存，建立一个用户表，ID 做主键，姓名、年龄、性别等多列字段，一个用户就是一行数据。我们也可以用键值数据库存储，用户 ID 作为 Key，用户信息作为 Value。\r\n\r\n当我们要对多个用户进行性别分组统计时，键值数据库就无法做到，它只提供简单操作接口，不支持复杂的聚合计算。\r\n\r\n### 数据模型\r\n\r\n键值数据库的基本数据模型是 key-value 模型，simpleKV 中，key 是 string 类型，value 可以是任意基本数据类型，例如字符串、整型。\r\n\r\n键值数据库支持的 key 类型普遍都是 string，而 value 类型不同键值数据库有很大差别。Memcached 的 Value 只支持 String 类型，Redis 的 Value 支持包括字符串、哈希、列表、有序集合、无序集合等。\r\n\r\n从使用的角度来说，不同 value 类型的实现，不仅可以支撑不同业务的数据需求，而且也隐含着不同数据结构在性能、空间效率等方面的差异，从而导致不同的 value 操作之间存在着差异。\r\n\r\n我们在进行键值数据库的技术选型时，一个重要的考虑元素就是它支持的 value 类型。\r\n\r\nRedis 之所以能在各类不同的业务场景中广泛使用，就是因为它支持各种不同类型的 value。\r\n\r\n## 总结\r\n\r\n1. 今天我们简单介绍了系统学习法的原理和作用，后续 Redis 的学习我们将按照系统学习法的方式学习，提升学习效率\r\n2. 我们还学习了键值数据库关键功能数据模型和操作接口，了解不同键值数据库的数据模型的作用和意义，下节我们会继续以 simpleKV 作为示例详细学习键值数据库","src/content/posts/redis/1.Redis基础架构.md","344ec937e353d47d",{html:1486,metadata:1487},'<h3 id="前言">前言</h3>\n<p>我们应该怎样学习 Redis，大部分网上的教程从安装部署、介绍 API 开始，字符串、列表、集合等等。然后是发布订阅、持久化，再到主从复制，集群部署。这样的好处是我们能立刻掌握一个具体的知识点，甚至能马上解决一些现实业务场景中遇到的问题，但是这样我们也很容易陷入一些具体的技术细节中，忘记本来学习的目的。</p>\n<h2 id="系统学习法">系统学习法</h2>\n<p>在学习一个新知识点时，我们首先要站在全局的角度看待它，对这个知识点的总体架构和关键模块有清晰的认知，了解它的系统脉络，然后深入到每个具体的技术点，学完一个知识点后再回头看系统架构，理解这个知识点在系统中的作用和地位，分析它和其它模块的联系和不同点。我把这种学习法叫做系统学习法。</p>\n<p>我们学习 Redis 也可以用系统学习法，我们在遇到和解决实际问题的时候，分析出问题点所属模块，按照系统中各模块的关联关系，能更快定位到问题出现的原因，更快解决问题。当然，我们还可以把系统学习法用到学习其他知识点中，让学习事半功倍。</p>\n<h2 id="键值数据库">键值数据库</h2>\n<p>我们都知道 Redis 是一个键值数据库，它具有键值数据库都有的特性，所以我们可以通过剖析一个最简单的键值数据库 simpleKV 来学习 Redis。simpleKV 是我们虚拟的，并不是真正存在。我们可以把 simpleKV 看成 Redis 和 Memcached 这类键值数据库的共有特点的本质抽象，比方说 simpleKV 就是 Java 的类，Redis/Memcached 就是 Java 类实例化后的对象。</p>\n<p>我们都知道关系型数据库 Mysql，它的核心功能就是存储和操作数据，也就是数据模型和操作接口。simpleKV 也是数据库，数据模型和操作接口是我们理解 Redis 的应用场景的重要基础，基础牢固，万丈高楼才能平地而起。</p>\n<p>在存储用户信息（用户 ID、姓名、年龄、性别等）通常用关系型数据库保存，建立一个用户表，ID 做主键，姓名、年龄、性别等多列字段，一个用户就是一行数据。我们也可以用键值数据库存储，用户 ID 作为 Key，用户信息作为 Value。</p>\n<p>当我们要对多个用户进行性别分组统计时，键值数据库就无法做到，它只提供简单操作接口，不支持复杂的聚合计算。</p>\n<h3 id="数据模型">数据模型</h3>\n<p>键值数据库的基本数据模型是 key-value 模型，simpleKV 中，key 是 string 类型，value 可以是任意基本数据类型，例如字符串、整型。</p>\n<p>键值数据库支持的 key 类型普遍都是 string，而 value 类型不同键值数据库有很大差别。Memcached 的 Value 只支持 String 类型，Redis 的 Value 支持包括字符串、哈希、列表、有序集合、无序集合等。</p>\n<p>从使用的角度来说，不同 value 类型的实现，不仅可以支撑不同业务的数据需求，而且也隐含着不同数据结构在性能、空间效率等方面的差异，从而导致不同的 value 操作之间存在着差异。</p>\n<p>我们在进行键值数据库的技术选型时，一个重要的考虑元素就是它支持的 value 类型。</p>\n<p>Redis 之所以能在各类不同的业务场景中广泛使用，就是因为它支持各种不同类型的 value。</p>\n<h2 id="总结">总结</h2>\n<ol>\n<li>今天我们简单介绍了系统学习法的原理和作用，后续 Redis 的学习我们将按照系统学习法的方式学习，提升学习效率</li>\n<li>我们还学习了键值数据库关键功能数据模型和操作接口，了解不同键值数据库的数据模型的作用和意义，下节我们会继续以 simpleKV 作为示例详细学习键值数据库</li>\n</ol>',{headings:1488,localImagePaths:1497,remoteImagePaths:1498,frontmatter:1499,imagePaths:1503},[1489,1490,1492,1494,1496],{depth:89,slug:83,text:83},{depth:49,slug:1491,text:1491},"系统学习法",{depth:49,slug:1493,text:1493},"键值数据库",{depth:89,slug:1495,text:1495},"数据模型",{depth:49,slug:117,text:117},[],[],{title:1478,published:1500,tags:1501,categories:1502,minutes:124},["Date","2020-04-03T19:03:42.000Z"],[1481],[1481],[],"node/node新手课7搭建项目配置开发环境",{id:1504,data:1506,body:1510,filePath:1511,digest:1512,rendered:1513},{title:1507,published:1508,description:34,tags:1509,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Node 新手课（7）搭建项目，配置开发环境",["Date","2020-02-25T07:57:34.000Z"],[587],"上节课我们讲解了项目技术架构和项目展示，这节课我们来搭建项目架构，koa2 和 mysql\r\n\r\n### koa2\r\n\r\n#### 介绍\r\n\r\n为什么使用 koa2，框架给我们节省很多时间，制定了流程和标准，降低了我们开发难度。使我们遵循标准，专心开发我们的业务，\r\n写更少的代码完成更多的功能。\r\n\r\n前端同学应该都经历过从 jquery 到 vue/react 的过程，vue/react 就是为了减少前端开发的工作量，让开发专注业务和实现功能。\r\n\r\n框架封装了基本的工具和 API（解析请求参数，路由，session/cookie，日志，操作数据库，中间件），以及一些插件。\r\n\r\n#### 安装\r\n\r\n```sh\r\n$ npm install koa-generator -g\r\n$ Koa2 sir-koa\r\n$ cd sir-koa && npm install\r\n\r\n```\r\n\r\n目录结构\r\n~~~\r\nsir-koa\r\n├─bin                   可执行目录\r\n│  ├─www                执行命令\r\n│\r\n├─node_modules          node 依赖包目录\r\n│\r\n├─routes                路由定义目录\r\n│  ├─index.js           路由定义文件\r\n│  └─...                更多\r\n│\r\n├─public                静态资源目录\r\n│  ├─images             图片目录\r\n│  ├─javascripts        js 文件目录\r\n│  └─stylesheets        css 文件目录\r\n│\r\n├─views                 视图文件目录\r\n│\r\n├─app.js                应用启动文件\r\n\r\n~~~\r\n我们先安装 nodemon 包\r\n\r\n```sh\r\n$ npm i -g nodemon\r\n```\r\n\r\n现在我们启动项目\r\n\r\n```sh\r\n$ npm run dev\r\n```\r\n\r\n打开浏览器，输入`` `http://localhost:3000/` ``，项目就启动了。\r\n\r\n### mysql\r\n\r\n地址：https://dev.mysql.com/downloads/mysql/\r\n\r\n#### windows 安装\r\n\r\n点击 https://dev.mysql.com/downloads/windows/installer/，直接点击 download\r\n\r\n\r\n然后下一步又下一步安装就可以了\r\n\r\n#### linux 安装（推荐）\r\n\r\n我们在 Centos7 系统下使用 yum 命令安装 MySQL\r\n\r\n#### 安装\r\n\r\n```sh\r\n\r\n$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm\r\n$ rpm -ivh mysql-community-release-el7-5.noarch.rpm\r\n$ yum update\r\n$ yum install mysql-server\r\n```\r\n\r\n#### 设置权限和初始化\r\n\r\n```sh\r\n$ chown mysql:mysql -R /var/lib/mysql\r\n$ mysqld --initialize\r\n```\r\n\r\n#### 启动 mysql\r\n\r\n```sh\r\n$ systemctl start mysqld\r\n```\r\n\r\n#### 连接 mysql\r\n\r\n```sh\r\n$ mysql\r\n\r\nmysql> SHOW DATABASES;\r\n+----------+\r\n| Database |\r\n+----------+\r\n| mysql    |\r\n| test     |\r\n+----------+\r\n2 rows in set (0.13 sec)\r\n\r\n```\r\n\r\n以上命令执行后会输出 mysql > 提示符，这说明你已经成功连接到 Mysql 服务器上，你可以在 mysql> 提示符执行 SQL 命令。\r\n\r\n### redis\r\n\r\n#### 安装和配置\r\n\r\n以 centos 为例，我们直接通过 yum 安装 redis。\r\n\r\n```sh\r\n$ yum install redis\r\n$ vim /etc/redis.conf\r\n//把 daemonize no 改成 daemonize yes\r\n$ redis-server /etc/redis.conf\r\n```\r\n\r\n现在 redis 就成功启动了\r\n\r\n## 总结\r\n\r\n搭建项目架构就已经完成了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。\r\n\r\n下节课我们讲解 koa 的路由，继续加油吧，Let's go！","src/content/posts/node/node新手课（7）搭建项目，配置开发环境.md","7702a472517f4103",{html:1514,metadata:1515},'<p>上节课我们讲解了项目技术架构和项目展示，这节课我们来搭建项目架构，koa2 和 mysql</p>\n<h3 id="koa2">koa2</h3>\n<h4 id="介绍">介绍</h4>\n<p>为什么使用 koa2，框架给我们节省很多时间，制定了流程和标准，降低了我们开发难度。使我们遵循标准，专心开发我们的业务，\r\n写更少的代码完成更多的功能。</p>\n<p>前端同学应该都经历过从 jquery 到 vue/react 的过程，vue/react 就是为了减少前端开发的工作量，让开发专注业务和实现功能。</p>\n<p>框架封装了基本的工具和 API（解析请求参数，路由，session/cookie，日志，操作数据库，中间件），以及一些插件。</p>\n<h4 id="安装">安装</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> koa-generator</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -g</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> Koa2</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> sir-koa</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> cd</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> sir-koa</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> &#x26;&#x26; </span><span style="color:#6F42C1;--shiki-dark:#B392F0">npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span></span>\n<span class="line"></span></code></pre>\n<p>目录结构</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="plaintext"><code><span class="line"><span>sir-koa</span></span>\n<span class="line"><span>├─bin                   可执行目录</span></span>\n<span class="line"><span>│  ├─www                执行命令</span></span>\n<span class="line"><span>│</span></span>\n<span class="line"><span>├─node_modules          node 依赖包目录</span></span>\n<span class="line"><span>│</span></span>\n<span class="line"><span>├─routes                路由定义目录</span></span>\n<span class="line"><span>│  ├─index.js           路由定义文件</span></span>\n<span class="line"><span>│  └─...                更多</span></span>\n<span class="line"><span>│</span></span>\n<span class="line"><span>├─public                静态资源目录</span></span>\n<span class="line"><span>│  ├─images             图片目录</span></span>\n<span class="line"><span>│  ├─javascripts        js 文件目录</span></span>\n<span class="line"><span>│  └─stylesheets        css 文件目录</span></span>\n<span class="line"><span>│</span></span>\n<span class="line"><span>├─views                 视图文件目录</span></span>\n<span class="line"><span>│</span></span>\n<span class="line"><span>├─app.js                应用启动文件</span></span>\n<span class="line"><span></span></span></code></pre>\n<p>我们先安装 nodemon 包</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> i</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -g</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> nodemon</span></span></code></pre>\n<p>现在我们启动项目</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> npm</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> run</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> dev</span></span></code></pre>\n<p>打开浏览器，输入<code>`http://localhost:3000/`</code>，项目就启动了。</p>\n<h3 id="mysql">mysql</h3>\n<p>地址：<a href="https://dev.mysql.com/downloads/mysql/" rel="nofollow noopener noreferrer external" target="_blank">https://dev.mysql.com/downloads/mysql/</a></p>\n<h4 id="windows-安装">windows 安装</h4>\n<p>点击 <a href="https://dev.mysql.com/downloads/windows/installer/%EF%BC%8C%E7%9B%B4%E6%8E%A5%E7%82%B9%E5%87%BB" rel="nofollow noopener noreferrer external" target="_blank">https://dev.mysql.com/downloads/windows/installer/，直接点击</a> download</p>\n<p>然后下一步又下一步安装就可以了</p>\n<h4 id="linux-安装推荐">linux 安装（推荐）</h4>\n<p>我们在 Centos7 系统下使用 yum 命令安装 MySQL</p>\n<h4 id="安装-1">安装</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> wget</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> rpm</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -ivh</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql-community-release-el7-5.noarch.rpm</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> yum</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> update</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> yum</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql-server</span></span></code></pre>\n<h4 id="设置权限和初始化">设置权限和初始化</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> chown</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql:mysql</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> -R</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> /var/lib/mysql</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysqld</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> --initialize</span></span></code></pre>\n<h4 id="启动-mysql">启动 mysql</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> systemctl</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> start</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysqld</span></span></code></pre>\n<h4 id="连接-mysql">连接 mysql</h4>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> mysql</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">mysql</span><span style="color:#24292E;--shiki-dark:#E1E4E8">> </span><span style="color:#032F62;--shiki-dark:#9ECBFF">SHOW</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> DATABASES</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">+----------+</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> Database</span><span style="color:#D73A49;--shiki-dark:#F97583"> |</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">+----------+</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> mysql</span><span style="color:#D73A49;--shiki-dark:#F97583">    |</span></span>\n<span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">|</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> test</span><span style="color:#D73A49;--shiki-dark:#F97583">     |</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">+----------+</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">2</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> rows</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> in</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> set</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (0.13 </span><span style="color:#032F62;--shiki-dark:#9ECBFF">sec</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)</span></span>\n<span class="line"></span></code></pre>\n<p>以上命令执行后会输出 mysql > 提示符，这说明你已经成功连接到 Mysql 服务器上，你可以在 mysql> 提示符执行 SQL 命令。</p>\n<h3 id="redis">redis</h3>\n<h4 id="安装和配置">安装和配置</h4>\n<p>以 centos 为例，我们直接通过 yum 安装 redis。</p>\n<pre class="astro-code astro-code-themes github-light github-dark" style="background-color:#fff;--shiki-dark-bg:#24292e;color:#24292e;--shiki-dark:#e1e4e8; overflow-x: auto;" tabindex="0" data-language="sh"><code><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> yum</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> install</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> redis</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> vim</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> /etc/redis.conf</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">//把</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> daemonize</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> no</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> 改成</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> daemonize</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> yes</span></span>\n<span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">$</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> redis-server</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> /etc/redis.conf</span></span></code></pre>\n<p>现在 redis 就成功启动了</p>\n<h2 id="总结">总结</h2>\n<p>搭建项目架构就已经完成了，你掌握了吗？有问题欢迎到群里和志同道合的小伙伴一起交流。</p>\n<p>下节课我们讲解 koa 的路由，继续加油吧，Let’s go！</p>',{headings:1516,localImagePaths:1542,remoteImagePaths:1543,frontmatter:1544,imagePaths:1548},[1517,1518,1520,1521,1522,1525,1528,1530,1532,1535,1538,1539,1541],{depth:89,slug:1318,text:1318},{depth:150,slug:1519,text:1519},"介绍",{depth:150,slug:341,text:341},{depth:89,slug:1320,text:1320},{depth:150,slug:1523,text:1524},"windows-安装","windows 安装",{depth:150,slug:1526,text:1527},"linux-安装推荐","linux 安装（推荐）",{depth:150,slug:1529,text:341},"安装-1",{depth:150,slug:1531,text:1531},"设置权限和初始化",{depth:150,slug:1533,text:1534},"启动-mysql","启动 mysql",{depth:150,slug:1536,text:1537},"连接-mysql","连接 mysql",{depth:89,slug:1326,text:1326},{depth:150,slug:1540,text:1540},"安装和配置",{depth:49,slug:117,text:117},[],[],{title:1507,published:1545,tags:1546,categories:1547,minutes:89},["Date","2020-02-25T07:57:34.000Z"],[587],[587],[],"redis/2redis操作接口",{id:1549,data:1551,body:1555,filePath:1556,digest:1557,rendered:1558},{title:1552,published:1553,description:34,tags:1554,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis操作接口",["Date","2020-04-15T19:01:42.000Z"],[1481],"### 前言\r\n\r\n上一节我们学习了系统学习法的原理和作用，后续 Redis 的学习我们将按照系统学习法的方式学习，提升学习效率。\r\n我们还学习了键值数据库关键功能数据模型和操作接口，了解不同键值数据库的数据模型的作用和意义，本节我们继续学习键值数据库\r\n\r\n## 操作接口\r\n\r\n键值数据库的基本操作就是增删改查，分别是 PUT、GET、DELETE、SCAN\r\n- PUT：新写入或更新一个 key-value 对\r\n- GET：根据一个 key 读取相应的 value 值\r\n- DELETE：根据一个 key 删除整个 key-value 对\r\n- SCAN：查询一段时间内所有 key-value 对\r\n\r\n> Redis 的新建和更新操作都是同一个操作接口 Set，实际执行时会根据 key 是否存在执行相应的新建或更新操作流程\r\n\r\n实际业务场景中我们会遇到这样一些需求，查询用户一段时间内的访问记录，要用到 SCAN 操作，在判断用户是否处于白名单或黑名单的业务中，我们还会用到 EXIST 操作接口，判断某个 key 是否存在，对于不同键值数据库操作接口，我们可以查阅相关的文档学习。\r\n\r\n综上所述，PUT/GET/DELETE/SCAN 是一个键值数据库的基本操作集合。\r\n\r\n## 数据存储\r\n\r\n键值数据库的数据应该存储在内存还是外存？这要根据键值数据库的主要应用场景。\r\n\r\n比如缓存场景下数据能快速访问且允许丢失，用于这个场景的键值数据库 Memcached/Redis 都是内存键值数据库，它们的数据存储在内存中，优势是读写速度非常快，内存的访问速度在百 ns 级别，劣势是一旦断电所有数据都会丢失。保存在外存磁盘中，虽然避免数据丢失，但是由于磁盘读写速度很慢，通常在 ms 级别，键值数据库整体性能会下降。\r\n\r\nSimpleKV 和 Redis 一样适用缓存业务场景，用内存保存键值数据，我们来了解下它的基本组件。\r\n\r\n一个键值数据库包括访问模式，索引模块，操作模块和存储模块，如图\r\n\r\n## 访问模式\r\n\r\n键值数据库访问模式分两种\r\n- 通过函数库调用的方式供外部调用，上图中的 libsimplekv.so，就是以动态链接库的形式链接到我们自己的程序中，提供键值存储功能，比如 RocksDB\r\n- 通过网络框架以 Socket 通信的形式对外提供键值对操作，这种形式可以提供广泛的键值存储服务。网络框架中包括 Socket Server 和协议解析，比如 Memcached 和 Redis\r\n\r\n不同的键值数据库服务器和客户端交互的协议并不相同，我们在二次开发键值数据库时，必须了解和掌握键值数据库的通信协议。\r\n\r\n通过网络框架提供键值存储服务，一方面扩大键值数据库应用场景，适配多种不同编程语言调用，另一方面在设计选择运行模型和性能方面会产生一定的影响。\r\n\r\n举个例子：\r\n\r\n1. 当客户端发送一个命令```PUT hello world```后，命令会被封装在网络包中发送给键值数据库\r\n2. 键值数据库接收网络包，按照协议解析后，客户端要写入一个 key=hello，value=world 的键值对，开始执行数据写入流程\r\n\r\n### 网络 I/O 模型\r\n\r\n在处理网络连接，解析网络请求，存取数据的时候，我们需要对不同的解决方案做选择。用一个线程 / 多个线程 / 多个进程处理？这个问题就是 I/O 模型设计，不同 I/O 模型影响键值数据库性能和拓展性。\r\n\r\n1. 假设我们只用一个线程处理网络连接，解析请求，存取数据，只要其中一个步骤因为某个问题阻塞，整个线程就被阻塞，降低系统响应速度，无法处理更多请求。\r\n2. 假设我们用多线程处理，某个线程被阻塞其他线程正常运行，但是在访问共享资源时，不同线程要保证串行操作，加锁处理，也会影响系统性能。\r\n\r\n## 总结\r\n\r\n本节我们讲解了键值数据库的基本操作接口、数据存储、访问模式、网络 I/O 模型，我们已经对 Redis 的整体架构设计有了大概印象。","src/content/posts/redis/2.Redis操作接口.md","910bdcfe73b296fc",{html:1559,metadata:1560},'<h3 id="前言">前言</h3>\n<p>上一节我们学习了系统学习法的原理和作用，后续 Redis 的学习我们将按照系统学习法的方式学习，提升学习效率。\r\n我们还学习了键值数据库关键功能数据模型和操作接口，了解不同键值数据库的数据模型的作用和意义，本节我们继续学习键值数据库</p>\n<h2 id="操作接口">操作接口</h2>\n<p>键值数据库的基本操作就是增删改查，分别是 PUT、GET、DELETE、SCAN</p>\n<ul>\n<li>PUT：新写入或更新一个 key-value 对</li>\n<li>GET：根据一个 key 读取相应的 value 值</li>\n<li>DELETE：根据一个 key 删除整个 key-value 对</li>\n<li>SCAN：查询一段时间内所有 key-value 对</li>\n</ul>\n<blockquote>\n<p>Redis 的新建和更新操作都是同一个操作接口 Set，实际执行时会根据 key 是否存在执行相应的新建或更新操作流程</p>\n</blockquote>\n<p>实际业务场景中我们会遇到这样一些需求，查询用户一段时间内的访问记录，要用到 SCAN 操作，在判断用户是否处于白名单或黑名单的业务中，我们还会用到 EXIST 操作接口，判断某个 key 是否存在，对于不同键值数据库操作接口，我们可以查阅相关的文档学习。</p>\n<p>综上所述，PUT/GET/DELETE/SCAN 是一个键值数据库的基本操作集合。</p>\n<h2 id="数据存储">数据存储</h2>\n<p>键值数据库的数据应该存储在内存还是外存？这要根据键值数据库的主要应用场景。</p>\n<p>比如缓存场景下数据能快速访问且允许丢失，用于这个场景的键值数据库 Memcached/Redis 都是内存键值数据库，它们的数据存储在内存中，优势是读写速度非常快，内存的访问速度在百 ns 级别，劣势是一旦断电所有数据都会丢失。保存在外存磁盘中，虽然避免数据丢失，但是由于磁盘读写速度很慢，通常在 ms 级别，键值数据库整体性能会下降。</p>\n<p>SimpleKV 和 Redis 一样适用缓存业务场景，用内存保存键值数据，我们来了解下它的基本组件。</p>\n<p>一个键值数据库包括访问模式，索引模块，操作模块和存储模块，如图</p>\n<h2 id="访问模式">访问模式</h2>\n<p>键值数据库访问模式分两种</p>\n<ul>\n<li>通过函数库调用的方式供外部调用，上图中的 libsimplekv.so，就是以动态链接库的形式链接到我们自己的程序中，提供键值存储功能，比如 RocksDB</li>\n<li>通过网络框架以 Socket 通信的形式对外提供键值对操作，这种形式可以提供广泛的键值存储服务。网络框架中包括 Socket Server 和协议解析，比如 Memcached 和 Redis</li>\n</ul>\n<p>不同的键值数据库服务器和客户端交互的协议并不相同，我们在二次开发键值数据库时，必须了解和掌握键值数据库的通信协议。</p>\n<p>通过网络框架提供键值存储服务，一方面扩大键值数据库应用场景，适配多种不同编程语言调用，另一方面在设计选择运行模型和性能方面会产生一定的影响。</p>\n<p>举个例子：</p>\n<ol>\n<li>当客户端发送一个命令<code>PUT hello world</code>后，命令会被封装在网络包中发送给键值数据库</li>\n<li>键值数据库接收网络包，按照协议解析后，客户端要写入一个 key=hello，value=world 的键值对，开始执行数据写入流程</li>\n</ol>\n<h3 id="网络-io-模型">网络 I/O 模型</h3>\n<p>在处理网络连接，解析网络请求，存取数据的时候，我们需要对不同的解决方案做选择。用一个线程 / 多个线程 / 多个进程处理？这个问题就是 I/O 模型设计，不同 I/O 模型影响键值数据库性能和拓展性。</p>\n<ol>\n<li>假设我们只用一个线程处理网络连接，解析请求，存取数据，只要其中一个步骤因为某个问题阻塞，整个线程就被阻塞，降低系统响应速度，无法处理更多请求。</li>\n<li>假设我们用多线程处理，某个线程被阻塞其他线程正常运行，但是在访问共享资源时，不同线程要保证串行操作，加锁处理，也会影响系统性能。</li>\n</ol>\n<h2 id="总结">总结</h2>\n<p>本节我们讲解了键值数据库的基本操作接口、数据存储、访问模式、网络 I/O 模型，我们已经对 Redis 的整体架构设计有了大概印象。</p>',{headings:1561,localImagePaths:1573,remoteImagePaths:1574,frontmatter:1575,imagePaths:1579},[1562,1563,1565,1567,1569,1572],{depth:89,slug:83,text:83},{depth:49,slug:1564,text:1564},"操作接口",{depth:49,slug:1566,text:1566},"数据存储",{depth:49,slug:1568,text:1568},"访问模式",{depth:89,slug:1570,text:1571},"网络-io-模型","网络 I/O 模型",{depth:49,slug:117,text:117},[],[],{title:1552,published:1576,tags:1577,categories:1578,minutes:316},["Date","2020-04-15T19:01:42.000Z"],[1481],[1481],[],"redis/3redis查找数据",{id:1580,data:1582,body:1586,filePath:1587,digest:1588,rendered:1589},{title:1583,published:1584,description:34,tags:1585,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis查找数据",["Date","2020-05-01T19:01:42.000Z"],[1481],"## 如何查找键值对\r\n\r\nRedis 网络访问模块解析客户端的请求，获得要执行的操作，针对键值对的操作就先要查找键值对是否存在。这就要用到 Redis 的索引模块。在索引模块，**Redis 根据 key 查找到 value 的存储位置**\r\n\r\n常见的索引有哈希表 (hash)，B+ 树，字典树等。不同的索引性能、内存空间、并发控制等都有不同。不同键值数据库用的索引不相同，Memcached 和 Redis 的键值对的索引是哈希表 (hash)，RocksDB 键值对索引是跳表（skip-list）\r\n\r\nRedis 采用哈希表作为索引，因为它的键值数据保存在内存中，内存中随机访问性能很高，和哈希表随机访问 O(1) 时间复杂度匹配。\r\n\r\nRedis 中查找 key 对应的 value 分为两步，\r\n1. 按照哈希表索引找到 key 对应的 value 的存储位置\r\n2. value 有多种类型（集合 / 列表），还要在 value 中查找实际需要的数据\r\n\r\n## 不同操作的具体逻辑\r\n\r\n索引模块查找到 key 对应的 value 存储位置后，Redis 的操作模块按照不同的操作命令执行不同的逻辑\r\n- GET/SCAN，查找 value，找到 value 位置返回 value 的值\r\n- PUT，新增一个键值对，Redis 为该键值对分配内存空间\r\n- DELETE，Redis 删除键值对，释放相应的内存空间\r\n\r\nPUT 和 DELETE 操作中除了写入和删除键值对，还要分配和释放内存，这就依赖 Redis 的存储模块的内存分配器。\r\n键值数据库的键值对大小不一，一旦保存的键值对数据规模过大，可能会造成严重内存碎片问题。\r\n对于 Redis 这样的内存键值数据库，内存分配器尤为重要。不同的内存分配器分配效率不一样。\r\n\r\n## 持久化\r\n\r\nRedis 的持久化是把键值对通过调用本地文件系统操作接口保存到磁盘，重启后快速重新提供服务。持久化有两种方式\r\n1. 对操作的每个键值对都进行保存，保证了数据的可靠，但是每次操作都要写入磁盘，降低性能\r\n2. 定时把键值数据保存到文件，避免频繁写入的性能问题，但是数据还是有丢失风险\r\n\r\n## 对比 simpleKV 和 Redis\r\n\r\n\r\n1. Redis 作为一个基础网络服务，给客户端提供网络框架进行访问，扩大 Redis 应用范围\r\n2. Redis 中的 value 数据类型丰富，提供多种操作接口\r\n3. Redis 不同的持久化方式 AOF 和 RDB，它们有不同的优劣势，影响 Redis 的访问性能和可靠性\r\n4. Redis 支持高可靠集群和可扩展集群\r\n\r\n## 总结\r\n\r\n通过学习 SimpleKV，我们对键值数据库的基本结构和重要模块有了整体认知和深刻理解，这是 Redis 单机版的核心基础。","src/content/posts/redis/3.Redis查找数据.md","f748e1f5b979f13f",{html:1590,metadata:1591},'<h2 id="如何查找键值对">如何查找键值对</h2>\n<p>Redis 网络访问模块解析客户端的请求，获得要执行的操作，针对键值对的操作就先要查找键值对是否存在。这就要用到 Redis 的索引模块。在索引模块，<strong>Redis 根据 key 查找到 value 的存储位置</strong></p>\n<p>常见的索引有哈希表 (hash)，B+ 树，字典树等。不同的索引性能、内存空间、并发控制等都有不同。不同键值数据库用的索引不相同，Memcached 和 Redis 的键值对的索引是哈希表 (hash)，RocksDB 键值对索引是跳表（skip-list）</p>\n<p>Redis 采用哈希表作为索引，因为它的键值数据保存在内存中，内存中随机访问性能很高，和哈希表随机访问 O(1) 时间复杂度匹配。</p>\n<p>Redis 中查找 key 对应的 value 分为两步，</p>\n<ol>\n<li>按照哈希表索引找到 key 对应的 value 的存储位置</li>\n<li>value 有多种类型（集合 / 列表），还要在 value 中查找实际需要的数据</li>\n</ol>\n<h2 id="不同操作的具体逻辑">不同操作的具体逻辑</h2>\n<p>索引模块查找到 key 对应的 value 存储位置后，Redis 的操作模块按照不同的操作命令执行不同的逻辑</p>\n<ul>\n<li>GET/SCAN，查找 value，找到 value 位置返回 value 的值</li>\n<li>PUT，新增一个键值对，Redis 为该键值对分配内存空间</li>\n<li>DELETE，Redis 删除键值对，释放相应的内存空间</li>\n</ul>\n<p>PUT 和 DELETE 操作中除了写入和删除键值对，还要分配和释放内存，这就依赖 Redis 的存储模块的内存分配器。\r\n键值数据库的键值对大小不一，一旦保存的键值对数据规模过大，可能会造成严重内存碎片问题。\r\n对于 Redis 这样的内存键值数据库，内存分配器尤为重要。不同的内存分配器分配效率不一样。</p>\n<h2 id="持久化">持久化</h2>\n<p>Redis 的持久化是把键值对通过调用本地文件系统操作接口保存到磁盘，重启后快速重新提供服务。持久化有两种方式</p>\n<ol>\n<li>对操作的每个键值对都进行保存，保证了数据的可靠，但是每次操作都要写入磁盘，降低性能</li>\n<li>定时把键值数据保存到文件，避免频繁写入的性能问题，但是数据还是有丢失风险</li>\n</ol>\n<h2 id="对比-simplekv-和-redis">对比 simpleKV 和 Redis</h2>\n<ol>\n<li>Redis 作为一个基础网络服务，给客户端提供网络框架进行访问，扩大 Redis 应用范围</li>\n<li>Redis 中的 value 数据类型丰富，提供多种操作接口</li>\n<li>Redis 不同的持久化方式 AOF 和 RDB，它们有不同的优劣势，影响 Redis 的访问性能和可靠性</li>\n<li>Redis 支持高可靠集群和可扩展集群</li>\n</ol>\n<h2 id="总结">总结</h2>\n<p>通过学习 SimpleKV，我们对键值数据库的基本结构和重要模块有了整体认知和深刻理解，这是 Redis 单机版的核心基础。</p>',{headings:1592,localImagePaths:1603,remoteImagePaths:1604,frontmatter:1605,imagePaths:1609},[1593,1595,1597,1599,1602],{depth:49,slug:1594,text:1594},"如何查找键值对",{depth:49,slug:1596,text:1596},"不同操作的具体逻辑",{depth:49,slug:1598,text:1598},"持久化",{depth:49,slug:1600,text:1601},"对比-simplekv-和-redis","对比 simpleKV 和 Redis",{depth:49,slug:117,text:117},[],[],{title:1583,published:1606,tags:1607,categories:1608,minutes:150},["Date","2020-05-01T19:01:42.000Z"],[1481],[1481],[],"redis/6redis集合操作",{id:1610,data:1612,body:1616,filePath:1617,digest:1618,rendered:1619},{title:1613,published:1614,description:34,tags:1615,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis集合操作",["Date","2020-07-20T19:01:42.000Z"],[1481],"### 不同操作的复杂度\r\n\r\n集合类型的操作类型很多，有读写单个集合元素的，例如 HGET、HSET，也有操作多个元素的，例如 SADD，还有对整个集合进行遍历操作的，例如 SMEMBERS。这么多操作，它们的复杂度也各不相同。 而复杂度的高低又是我们选择集合类型的重要依据。\r\n\r\n#### 1. 单元素操作，指每一种集合类型对单个数据实现的增删改查操作\r\n\r\n比如 Hash 类型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM 和 SRANDMEMBER 等。这类操作的时间复杂度由集合底层的数据结构决定，例如，HMSET 增加 M 个元素时，复杂度就从 O(1) 变成 O(M) 了。\r\n\r\n#### 2. 范围操作，指集合类型的遍历操作，返回集合所有数据\r\n\r\n比如 Hash 类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List 类型的 LRANGE 和 ZSet 类型的 ZRANGE。这类操作的复杂度一般是 O(N)。\r\n\r\n> Redis 从 2.8 版本增加 SCAN 系列操作，包括 HSCAN，SSCAN 和 ZSCAN），这类操作实现了渐进式遍历，每次只返回有限数量的数据。相比于 HGETALL、SMEMBERS 这类操作来说，就避免了一次性返回所有元素而导致的 Redis 阻塞。\r\n\r\n#### 3. 统计操作，指集合类型对集合中所有元素个数的记录\r\n\r\n比如 LLEN 和 SCARD，它们操作时间复杂度 O(1)。当集合类型使用压缩列表、双向链表、整数数组等数据结构，这些数据结构专门有个字段记录元素个数统计。\r\n\r\n#### 4. 例外情况\r\n\r\n一些数据结构的特殊记录，比如压缩列表和双向链表都会记录表头和表尾的偏移量。\r\n\r\nList 类型的 LPOP、RPOP、LPUSH、RPUSH 操作是在列表头尾增删元素，可以通过偏移量直接定位，时间复杂度 O(1)。\r\n\r\n## 总结\r\n\r\n今天我们学习了 Redis 底层数据结构，包括保存所有键值的全局哈希表，以及实现集合类型的双向链表、压缩列表、整数数组、哈希表和跳表。\r\n\r\n我们要注意底层实现结构是双向链表和压缩列表的 List 类型，时间复杂度是 O(N)。它的 POP/PUSH 效率很高，所以更适合 FIFO 队列业务场景，而不是作为随机读写存储数据的集合。\r\n\r\n我们应该掌握原理，以不变应万变，掌握底层数据结构原理后就能从原理推断出不同操作的时间复杂度，然后根据业务场景选择合适的集合类型。","src/content/posts/redis/6.Redis集合操作.md","e9c2d3ad2765a163",{html:1620,metadata:1621},'<h3 id="不同操作的复杂度">不同操作的复杂度</h3>\n<p>集合类型的操作类型很多，有读写单个集合元素的，例如 HGET、HSET，也有操作多个元素的，例如 SADD，还有对整个集合进行遍历操作的，例如 SMEMBERS。这么多操作，它们的复杂度也各不相同。 而复杂度的高低又是我们选择集合类型的重要依据。</p>\n<h4 id="1-单元素操作指每一种集合类型对单个数据实现的增删改查操作">1. 单元素操作，指每一种集合类型对单个数据实现的增删改查操作</h4>\n<p>比如 Hash 类型的 HGET、HSET 和 HDEL，Set 类型的 SADD、SREM 和 SRANDMEMBER 等。这类操作的时间复杂度由集合底层的数据结构决定，例如，HMSET 增加 M 个元素时，复杂度就从 O(1) 变成 O(M) 了。</p>\n<h4 id="2-范围操作指集合类型的遍历操作返回集合所有数据">2. 范围操作，指集合类型的遍历操作，返回集合所有数据</h4>\n<p>比如 Hash 类型的 HGETALL 和 Set 类型的 SMEMBERS，或者返回一个范围内的部分数据，比如 List 类型的 LRANGE 和 ZSet 类型的 ZRANGE。这类操作的复杂度一般是 O(N)。</p>\n<blockquote>\n<p>Redis 从 2.8 版本增加 SCAN 系列操作，包括 HSCAN，SSCAN 和 ZSCAN），这类操作实现了渐进式遍历，每次只返回有限数量的数据。相比于 HGETALL、SMEMBERS 这类操作来说，就避免了一次性返回所有元素而导致的 Redis 阻塞。</p>\n</blockquote>\n<h4 id="3-统计操作指集合类型对集合中所有元素个数的记录">3. 统计操作，指集合类型对集合中所有元素个数的记录</h4>\n<p>比如 LLEN 和 SCARD，它们操作时间复杂度 O(1)。当集合类型使用压缩列表、双向链表、整数数组等数据结构，这些数据结构专门有个字段记录元素个数统计。</p>\n<h4 id="4-例外情况">4. 例外情况</h4>\n<p>一些数据结构的特殊记录，比如压缩列表和双向链表都会记录表头和表尾的偏移量。</p>\n<p>List 类型的 LPOP、RPOP、LPUSH、RPUSH 操作是在列表头尾增删元素，可以通过偏移量直接定位，时间复杂度 O(1)。</p>\n<h2 id="总结">总结</h2>\n<p>今天我们学习了 Redis 底层数据结构，包括保存所有键值的全局哈希表，以及实现集合类型的双向链表、压缩列表、整数数组、哈希表和跳表。</p>\n<p>我们要注意底层实现结构是双向链表和压缩列表的 List 类型，时间复杂度是 O(N)。它的 POP/PUSH 效率很高，所以更适合 FIFO 队列业务场景，而不是作为随机读写存储数据的集合。</p>\n<p>我们应该掌握原理，以不变应万变，掌握底层数据结构原理后就能从原理推断出不同操作的时间复杂度，然后根据业务场景选择合适的集合类型。</p>',{headings:1622,localImagePaths:1638,remoteImagePaths:1639,frontmatter:1640,imagePaths:1644},[1623,1625,1628,1631,1634,1637],{depth:89,slug:1624,text:1624},"不同操作的复杂度",{depth:150,slug:1626,text:1627},"1-单元素操作指每一种集合类型对单个数据实现的增删改查操作","1. 单元素操作，指每一种集合类型对单个数据实现的增删改查操作",{depth:150,slug:1629,text:1630},"2-范围操作指集合类型的遍历操作返回集合所有数据","2. 范围操作，指集合类型的遍历操作，返回集合所有数据",{depth:150,slug:1632,text:1633},"3-统计操作指集合类型对集合中所有元素个数的记录","3. 统计操作，指集合类型对集合中所有元素个数的记录",{depth:150,slug:1635,text:1636},"4-例外情况","4. 例外情况",{depth:49,slug:117,text:117},[],[],{title:1613,published:1641,tags:1642,categories:1643,top:39,minutes:89},["Date","2020-07-20T19:01:42.000Z"],[1481],[1481],[],"redis/4redis哈希表",{id:1645,data:1647,body:1651,filePath:1652,digest:1653,rendered:1654},{title:1648,published:1649,description:34,tags:1650,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis哈希表",["Date","2020-06-10T19:01:42.000Z"],[1481],'## 前言\r\n\r\n我们对 Redis 的深刻印象就是"快"，它在接收到一个键值对操作指令后在微妙内完成操作。\r\n为什么它能这么快，一方面它是在内存中进行操作，内存访问本身速度快，另一方面是它有高效的数据结构。键值对是按一定的数据结构存储，操作键值对就是对数据结构增删改查，高效的数据结构是 Redis 快速处理数据的基础。\r\n\r\n## 底层数据结构\r\n\r\nRedis 的底层数据结构有六种，简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组，String 的底层实现是简单动态字符串，List、Hash、Set 和 SortedSet 都有两种底层实现结构，这四种类型被称为集合类型，特点是一个 key 对应一个集合数据\r\n\r\n### 键和值的数据结构是什么\r\n\r\nRedis 用一个哈希表保存所有键值对，实现 key-value 快速访问。\r\n\r\n一个哈希表就是一个数组，数组每个元素叫哈希桶，每个哈希桶保存键值对数据。然而哈希桶中的元素不是 value 本身，而是指向 value 的指针，即 value 存储的内存地址。\r\n\r\n\r\n如图，这个哈希表保存了所有键值对，哈希桶中的 entry 元素保存*key 和*value 指针，哈希表能在 O(1) 时间复杂度快速查找键值对，所以我们只需要计算 key 的哈希值就能找到对应的哈希桶位置，进而找到对应的 entry 元素。不同类型的 value 都能被找到，不论是 String、List、Set、Hash。\r\n\r\n这种查找方式只需要进行一次哈希计算，不论数据规模多少，然而，在 Redis 中写入大量数据后，操作有时候会变慢，因为出现了哈希表的冲突以及 rehash 带来的操作阻塞。\r\n\r\n### 哈希冲突\r\n\r\n当哈希表中数据增加，新增的数据 key 哈希计算出的哈希值和老数据 key 的哈希值会在同一个哈希桶中，也就是说多个 key 对应同一个哈希桶。\r\n\r\n#### 链式哈希\r\n\r\nRedis 中，同一个哈希桶中多个元素用一个链表保存，它们之间用指针连接，这就是链式哈希。\r\n\r\n如图所示，entry1、entry2 和 entry3 都保存在哈希桶 3 中，导致哈希冲突。entry1 增加个*next 指针指向 entry2，entry2 增加*next 指针指向 entry3，不论哈希桶 3 元素有多少个，都可以通过指针连接起来，形成一个链表，叫做哈希冲突链。\r\n\r\n\r\n链式哈希会产生一个问题，随着哈希表数据越来越多，哈希冲突越来越多，单个哈希桶链表上数据越来越多，查找时间复杂度退化到 O(n)，查找耗时增加，效率降低。\r\n\r\n#### rehash\r\n\r\n为解决这个问题，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。\r\n\r\nRedis 使用两个全局哈希表：哈希表 1 和哈希表 2，最开始新增数据默认存到哈希表 1，哈希表 2 没有被分配空间，当数据增加，Redis 开始执行 Rehash 操作：\r\n1. 给哈希表 2 分配更大空间，可以是当前哈希表 1 大小的两倍\r\n2. 把哈希表 1 的数据重新映射并拷贝到哈希表 2\r\n3. 释放哈希表 1 空间\r\n\r\nrehash 后，从哈希表 1 切换到哈希表 2，哈希表 2 空间更多，哈希冲突更少，原来哈希表 1 留做下次 rehash 扩容备用，按同样的步骤把哈希表 2 的数据迁移到哈希表 1。\r\n\r\n在第二步涉及大量数据拷贝，如果一次性把哈希表 1 迁移完，耗时很长，会造成线程阻塞，无法处理其他请求，Redis 是怎么处理这个问题呢？它采用渐进式 rehash\r\n\r\n#### 渐进式 rehash\r\n\r\n在第二步中，Redis 正常处理客户端请求，每处理一个请求，从哪哈希表 1 的第一个索引位置开始，把这个位置上的所有 entry 拷贝到哈希表 2 中。处理下一个请求时，把下一个索引位置的 entry 做同样操作。\r\n\r\n\r\n渐进式 rehash 把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。\r\n\r\n## 总结\r\n\r\n今天我们学习了全局哈希表，哈希冲突和链式哈希，rehash 等，哈希表是 Redis 中一种非常重要的数据结构，掌握它对学习 Redis 有非常重要的作用。',"src/content/posts/redis/4.Redis哈希表.md","a5ae244d6e5fad3d",{html:1655,metadata:1656},'<h2 id="前言">前言</h2>\n<p>我们对 Redis 的深刻印象就是”快”，它在接收到一个键值对操作指令后在微妙内完成操作。\r\n为什么它能这么快，一方面它是在内存中进行操作，内存访问本身速度快，另一方面是它有高效的数据结构。键值对是按一定的数据结构存储，操作键值对就是对数据结构增删改查，高效的数据结构是 Redis 快速处理数据的基础。</p>\n<h2 id="底层数据结构">底层数据结构</h2>\n<p>Redis 的底层数据结构有六种，简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组，String 的底层实现是简单动态字符串，List、Hash、Set 和 SortedSet 都有两种底层实现结构，这四种类型被称为集合类型，特点是一个 key 对应一个集合数据</p>\n<h3 id="键和值的数据结构是什么">键和值的数据结构是什么</h3>\n<p>Redis 用一个哈希表保存所有键值对，实现 key-value 快速访问。</p>\n<p>一个哈希表就是一个数组，数组每个元素叫哈希桶，每个哈希桶保存键值对数据。然而哈希桶中的元素不是 value 本身，而是指向 value 的指针，即 value 存储的内存地址。</p>\n<p>如图，这个哈希表保存了所有键值对，哈希桶中的 entry 元素保存<em>key 和</em>value 指针，哈希表能在 O(1) 时间复杂度快速查找键值对，所以我们只需要计算 key 的哈希值就能找到对应的哈希桶位置，进而找到对应的 entry 元素。不同类型的 value 都能被找到，不论是 String、List、Set、Hash。</p>\n<p>这种查找方式只需要进行一次哈希计算，不论数据规模多少，然而，在 Redis 中写入大量数据后，操作有时候会变慢，因为出现了哈希表的冲突以及 rehash 带来的操作阻塞。</p>\n<h3 id="哈希冲突">哈希冲突</h3>\n<p>当哈希表中数据增加，新增的数据 key 哈希计算出的哈希值和老数据 key 的哈希值会在同一个哈希桶中，也就是说多个 key 对应同一个哈希桶。</p>\n<h4 id="链式哈希">链式哈希</h4>\n<p>Redis 中，同一个哈希桶中多个元素用一个链表保存，它们之间用指针连接，这就是链式哈希。</p>\n<p>如图所示，entry1、entry2 和 entry3 都保存在哈希桶 3 中，导致哈希冲突。entry1 增加个<em>next 指针指向 entry2，entry2 增加</em>next 指针指向 entry3，不论哈希桶 3 元素有多少个，都可以通过指针连接起来，形成一个链表，叫做哈希冲突链。</p>\n<p>链式哈希会产生一个问题，随着哈希表数据越来越多，哈希冲突越来越多，单个哈希桶链表上数据越来越多，查找时间复杂度退化到 O(n)，查找耗时增加，效率降低。</p>\n<h4 id="rehash">rehash</h4>\n<p>为解决这个问题，Redis 会对哈希表做 rehash 操作。rehash 也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。</p>\n<p>Redis 使用两个全局哈希表：哈希表 1 和哈希表 2，最开始新增数据默认存到哈希表 1，哈希表 2 没有被分配空间，当数据增加，Redis 开始执行 Rehash 操作：</p>\n<ol>\n<li>给哈希表 2 分配更大空间，可以是当前哈希表 1 大小的两倍</li>\n<li>把哈希表 1 的数据重新映射并拷贝到哈希表 2</li>\n<li>释放哈希表 1 空间</li>\n</ol>\n<p>rehash 后，从哈希表 1 切换到哈希表 2，哈希表 2 空间更多，哈希冲突更少，原来哈希表 1 留做下次 rehash 扩容备用，按同样的步骤把哈希表 2 的数据迁移到哈希表 1。</p>\n<p>在第二步涉及大量数据拷贝，如果一次性把哈希表 1 迁移完，耗时很长，会造成线程阻塞，无法处理其他请求，Redis 是怎么处理这个问题呢？它采用渐进式 rehash</p>\n<h4 id="渐进式-rehash">渐进式 rehash</h4>\n<p>在第二步中，Redis 正常处理客户端请求，每处理一个请求，从哪哈希表 1 的第一个索引位置开始，把这个位置上的所有 entry 拷贝到哈希表 2 中。处理下一个请求时，把下一个索引位置的 entry 做同样操作。</p>\n<p>渐进式 rehash 把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。</p>\n<h2 id="总结">总结</h2>\n<p>今天我们学习了全局哈希表，哈希冲突和链式哈希，rehash 等，哈希表是 Redis 中一种非常重要的数据结构，掌握它对学习 Redis 有非常重要的作用。</p>',{headings:1657,localImagePaths:1673,remoteImagePaths:1674,frontmatter:1675,imagePaths:1679},[1658,1659,1661,1663,1665,1667,1669,1672],{depth:49,slug:83,text:83},{depth:49,slug:1660,text:1660},"底层数据结构",{depth:89,slug:1662,text:1662},"键和值的数据结构是什么",{depth:89,slug:1664,text:1664},"哈希冲突",{depth:150,slug:1666,text:1666},"链式哈希",{depth:150,slug:1668,text:1668},"rehash",{depth:150,slug:1670,text:1671},"渐进式-rehash","渐进式 rehash",{depth:49,slug:117,text:117},[],[],{title:1648,published:1676,tags:1677,categories:1678,top:39,minutes:316},["Date","2020-06-10T19:01:42.000Z"],[1481],[1481],[],"redis/5redis底层数据结构",{id:1680,data:1682,body:1686,filePath:1687,digest:1688,rendered:1689},{title:1683,published:1684,description:34,tags:1685,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis底层数据结构",["Date","2020-07-03T19:01:42.000Z"],[1481],"## 数据操作效率\r\n\r\n在 String 类型，查找到哈希桶就能直接对 value 增删改查，它的实际复杂度就是哈希表的时间复杂度 O(1)。而集合类型中找到哈希桶后还要在集合中进行下一步操作。\r\n\r\n### 集合操作效率受哪些因素影响？\r\n\r\n- 首先和集合底层数据结构有关，使用哈希表实现的集合比链表实现的集合访问效率更高\r\n- 其次和操作本身执行特点有关，读写一个元素显而易见比读写所有元素效率高\r\n\r\n### 集合的底层数据结构\r\n\r\n集合类型的底层数据结构主要有 5 种：整数数组，双向链表、哈希表、压缩列表和跳表。\r\n\r\n之前介绍过哈希表，整数数组和双向链表的操作特征都是顺序读写，即通过数组下标或链表指针逐个元素访问，操作时间复杂的 O(N)，操作效率比较低。\r\n\r\n#### 压缩列表\r\n\r\n压缩列表其实类似数组，数组每一个元素都对应保存一个数据。和数组不同的是压缩列表在表头有三个字段 zlbytes、 zltail 和 zllen ， 分别表示列表长度、 列表尾的 偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。\r\n\r\n\r\n在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。在查找其他元素时，只能逐个访问，时间复杂度 O(N)\r\n\r\n#### 跳表\r\n\r\n有序链表只能逐个查找元素，效率很低，为了优化查询效率，出现了跳表。\r\n\r\n跳表就是在链表的基础上增加多级索引，通过索引位置的快速跳转，实现数据的快速定位。当数据量很大时，跳表的查找时间复杂度是 O(logN)\r\n\r\n\r\n如图所示，如果我们要在链表中查找 33 这个元素，只能从头开始遍历链表，查找 6 次，直到找到 33 为止。 此时，复杂度是 O(N)，查找效率很低。\r\n\r\n为了提高查找速度，我们来增加一级索引：从第一个元素开始，每两个元素选一个出来作为索引。 这些索引再通过指针指向原始的链表。 例如，从前两个元素中抽取元素 1 作为一 级索引，从第三、 四个元素中抽取元素 11 作为一级索引。 此时，我们只需要 4 次查找就能定位到元素 33 了。\r\n\r\n如果我们还想再快，可以再增加二级索引：从一级索引中，再抽取部分元素作为二级索引。例如，从一级索引中抽取 1、27、100 作为二级索引，二级索引指向一级索引。 这样，我们只需要 3 次查找，就能定位到元素 33。\r\n\r\n以下是各个数据结构的时间复杂度：\r\n\r\n|   名称   | 时间复杂度 |\r\n| :------: | :--------: |\r\n|  哈希表  |    O(1)    |\r\n|   跳表   |  O(logN)   |\r\n| 双向链表 |    O(N)    |\r\n| 压缩列表 |    O(N)    |\r\n| 整数数组 |    O(N)    |\r\n\r\n## 总结\r\n\r\n今天我们学习了 Redis 集合类型的底层数据结构。Redis 能快速操作键值对，一方面是在 String、Hash 和 Set 中广泛使用时间复杂度 O(1) 的哈希表，另一方面 SortedSet 使用时间复杂度 O(logN) 的跳表。但是在范围操作要遍历底层数据结构的时候时间复杂度是 O(N)。优化方法可以用其他命令代替，比如 SCAN，减少耗时。","src/content/posts/redis/5.Redis底层数据结构.md","b99414c17dd7a668",{html:1690,metadata:1691},'<h2 id="数据操作效率">数据操作效率</h2>\n<p>在 String 类型，查找到哈希桶就能直接对 value 增删改查，它的实际复杂度就是哈希表的时间复杂度 O(1)。而集合类型中找到哈希桶后还要在集合中进行下一步操作。</p>\n<h3 id="集合操作效率受哪些因素影响">集合操作效率受哪些因素影响？</h3>\n<ul>\n<li>首先和集合底层数据结构有关，使用哈希表实现的集合比链表实现的集合访问效率更高</li>\n<li>其次和操作本身执行特点有关，读写一个元素显而易见比读写所有元素效率高</li>\n</ul>\n<h3 id="集合的底层数据结构">集合的底层数据结构</h3>\n<p>集合类型的底层数据结构主要有 5 种：整数数组，双向链表、哈希表、压缩列表和跳表。</p>\n<p>之前介绍过哈希表，整数数组和双向链表的操作特征都是顺序读写，即通过数组下标或链表指针逐个元素访问，操作时间复杂的 O(N)，操作效率比较低。</p>\n<h4 id="压缩列表">压缩列表</h4>\n<p>压缩列表其实类似数组，数组每一个元素都对应保存一个数据。和数组不同的是压缩列表在表头有三个字段 zlbytes、 zltail 和 zllen ， 分别表示列表长度、 列表尾的 偏移量和列表中的 entry 个数；压缩列表在表尾还有一个 zlend，表示列表结束。</p>\n<p>在压缩列表中，如果我们要查找定位第一个元素和最后一个元素，可以通过表头三个字段的长度直接定位，复杂度是 O(1)。在查找其他元素时，只能逐个访问，时间复杂度 O(N)</p>\n<h4 id="跳表">跳表</h4>\n<p>有序链表只能逐个查找元素，效率很低，为了优化查询效率，出现了跳表。</p>\n<p>跳表就是在链表的基础上增加多级索引，通过索引位置的快速跳转，实现数据的快速定位。当数据量很大时，跳表的查找时间复杂度是 O(logN)</p>\n<p>如图所示，如果我们要在链表中查找 33 这个元素，只能从头开始遍历链表，查找 6 次，直到找到 33 为止。 此时，复杂度是 O(N)，查找效率很低。</p>\n<p>为了提高查找速度，我们来增加一级索引：从第一个元素开始，每两个元素选一个出来作为索引。 这些索引再通过指针指向原始的链表。 例如，从前两个元素中抽取元素 1 作为一 级索引，从第三、 四个元素中抽取元素 11 作为一级索引。 此时，我们只需要 4 次查找就能定位到元素 33 了。</p>\n<p>如果我们还想再快，可以再增加二级索引：从一级索引中，再抽取部分元素作为二级索引。例如，从一级索引中抽取 1、27、100 作为二级索引，二级索引指向一级索引。 这样，我们只需要 3 次查找，就能定位到元素 33。</p>\n<p>以下是各个数据结构的时间复杂度：</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align="center">名称</th><th align="center">时间复杂度</th></tr></thead><tbody><tr><td align="center">哈希表</td><td align="center">O(1)</td></tr><tr><td align="center">跳表</td><td align="center">O(logN)</td></tr><tr><td align="center">双向链表</td><td align="center">O(N)</td></tr><tr><td align="center">压缩列表</td><td align="center">O(N)</td></tr><tr><td align="center">整数数组</td><td align="center">O(N)</td></tr></tbody></table>\n<h2 id="总结">总结</h2>\n<p>今天我们学习了 Redis 集合类型的底层数据结构。Redis 能快速操作键值对，一方面是在 String、Hash 和 Set 中广泛使用时间复杂度 O(1) 的哈希表，另一方面 SortedSet 使用时间复杂度 O(logN) 的跳表。但是在范围操作要遍历底层数据结构的时候时间复杂度是 O(N)。优化方法可以用其他命令代替，比如 SCAN，减少耗时。</p>',{headings:1692,localImagePaths:1705,remoteImagePaths:1706,frontmatter:1707,imagePaths:1711},[1693,1695,1698,1700,1702,1704],{depth:49,slug:1694,text:1694},"数据操作效率",{depth:89,slug:1696,text:1697},"集合操作效率受哪些因素影响","集合操作效率受哪些因素影响？",{depth:89,slug:1699,text:1699},"集合的底层数据结构",{depth:150,slug:1701,text:1701},"压缩列表",{depth:150,slug:1703,text:1703},"跳表",{depth:49,slug:117,text:117},[],[],{title:1683,published:1708,tags:1709,categories:1710,top:39,minutes:124},["Date","2020-07-03T19:01:42.000Z"],[1481],[1481],[],"redis/7redis单线程",{id:1712,data:1714,body:1718,filePath:1719,digest:1720,rendered:1721},{title:1715,published:1716,description:34,tags:1717,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis单线程",["Date","2020-08-01T19:01:42.000Z"],[1481],"## Redis 单线程本质\r\n\r\nRedis 的单线程，指的是 Redis 的网络 IO 和键值对读写由一个线程完成，这是 Redis 对外提供键值存储服务的主要流程，但是 Redis 的其他功能，比如持久化、异步删除、集群数据同步都是由额外的线程执行。\r\n\r\n### Redis 为什么用单线程\r\n\r\n我们先从多线程开销讲起。\r\n\r\n#### 多线程开销\r\n\r\n一个多线程系统，在合理分配资源的前提下可以增加系统中处理请求操作的资源实体，进而提升系统能够同时处理的请求数，即吞吐率。\r\n\r\n但是如果多线程系统中没有良好的系统设计，随着线程数增加而增长的系统吞吐率到一定瓶颈后增长迟缓甚至下降。\r\n\r\n\r\n出现这个现象的原因是，系统中存在被多线程同时访问的共享资源，在多个线程要修改这个共享资源时候，要增加额外的机制来保证共享资源正确性，额外的机制带来额外的开销。\r\n\r\n假设 Redis 采用多线程设计，如下图所示，现在有两个线程 A 和 B ，线程 A 对一个 List 做 LPUSH 操作， 并对队列长度加 1。同时，线程 B 对该 List 执行 LPOP 操作，并对队列长度减 1。为了保证队列长度的正确性，Redis 需要让线程 A 和 B 的 LPUSH 和 LPOP 串行执行， 只有这样，Redis 可以保证正确记录它们对 List 长度的修改。 否则，我们可能就会得到错误的长度结果。 这就是多线程编程模式面临的共享资源的并发访问控制问题。\r\n\r\n\r\n并发访问控制是多线程开发的难点问题，如果只是对共享资源简单采用粗粒度互斥锁，就可能会出现即使增加线程，大部分线程只是在等待获取访问共享资源的互斥锁，并行变串行，系统吞吐率并没有随着线程增加而增加。\r\n\r\n而且，采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统 代码的易调试性和可维护性。 为了避免这些问题，Redis 直接采用了单线程模式。\r\n\r\n### 单线程 Redis 为什么快\r\n\r\n通常来说单线程处理能力比多线程差很大，但是 Redis 用单线程模型达到每秒数十万操作指令处理能力，这是 Redis 多方面设计作用下的综合结果。\r\n\r\n一方面，Redis 操作键值对都在内存中完成，并且它还有高效的数据结构，比如哈希表和跳表。\r\n\r\n另一方面，网络请求解析，Redis 采用多路复用机制，在网络 IO 中能并发处理大量客户端请求，实现高吞吐量。\r\n\r\n#### 基本 IO 模型和阻塞点\r\n\r\nRedis 的基本执行流程就是依次执行如下操作：\r\n\r\n以 Get 请求为例，Redis 为了处理一个 Get 请求，需要监听客户端请求 （ bind/listen ） ，和客户端建立连接（accept） ，从 socket 中读取请求（recv），解析客户端发送请求（parse） ，根据请求类型读取键值数据（get）  最后给客户端返回结果，即向 socket 中写回数据（send）。\r\n\r\n\r\nbind/listen、accept、recv、parse 和 send 属于网络 IO 处理，而 get 属于键值数据操作。\r\n\r\n在网络 IO 操作的 accept 和 recv 处理上，可能会出现阻塞。\r\n\r\n当 Redis 监听到一个客户端的连接请求，但是未能成功建立连接就会阻塞在 accept 函数里，导致其他客户端无法和 Redis 建立连接。同样的，Redis 通过 recv 从客户端读取数据时，如果数据一直没有到达，也会一直阻塞在 recv 函数。\r\n\r\n这就阻塞 Redis 整个工作线程，无法处理其他客户端请求，为了解决这个问题，要运用 socket 网络模型的非阻塞模式。","src/content/posts/redis/7.Redis单线程.md","3ff35384fab07ea5",{html:1722,metadata:1723},'<h2 id="redis-单线程本质">Redis 单线程本质</h2>\n<p>Redis 的单线程，指的是 Redis 的网络 IO 和键值对读写由一个线程完成，这是 Redis 对外提供键值存储服务的主要流程，但是 Redis 的其他功能，比如持久化、异步删除、集群数据同步都是由额外的线程执行。</p>\n<h3 id="redis-为什么用单线程">Redis 为什么用单线程</h3>\n<p>我们先从多线程开销讲起。</p>\n<h4 id="多线程开销">多线程开销</h4>\n<p>一个多线程系统，在合理分配资源的前提下可以增加系统中处理请求操作的资源实体，进而提升系统能够同时处理的请求数，即吞吐率。</p>\n<p>但是如果多线程系统中没有良好的系统设计，随着线程数增加而增长的系统吞吐率到一定瓶颈后增长迟缓甚至下降。</p>\n<p>出现这个现象的原因是，系统中存在被多线程同时访问的共享资源，在多个线程要修改这个共享资源时候，要增加额外的机制来保证共享资源正确性，额外的机制带来额外的开销。</p>\n<p>假设 Redis 采用多线程设计，如下图所示，现在有两个线程 A 和 B ，线程 A 对一个 List 做 LPUSH 操作， 并对队列长度加 1。同时，线程 B 对该 List 执行 LPOP 操作，并对队列长度减 1。为了保证队列长度的正确性，Redis 需要让线程 A 和 B 的 LPUSH 和 LPOP 串行执行， 只有这样，Redis 可以保证正确记录它们对 List 长度的修改。 否则，我们可能就会得到错误的长度结果。 这就是多线程编程模式面临的共享资源的并发访问控制问题。</p>\n<p>并发访问控制是多线程开发的难点问题，如果只是对共享资源简单采用粗粒度互斥锁，就可能会出现即使增加线程，大部分线程只是在等待获取访问共享资源的互斥锁，并行变串行，系统吞吐率并没有随着线程增加而增加。</p>\n<p>而且，采用多线程开发一般会引入同步原语来保护共享资源的并发访问，这也会降低系统 代码的易调试性和可维护性。 为了避免这些问题，Redis 直接采用了单线程模式。</p>\n<h3 id="单线程-redis-为什么快">单线程 Redis 为什么快</h3>\n<p>通常来说单线程处理能力比多线程差很大，但是 Redis 用单线程模型达到每秒数十万操作指令处理能力，这是 Redis 多方面设计作用下的综合结果。</p>\n<p>一方面，Redis 操作键值对都在内存中完成，并且它还有高效的数据结构，比如哈希表和跳表。</p>\n<p>另一方面，网络请求解析，Redis 采用多路复用机制，在网络 IO 中能并发处理大量客户端请求，实现高吞吐量。</p>\n<h4 id="基本-io-模型和阻塞点">基本 IO 模型和阻塞点</h4>\n<p>Redis 的基本执行流程就是依次执行如下操作：</p>\n<p>以 Get 请求为例，Redis 为了处理一个 Get 请求，需要监听客户端请求 （ bind/listen ） ，和客户端建立连接（accept） ，从 socket 中读取请求（recv），解析客户端发送请求（parse） ，根据请求类型读取键值数据（get）  最后给客户端返回结果，即向 socket 中写回数据（send）。</p>\n<p>bind/listen、accept、recv、parse 和 send 属于网络 IO 处理，而 get 属于键值数据操作。</p>\n<p>在网络 IO 操作的 accept 和 recv 处理上，可能会出现阻塞。</p>\n<p>当 Redis 监听到一个客户端的连接请求，但是未能成功建立连接就会阻塞在 accept 函数里，导致其他客户端无法和 Redis 建立连接。同样的，Redis 通过 recv 从客户端读取数据时，如果数据一直没有到达，也会一直阻塞在 recv 函数。</p>\n<p>这就阻塞 Redis 整个工作线程，无法处理其他客户端请求，为了解决这个问题，要运用 socket 网络模型的非阻塞模式。</p>',{headings:1724,localImagePaths:1739,remoteImagePaths:1740,frontmatter:1741,imagePaths:1745},[1725,1728,1731,1733,1736],{depth:49,slug:1726,text:1727},"redis-单线程本质","Redis 单线程本质",{depth:89,slug:1729,text:1730},"redis-为什么用单线程","Redis 为什么用单线程",{depth:150,slug:1732,text:1732},"多线程开销",{depth:89,slug:1734,text:1735},"单线程-redis-为什么快","单线程 Redis 为什么快",{depth:150,slug:1737,text:1738},"基本-io-模型和阻塞点","基本 IO 模型和阻塞点",[],[],{title:1715,published:1742,tags:1743,categories:1744,minutes:124},["Date","2020-08-01T19:01:42.000Z"],[1481],[1481],[],"redis/8redis非阻塞模式",{id:1746,data:1748,body:1752,filePath:1753,digest:1754,rendered:1755},{title:1749,published:1750,description:34,tags:1751,draft:38,pin:39,toc:40,lang:34,abbrlink:34},"Redis非阻塞模式",["Date","2020-09-11T19:01:42.000Z"],[1481],"## 非阻塞模式\r\n\r\n设置socket网络模型的非阻塞模式，需要三个关键函数socket()、listen()和accept()\r\n\r\n在socket模型中，不同操作调用后会返回不同套接字类型。socket()方法返回主动套接字，然后调用listen()方法将主动套接字转化为监听套接字，监听客户端的连接请求，最后调用accept()方法接收到达的客户端连接，并返回已连接的套接字。\r\n\r\n\r\n| 调用方法 | 返回套接字类型 | 非阻塞模式 |        效果         |\r\n| :------: | :------------: | :--------: | :-----------------: |\r\n| socket() |   主动套接字   |            |                     |\r\n| listen() |   监听套接字   |   可设置   |   accept()非阻塞    |\r\n| accept() |  已连接套接字  |   可设置   | send()/recv()非阻塞 |\r\n\r\n## Redis套接字类型与非阻塞设置\r\n\r\n针对监听套接字，我们可以设置非阻塞模式：当 Redis 调用 accept() 但一直未有连接请求到达时，Redis 线程可以返回处理其他操作，而不用一直等待。但是，你要注意的是，调用 accept() 时，已经存在监听套接字了。虽然 Redis 线程可以不用继续等待，但是总得有机制继续在监听套接字上等待后续连接请求，并在有请求时通知 Redis。\r\n\r\n类似的，我们也可以针对已连接套接字设置非阻塞模式：Redis 调用 recv() 后，如果已连接套接字上一直没有数据到达，Redis 线程同样可以返回处理其他操作。我们也需要有机制继续监听该已连接套接字，并在有数据达到时通知 Redis。这样才能保证 Redis 线程，既不会像基本 IO 模型中一直在阻塞点等待，也不会导致 Redis 无法处理实际到达的连接请求或数据。\r\n\r\n### 基于多路复用的高性能 I/O 模型\r\n\r\nLinux 中的 IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select/epoll 机制。\r\n\r\n在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听套接字和已连接套接字。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。\r\n下图就是基于多路复用的 Redis IO 模型。图中的多个 FD 就是刚才所说的多个套接字。Redis 网络框架调用 epoll 机制，让内核监听这些套接字。此时，Redis 线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。\r\n\r\n\r\n## 总结\r\n\r\nRedis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。\r\n单线程的 Redis 也能获得高性能，跟多路复用的 IO 模型密切相关，因为这避免了 accept() 和 send()/recv() 潜在的网络 IO 操作阻塞点。","src/content/posts/redis/8.Redis非阻塞模式.md","6b20520d27f29914",{html:1756,metadata:1757},'<h2 id="非阻塞模式">非阻塞模式</h2>\n<p>设置socket网络模型的非阻塞模式，需要三个关键函数socket()、listen()和accept()</p>\n<p>在socket模型中，不同操作调用后会返回不同套接字类型。socket()方法返回主动套接字，然后调用listen()方法将主动套接字转化为监听套接字，监听客户端的连接请求，最后调用accept()方法接收到达的客户端连接，并返回已连接的套接字。</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th align="center">调用方法</th><th align="center">返回套接字类型</th><th align="center">非阻塞模式</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">socket()</td><td align="center">主动套接字</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">listen()</td><td align="center">监听套接字</td><td align="center">可设置</td><td align="center">accept()非阻塞</td></tr><tr><td align="center">accept()</td><td align="center">已连接套接字</td><td align="center">可设置</td><td align="center">send()/recv()非阻塞</td></tr></tbody></table>\n<h2 id="redis套接字类型与非阻塞设置">Redis套接字类型与非阻塞设置</h2>\n<p>针对监听套接字，我们可以设置非阻塞模式：当 Redis 调用 accept() 但一直未有连接请求到达时，Redis 线程可以返回处理其他操作，而不用一直等待。但是，你要注意的是，调用 accept() 时，已经存在监听套接字了。虽然 Redis 线程可以不用继续等待，但是总得有机制继续在监听套接字上等待后续连接请求，并在有请求时通知 Redis。</p>\n<p>类似的，我们也可以针对已连接套接字设置非阻塞模式：Redis 调用 recv() 后，如果已连接套接字上一直没有数据到达，Redis 线程同样可以返回处理其他操作。我们也需要有机制继续监听该已连接套接字，并在有数据达到时通知 Redis。这样才能保证 Redis 线程，既不会像基本 IO 模型中一直在阻塞点等待，也不会导致 Redis 无法处理实际到达的连接请求或数据。</p>\n<h3 id="基于多路复用的高性能-io-模型">基于多路复用的高性能 I/O 模型</h3>\n<p>Linux 中的 IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select/epoll 机制。</p>\n<p>在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听套接字和已连接套接字。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。\r\n下图就是基于多路复用的 Redis IO 模型。图中的多个 FD 就是刚才所说的多个套接字。Redis 网络框架调用 epoll 机制，让内核监听这些套接字。此时，Redis 线程不会阻塞在某一个特定的监听或已连接套接字上，也就是说，不会阻塞在某一个特定的客户端请求处理上。正因为此，Redis 可以同时和多个客户端连接并处理请求，从而提升并发性。</p>\n<h2 id="总结">总结</h2>\n<p>Redis 单线程是指它对网络 IO 和数据读写的操作采用了一个线程，而采用单线程的一个核心原因是避免多线程开发的并发控制问题。\r\n单线程的 Redis 也能获得高性能，跟多路复用的 IO 模型密切相关，因为这避免了 accept() 和 send()/recv() 潜在的网络 IO 操作阻塞点。</p>',{headings:1758,localImagePaths:1768,remoteImagePaths:1769,frontmatter:1770,imagePaths:1774},[1759,1761,1764,1767],{depth:49,slug:1760,text:1760},"非阻塞模式",{depth:49,slug:1762,text:1763},"redis套接字类型与非阻塞设置","Redis套接字类型与非阻塞设置",{depth:89,slug:1765,text:1766},"基于多路复用的高性能-io-模型","基于多路复用的高性能 I/O 模型",{depth:49,slug:117,text:117},[],[],{title:1749,published:1771,tags:1772,categories:1773,top:39,minutes:150},["Date","2020-09-11T19:01:42.000Z"],[1481],[1481],[]];export{_astro_dataLayerContent as default};