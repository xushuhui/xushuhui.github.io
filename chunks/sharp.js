import{A as AstroError,K as MissingSharp}from"./astro/server.js";import{b as baseService,p as parseQuality}from"./_astro_assets.js";let sharp;const qualityTable={low:25,mid:50,high:80,max:100};async function loadSharp(){let t;try{t=(await import("sharp")).default}catch{throw new AstroError(MissingSharp)}return t.cache(!1),t}const fitMap={fill:"fill",contain:"inside",cover:"cover",none:"outside","scale-down":"inside",outside:"outside",inside:"inside"},sharpService={validateOptions:baseService.validateOptions,getURL:baseService.getURL,parseURL:baseService.parseURL,getHTMLAttributes:baseService.getHTMLAttributes,getSrcSet:baseService.getSrcSet,async transform(t,e,i){sharp||(sharp=await loadSharp());const a=e;if("svg"===a.format)return{data:t,format:"svg"};const r=sharp(t,{failOnError:!1,pages:-1,limitInputPixels:i.service.config.limitInputPixels});r.rotate();const s=Boolean(a.fit);if(a.width&&a.height&&a.fit){const t=fitMap[a.fit]??"inside";r.resize({width:Math.round(a.width),height:Math.round(a.height),fit:t,position:a.position,withoutEnlargement:s})}else a.height&&!a.width?r.resize({height:Math.round(a.height),withoutEnlargement:s}):a.width&&r.resize({width:Math.round(a.width),withoutEnlargement:s});if(a.format){let t;if(a.quality){const e=parseQuality(a.quality);t="number"==typeof e?e:a.quality in qualityTable?qualityTable[a.quality]:void 0}r.toFormat(a.format,{quality:t})}const{data:o,info:n}=await r.toBuffer({resolveWithObject:!0});return{data:o,format:n.format}}};var sharp_default=sharpService;export{sharp_default as default};