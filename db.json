{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.png","path":"img/alipay.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"98df3e612872f3b923b9fa34fde364f369e4feb4","modified":1554275093112},{"_id":"source/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1553850369957},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1553743027111},{"_id":"themes/indigo/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1553743027111},{"_id":"themes/indigo/README.md","hash":"cfc7d09fc2ce26003954d647e3bbf98f71574eb7","modified":1553743027111},{"_id":"themes/indigo/_config.yml","hash":"414a23d66d3cfdd7d3d35d50965727253650a500","modified":1554257661060},{"_id":"themes/indigo/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1553743027148},{"_id":"source/_posts/Nginx配置https出现no ssl_certificate.md","hash":"a6915ab611be1ba5ff39587551b31b1aec78d5e3","modified":1553763910647},{"_id":"source/_posts/PHP运行模式.md","hash":"799547a2f4d596feafd7bc229dce116d3df2595b","modified":1553842397575},{"_id":"source/_posts/docker-mysql主从配置.md","hash":"3f90586a88b33ca45d28f7ba8940335d518711c7","modified":1553763278984},{"_id":"source/_posts/hello-world.md","hash":"ccd14028a6ed10acc960cad818ec43068a4ca3e9","modified":1553742806987},{"_id":"source/_posts/nginx负载均衡模式.md","hash":"653dce18f75f430e60ca68dbad08f1ace7c3a6dd","modified":1553842160180},{"_id":"source/_posts/nginx配置文件.md","hash":"c9a1c3d72d5636cd3ccaf88f4f7f7ff9351dd07c","modified":1554256764531},{"_id":"source/_posts/php7新特性.md","hash":"f61bf042657c4b7719a724dfd3dbfa656a448db4","modified":1554255529119},{"_id":"source/_posts/python在类中实现swith功能.md","hash":"dc14982ce4e12fd3e306c11903b92f0e859c24db","modified":1553842296826},{"_id":"source/_posts/swoole异步task.md","hash":"e3f290d5039d87687fafc0e53054d7caf8079c72","modified":1554089732550},{"_id":"source/_posts/vscode快捷键.md","hash":"4058d0c5ff8044016043a1bb285bf85d5d32fa08","modified":1554285408941},{"_id":"source/_posts/wsl搭建php环境请求超时的问题解决方案.md","hash":"0d8bf7cce4b8d45ac8611d5c19543d5722ef5825","modified":1553763306221},{"_id":"source/_posts/《大话数据结构》读后总结（一）.md","hash":"7915229779bf1f6798c75784f4b5774232782a4d","modified":1553842611363},{"_id":"source/_posts/《大话数据结构》读后总结（七）.md","hash":"60631748cb886ba802333b2073aa7ad7d487c6d3","modified":1554088371114},{"_id":"source/_posts/《大话数据结构》读后总结（三）.md","hash":"639f5350d4484f77de9e87595b225cab84fc8708","modified":1553842743963},{"_id":"source/_posts/《大话数据结构》读后总结（二）.md","hash":"fd4d17f53d45546d116324032f8a3ad50c959b88","modified":1553842698347},{"_id":"source/_posts/《大话数据结构》读后总结（五）.md","hash":"4c92c18dbb02f3d71f031bfb7aba6a28b76d177e","modified":1554087432443},{"_id":"source/_posts/《大话数据结构》读后总结（六）.md","hash":"3992f20fbe04e9457480b79473b1fdf5cfa7810f","modified":1554087451676},{"_id":"source/_posts/《大话数据结构》读后总结（四）.md","hash":"a075115af99887eae8932227f3f9cb2ed147900c","modified":1553842768049},{"_id":"source/_posts/无法安装golang-org安装包的问题.md","hash":"e29f0f440e71ff8db6670a37f02c008530bfd4b0","modified":1553763323645},{"_id":"source/about/index.md","hash":"e082f20a77f5bc9044edadbdfeba67b1f0fca775","modified":1553766682286},{"_id":"source/categories/index.md","hash":"8e01a72edd5c88d495c057c552140bf289d4decb","modified":1553766655338},{"_id":"source/tags/index.md","hash":"431c6bf762a3627ccb3357c532348ef32e1f3467","modified":1553766663334},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1553743027101},{"_id":"themes/indigo/.git/config","hash":"10bc2a37a8fb3284cc9a5f394aaafbad0c1cd36b","modified":1553743027108},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1553742931036},{"_id":"themes/indigo/.git/index","hash":"c645904682f50c19f701279a281432b2c4a11f0a","modified":1553743027237},{"_id":"themes/indigo/.git/packed-refs","hash":"54f213bb58f8586a04edc54ae601a1010e159798","modified":1553743027091},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1553743027114},{"_id":"themes/indigo/languages/ja.yml","hash":"65a32717335211a45771a21fb7d7778808c6f0aa","modified":1553743027114},{"_id":"themes/indigo/languages/nl-NL","hash":"b540b76af76c1a180c517089ed2ad770cbded170","modified":1553743027115},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1553743027116},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1553743027116},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1553743027144},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1553743027144},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1553743027144},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1553743027145},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1553743027147},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1553743027147},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1553743027147},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1553743027148},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1553743027148},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1554276150173},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1553742931036},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1553742931036},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1553742931039},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1553742931039},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1553742931039},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1553742931040},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1553742931041},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1553742931042},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1553742931043},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1553742931045},{"_id":"themes/indigo/.git/logs/HEAD","hash":"be7e270c4e346812fbcea480bb82ca5e3a081a81","modified":1553743027104},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1553743027118},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1553743027118},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"c78444f5b350ca79b260361bf3e5b6361d2661ba","modified":1553743027120},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"9dfc591ec6c918c5b60b6ccbc5d1e18fea9faf8e","modified":1553743027120},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1553743027120},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"7208d4083ee3355aa969972a2ce249a67d56b3a6","modified":1553743027123},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1553743027125},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1553743027125},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1553743027125},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"20597ac0d547aea37680ecf195eb129fe5ee19d8","modified":1553743027133},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"b28106b35a9fc63eefa69c2ca8b923eb1f731832","modified":1553743027142},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1553743027143},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1553743027143},{"_id":"themes/indigo/source/css/style.less","hash":"cf362925ae099b810fd5763e6b724b823612ed15","modified":1553743027226},{"_id":"themes/indigo/source/img/alipay.png","hash":"ca88c7f68a38261c4864d99d454ad1a0bfb519a0","modified":1553744219843},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1553744530697},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1553743027228},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1553743027228},{"_id":"themes/indigo/source/img/favicon.ico","hash":"d347f77a63d422b89a3308e0f1951c844a315476","modified":1553845175310},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1553743027229},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1553743027231},{"_id":"themes/indigo/source/img/wechat.png","hash":"aa88f8f11da34a0a145bc7bf08e117653ad668fa","modified":1553744219842},{"_id":"themes/indigo/source/js/main.js","hash":"ff44bb7b2f1f08757093fd6ffa92c9ac2b674109","modified":1553743027233},{"_id":"themes/indigo/source/js/main.min.js","hash":"e77a89fe5a9827ac590a288778176b233dd900ad","modified":1553743027233},{"_id":"themes/indigo/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1553743027235},{"_id":"themes/indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1553743027236},{"_id":"themes/indigo/.git/objects/pack/pack-b3df9caa2fa7400388c221d55e996c7493b79212.idx","hash":"76f592d42e91f0b9e434b91e18de6973bece426b","modified":1553743026616},{"_id":"themes/indigo/.git/refs/heads/card","hash":"215cf3cc5ee9a6265fb8b0259977357fe8d4fdd0","modified":1553743027101},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1553743027126},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1553743027127},{"_id":"themes/indigo/layout/_partial/plugins/gitalk.ejs","hash":"8a0c390ed475600c627bcfa41df15a54f60eca3c","modified":1553743027127},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1553743027127},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1553743027127},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1553743027129},{"_id":"themes/indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1553743027129},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1553743027129},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1553743027129},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1553743027131},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1553743027132},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1553743027132},{"_id":"themes/indigo/layout/_partial/plugins/valine.ejs","hash":"0a6245da90d54177441d32a6f1766b4f434660db","modified":1553743027132},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"2751d0f694f72bb886664ace021d698ea0e8f0c7","modified":1553743027135},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1553743027134},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1553743027135},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1553743027135},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1553743027138},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1553743027138},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1553743027138},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"097c0276a61665e5ee96e5d5d85a7d6ae5ab2f49","modified":1553743027138},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1553743027138},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1553743027140},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1553743027140},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1553743027140},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1553743027140},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1553743027142},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1553743027150},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"d05df557d54adc45e7b01ca6f50a422f88e8a282","modified":1554256614996},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1553743027155},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1553743027155},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1553743027155},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"5f783f34bf093e654e8922ed4a2af8b7b2cd41c4","modified":1553743027156},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1553743027156},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1553743027156},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1553743027156},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1553743027158},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"f5e89ea5414e3096a28c8c96e86c3f669040a892","modified":1553743027160},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1553743027162},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1553743027162},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1553743027163},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1553743027162},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1553743027165},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1553743027166},{"_id":"themes/indigo/source/css/_plugin/valine.less","hash":"b8f8d8037fb3c8525da12e580bd9e2ff9f298132","modified":1553743027168},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1553743027155},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"be7e270c4e346812fbcea480bb82ca5e3a081a81","modified":1553743027104},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1553743027096},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1553743027190},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1553743027195},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1553743027198},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1553743027199},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1553743027204},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1553743027207},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1553743027209},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1553743027213},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1553743027213},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1553743027213},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1553743027217},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1553743027218},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1553743027219},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1553743027225},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1553743027226},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553743027188},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553743027189},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1553743027193},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1553743027201},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1553743027212},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1553743027216},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1553743027223},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"be7e270c4e346812fbcea480bb82ca5e3a081a81","modified":1553743027099},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553743027176},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553743027171},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553743027187},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1553743027182},{"_id":"themes/indigo/.git/objects/pack/pack-b3df9caa2fa7400388c221d55e996c7493b79212.pack","hash":"436946071396f1f0ec59fdfad57ed859a917796a","modified":1553743026620},{"_id":"public/content.json","hash":"d2a78d4e4ae26c6e67767b078fc9989add89654c","modified":1554285423089},{"_id":"public/404.html","hash":"239fb2f1f52492f1ba3451624839f7b874adc543","modified":1554285423678},{"_id":"public/about/index.html","hash":"e4eaa44a4b8b0e8408c2833cc1aaf281011fc2e5","modified":1554285423678},{"_id":"public/categories/index.html","hash":"9b530d49f6f603cf2683222d30d93411183e760a","modified":1554285423714},{"_id":"public/archives/2019/03/page/2/index.html","hash":"d885a3fb18868a112064cdb2e0184c83a234637a","modified":1554285423715},{"_id":"public/archives/2019/04/index.html","hash":"c22aa4d0ddb8fa97d9da04c347ec19844fb36c37","modified":1554285423716},{"_id":"public/tags/nginx/index.html","hash":"4212947cfc98d4a59d959fe22b99a186b699c428","modified":1554285423716},{"_id":"public/tags/https/index.html","hash":"0293b0a6954b999831da35145de20601caea01de","modified":1554285423716},{"_id":"public/tags/ssl/index.html","hash":"6e5db1857cf5d47c3aa6d0c87615286464fa41b0","modified":1554285423716},{"_id":"public/tags/php/index.html","hash":"a5cf75131e3d17e9eacd45c04003ac330ac82d56","modified":1554285423716},{"_id":"public/tags/php-fpm/index.html","hash":"2073b6d47184c7c63d39f0c2ca3ac5e9aa28e74e","modified":1554285423716},{"_id":"public/tags/apache/index.html","hash":"3d96c21a78bd4e1e99ba263ded222770a35e4544","modified":1554285423716},{"_id":"public/tags/docker/index.html","hash":"a767c9c1fa147bd2af0dc6ac8139256d4a1a3440","modified":1554285423716},{"_id":"public/tags/mysql/index.html","hash":"10a2cf4a9de6843ba886d459b905aa2aba42031b","modified":1554285423717},{"_id":"public/tags/index.html","hash":"a0bec4e269a9499812db77e877e1b1a13e10710f","modified":1554285423717},{"_id":"public/2019/04/03/vscode快捷键/index.html","hash":"20007bbe65fc1e5121fb6e16561b8d57052f74b2","modified":1554285423717},{"_id":"public/2019/04/03/nginx配置文件/index.html","hash":"ee44cdd2ebe9693db5ae2c7f2e229e09ea930b23","modified":1554285423717},{"_id":"public/2019/04/03/php7新特性/index.html","hash":"a86d3c272334484a78efba052f512dfeac8341de","modified":1554285423717},{"_id":"public/2019/04/01/《大话数据结构》读后总结（七）/index.html","hash":"228e8c24c93c645c1dcf8fb5a5852d63e41249e4","modified":1554285423718},{"_id":"public/2019/04/01/《大话数据结构》读后总结（六）/index.html","hash":"66ddc7a968779ddd709ed54117a454ad5e22310c","modified":1554285423718},{"_id":"public/2019/04/01/《大话数据结构》读后总结（五）/index.html","hash":"500e83eba1d3a8e68e2ff27d830ffac01036ec6e","modified":1554285423718},{"_id":"public/2019/03/29/《大话数据结构》读后总结（四）/index.html","hash":"5bc7a0ef1f054b24d03d8174f46921b559fe0075","modified":1554285423718},{"_id":"public/2019/03/29/《大话数据结构》读后总结（三）/index.html","hash":"9c8c2f90a56eec8f964bb9efc6b5d562f47117e6","modified":1554285423718},{"_id":"public/2019/03/29/《大话数据结构》读后总结（二）/index.html","hash":"980d8f674b739e2f895e258cfde4833f42c18c64","modified":1554285423718},{"_id":"public/2019/03/29/《大话数据结构》读后总结（一）/index.html","hash":"04c6c7af8f4e48ba9fcbb925c043cf0def4c8c67","modified":1554285423718},{"_id":"public/2019/03/29/PHP运行模式/index.html","hash":"fa354e50f0c309dbdbc95804146d6e0c3eb828da","modified":1554285423718},{"_id":"public/2019/03/29/python在类中实现swith功能/index.html","hash":"366cd109bd046d78b646158d4255767f0d952ac7","modified":1554285423718},{"_id":"public/2019/03/29/nginx负载均衡模式/index.html","hash":"a8c99434cd3bcb35fed9a68a7e74121a130f62b1","modified":1554285423719},{"_id":"public/2019/03/29/swoole异步task/index.html","hash":"09cc2fbc31ce50180d3e92868088faf1f51334e3","modified":1554285423719},{"_id":"public/2019/03/28/无法安装golang-org安装包的问题/index.html","hash":"ba5d7e057979538c978501a809a2a547eeb010ec","modified":1554285423719},{"_id":"public/2019/03/28/Nginx配置https出现no ssl_certificate/index.html","hash":"9fad907185089a10968970774c1fcc00253d06d8","modified":1554285423719},{"_id":"public/2019/03/28/wsl搭建php环境请求超时的问题解决方案/index.html","hash":"added20beb29a48de6f051498eb2b71bd9ae7c5d","modified":1554285423719},{"_id":"public/2019/03/28/docker-mysql主从配置/index.html","hash":"298a86dcad41befd9e6349c6b2dc202e698b2cfc","modified":1554285423719},{"_id":"public/2019/03/28/hello-world/index.html","hash":"af2b0b9697778412c5be4baaa9f764b8894b23c1","modified":1554285423720},{"_id":"public/archives/index.html","hash":"120309dfd4cf40ea0169751a732b24f6a3000a85","modified":1554285423720},{"_id":"public/archives/page/2/index.html","hash":"ed846630055b318e101aff4bfffd1306dc17394a","modified":1554285423720},{"_id":"public/archives/2019/index.html","hash":"d00d089ab47063b56b87a9b9be371e1e1ba65023","modified":1554285423720},{"_id":"public/archives/2019/page/2/index.html","hash":"26fe9cb53c074a4641a033721b819f76a1d9ae19","modified":1554285423720},{"_id":"public/archives/2019/03/index.html","hash":"a918a0179e639855e4b234bd67392a4669c6c4fa","modified":1554285423721},{"_id":"public/index.html","hash":"5865d56b69672d6ef4c1e3fe6725ec9f9f21b3a3","modified":1554285423721},{"_id":"public/page/2/index.html","hash":"ed572e73ac3696011f4771350677f5238cc40d57","modified":1554285423721},{"_id":"public/tags/python/index.html","hash":"67e985efa7105fa7cce704925f88dec4e7942288","modified":1554285423739},{"_id":"public/tags/swoole/index.html","hash":"386a978e7e1ddf84e00560590d9a70f2e8e081b3","modified":1554285423739},{"_id":"public/tags/vscode/index.html","hash":"e47383a62280c94d5c242c73a4c9e87189e0c386","modified":1554285423739},{"_id":"public/tags/wsl/index.html","hash":"642d38c70dd5f0aab8220bf7f3dd3c8ad5c5d53f","modified":1554285423739},{"_id":"public/tags/golang/index.html","hash":"addf6ec70ec077792811ce16fae024f4e764404c","modified":1554285423739},{"_id":"public/tags/数据结构/index.html","hash":"2fe7582e3b46eef698f536afd37944f870ee45d7","modified":1554285423739},{"_id":"public/tags/算法/index.html","hash":"8afb282135cd66f4ecdc5c23d9d41eb1f75db123","modified":1554285423739},{"_id":"public/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1554285423746},{"_id":"public/img/alipay.png","hash":"ca88c7f68a38261c4864d99d454ad1a0bfb519a0","modified":1554285423746},{"_id":"public/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1554285423746},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1554285423747},{"_id":"public/img/favicon.ico","hash":"d347f77a63d422b89a3308e0f1951c844a315476","modified":1554285423747},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1554285423747},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1554285423747},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1554285423747},{"_id":"public/img/wechat.png","hash":"aa88f8f11da34a0a145bc7bf08e117653ad668fa","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1554285423747},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1554285423748},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1554285423748},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554285423769},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554285423770},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1554285423770},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1554285423770},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1554285423770},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1554285423770},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1554285423770},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1554285423787},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1554285423788},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1554285423788},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554285423789},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554285423789},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554285423789},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1554285423814},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1554285423826},{"_id":"public/css/style.css","hash":"382fc5086824fab4b23a4c65eff30896584570d8","modified":1554285424226}],"Category":[],"Data":[],"Page":[{"_content":"\n\n<h1>404</h1>\n\n\n","source":"404.html","raw":"\n\n<h1>404</h1>\n\n\n","date":"2019-04-03T07:04:53.112Z","updated":"2019-04-03T07:04:53.112Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cju11equk0000qwn5b24gjf61","content":"\n\n<h1>404</h1>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n<h1>404</h1>\n\n\n"},{"title":"关于我","date":"2019-03-28T04:15:38.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2019-03-28 12:15:38\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-03-28T09:51:22.286Z","path":"about/index.html","comments":1,"_id":"cju11eqxo000qqwn5wy3xbwdh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-02T09:09:23.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-02 17:09:23\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-03-28T09:50:55.338Z","path":"categories/index.html","comments":1,"_id":"cju11eqxt000sqwn54zpu5ul0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-28T09:25:32.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-28 17:25:32\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-03-28T09:51:03.334Z","path":"tags/index.html","_id":"cju11eqxy000vqwn5ooqcpsqh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Nginx配置https出现no\"ssl_certificate\" is defined","date":"2019-03-28T08:43:50.000Z","_content":"### 一、问题\n今天在配置nginx的https发现报错：\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。\n### 二、解决方案\nnginx的配置文件中nginx.conf中加入\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/Nginx配置https出现no ssl_certificate.md","raw":"---\ntitle: Nginx配置https出现no\"ssl_certificate\" is defined\ndate: 2019-03-28 16:43:50\ntags: [nginx, https, ssl]\n\n---\n### 一、问题\n今天在配置nginx的https发现报错：\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。\n### 二、解决方案\nnginx的配置文件中nginx.conf中加入\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"Nginx配置https出现no ssl_certificate","published":1,"updated":"2019-03-28T09:05:10.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqw60001qwn5f2pcimyv","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置nginx的https发现报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br></pre></td></tr></table></figure></p>\n<p>意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx的配置文件中nginx.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  ssl_certificate  xxx.pem;</span><br><span class=\"line\">  ssl_certificate_key xx.key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置nginx的https发现报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br><span class=\"line\">2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443</span><br></pre></td></tr></table></figure></p>\n<p>意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx的配置文件中nginx.conf中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  ssl_certificate  xxx.pem;</span><br><span class=\"line\">  ssl_certificate_key xx.key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP运行模式","date":"2019-03-29T06:52:24.000Z","_content":"### php分为五大运行模式\n- cgi(通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi升级版本)\n- cli(命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)\n- apache2handler(将php作为apache的模块)\n- 其他(continuity,embed,litespeed,milter等)\n\n本地查看运行模式的方法\n```\nphpinfo()\n php -r \"echo php_sapi_name()\"\n```\n\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI模式\n- Command Line Interface的简称，支持windows和Linux平台\n- 直接在命令行运行，不需要http server,例如php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用PHP-CLI和GTK包\n\n### CGI模式\n- Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台\n- 执行过程\n    - http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行\n    - 生成一个php-cgi进程，并执行php程序\n    - 执行结果返回给http服务器\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)\n    - 逐渐少见\n\n### FastCGI模式\n- 快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web服务器启动时载入Fast CGI进程管理器(php-fpm)\n    - FastCGI进程管理器会启动多个CGI进程等待web服务器的连接\n    - 当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi\n    - FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n- 模块模式指把PHP作为web服务器的一个模块运行\n- IIS的ISAPI和Apache的apache2handler\n\napache2handler\n- apache监听一个用户请求index.php\n- apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP\n- 在mod_php5.so注册一个php的钩子php_ap2_register_hook\n- php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。\n- php执行完成后数据通过.so或dll返回给apache\n- apache将数据返回到客户端\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/PHP运行模式.md","raw":"---\ntitle: PHP运行模式\ndate: 2019-03-29 14:52:24\ntags: [php,php-fpm,apache,nginx]\n---\n### php分为五大运行模式\n- cgi(通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi升级版本)\n- cli(命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)\n- apache2handler(将php作为apache的模块)\n- 其他(continuity,embed,litespeed,milter等)\n\n本地查看运行模式的方法\n```\nphpinfo()\n php -r \"echo php_sapi_name()\"\n```\n\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI模式\n- Command Line Interface的简称，支持windows和Linux平台\n- 直接在命令行运行，不需要http server,例如php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用PHP-CLI和GTK包\n\n### CGI模式\n- Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台\n- 执行过程\n    - http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行\n    - 生成一个php-cgi进程，并执行php程序\n    - 执行结果返回给http服务器\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)\n    - 逐渐少见\n\n### FastCGI模式\n- 快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web服务器启动时载入Fast CGI进程管理器(php-fpm)\n    - FastCGI进程管理器会启动多个CGI进程等待web服务器的连接\n    - 当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi\n    - FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n- 模块模式指把PHP作为web服务器的一个模块运行\n- IIS的ISAPI和Apache的apache2handler\n\napache2handler\n- apache监听一个用户请求index.php\n- apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP\n- 在mod_php5.so注册一个php的钩子php_ap2_register_hook\n- php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。\n- php执行完成后数据通过.so或dll返回给apache\n- apache将数据返回到客户端\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"PHP运行模式","published":1,"updated":"2019-03-29T06:53:17.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqwd0002qwn5gzwd98eb","content":"<h3 id=\"php分为五大运行模式\"><a href=\"#php分为五大运行模式\" class=\"headerlink\" title=\"php分为五大运行模式\"></a>php分为五大运行模式</h3><ul>\n<li>cgi(通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi升级版本)</li>\n<li>cli(命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)</li>\n<li>apache2handler(将php作为apache的模块)</li>\n<li>其他(continuity,embed,litespeed,milter等)</li>\n</ul>\n<p>本地查看运行模式的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpinfo()</span><br><span class=\"line\"> php -r &quot;echo php_sapi_name()&quot;</span><br></pre></td></tr></table></figure></p>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI模式\"><a href=\"#CLI模式\" class=\"headerlink\" title=\"CLI模式\"></a>CLI模式</h3><ul>\n<li>Command Line Interface的简称，支持windows和Linux平台</li>\n<li>直接在命令行运行，不需要http server,例如php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用PHP-CLI和GTK包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行</li>\n<li>生成一个php-cgi进程，并执行php程序</li>\n<li>执行结果返回给http服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI模式\"><a href=\"#FastCGI模式\" class=\"headerlink\" title=\"FastCGI模式\"></a>FastCGI模式</h3><ul>\n<li>快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web服务器启动时载入Fast CGI进程管理器(php-fpm)</li>\n<li>FastCGI进程管理器会启动多个CGI进程等待web服务器的连接</li>\n<li>当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi</li>\n<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把PHP作为web服务器的一个模块运行</li>\n<li>IIS的ISAPI和Apache的apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache监听一个用户请求index.php</li>\n<li>apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP</li>\n<li>在mod_php5.so注册一个php的钩子php_ap2_register_hook</li>\n<li>php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。</li>\n<li>php执行完成后数据通过.so或dll返回给apache</li>\n<li>apache将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"php分为五大运行模式\"><a href=\"#php分为五大运行模式\" class=\"headerlink\" title=\"php分为五大运行模式\"></a>php分为五大运行模式</h3><ul>\n<li>cgi(通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi升级版本)</li>\n<li>cli(命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)</li>\n<li>apache2handler(将php作为apache的模块)</li>\n<li>其他(continuity,embed,litespeed,milter等)</li>\n</ul>\n<p>本地查看运行模式的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phpinfo()</span><br><span class=\"line\"> php -r &quot;echo php_sapi_name()&quot;</span><br></pre></td></tr></table></figure></p>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI模式\"><a href=\"#CLI模式\" class=\"headerlink\" title=\"CLI模式\"></a>CLI模式</h3><ul>\n<li>Command Line Interface的简称，支持windows和Linux平台</li>\n<li>直接在命令行运行，不需要http server,例如php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用PHP-CLI和GTK包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行</li>\n<li>生成一个php-cgi进程，并执行php程序</li>\n<li>执行结果返回给http服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI模式\"><a href=\"#FastCGI模式\" class=\"headerlink\" title=\"FastCGI模式\"></a>FastCGI模式</h3><ul>\n<li>快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web服务器启动时载入Fast CGI进程管理器(php-fpm)</li>\n<li>FastCGI进程管理器会启动多个CGI进程等待web服务器的连接</li>\n<li>当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi</li>\n<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把PHP作为web服务器的一个模块运行</li>\n<li>IIS的ISAPI和Apache的apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache监听一个用户请求index.php</li>\n<li>apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP</li>\n<li>在mod_php5.so注册一个php的钩子php_ap2_register_hook</li>\n<li>php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。</li>\n<li>php执行完成后数据通过.so或dll返回给apache</li>\n<li>apache将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"docker+mysql主从配置","date":"2019-03-28T08:15:38.000Z","_content":"### 1.安装启动docker\n\n```\nyum install docker\nsystemctl start docker\n```\n### 2.启动docker容器\n```\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n### 3.修改mysql配置文件\n这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n重启从库容器\n### 4.配置mysql主从\n远程连接主库和从库\n```\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n### 5.测试接口\n主库中添加表，查看从库是否同步\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/docker-mysql主从配置.md","raw":"---\ntitle: docker+mysql主从配置\ndate: 2019-03-28 16:15:38\ntags: [docker, mysql]\n---\n### 1.安装启动docker\n\n```\nyum install docker\nsystemctl start docker\n```\n### 2.启动docker容器\n```\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n### 3.修改mysql配置文件\n这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入\n```\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n重启从库容器\n### 4.配置mysql主从\n远程连接主库和从库\n```\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n### 5.测试接口\n主库中添加表，查看从库是否同步\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"docker-mysql主从配置","published":1,"updated":"2019-03-28T08:54:38.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqwg0004qwn52wd62ybz","content":"<h3 id=\"1-安装启动docker\"><a href=\"#1-安装启动docker\" class=\"headerlink\" title=\"1.安装启动docker\"></a>1.安装启动docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-启动docker容器\"><a href=\"#2-启动docker容器\" class=\"headerlink\" title=\"2.启动docker容器\"></a>2.启动docker容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/xushuhui/docker-server.git</span><br><span class=\"line\">cd docker-server/mysql/compose</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改mysql配置文件\"><a href=\"#3-修改mysql配置文件\" class=\"headerlink\" title=\"3.修改mysql配置文件\"></a>3.修改mysql配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=2 #不能重复</span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\">replicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。</span><br></pre></td></tr></table></figure></p>\n<p>重启从库容器</p>\n<h3 id=\"4-配置mysql主从\"><a href=\"#4-配置mysql主从\" class=\"headerlink\" title=\"4.配置mysql主从\"></a>4.配置mysql主从</h3><p>远程连接主库和从库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主库中执行，创建同步用户</span><br><span class=\"line\">show master status</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* to &apos;backup&apos;@&apos;%&apos; identified by &apos;backup&apos;;</span><br><span class=\"line\">show grants for &apos;backup&apos;@&apos;%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">从库中执行</span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=&apos;主库ip&apos;,</span><br><span class=\"line\">MASTER_PORT=主库端口,</span><br><span class=\"line\">MASTER_USER=&apos;backup&apos;,</span><br><span class=\"line\">MASTER_PASSWORD=&apos;backup&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">START SLAVE;</span><br><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5.测试接口\"></a>5.测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-安装启动docker\"><a href=\"#1-安装启动docker\" class=\"headerlink\" title=\"1.安装启动docker\"></a>1.安装启动docker</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker</span><br><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-启动docker容器\"><a href=\"#2-启动docker容器\" class=\"headerlink\" title=\"2.启动docker容器\"></a>2.启动docker容器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/xushuhui/docker-server.git</span><br><span class=\"line\">cd docker-server/mysql/compose</span><br><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改mysql配置文件\"><a href=\"#3-修改mysql配置文件\" class=\"headerlink\" title=\"3.修改mysql配置文件\"></a>3.修改mysql配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin</span><br><span class=\"line\">server-id=2 #不能重复</span><br><span class=\"line\">binlog_format = mixed</span><br><span class=\"line\">replicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。</span><br></pre></td></tr></table></figure></p>\n<p>重启从库容器</p>\n<h3 id=\"4-配置mysql主从\"><a href=\"#4-配置mysql主从\" class=\"headerlink\" title=\"4.配置mysql主从\"></a>4.配置mysql主从</h3><p>远程连接主库和从库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主库中执行，创建同步用户</span><br><span class=\"line\">show master status</span><br><span class=\"line\">GRANT REPLICATION SLAVE ON *.* to &apos;backup&apos;@&apos;%&apos; identified by &apos;backup&apos;;</span><br><span class=\"line\">show grants for &apos;backup&apos;@&apos;%&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">从库中执行</span><br><span class=\"line\">CHANGE MASTER TO MASTER_HOST=&apos;主库ip&apos;,</span><br><span class=\"line\">MASTER_PORT=主库端口,</span><br><span class=\"line\">MASTER_USER=&apos;backup&apos;,</span><br><span class=\"line\">MASTER_PASSWORD=&apos;backup&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">START SLAVE;</span><br><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5.测试接口\"></a>5.测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-03-28T03:13:26.987Z","updated":"2019-03-28T03:13:26.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqwh0005qwn5b1rflnun","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"nginx负载均衡模式","date":"2019-03-29T06:48:42.000Z","_content":"Nginx的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。\n\n```\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight默认值为1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/nginx负载均衡模式.md","raw":"---\ntitle: nginx负载均衡模式\ndate: 2019-03-29 14:48:42\ntags: [nginx]\n---\nNginx的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。\n\n```\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight默认值为1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"nginx负载均衡模式","published":1,"updated":"2019-03-29T06:49:20.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqwj0006qwn5iryzqtq1","content":"<p>Nginx的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> upstream ng &#123;</span><br><span class=\"line\">        server 127.0.0.1:83;</span><br><span class=\"line\">        server 127.0.0.1:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\">    root   /usr/share/nginx/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       proxy_pass http://ng;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight默认值为1，值越大则代表被访问的几率越大</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ng &#123;</span><br><span class=\"line\">       server 127.0.0.1:83 weight=1;</span><br><span class=\"line\">       server 127.0.0.1:82 weight=2;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ng &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server 127.0.0.1:83;</span><br><span class=\"line\">    server 127.0.0.1:82;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test.cc &#123;</span><br><span class=\"line\">    least_conn;</span><br><span class=\"line\">    server 192.168.8.143;</span><br><span class=\"line\">    server 192.168.8.144;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> upstream ng &#123;</span><br><span class=\"line\">        server 127.0.0.1:83;</span><br><span class=\"line\">        server 127.0.0.1:82;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\">    root   /usr/share/nginx/html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">       proxy_pass http://ng;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight默认值为1，值越大则代表被访问的几率越大</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ng &#123;</span><br><span class=\"line\">       server 127.0.0.1:83 weight=1;</span><br><span class=\"line\">       server 127.0.0.1:82 weight=2;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream ng &#123;</span><br><span class=\"line\">    ip_hash;</span><br><span class=\"line\">    server 127.0.0.1:83;</span><br><span class=\"line\">    server 127.0.0.1:82;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream test.cc &#123;</span><br><span class=\"line\">    least_conn;</span><br><span class=\"line\">    server 192.168.8.143;</span><br><span class=\"line\">    server 192.168.8.144;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx配置文件","date":"2019-04-03T01:40:29.000Z","_content":"### nginx配置文件\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n```","source":"_posts/nginx配置文件.md","raw":"---\ntitle: nginx配置文件\ndate: 2019-04-03 09:40:29\ntags: [nginx]\n---\n### nginx配置文件\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n```","slug":"nginx配置文件","published":1,"updated":"2019-04-03T01:59:24.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqxl000pqwn5i6g6qrcd","content":"<h3 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，</span><br><span class=\"line\">但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是</span><br><span class=\"line\">    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type application/octet-stream; #默认文件类型</span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，</span><br><span class=\"line\">    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理</span><br><span class=\"line\">    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    tcp_nopush on; #防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; #防止网络阻塞</span><br><span class=\"line\">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class=\"line\"></span><br><span class=\"line\">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">#gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream test.com &#123;</span><br><span class=\"line\">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被</span><br><span class=\"line\">分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#虚拟主机的配置</span><br><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #监听端口</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    #域名可以有多个，用空格隔开</span><br><span class=\"line\">    server_name www.ha97.com ha97.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    root /data/www/ha97;</span><br><span class=\"line\">    location ~ .*.(php|php5)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include fastcgi.conf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #图片缓存时间设置</span><br><span class=\"line\">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 10d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #JS和CSS缓存时间设置</span><br><span class=\"line\">    location ~ .*.(js|css)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#日志格式设定</span><br><span class=\"line\">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\">#定义本虚拟主机的访问日志</span><br><span class=\"line\">    access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">#对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">#以下是一些反向代理的配置，可选。</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">        proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定查看Nginx状态的地址</span><br><span class=\"line\">    location /NginxStatus &#123;</span><br><span class=\"line\">        stub_status on;</span><br><span class=\"line\">        access_log on;</span><br><span class=\"line\">        auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">        auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#本地动静分离反向代理配置</span><br><span class=\"line\">#所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">    location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt</span><br><span class=\"line\">|flv|mid|doc|ppt|pdf|xls|mp3|wma)$&#123; </span><br><span class=\"line\">        expires 15d; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*.(js|css)?$&#123; </span><br><span class=\"line\">        expires 1h; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#定义Nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\">#进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，</span><br><span class=\"line\">但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\">#工作模式与连接数上限</span><br><span class=\"line\">events</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是</span><br><span class=\"line\">    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class=\"line\">    worker_connections 65535;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定http服务器</span><br><span class=\"line\">http</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class=\"line\">    default_type application/octet-stream; #默认文件类型</span><br><span class=\"line\">    #charset utf-8; #默认编码</span><br><span class=\"line\">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class=\"line\">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class=\"line\">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class=\"line\">    client_max_body_size 8m; #设定请求缓</span><br><span class=\"line\">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，</span><br><span class=\"line\">    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理</span><br><span class=\"line\">    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">    tcp_nopush on; #防止网络阻塞</span><br><span class=\"line\">    tcp_nodelay on; #防止网络阻塞</span><br><span class=\"line\">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class=\"line\"></span><br><span class=\"line\">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class=\"line\">    fastcgi_connect_timeout 300;</span><br><span class=\"line\">    fastcgi_send_timeout 300;</span><br><span class=\"line\">    fastcgi_read_timeout 300;</span><br><span class=\"line\">    fastcgi_buffer_size 64k;</span><br><span class=\"line\">    fastcgi_buffers 4 64k;</span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">#gzip模块设置</span><br><span class=\"line\">    gzip on; #开启gzip压缩输出</span><br><span class=\"line\">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class=\"line\">    gzip_comp_level 2; #压缩等级</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\"></span><br><span class=\"line\">#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">    upstream test.com &#123;</span><br><span class=\"line\">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被</span><br><span class=\"line\">分配到的几率越大。</span><br><span class=\"line\">        server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">        server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">        server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#虚拟主机的配置</span><br><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    #监听端口</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    #域名可以有多个，用空格隔开</span><br><span class=\"line\">    server_name www.ha97.com ha97.com;</span><br><span class=\"line\">    index index.html index.htm index.php;</span><br><span class=\"line\">    root /data/www/ha97;</span><br><span class=\"line\">    location ~ .*.(php|php5)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">        fastcgi_index index.php;</span><br><span class=\"line\">        include fastcgi.conf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #图片缓存时间设置</span><br><span class=\"line\">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 10d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #JS和CSS缓存时间设置</span><br><span class=\"line\">    location ~ .*.(js|css)?$</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        expires 1h;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#日志格式设定</span><br><span class=\"line\">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">    &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class=\"line\">#定义本虚拟主机的访问日志</span><br><span class=\"line\">    access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">#对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">        proxy_redirect off;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">#以下是一些反向代理的配置，可选。</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">        proxy_temp_file_write_size 64k;</span><br><span class=\"line\">        #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#设定查看Nginx状态的地址</span><br><span class=\"line\">    location /NginxStatus &#123;</span><br><span class=\"line\">        stub_status on;</span><br><span class=\"line\">        access_log on;</span><br><span class=\"line\">        auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">        auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#本地动静分离反向代理配置</span><br><span class=\"line\">#所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">    location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">#所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt</span><br><span class=\"line\">|flv|mid|doc|ppt|pdf|xls|mp3|wma)$&#123; </span><br><span class=\"line\">        expires 15d; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location ~ .*.(js|css)?$&#123; </span><br><span class=\"line\">        expires 1h; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"php7新特性","date":"2019-04-03T01:03:42.000Z","_content":"#### 太空船运算符\n```\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n#### 类型声明\n```\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n#### null合并操作符\n```\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n#### 常量数组\n```\ndefine('ANIMALS',['dog','cat']);\n```\n#### namespace批量导入\n```\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n#### intdiv函数\n```\nintdiv(10,3);\n```\n#### list方括号\n```\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```","source":"_posts/php7新特性.md","raw":"---\ntitle: php7新特性\ndate: 2019-04-03 09:03:42\ntags: [php]\n---\n#### 太空船运算符\n```\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n#### 类型声明\n```\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n#### null合并操作符\n```\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n#### 常量数组\n```\ndefine('ANIMALS',['dog','cat']);\n```\n#### namespace批量导入\n```\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n#### intdiv函数\n```\nintdiv(10,3);\n```\n#### list方括号\n```\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```","slug":"php7新特性","published":1,"updated":"2019-04-03T01:38:49.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqxr000rqwn5b8cx0ox6","content":"<h4 id=\"太空船运算符\"><a href=\"#太空船运算符\" class=\"headerlink\" title=\"太空船运算符\"></a>太空船运算符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1&lt;=&gt;1; //0</span><br><span class=\"line\">echo 2&lt;=&gt;1; //1</span><br><span class=\"line\">echo 1&lt;=&gt;2; //-1</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare(strict_type=1)//strict_type=1表示开启严格模式</span><br><span class=\"line\">function sumOfInts(int ...$ints):int&#123;</span><br><span class=\"line\">    return array_sum($ints);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"null合并操作符\"><a href=\"#null合并操作符\" class=\"headerlink\" title=\"null合并操作符\"></a>null合并操作符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$page = isset($_GET[&apos;page&apos;]) ? $_GET[&apos;page&apos;] : 0;</span><br><span class=\"line\">$page = $_GET[&apos;page&apos;] ?? 0;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常量数组\"><a href=\"#常量数组\" class=\"headerlink\" title=\"常量数组\"></a>常量数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&apos;ANIMALS&apos;,[&apos;dog&apos;,&apos;cat&apos;]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"namespace批量导入\"><a href=\"#namespace批量导入\" class=\"headerlink\" title=\"namespace批量导入\"></a>namespace批量导入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Space\\&#123;ClassA,ClassB as B,ClassC&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intdiv函数\"><a href=\"#intdiv函数\" class=\"headerlink\" title=\"intdiv函数\"></a>intdiv函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intdiv(10,3);</span><br></pre></td></tr></table></figure>\n<h4 id=\"list方括号\"><a href=\"#list方括号\" class=\"headerlink\" title=\"list方括号\"></a>list方括号</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [1,2,3];</span><br><span class=\"line\">list($a,$b,$c) = $arr;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [1,2,3];</span><br><span class=\"line\">[$a,$b,$c] = $arr;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"太空船运算符\"><a href=\"#太空船运算符\" class=\"headerlink\" title=\"太空船运算符\"></a>太空船运算符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1&lt;=&gt;1; //0</span><br><span class=\"line\">echo 2&lt;=&gt;1; //1</span><br><span class=\"line\">echo 1&lt;=&gt;2; //-1</span><br></pre></td></tr></table></figure>\n<h4 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare(strict_type=1)//strict_type=1表示开启严格模式</span><br><span class=\"line\">function sumOfInts(int ...$ints):int&#123;</span><br><span class=\"line\">    return array_sum($ints);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"null合并操作符\"><a href=\"#null合并操作符\" class=\"headerlink\" title=\"null合并操作符\"></a>null合并操作符</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$page = isset($_GET[&apos;page&apos;]) ? $_GET[&apos;page&apos;] : 0;</span><br><span class=\"line\">$page = $_GET[&apos;page&apos;] ?? 0;</span><br></pre></td></tr></table></figure>\n<h4 id=\"常量数组\"><a href=\"#常量数组\" class=\"headerlink\" title=\"常量数组\"></a>常量数组</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(&apos;ANIMALS&apos;,[&apos;dog&apos;,&apos;cat&apos;]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"namespace批量导入\"><a href=\"#namespace批量导入\" class=\"headerlink\" title=\"namespace批量导入\"></a>namespace批量导入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use Space\\&#123;ClassA,ClassB as B,ClassC&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"intdiv函数\"><a href=\"#intdiv函数\" class=\"headerlink\" title=\"intdiv函数\"></a>intdiv函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intdiv(10,3);</span><br></pre></td></tr></table></figure>\n<h4 id=\"list方括号\"><a href=\"#list方括号\" class=\"headerlink\" title=\"list方括号\"></a>list方括号</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr = [1,2,3];</span><br><span class=\"line\">list($a,$b,$c) = $arr;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = [1,2,3];</span><br><span class=\"line\">[$a,$b,$c] = $arr;</span><br></pre></td></tr></table></figure>"},{"title":"python在类中实现swith功能","date":"2019-03-29T06:51:12.000Z","_content":"### 问题\nPython中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。\n实现代码\n```\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n其中主要用到getattr这个函数，用于返回一个对象属性值。\n```\ngetattr(object, name[, default])\n```\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/python在类中实现swith功能.md","raw":"---\ntitle: python在类中实现swith功能\ndate: 2019-03-29 14:51:12\ntags: [python]\n---\n### 问题\nPython中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。\n实现代码\n```\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n其中主要用到getattr这个函数，用于返回一个对象属性值。\n```\ngetattr(object, name[, default])\n```\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"python在类中实现swith功能","published":1,"updated":"2019-03-29T06:51:36.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqxx000uqwn5h1yti9bv","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。<br>实现代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RunMethod:</span><br><span class=\"line\">    def post(self,url=None,data=None,header=None):</span><br><span class=\"line\">        print(url)</span><br><span class=\"line\">    def get(self,url=None,data=None,header=None):</span><br><span class=\"line\">        print(&quot;get&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def main(self,method):</span><br><span class=\"line\">        method = getattr(self, method)</span><br><span class=\"line\">        return method</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    client = RunMethod()</span><br><span class=\"line\">    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>其中主要用到getattr这个函数，用于返回一个对象属性值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getattr(object, name[, default])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>object – 对象。</li>\n<li>name – 字符串，对象属性。</li>\n<li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。<br>实现代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class RunMethod:</span><br><span class=\"line\">    def post(self,url=None,data=None,header=None):</span><br><span class=\"line\">        print(url)</span><br><span class=\"line\">    def get(self,url=None,data=None,header=None):</span><br><span class=\"line\">        print(&quot;get&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    def main(self,method):</span><br><span class=\"line\">        method = getattr(self, method)</span><br><span class=\"line\">        return method</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    client = RunMethod()</span><br><span class=\"line\">    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>其中主要用到getattr这个函数，用于返回一个对象属性值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getattr(object, name[, default])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>object – 对象。</li>\n<li>name – 字符串，对象属性。</li>\n<li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"swoole异步task","date":"2019-03-29T06:41:35.000Z","_content":"### 记录\n今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n```\n\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始\\n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了\\n\";\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo \"message: {$data} form Client: {$fd} \\n\";\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(\"asyc task finish$data\",'asycTask');\n        echo \"finish\";\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n客户端\n```\nclass Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/swoole异步task.md","raw":"---\ntitle: swoole异步task\ndate: 2019-03-29 14:41:35\ntags: [swoole]\n---\n### 记录\n今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n```\n\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始\\n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了\\n\";\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo \"message: {$data} form Client: {$fd} \\n\";\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(\"asyc task finish$data\",'asycTask');\n        echo \"finish\";\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n客户端\n```\nclass Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"swoole异步task","published":1,"updated":"2019-04-01T03:35:32.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqxz000xqwn54al0qc3w","content":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $server;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);</span><br><span class=\"line\">        $this-&gt;server-&gt;set([</span><br><span class=\"line\">            &apos;worker_num&apos;      =&gt; 2,</span><br><span class=\"line\">            &apos;daemonize&apos;       =&gt; true,</span><br><span class=\"line\">            &apos;task_worker_num&apos; =&gt; 2  # task 进程数</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Start&apos;, [$this, &apos;onStart&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Connect&apos;, [$this, &apos;onConnect&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Receive&apos;, [$this, &apos;onReceive&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Task&apos;, [$this, &apos;onTask&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Finish&apos;, [$this, &apos;onFinish&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Close&apos;, [$this, &apos;onClose&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 主进程启动时回调函数</span><br><span class=\"line\">    public function onStart(\\swoole_server $server)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;开始\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 建立连接时回调函数</span><br><span class=\"line\">    public function onConnect(\\swoole_server $server, $fd, $from_id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;连接上了\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //echo &quot;message: &#123;$data&#125; form Client: &#123;$fd&#125; \\n&quot;;</span><br><span class=\"line\">        // 投递异步任务</span><br><span class=\"line\">        $task_id = $server-&gt;task($data);</span><br><span class=\"line\">        // echo &quot;Dispath AsyncTask: id=&#123;$task_id&#125;\\n&quot;;</span><br><span class=\"line\">        // 将受到的客户端消息再返回给客户端</span><br><span class=\"line\">        $server-&gt;send($fd, &quot;Message form Server: &#123;$data&#125;, task_id: &#123;$task_id&#125;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 异步任务处理函数</span><br><span class=\"line\">    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot; \\n &#123;$task_id&#125;, start task \\n&quot;;</span><br><span class=\"line\">        //$data = json_decode($data,true);</span><br><span class=\"line\">        sleep(5);</span><br><span class=\"line\">        echo &quot; \\n &#123;$task_id&#125;, end task  \\n&quot;;</span><br><span class=\"line\">        $server-&gt;finish(&apos;t&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onFinish(\\swoole_server $server, $task_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l(&quot;asyc task finish$data&quot;,&apos;asycTask&apos;);</span><br><span class=\"line\">        echo &quot;finish&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 关闭连时回调函数</span><br><span class=\"line\">    public function onClose(\\swoole_server $server, $fd, $from_id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;close \\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$server = new Server();</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private $client;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function send($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!$this-&gt;client-&gt;connect(&apos;127.0.0.1&apos;, 9501)) &#123;</span><br><span class=\"line\">            die(&apos;connect failed.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $this-&gt;client-&gt;send(json_encode($data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class Server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $server;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);</span><br><span class=\"line\">        $this-&gt;server-&gt;set([</span><br><span class=\"line\">            &apos;worker_num&apos;      =&gt; 2,</span><br><span class=\"line\">            &apos;daemonize&apos;       =&gt; true,</span><br><span class=\"line\">            &apos;task_worker_num&apos; =&gt; 2  # task 进程数</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Start&apos;, [$this, &apos;onStart&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Connect&apos;, [$this, &apos;onConnect&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Receive&apos;, [$this, &apos;onReceive&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Task&apos;, [$this, &apos;onTask&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Finish&apos;, [$this, &apos;onFinish&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;on(&apos;Close&apos;, [$this, &apos;onClose&apos;]);</span><br><span class=\"line\">        $this-&gt;server-&gt;start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 主进程启动时回调函数</span><br><span class=\"line\">    public function onStart(\\swoole_server $server)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;开始\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 建立连接时回调函数</span><br><span class=\"line\">    public function onConnect(\\swoole_server $server, $fd, $from_id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;连接上了\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //echo &quot;message: &#123;$data&#125; form Client: &#123;$fd&#125; \\n&quot;;</span><br><span class=\"line\">        // 投递异步任务</span><br><span class=\"line\">        $task_id = $server-&gt;task($data);</span><br><span class=\"line\">        // echo &quot;Dispath AsyncTask: id=&#123;$task_id&#125;\\n&quot;;</span><br><span class=\"line\">        // 将受到的客户端消息再返回给客户端</span><br><span class=\"line\">        $server-&gt;send($fd, &quot;Message form Server: &#123;$data&#125;, task_id: &#123;$task_id&#125;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 异步任务处理函数</span><br><span class=\"line\">    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot; \\n &#123;$task_id&#125;, start task \\n&quot;;</span><br><span class=\"line\">        //$data = json_decode($data,true);</span><br><span class=\"line\">        sleep(5);</span><br><span class=\"line\">        echo &quot; \\n &#123;$task_id&#125;, end task  \\n&quot;;</span><br><span class=\"line\">        $server-&gt;finish(&apos;t&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function onFinish(\\swoole_server $server, $task_id, $data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l(&quot;asyc task finish$data&quot;,&apos;asycTask&apos;);</span><br><span class=\"line\">        echo &quot;finish&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 关闭连时回调函数</span><br><span class=\"line\">    public function onClose(\\swoole_server $server, $fd, $from_id)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;close \\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$server = new Server();</span><br></pre></td></tr></table></figure></p>\n<p>客户端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Client</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private $client;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function send($data)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (!$this-&gt;client-&gt;connect(&apos;127.0.0.1&apos;, 9501)) &#123;</span><br><span class=\"line\">            die(&apos;connect failed.&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return $this-&gt;client-&gt;send(json_encode($data));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"vscode快捷键和扩展","date":"2019-04-03T06:39:39.000Z","_content":"### 快捷键\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首/行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行/末行    Ctrl + Home/End\n- 选中字符到左边/右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式(Toggle Zen Mode)\n\n### 插件\n- Code Runner\n- SSH FS\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n","source":"_posts/vscode快捷键.md","raw":"---\ntitle: vscode快捷键和扩展\ndate: 2019-04-03 14:39:39\ntags: [vscode]\n---\n### 快捷键\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首/行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行/末行    Ctrl + Home/End\n- 选中字符到左边/右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式(Toggle Zen Mode)\n\n### 插件\n- Code Runner\n- SSH FS\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n","slug":"vscode快捷键","published":1,"updated":"2019-04-03T09:56:48.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqy1000zqwn54d3fgpxw","content":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首/行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行/末行    Ctrl + Home/End</li>\n<li>选中字符到左边/右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式(Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>SSH FS</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首/行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行/末行    Ctrl + Home/End</li>\n<li>选中字符到左边/右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式(Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>SSH FS</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n"},{"title":"wsl搭建php环境请求超时的问题解决方案","date":"2019-03-28T08:42:53.000Z","_content":"### 一、出现问题\n今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示\n```\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\nnginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了\n1.TCP是使用TCP端口连接127.0.0.1:9000\n```\n fastcgi_pass 127.0.0.1:9000;\n```\n2.Socket是使用unix domain socket连接套接字php-fpm.sock\n\n```\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。\n当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。\n\n### 三、解决方案\n在nginx的配置文件中加入\n```\n fastcgi_buffering off;\n```\n这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/wsl搭建php环境请求超时的问题解决方案.md","raw":"---\ntitle: wsl搭建php环境请求超时的问题解决方案\ndate: 2019-03-28 16:42:53\ntags: [wsl,nginx,php-fpm]\n---\n### 一、出现问题\n今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示\n```\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\nnginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了\n1.TCP是使用TCP端口连接127.0.0.1:9000\n```\n fastcgi_pass 127.0.0.1:9000;\n```\n2.Socket是使用unix domain socket连接套接字php-fpm.sock\n\n```\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。\n当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。\n\n### 三、解决方案\n在nginx的配置文件中加入\n```\n fastcgi_buffering off;\n```\n这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"wsl搭建php环境请求超时的问题解决方案","published":1,"updated":"2019-03-28T08:55:06.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqy20010qwn56vqczm2i","content":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://</span><br><span class=\"line\">    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;</span><br></pre></td></tr></table></figure></p>\n<p>nginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了<br>1.TCP是使用TCP端口连接127.0.0.1:9000<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure></p>\n<p>2.Socket是使用unix domain socket连接套接字php-fpm.sock</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。<br>当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在nginx的配置文件中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_buffering off;</span><br></pre></td></tr></table></figure></p>\n<p>这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://</span><br><span class=\"line\">    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;</span><br></pre></td></tr></table></figure></p>\n<p>nginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了<br>1.TCP是使用TCP端口连接127.0.0.1:9000<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass 127.0.0.1:9000;</span><br></pre></td></tr></table></figure></p>\n<p>2.Socket是使用unix domain socket连接套接字php-fpm.sock</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。<br>当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在nginx的配置文件中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fastcgi_buffering off;</span><br></pre></td></tr></table></figure></p>\n<p>这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（一）","date":"2019-03-29T06:55:52.000Z","_content":"### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。**\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n  ##### 1.1、集合结构\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&h=755&f=jpeg&s=31970)\n  ##### 1.2 线性结构\n  - 线性结构中的数据元素之间是一对一的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&h=447&f=jpeg&s=21493)\n  ##### 1.3 树形结构\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&h=384&f=jpeg&s=21497)\n  #### 1.4 图形结构\n  - 图形结构的数据元素是多对多的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&h=647&f=jpeg&s=28333)\n\n\n#### 2、物理结构\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n  ##### 2.1、顺序存储\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&h=117&f=jpeg&s=13899)\n  ##### 2.2、链式存储\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&h=716&f=jpeg&s=33022)\n  \n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（一）\ndate: 2019-03-29 14:55:52\ntags: [数据结构,算法]\n---\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。**\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n  ##### 1.1、集合结构\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&h=755&f=jpeg&s=31970)\n  ##### 1.2 线性结构\n  - 线性结构中的数据元素之间是一对一的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&h=447&f=jpeg&s=21493)\n  ##### 1.3 树形结构\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&h=384&f=jpeg&s=21497)\n  #### 1.4 图形结构\n  - 图形结构的数据元素是多对多的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&h=647&f=jpeg&s=28333)\n\n\n#### 2、物理结构\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n  ##### 2.1、顺序存储\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&h=117&f=jpeg&s=13899)\n  ##### 2.2、链式存储\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&h=716&f=jpeg&s=33022)\n  \n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（一）","published":1,"updated":"2019-03-29T06:56:51.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqy40011qwn57hkjgqzm","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。</strong></p>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3></li>\n</ul>\n<h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&amp;h=755&amp;f=jpeg&amp;s=31970\" alt><h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5></li>\n<li>线性结构中的数据元素之间是一对一的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&amp;h=447&amp;f=jpeg&amp;s=21493\" alt><h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5></li>\n<li>树形结构中的数据元素之间存在一种一对多的层次关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&amp;h=384&amp;f=jpeg&amp;s=21497\" alt><h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4></li>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&amp;h=647&amp;f=jpeg&amp;s=28333\" alt></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&amp;h=117&amp;f=jpeg&amp;s=13899\" alt><h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5></li>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&amp;h=716&amp;f=jpeg&amp;s=33022\" alt></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。</strong></p>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3></li>\n</ul>\n<h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&amp;h=755&amp;f=jpeg&amp;s=31970\" alt><h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5></li>\n<li>线性结构中的数据元素之间是一对一的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&amp;h=447&amp;f=jpeg&amp;s=21493\" alt><h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5></li>\n<li>树形结构中的数据元素之间存在一种一对多的层次关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&amp;h=384&amp;f=jpeg&amp;s=21497\" alt><h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4></li>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&amp;h=647&amp;f=jpeg&amp;s=28333\" alt></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&amp;h=117&amp;f=jpeg&amp;s=13899\" alt><h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5></li>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&amp;h=716&amp;f=jpeg&amp;s=33022\" alt></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（七）","date":"2019-04-01T03:12:17.000Z","_content":"### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语  \n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)\n```\n### 最坏情况与平均情况\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n### 空间复杂度\n计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（七）.md","raw":"---\ntitle: 《大话数据结构》读后总结（七）\ndate: 2019-04-01 11:12:17\ntags: [数据结构,算法]\n---\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语  \n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)\n```\n### 最坏情况与平均情况\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n### 空间复杂度\n计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（七）","published":1,"updated":"2019-04-01T03:12:51.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqy70014qwn5vk49np99","content":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>常用的时间复杂度所耗费的时间从小到大依次是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2n)&lt;O(n!)&lt;O(nn)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>常用的时间复杂度所耗费的时间从小到大依次是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2n)&lt;O(n!)&lt;O(nn)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（三）","date":"2019-03-29T06:57:45.000Z","_content":"### 一、算法\n#### 1、定义\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n \n**ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n#### 2、算法与数据结构的关系\n- 算法是数据结构的具体运用。\n#### 3、算法的特性\n##### 3.1 输入输出\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n##### 3.2 有穷性\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n##### 3.3 确定性\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n##### 3.4 可行性\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n#### 4、算法设计的要求\n##### 4.1 正确性\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1.算法程序没有语法错误。 \n\n  2.算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 \n\n  4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。\n##### 4.2 可读性\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n##### 4.3 健壮性\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n##### 4.4 时间效率高和存储量低\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（三）.md","raw":"---\ntitle: 《大话数据结构》读后总结（三）\ndate: 2019-03-29 14:57:45\ntags: [数据结构,算法]\n---\n### 一、算法\n#### 1、定义\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n \n**ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n#### 2、算法与数据结构的关系\n- 算法是数据结构的具体运用。\n#### 3、算法的特性\n##### 3.1 输入输出\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n##### 3.2 有穷性\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n##### 3.3 确定性\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n##### 3.4 可行性\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n#### 4、算法设计的要求\n##### 4.1 正确性\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1.算法程序没有语法错误。 \n\n  2.算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 \n\n  4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。\n##### 4.2 可读性\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n##### 4.3 健壮性\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n##### 4.4 时间效率高和存储量低\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（三）","published":1,"updated":"2019-03-29T06:59:03.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqy80015qwn5akteixpj","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5></li>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5></li>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5></li>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5></li>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<p>1.算法程序没有语法错误。 </p>\n<p>2.算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n<p>3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 </p>\n<p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。</p>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5></li>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5></li>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5></li>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5></li>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5></li>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5></li>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5></li>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<p>1.算法程序没有语法错误。 </p>\n<p>2.算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n<p>3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 </p>\n<p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。</p>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5></li>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5></li>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5></li>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（二）","date":"2019-03-29T06:57:38.000Z","_content":"### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在C语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（二）.md","raw":"---\ntitle: 《大话数据结构》读后总结（二）\ndate: 2019-03-29 14:57:38\ntags: [数据结构,算法]\n---\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在C语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（二）","published":1,"updated":"2019-03-29T06:58:18.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqya0017qwn53apgxakn","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在C语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在C语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（五）","date":"2019-04-01T02:55:55.000Z","_content":"### 函数的渐近增长\n\n假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852)\n\n当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n>2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。\n\n输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n>N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。**\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944)\n\n当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n>3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325)\n\n当n=1的时候，算法E与算法F结果相同，但当n>1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055)\n\n当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（五）.md","raw":"---\ntitle: 《大话数据结构》读后总结（五）\ndate: 2019-04-01 10:55:55\ntags: [数据结构,算法]\n---\n### 函数的渐近增长\n\n假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852)\n\n当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n>2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。\n\n输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n>N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。**\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944)\n\n当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n>3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325)\n\n当n=1的时候，算法E与算法F结果相同，但当n>1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055)\n\n当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（五）","published":1,"updated":"2019-04-01T02:57:12.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqyd0019qwn50hcaxqqr","content":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n&gt;2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。</p>\n<p>输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n&gt;3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1的时候，算法E与算法F结果相同，但当n&gt;1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n&gt;2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。</p>\n<p>输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n&gt;3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1的时候，算法E与算法F结果相同，但当n&gt;1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（六）","date":"2019-04-01T02:56:25.000Z","_content":"### 算法时间复杂度定义\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。\n\n一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。\n\nO(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。\n\n推导大O阶：\n\n1．用常数1取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。\n\n#### 常数阶\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。\n#### 线性阶\n```\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n时间复杂度为O(n)，因为循环体中的代码须要执行n次。\n#### 对数阶\n```\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n由2x=n得到x=log2n,时间复杂度为O(logn)。\n#### 平方阶\n```\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。\n\n```\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（六）.md","raw":"---\ntitle: 《大话数据结构》读后总结（六）\ndate: 2019-04-01 10:56:25\ntags: [数据结构,算法]\n---\n### 算法时间复杂度定义\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。\n\n一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。\n\nO(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。\n\n推导大O阶：\n\n1．用常数1取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。\n\n#### 常数阶\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。\n#### 线性阶\n```\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n时间复杂度为O(n)，因为循环体中的代码须要执行n次。\n#### 对数阶\n```\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n由2x=n得到x=log2n,时间复杂度为O(logn)。\n#### 平方阶\n```\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。\n\n```\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（六）","published":1,"updated":"2019-04-01T02:57:31.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqyg001bqwn564nswfpl","content":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>\n<p>一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p>\n<p>O(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。</p>\n<p>推导大O阶：</p>\n<p>1．用常数1取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0,n = 100;      /* 执行一次 */</span><br><span class=\"line\">sum = (1 + n) * n / 2;    /* 执行一次 */</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);        /* 执行一次 */</span><br></pre></td></tr></table></figure>\n<p>运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度为O(n)，因为循环体中的代码须要执行n次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int count = 1;</span><br><span class=\"line\">while (count &lt; n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    count = count * 2;</span><br><span class=\"line\">    /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由2x=n得到x=log2n,时间复杂度为O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, j;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = 0; j &lt; n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n++;                       /* 执行次数为1 */</span><br><span class=\"line\">function(n);               /* 执行次数为n */</span><br><span class=\"line\">int i, j;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function (i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = i; j &lt; n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>\n<p>一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p>\n<p>O(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。</p>\n<p>推导大O阶：</p>\n<p>1．用常数1取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0,n = 100;      /* 执行一次 */</span><br><span class=\"line\">sum = (1 + n) * n / 2;    /* 执行一次 */</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);        /* 执行一次 */</span><br></pre></td></tr></table></figure>\n<p>运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度为O(n)，因为循环体中的代码须要执行n次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int count = 1;</span><br><span class=\"line\">while (count &lt; n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    count = count * 2;</span><br><span class=\"line\">    /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由2x=n得到x=log2n,时间复杂度为O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, j;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = 0; j &lt; n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n++;                       /* 执行次数为1 */</span><br><span class=\"line\">function(n);               /* 执行次数为n */</span><br><span class=\"line\">int i, j;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function (i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = i; j &lt; n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        /* 时间复杂度为O(1)的程序步骤序列 */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（四）","date":"2019-03-29T06:57:52.000Z","_content":"### 一、算法\n#### 1、算法效率的度量方法\n##### 1.1 事后统计方法\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1.必须依据算法事先编制好程序，花费时间和人力\n  \n  2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n  \n  3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n##### 1.2 事后统计方法\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： \n\n  1.算法采用的策略、方法。 \n  \n  2.编译产生的代码质量。 \n  \n  3.问题的输入规模。 \n  \n  4.机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n```\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n第二种\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n- 第一种算法，执行了1+(n+1)+n+1次=2n+3次；\n- 第二种算法，是1+1+1=3次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。\n第三种\n```\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+...+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是n，求和算法的第一种，求1+2+...+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![image](https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80)\n\n随着n值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n\n","source":"_posts/《大话数据结构》读后总结（四）.md","raw":"---\ntitle: 《大话数据结构》读后总结（四）\ndate: 2019-03-29 14:57:52\ntags: [数据结构,算法]\n---\n### 一、算法\n#### 1、算法效率的度量方法\n##### 1.1 事后统计方法\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1.必须依据算法事先编制好程序，花费时间和人力\n  \n  2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n  \n  3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n##### 1.2 事后统计方法\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： \n\n  1.算法采用的策略、方法。 \n  \n  2.编译产生的代码质量。 \n  \n  3.问题的输入规模。 \n  \n  4.机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n```\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n第二种\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n- 第一种算法，执行了1+(n+1)+n+1次=2n+3次；\n- 第二种算法，是1+1+1=3次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。\n第三种\n```\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+...+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是n，求和算法的第一种，求1+2+...+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![image](https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80)\n\n随着n值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n\n","slug":"《大话数据结构》读后总结（四）","published":1,"updated":"2019-03-29T06:59:28.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju11eqyi001dqwn58letnqoe","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<p>1.必须依据算法事先编制好程序，花费时间和人力</p>\n<p>2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n<p>3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5></li>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： </p>\n<p>1.算法采用的策略、方法。 </p>\n<p>2.编译产生的代码质量。 </p>\n<p>3.问题的输入规模。 </p>\n<p>4.机器执行指令的速度。</p>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, sum = 0,n = 100;     /* 执行1次 */</span><br><span class=\"line\">for (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sum = sum + i;          /* 执行n次 */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);          /* 执行1次 */</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0,n = 100;      /* 执行一次 */</span><br><span class=\"line\">sum = (1 + n) * n / 2;    /* 执行一次 */</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);        /* 执行一次 */</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>第一种算法，执行了1+(n+1)+n+1次=2n+3次；</li>\n<li>第二种算法，是1+1+1=3次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。<br>第三种<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */</span><br><span class=\"line\">for (i = 1; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = 1; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x++;    /* 执行n×n次 */</span><br><span class=\"line\">        sum = sum + x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);    /* 执行一次 */</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+…+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是n，求和算法的第一种，求1+2+…+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>随着n值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<p>1.必须依据算法事先编制好程序，花费时间和人力</p>\n<p>2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n<p>3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5></li>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： </p>\n<p>1.算法采用的策略、方法。 </p>\n<p>2.编译产生的代码质量。 </p>\n<p>3.问题的输入规模。 </p>\n<p>4.机器执行指令的速度。</p>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, sum = 0,n = 100;     /* 执行1次 */</span><br><span class=\"line\">for (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sum = sum + i;          /* 执行n次 */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);          /* 执行1次 */</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>第二种<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int sum = 0,n = 100;      /* 执行一次 */</span><br><span class=\"line\">sum = (1 + n) * n / 2;    /* 执行一次 */</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);        /* 执行一次 */</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>第一种算法，执行了1+(n+1)+n+1次=2n+3次；</li>\n<li>第二种算法，是1+1+1=3次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。<br>第三种<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */</span><br><span class=\"line\">for (i = 1; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for (j = 1; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x++;    /* 执行n×n次 */</span><br><span class=\"line\">        sum = sum + x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printf(&quot;%d&quot;, sum);    /* 执行一次 */</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+…+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是n，求和算法的第一种，求1+2+…+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>随着n值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"layout":"vscode","title":"无法安装golang.org安装包的问题","date":"2019-03-28T08:44:37.000Z","_content":"### 一、问题\n今天在安装vscode时，报错\n```\ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n```\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n```\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/无法安装golang-org安装包的问题.md","raw":"---\nlayout: vscode\ntitle: 无法安装golang.org安装包的问题\ndate: 2019-03-28 16:44:37\ntags: [vscode,golang]\n---\n### 一、问题\n今天在安装vscode时，报错\n```\ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n```\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n```\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"无法安装golang-org安装包的问题","published":1,"updated":"2019-03-28T08:55:23.645Z","comments":1,"photos":[],"link":"","_id":"cju11eqyk001fqwn57n9x6yu4","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github.com/ramya-rao-a/go-outline (download)</span><br><span class=\"line\">Fetching https://golang.org/x/tools/go/buildutil?go-get=1</span><br><span class=\"line\">https fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused</span><br></pre></td></tr></table></figure></p>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/  </span><br><span class=\"line\">cd $GOPATH/src/golang.org/x/</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br></pre></td></tr></table></figure>\n<p>然后可以安装了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -v -u github.com/ramya-rao-a/go-outline</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">github.com/ramya-rao-a/go-outline (download)</span><br><span class=\"line\">Fetching https://golang.org/x/tools/go/buildutil?go-get=1</span><br><span class=\"line\">https fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused</span><br></pre></td></tr></table></figure></p>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $GOPATH/src/golang.org/x/  </span><br><span class=\"line\">cd $GOPATH/src/golang.org/x/</span><br><span class=\"line\">git clone https://github.com/golang/tools.git</span><br></pre></td></tr></table></figure>\n<p>然后可以安装了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -v -u github.com/ramya-rao-a/go-outline</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cju11eqwj0006qwn5iryzqtq1","tag_id":"cju11eqwe0003qwn5ap4605l6","_id":"cju11eqwk0008qwn5sd5ybmdz"},{"post_id":"cju11eqw60001qwn5f2pcimyv","tag_id":"cju11eqwe0003qwn5ap4605l6","_id":"cju11eqwl000bqwn5u6u0ao9j"},{"post_id":"cju11eqw60001qwn5f2pcimyv","tag_id":"cju11eqwj0007qwn53ghbzuqj","_id":"cju11eqwl000cqwn57q545tyn"},{"post_id":"cju11eqw60001qwn5f2pcimyv","tag_id":"cju11eqwk0009qwn5crfj0kon","_id":"cju11eqwm000eqwn5je4ng835"},{"post_id":"cju11eqwd0002qwn5gzwd98eb","tag_id":"cju11eqwl000aqwn59h30ep1r","_id":"cju11eqwp000iqwn5oy7r31wj"},{"post_id":"cju11eqwd0002qwn5gzwd98eb","tag_id":"cju11eqwl000dqwn5wy73sdar","_id":"cju11eqwq000jqwn5scc4n60v"},{"post_id":"cju11eqwd0002qwn5gzwd98eb","tag_id":"cju11eqwn000fqwn5w3tp1reu","_id":"cju11eqwq000lqwn5nq07sjoy"},{"post_id":"cju11eqwd0002qwn5gzwd98eb","tag_id":"cju11eqwe0003qwn5ap4605l6","_id":"cju11eqwr000mqwn5rgqsxgzg"},{"post_id":"cju11eqwg0004qwn52wd62ybz","tag_id":"cju11eqwp000hqwn53w1y6cox","_id":"cju11eqwr000nqwn5f3n2dx73"},{"post_id":"cju11eqwg0004qwn52wd62ybz","tag_id":"cju11eqwq000kqwn5j1ahipqy","_id":"cju11eqwr000oqwn5gravam1i"},{"post_id":"cju11eqxl000pqwn5i6g6qrcd","tag_id":"cju11eqwe0003qwn5ap4605l6","_id":"cju11eqxx000tqwn5cbojrpiz"},{"post_id":"cju11eqxr000rqwn5b8cx0ox6","tag_id":"cju11eqwl000aqwn59h30ep1r","_id":"cju11eqxz000wqwn5lqu604l7"},{"post_id":"cju11eqxx000uqwn5h1yti9bv","tag_id":"cju11eqy0000yqwn5t9ub32ke","_id":"cju11eqy70013qwn5r72ilsup"},{"post_id":"cju11eqxz000xqwn54al0qc3w","tag_id":"cju11eqy60012qwn5kizb88ei","_id":"cju11eqyc0018qwn5e0u1rndh"},{"post_id":"cju11eqy1000zqwn54d3fgpxw","tag_id":"cju11eqy90016qwn52va375g0","_id":"cju11eqyh001cqwn5qnkqat59"},{"post_id":"cju11eqy20010qwn56vqczm2i","tag_id":"cju11eqyf001aqwn571mzqjjk","_id":"cju11eqym001gqwn5z57b2s9o"},{"post_id":"cju11eqy20010qwn56vqczm2i","tag_id":"cju11eqwe0003qwn5ap4605l6","_id":"cju11eqyn001hqwn54l74rfwx"},{"post_id":"cju11eqy20010qwn56vqczm2i","tag_id":"cju11eqwl000dqwn5wy73sdar","_id":"cju11eqyn001jqwn58tqel41f"},{"post_id":"cju11eqy40011qwn57hkjgqzm","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqyo001lqwn5st4kf6yz"},{"post_id":"cju11eqy40011qwn57hkjgqzm","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqyp001mqwn50067e9dq"},{"post_id":"cju11eqy70014qwn5vk49np99","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqyq001pqwn5wo3llwpn"},{"post_id":"cju11eqy70014qwn5vk49np99","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqyr001qqwn5timj2iak"},{"post_id":"cju11eqy80015qwn5akteixpj","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqyt001tqwn5t2samr4i"},{"post_id":"cju11eqy80015qwn5akteixpj","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqyu001uqwn5wrybo3p7"},{"post_id":"cju11eqya0017qwn53apgxakn","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqyw001xqwn56lprmkwl"},{"post_id":"cju11eqya0017qwn53apgxakn","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqyx001yqwn5z37glfa9"},{"post_id":"cju11eqyd0019qwn50hcaxqqr","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqyz0021qwn5sftd3bit"},{"post_id":"cju11eqyd0019qwn50hcaxqqr","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqz00022qwn5ukz64ee9"},{"post_id":"cju11eqyg001bqwn564nswfpl","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqz30025qwn59jt95i4w"},{"post_id":"cju11eqyg001bqwn564nswfpl","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqz40026qwn5188601q8"},{"post_id":"cju11eqyi001dqwn58letnqoe","tag_id":"cju11eqyj001eqwn5uxrx130g","_id":"cju11eqz50029qwn55x2wlhko"},{"post_id":"cju11eqyi001dqwn58letnqoe","tag_id":"cju11eqyn001iqwn5xzfajayz","_id":"cju11eqz6002aqwn51qylr9hl"},{"post_id":"cju11eqyk001fqwn57n9x6yu4","tag_id":"cju11eqy90016qwn52va375g0","_id":"cju11eqz6002bqwn5xe19xs7z"},{"post_id":"cju11eqyk001fqwn57n9x6yu4","tag_id":"cju11eqz50028qwn5mmcri9xs","_id":"cju11eqz6002cqwn5cu2br819"}],"Tag":[{"name":"nginx","_id":"cju11eqwe0003qwn5ap4605l6"},{"name":"https","_id":"cju11eqwj0007qwn53ghbzuqj"},{"name":"ssl","_id":"cju11eqwk0009qwn5crfj0kon"},{"name":"php","_id":"cju11eqwl000aqwn59h30ep1r"},{"name":"php-fpm","_id":"cju11eqwl000dqwn5wy73sdar"},{"name":"apache","_id":"cju11eqwn000fqwn5w3tp1reu"},{"name":"docker","_id":"cju11eqwp000hqwn53w1y6cox"},{"name":"mysql","_id":"cju11eqwq000kqwn5j1ahipqy"},{"name":"python","_id":"cju11eqy0000yqwn5t9ub32ke"},{"name":"swoole","_id":"cju11eqy60012qwn5kizb88ei"},{"name":"vscode","_id":"cju11eqy90016qwn52va375g0"},{"name":"wsl","_id":"cju11eqyf001aqwn571mzqjjk"},{"name":"数据结构","_id":"cju11eqyj001eqwn5uxrx130g"},{"name":"算法","_id":"cju11eqyn001iqwn5xzfajayz"},{"name":"golang","_id":"cju11eqz50028qwn5mmcri9xs"}]}}