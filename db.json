{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/cover.jpg","path":"images/cover.jpg","modified":0,"renderable":0},{"_id":"themes/indigoplus/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/prism-vim.js","path":"js/prism-vim.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/arrow-right.png","path":"img/arrow-right.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/fong.jpg","path":"img/fong.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/bayern.ico","path":"img/bayern.ico","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/back_blue.png","path":"img/back_blue.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-atom-dark.css","path":"css/prism/prism-atom-dark.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-default.css","path":"css/prism/prism-default.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-coy.css","path":"css/prism/prism-coy.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-okaidia.css","path":"css/prism/prism-okaidia.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-solarized-light.css","path":"css/prism/prism-solarized-light.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-tomorrow-night.css","path":"css/prism/prism-tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/Valine.min.js.map","path":"js/Valine.min.js.map","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"98df3e612872f3b923b9fa34fde364f369e4feb4","modified":1561961197240},{"_id":"source/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1561961197240},{"_id":"themes/indigoplus/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1561961658901},{"_id":"themes/indigoplus/README.md","hash":"f7f2c77722635cd660d5286db5dca94636366413","modified":1561961658901},{"_id":"themes/indigoplus/_config.yml","hash":"ceb03859de633e40c8fb3b9f8c16091d8f349fe0","modified":1562203588818},{"_id":"themes/indigoplus/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1561961658914},{"_id":"source/_posts/AMDcpu安装ubuntu-deepin.md","hash":"d842a507b989df7575527b5fa15b00bb5fc81ee1","modified":1564627386650},{"_id":"source/_posts/ARTS第0周.md","hash":"1fa5e59948b30eca7556224a24ce1c86d3815fe8","modified":1564627389631},{"_id":"source/_posts/ARTS第1周.md","hash":"cc7c48fcab36f050df76f132c1dcdc85a6d82a47","modified":1572674779483},{"_id":"source/_posts/ARTS第2周.md","hash":"3e2146a77eb384582d95cbf8d62ce7e542b3946b","modified":1572675239391},{"_id":"source/_posts/PHP7新特性.md","hash":"49f59d995d4325ce5efa69f0487a93f44a119001","modified":1564627481468},{"_id":"source/_posts/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","hash":"bd43db51f4e2586a8ea05f4bd0b0739607d34df5","modified":1564627454117},{"_id":"source/_posts/PHP和Go通过jsonrpc通信.md","hash":"a0c60392b1dbbbe8465513b01bb8b019b37d4364","modified":1567818690603},{"_id":"source/_posts/PHP运行模式.md","hash":"5caf930bf2a649449d0109d648e2ab162f3296c7","modified":1564627451751},{"_id":"source/_posts/docker-mysql主从配置.md","hash":"4f3fc57c385fd258e6edda6171b2c5e60fff167c","modified":1564627399281},{"_id":"source/_posts/git入门.md","hash":"eecb50319b01cc3d4a275ca504f191636e8e87eb","modified":1564627416188},{"_id":"source/_posts/golang封装日志.md","hash":"3d173ed6b1ba744bfe844104ec11ba6debbf9498","modified":1564627422090},{"_id":"source/_posts/hello-world.md","hash":"25a45bc00d46cbb3ee8fb39589b3915d2e69914e","modified":1564627429442},{"_id":"source/_posts/golang无法安装golang-org安装包的问题.md","hash":"2abe0a2f4593ee9084b3a54d3757381f43e66e5a","modified":1572670182358},{"_id":"source/_posts/mysql事务.md","hash":"4954c14cb8d2545923b50b89e5b8e5f166c46cc3","modified":1572681949322},{"_id":"source/_posts/mysql字段类型详解.md","hash":"2d4b075a55cca78d6fceed01ac11b2cf613662b3","modified":1565922008425},{"_id":"source/_posts/mysql存储引擎详解.md","hash":"e903f369bfca098abfed4495cbab4f639f5ecfb7","modified":1565951666939},{"_id":"source/_posts/mysql的sql优化（一）.md","hash":"7d0d0fffd5d9399fb99ea7bf8ecaa15356ff9325","modified":1572682993647},{"_id":"source/_posts/mysql的sql优化（二）.md","hash":"8aeb5ff0d9b233fc4e9bbce2623b8bfb5bba02cb","modified":1565952161049},{"_id":"source/_posts/mysql索引最左原则问题.md","hash":"34c7d3816fc9adb409f68c118c020d4ad4c499e4","modified":1564627433841},{"_id":"source/_posts/mysql面试（一）版本类问题.md","hash":"d2a1f6e61feae2f646cd6aea3c30d742bf0d9a11","modified":1572846854706},{"_id":"source/_posts/mysql面试（七）备份恢复类问题.md","hash":"ae7b86f570e1df5e10271f7da32548886c1969ee","modified":1572847232766},{"_id":"source/_posts/mysql面试（三）服务器配置类问题.md","hash":"948d630b9ae20b38b1ddfbb7ecbab4be1ccc4dd4","modified":1572846981937},{"_id":"source/_posts/mysql面试（九）异常处理问题.md","hash":"a1d298433e258777e1e014ccfe09f394efe40e96","modified":1572847329903},{"_id":"source/_posts/mysql面试（二）用户管理类问题.md","hash":"ebb06867ffa2d3c9e12e6a6ac8fa71de7c383e2b","modified":1572846962948},{"_id":"source/_posts/mysql面试（五）存储引擎类问题.md","hash":"8e770e271314eb9ec8e2c3d55073579a9a9f0d6a","modified":1572924234726},{"_id":"source/_posts/mysql面试（六）MySQL架构类问题.md","hash":"6fe9111011b6b8dbaa126328cb8e7b5428665bd3","modified":1572856992233},{"_id":"source/_posts/mysql面试（四）日志类问题.md","hash":"31b070a091c7b17aa4fccc6d7799133f89534fa1","modified":1572847986053},{"_id":"source/_posts/nginx负载均衡模式.md","hash":"e2ec451cc2de26f0cbad91f1e013df42b7a327a5","modified":1564627440046},{"_id":"source/_posts/mysql面试（八）管理及监控类问题.md","hash":"62b05937680914d6cc665537c0567244636566b8","modified":1572847255707},{"_id":"source/_posts/nginx配置https出现no ssl_certificate.md","hash":"4e8c14552de94d88fcd0006241ce499a257bc984","modified":1572667611079},{"_id":"source/_posts/nginx配置socket.io负载均衡.md","hash":"628af652418c106d6e732d28dec3ed9c9491ab7b","modified":1572669074232},{"_id":"source/_posts/nginx配置文件.md","hash":"fd1a5b1ad5798c8b22da462b8bb6a7a37fe9dc80","modified":1564627456755},{"_id":"source/_posts/python在类中实现swith功能.md","hash":"b8cdef2d80c5648418f495ebd8d383dea4aa8458","modified":1564627471501},{"_id":"source/_posts/swoole异步task.md","hash":"351956701451b7da6793289d39c47a9dfbf1dc43","modified":1564627467085},{"_id":"source/_posts/vscode快捷键.md","hash":"1267dab621ef1779331a9808b062f89a5d59ab30","modified":1564628734862},{"_id":"source/_posts/wsl搭建php环境请求超时的问题解决方案.md","hash":"93d6853fab4a07528156021bbc71116a94215f78","modified":1564627460050},{"_id":"source/_posts/《大话数据结构》读后总结（一）.md","hash":"685ea13aff22dd6d31e2a1ac7f5816c8da9eeed6","modified":1572677440877},{"_id":"source/_posts/《大话数据结构》读后总结（七）.md","hash":"1e2bc65385b024f5de2f72f5fdb0c409eea793d8","modified":1572677511963},{"_id":"source/_posts/《大话数据结构》读后总结（三）.md","hash":"21bcc51ba459ff6a56eb455338f8349bc35c0833","modified":1572677465044},{"_id":"source/_posts/《大话数据结构》读后总结（九）.md","hash":"32cf2abe40dc3da9e88dd7f734b58d075f143267","modified":1572677531678},{"_id":"source/_posts/《大话数据结构》读后总结（二）.md","hash":"fb2e6e8c6b97871b911369c64d652c2b8d8cd7f6","modified":1572677454490},{"_id":"source/_posts/《大话数据结构》读后总结（五）.md","hash":"328b8124b0df7a48943a7d94bc1780cb508e9a82","modified":1572677486375},{"_id":"source/_posts/《大话数据结构》读后总结（八）.md","hash":"727fa37ab2ec0075ee3ecf36fc8fe975ec4efbda","modified":1572677520985},{"_id":"source/_posts/《大话数据结构》读后总结（六）.md","hash":"613389d7826e05730a3580960a5a93aee2533120","modified":1572677499204},{"_id":"source/_posts/《大话数据结构》读后总结（十一）.md","hash":"f9ffb46b17edc6f8ca9b3715c5ac8d357aace5c4","modified":1572677550357},{"_id":"source/_posts/《大话数据结构》读后总结（十）.md","hash":"4c3ca38f0294a0074ad2bee58189e707880e0510","modified":1572677543173},{"_id":"source/_posts/《大话数据结构》读后总结（四）.md","hash":"eea60967a1b658b640a8e4621acabe244796d6cd","modified":1572677476736},{"_id":"source/_posts/信息记录.md","hash":"d42d1ebb07d52c7607c2a22c02ba9c02e181f395","modified":1564657194165},{"_id":"source/_posts/数据结构之二分搜索树.md","hash":"e566556dc7d6b3359b3758a8bcab8a06f94a9480","modified":1564567661727},{"_id":"source/_posts/数据结构之二分搜索树映射.md","hash":"b17f5717ef9ecb4c0a71ab3d4f219e0131bb9ecb","modified":1564567703272},{"_id":"source/_posts/数据结构之二分搜索树集合.md","hash":"ad5d7f96b878fe645888b5b9a1e24a3933f4f39b","modified":1564567732265},{"_id":"source/_posts/数据结构之循环队列.md","hash":"3da8395b1c238cef76aedbe4e22c8193460eea7c","modified":1564567762497},{"_id":"source/_posts/数据结构之数组.md","hash":"3a5de92f228176d348734bf1afac2c5202dd3fb5","modified":1564626311999},{"_id":"source/_posts/数据结构之数组栈.md","hash":"0b02071d9dfa48fed7414c37e6deae64935541e8","modified":1564627483742},{"_id":"source/_posts/数据结构之数组队列.md","hash":"b58ee61c2614a798c37016af0c060b90a938161e","modified":1564627487857},{"_id":"source/_posts/数据结构之映射.md","hash":"bbfc131b18d49a4e035a65eb75a55c7484e02150","modified":1564626537776},{"_id":"source/_posts/数据结构之栈.md","hash":"cc4432888d4a80247df599dcaa89ea68d6f9d6ca","modified":1564627492290},{"_id":"source/_posts/数据结构之链表.md","hash":"dd45bcd39f4902de2486f8a7c0b25afb0a41eab0","modified":1564624443574},{"_id":"source/_posts/数据结构之链表映射.md","hash":"0f8172528bb3d4bfe00944f18520e1e3776b964d","modified":1564624658931},{"_id":"source/_posts/数据结构之链表栈.md","hash":"2ed79c61a6ab8bb6a9105329651267f8bd3358a5","modified":1564624653394},{"_id":"source/_posts/数据结构之链表队列.md","hash":"dddfe1d82b875811bc99a6ca1e91e96db76a966a","modified":1564624649021},{"_id":"source/_posts/数据结构之链表集合.md","hash":"227b6ccef9d5fa4dcd780b9f6242604f6e409b46","modified":1564624639151},{"_id":"source/_posts/数据结构之队列.md","hash":"12e5a2acd8088d0b3409c249f390538ace6d4944","modified":1564627496015},{"_id":"source/_posts/数据结构之集合.md","hash":"a4733b5168a4d0ee504aaf2dcc748f68433e5b4b","modified":1564622450826},{"_id":"source/categories/index.md","hash":"f35f6c675475950435c1f599493624999d6d3f56","modified":1561972777294},{"_id":"source/about/index.md","hash":"e082f20a77f5bc9044edadbdfeba67b1f0fca775","modified":1562138502226},{"_id":"source/timeline/index.md","hash":"c5de9dc484977fb818a71840941b9427841b548e","modified":1562139143476},{"_id":"source/tags/index.md","hash":"431c6bf762a3627ccb3357c532348ef32e1f3467","modified":1561961197248},{"_id":"themes/indigoplus/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1561961658902},{"_id":"themes/indigoplus/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1561961658903},{"_id":"themes/indigoplus/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1561961658903},{"_id":"themes/indigoplus/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1561961658911},{"_id":"themes/indigoplus/layout/book.ejs","hash":"8155ceb559d8e1dcf877eca386f4eb041c62ceb8","modified":1561961658912},{"_id":"themes/indigoplus/layout/categories.ejs","hash":"77c8c5c4a97c9b6a83297e7632a515d432964b1e","modified":1561961658912},{"_id":"themes/indigoplus/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1561961658912},{"_id":"themes/indigoplus/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1561961658913},{"_id":"themes/indigoplus/layout/game.ejs","hash":"3d294e92cc12f425eb135c659502372d56a82e3f","modified":1561961658912},{"_id":"themes/indigoplus/layout/movie.ejs","hash":"530f94b8ebfdb8b279804ac7a38a8e63b2a23a46","modified":1561961658913},{"_id":"themes/indigoplus/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1561961658913},{"_id":"themes/indigoplus/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1561961658913},{"_id":"themes/indigoplus/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1561961658913},{"_id":"themes/indigoplus/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1561961658913},{"_id":"themes/indigoplus/layout/tags.ejs","hash":"f37c84501ef57a489ba4c85ae4e89ae0a6eac77b","modified":1561961658914},{"_id":"themes/indigoplus/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1561961658914},{"_id":"source/images/cover.jpg","hash":"2fad1d5eb1c80645aec5060e9b4d76815f74ca0d","modified":1562149499886},{"_id":"themes/indigoplus/layout/_partial/after-footer.ejs","hash":"6ada6d56ef2e885deaf88709c586a8a128bd7659","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/footer.ejs","hash":"70b0b32f4591d1a08c7f434eeb1649049398815a","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/head.ejs","hash":"c5f0de91525704771b88d84dd42898ee85ebd36a","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/index-item.ejs","hash":"91bbe5dd87981a5dd7635f3e9791f05f4d62abcc","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/header.ejs","hash":"966409769ec64f62acc3c5ac049b770ef13fe32f","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/menu.ejs","hash":"461a6346294a85191065e86659d33cec120b15d0","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/post.ejs","hash":"1c166aff499b7525edd2c2ad280e87f36774165a","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/script.ejs","hash":"dafd5bc19f54a8a54481d5b81ebadedbd3d68b45","modified":1561961658911},{"_id":"themes/indigoplus/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1561961658911},{"_id":"themes/indigoplus/layout/_partial/tags-bar.ejs","hash":"aa3dfcfc18d757993738f5dbecf48f0f95c39104","modified":1561961658911},{"_id":"themes/indigoplus/source/css/style.less","hash":"e90aec92915a7268f540a9ca45421f891b08d2a8","modified":1561961658943},{"_id":"themes/indigoplus/source/js/Valine.min.js","hash":"9c5b9f907108ce5ee6f3268d4932a846a2bd9110","modified":1561961658948},{"_id":"themes/indigoplus/source/js/main.js","hash":"a537f7b76e163611d782119ef09c8383593f108c","modified":1561961658949},{"_id":"themes/indigoplus/source/js/main.min.js","hash":"8d640ab1b72af2ea63fd77366f2a34b2a0c6e13c","modified":1561961658950},{"_id":"themes/indigoplus/source/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1561961658950},{"_id":"themes/indigoplus/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1561961658951},{"_id":"themes/indigoplus/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1561961658951},{"_id":"themes/indigoplus/source/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1561961658944},{"_id":"themes/indigoplus/source/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1561961197287},{"_id":"themes/indigoplus/source/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1561961658944},{"_id":"themes/indigoplus/source/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1561961658945},{"_id":"themes/indigoplus/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1561961658945},{"_id":"themes/indigoplus/source/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1561961658946},{"_id":"themes/indigoplus/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1561961658946},{"_id":"themes/indigoplus/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1561961658947},{"_id":"themes/indigoplus/source/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1561961658947},{"_id":"themes/indigoplus/source/js/prism.js","hash":"86045ad1c86a994d5c56d16239da4e8c6b8078e6","modified":1561961658951},{"_id":"themes/indigoplus/source/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1561961658945},{"_id":"themes/indigoplus/source/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1561961658944},{"_id":"themes/indigoplus/source/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1561961658946},{"_id":"themes/indigoplus/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/comment.ejs","hash":"a0d8ae64a1ada7f0ea576afa3981c70e81399802","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/pin.ejs","hash":"e11b2ee0819ba25223bbd935bec7fe732582dfa7","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/reward.ejs","hash":"b6aadc4819bd692b9091097b441742828a54dd0f","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1561961658911},{"_id":"themes/indigoplus/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/changyan.ejs","hash":"ac9cd12965af6c9cdb3622f90e688626febf72ad","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/gitalk.ejs","hash":"204e592f51b46f14e2a1ae5683ef6813271f2ca7","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/mathjax.ejs","hash":"55565988a7a6c98046ffb2c56b7d4f977e7c3bfc","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/valine.ejs","hash":"d1980ae291169c81402927cdcdc42d1e7eb14c1e","modified":1561961658907},{"_id":"themes/indigoplus/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1561961658915},{"_id":"themes/indigoplus/source/css/_partial/article.less","hash":"05fd401c4adf19632fdabb5da4cbdfd0eb672b64","modified":1561961658915},{"_id":"themes/indigoplus/source/css/_partial/gotop.less","hash":"d1a9e26e431b8fe20d5ce73b7add3e00d8db3a8a","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/highlight.less","hash":"ba33616ac592b19255f1f4eb5f22a604e51cd302","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/layout.less","hash":"0dd8bb9f029e260f599859e902e59595170ebe2c","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/reward.less","hash":"c9857599fcd8f2604e78e316bd8ffeac3ed48172","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/tags.less","hash":"2d04a1f5076863950af57e328ffd4147b23e9b70","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/variable.less","hash":"85c2b3191ad552ae018123b10ed96aabcda9baf8","modified":1561961658919},{"_id":"themes/indigoplus/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1561961658919},{"_id":"themes/indigoplus/source/css/_plugin/valine.less","hash":"23b633c252b87cd65c17cd901269b0c332eac77a","modified":1561961658919},{"_id":"themes/indigoplus/source/css/prism/prism-atom-dark.css","hash":"eb3028ab798e86e0fc74df0f08861718a892ad1d","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-default.css","hash":"8d928a084679be8fd43437394b2b64ed16788e5a","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-coy.css","hash":"0abf3c5b72b3a99839cb5ce1a6979d387c4db53e","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-okaidia.css","hash":"e7ed4638f2d9b1066a449157736ae6b87b4e9de3","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-solarized-light.css","hash":"0dcef4ec85a626bfae208bec651891cb7d3479b0","modified":1561961658943},{"_id":"themes/indigoplus/source/css/prism/prism-tomorrow-night.css","hash":"69a8fcbe45f04ae46193c7b6b886a96d48ca1aec","modified":1561961658943},{"_id":"themes/indigoplus/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1561961658916},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1561961658930},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1561961658932},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1561961658932},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1561961658934},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1561961658935},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1561961658937},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1561961658937},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1561961658938},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1561961658939},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1561961658939},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1561961658941},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561961658929},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561961658929},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1561961658931},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1561961658934},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1561961658936},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1561961658941},{"_id":"themes/indigoplus/source/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1561961658949},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561961658921},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561961658923},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1561961658931},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1561961658933},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1561961658936},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1561961658938},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1561961658940},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561961658928},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1561961658926},{"_id":"public/baidusitemap.xml","hash":"b3c133bcaa85952ca5bb95044361bf98ca5276b8","modified":1572924259792},{"_id":"public/sitemap.xml","hash":"1b5fbd14383634147511605918079f8fa613948a","modified":1572924259796},{"_id":"public/content.json","hash":"22919ba2e328405173047d51dbe4ca2f14ce61b1","modified":1572924260556},{"_id":"public/404.html","hash":"e75245606e46e11462d0cbad1d026aa52ec84802","modified":1572924260583},{"_id":"public/about/index.html","hash":"bf84abd40d3960461cddca67e9af90bdf021d831","modified":1572924260583},{"_id":"public/timeline/index.html","hash":"c00eff8355caca8d1b1e67bfd64f50f712e0a002","modified":1572924260583},{"_id":"public/archives/page/7/index.html","hash":"34aaa768fc10fd094bf982fb0d44e816e6aa0f30","modified":1572924260583},{"_id":"public/archives/2019/page/7/index.html","hash":"76b3b91419d2f2536d5aab2afa947802213c43d6","modified":1572924260583},{"_id":"public/archives/2019/01/index.html","hash":"ca17c22993c1c0afba24f8070eccdd85b0d8523f","modified":1572924260584},{"_id":"public/archives/2019/04/index.html","hash":"2cd5a5ca32a21b3e236a216d8952ce2c97161dce","modified":1572924260584},{"_id":"public/archives/2019/05/index.html","hash":"df7583388c2efc7c2f3b6e70ee554a619d8db397","modified":1572924260584},{"_id":"public/archives/2019/06/index.html","hash":"46e1f92c107abb7c6c45a8df722d549a2bbbe953","modified":1572924260584},{"_id":"public/archives/2019/08/index.html","hash":"acca94819fc3a112a58e3dbcfe50f4abb4a8f542","modified":1572924260584},{"_id":"public/categories/golang/index.html","hash":"8077b44bde3b908ebb26a5a8cf9069f3db191527","modified":1572924260584},{"_id":"public/categories/nginx/index.html","hash":"d89e0a5fcb88f5ea2fff03d6afaca2b59bf9a9c3","modified":1572924260584},{"_id":"public/categories/node/index.html","hash":"f3e1966a46c1d3d72b089191fb057cafd6ac6507","modified":1572924260584},{"_id":"public/categories/python/index.html","hash":"7aa01a7977393f98696cc1f1dd1140780df218e7","modified":1572924260584},{"_id":"public/categories/大话数据结构/page/2/index.html","hash":"ef3e04b5bd14958ed2aada2af2904b54bc562903","modified":1572924260584},{"_id":"public/tags/tool/index.html","hash":"1b9c9591a24aa522449e74dc7911ab2380c229ad","modified":1572924260584},{"_id":"public/tags/PHP/index.html","hash":"28e5d562d544d891b5f1a8e54cfd6f6e3af913ac","modified":1572924260584},{"_id":"public/tags/apache/index.html","hash":"e4d13a255acf7ff029230282404b40d9b8ae18bd","modified":1572924260584},{"_id":"public/tags/docker/index.html","hash":"0bf0ae68e7175460e32901efcddd859a32d592e2","modified":1572924260584},{"_id":"public/tags/https/index.html","hash":"c10df52f8d254da37e0da2a75334375221c707c3","modified":1572924260584},{"_id":"public/tags/node/index.html","hash":"96991921b74499db3e8bcf8366fa663b4ea83e0b","modified":1572924260584},{"_id":"public/tags/ssl/index.html","hash":"7da5e45696d713bfc89793cfb71b11958d0de8d0","modified":1572924260584},{"_id":"public/tags/python/index.html","hash":"d426f7c0786e3c8ff477e43f775ed5b472d9d831","modified":1572924260584},{"_id":"public/tags/swoole/index.html","hash":"fb484db0239068ddaddf7b969572f32199757d9f","modified":1572924260584},{"_id":"public/tags/wsl/index.html","hash":"ac820f8e4502f850c655140cd99e1e475b09c0f5","modified":1572924260584},{"_id":"public/tags/『数据结构，算法』/index.html","hash":"5177fa9bc4c7957094bb348132fa9951a47d6f5d","modified":1572924260584},{"_id":"public/categories/index.html","hash":"17c3bd93a5fe8a03ad8cccf7a50563674c791e5a","modified":1572924260584},{"_id":"public/tags/index.html","hash":"0f913ac28d7511d68b985b385c7307d0d5a483f6","modified":1572924260584},{"_id":"public/2019/09/20/mysql面试（九）异常处理问题/index.html","hash":"750f5db95f8e2d1cc2060bd4389cbbb6b79bbe05","modified":1572924260585},{"_id":"public/2019/09/18/mysql面试（八）管理及监控类问题/index.html","hash":"7536f8a17143c76d7749c1348d3f2c743630244f","modified":1572924260585},{"_id":"public/2019/09/18/mysql面试（七）备份恢复类问题/index.html","hash":"f27c77c09c6ab280f63f5065cc409ee1f09b49da","modified":1572924260585},{"_id":"public/2019/09/17/mysql面试（五）存储引擎类问题/index.html","hash":"3863097a0edade1880668a550d0748ca4427dc91","modified":1572924260585},{"_id":"public/2019/09/15/mysql面试（六）MySQL架构类问题/index.html","hash":"5b9a473ff726b8d658a45ca741ad0ddb2b1e000e","modified":1572924260585},{"_id":"public/2019/09/14/mysql面试（四）日志类问题/index.html","hash":"60a18ce22d390e48d1a2b706b04f07a703da4064","modified":1572924260585},{"_id":"public/2019/09/12/mysql面试（三）服务器配置类问题/index.html","hash":"3900e99edd3fcfc39c3d7aac443e261b6753e479","modified":1572924260585},{"_id":"public/2019/09/10/mysql面试（二）用户管理类问题/index.html","hash":"0f2c9743c653361e8274412f5e34249b50b8054c","modified":1572924260585},{"_id":"public/2019/09/02/mysql面试（一）版本类问题/index.html","hash":"3da71a558736fae7cd8ab43c9d8a38053040aa71","modified":1572924260585},{"_id":"public/2019/08/26/mysql的sql优化（一）/index.html","hash":"1298a087dcefee2aa43e2378f53702006f24a7bc","modified":1572924260585},{"_id":"public/2019/08/16/mysql的sql优化（二）/index.html","hash":"8c9c86f8d6c4b8310b23083effe7657851b129c6","modified":1572924260585},{"_id":"public/2019/08/15/mysql存储引擎详解/index.html","hash":"0e6d501c841ec81c3e3663b0d986c89f602dc32c","modified":1572924260585},{"_id":"public/2019/08/15/mysql字段类型详解/index.html","hash":"2adc2844f75cd604554769ff247d8f9bda9a4c7c","modified":1572924260585},{"_id":"public/2019/08/10/mysql事务/index.html","hash":"82644485adc2466f2f3fc3000810c631e3696dd6","modified":1572924260585},{"_id":"public/2019/08/01/PHP和Go通过jsonrpc通信/index.html","hash":"cc36cfe8bf0a002ed0e2b21841f78418ba3fbe8d","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之链表映射/index.html","hash":"41a93354426a02519bbb842330cb498d470080cc","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之链表集合/index.html","hash":"67dc35ac21c466196839afcb7f9e21a91b2ca4c8","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之映射/index.html","hash":"496fb380232c2e325c5e2c7bda2df096ed02db9c","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之集合/index.html","hash":"de4739230dc6d542f85ac1a422ce0edea76f3d8f","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之二分搜索树映射/index.html","hash":"ae7db9ed3dc44d4fac4c7057b89b7074dbdfeb47","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之二分搜索树集合/index.html","hash":"301f17b58176dbebe569b5fdd361f32237ff5d0a","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之二分搜索树/index.html","hash":"efdbd3cfe2099ef6f060cfd910591be664405e64","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之链表栈/index.html","hash":"1c1c11eac9c81b79bedca5c632f34d8087e7336d","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之链表/index.html","hash":"a8d1276cba682774c8d33292e41152e2c2f929ac","modified":1572924260585},{"_id":"public/2019/07/29/数据结构之链表队列/index.html","hash":"f339c95894feac386a0671953d0d3789b57cc339","modified":1572924260585},{"_id":"public/2019/07/27/数据结构之循环队列/index.html","hash":"fe1c1f769d451684a2a6410ec951a7a7bd76681e","modified":1572924260585},{"_id":"public/2019/07/27/数据结构之数组队列/index.html","hash":"cdc8868161c25c085fab1ec9389b6969cbcc20e3","modified":1572924260585},{"_id":"public/2019/07/27/数据结构之队列/index.html","hash":"ec372843147a7483cade1acd11c5d23cc930df5a","modified":1572924260585},{"_id":"public/2019/07/27/数据结构之数组栈/index.html","hash":"962b4f9d7442358b53789f243beee78cb703d2a0","modified":1572924260586},{"_id":"public/2019/07/27/数据结构之栈/index.html","hash":"35fe8c7e568409235cc22469c61526f11d973673","modified":1572924260586},{"_id":"public/2019/07/25/信息记录/index.html","hash":"655ca92dac54efc886698d597fc643a7adecc26b","modified":1572924260586},{"_id":"public/2019/07/25/数据结构之数组/index.html","hash":"d11f0d1d94f04332394083324d518a96fdbb71ec","modified":1572924260586},{"_id":"public/2019/07/03/golang封装日志/index.html","hash":"9556e364eb1994509ccaeb6f57f04b4be412d225","modified":1572924260586},{"_id":"public/2019/07/01/hello-world/index.html","hash":"904f8d36bf5cf5c57630b39160b248590a268a3c","modified":1572924260586},{"_id":"public/2019/06/08/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied/index.html","hash":"25469e9b683d4b370d5808ef89771bf8658f56b7","modified":1572924260586},{"_id":"public/2019/05/07/nginx配置socket.io负载均衡/index.html","hash":"1b42df8c6fc3c141540e0416bf6e3ec0875dc595","modified":1572924260586},{"_id":"public/2019/05/07/mysql索引最左原则问题/index.html","hash":"83d2882aac0d40bcb8712c84412d343f36138b70","modified":1572924260586},{"_id":"public/2019/04/20/git入门/index.html","hash":"9f60396dfdd7e009cf636cc6bc0f35db55e81bdf","modified":1572924260586},{"_id":"public/2019/04/20/AMDcpu安装ubuntu-deepin/index.html","hash":"a1305bb2f6b83639a516031ccc02427575ba18f0","modified":1572924260586},{"_id":"public/2019/04/17/ARTS第2周/index.html","hash":"0d7289dc97d87f6521e245699d1e345b1ff2a2ba","modified":1572924260586},{"_id":"public/2019/04/17/ARTS第1周/index.html","hash":"da9a1d33b2bb212e1b4453c3379e1450eb784fcf","modified":1572924260586},{"_id":"public/2019/04/17/ARTS第0周/index.html","hash":"8535bb698aed5aae6f2a3544dbcab5b64872e4a1","modified":1572924260587},{"_id":"public/2019/04/03/vscode快捷键/index.html","hash":"facc56382b28f9cccccf6b26d7ce8d7351f67f0e","modified":1572924260587},{"_id":"public/2019/04/03/nginx配置文件/index.html","hash":"e5c31fb157fa8ed75b843f5314541fef8d632b9d","modified":1572924260587},{"_id":"public/2019/04/03/PHP7新特性/index.html","hash":"a06bbcecb4597d4297b0bf42d17a1719b83470f5","modified":1572924260587},{"_id":"public/2019/03/29/PHP运行模式/index.html","hash":"fee815abde365369bb359c2657671be3d5a1ef01","modified":1572924260587},{"_id":"public/2019/03/29/python在类中实现swith功能/index.html","hash":"581654863f3f78e0eddb661dfa2c5275b548fe2f","modified":1572924260587},{"_id":"public/2019/03/29/nginx负载均衡模式/index.html","hash":"3f88669bacb2238723bacd9494b181d2357fe3c7","modified":1572924260587},{"_id":"public/2019/03/29/swoole异步task/index.html","hash":"6287c33bf99fbc80bc92ba467a6346c74296595d","modified":1572924260587},{"_id":"public/2019/03/28/golang无法安装golang-org安装包的问题/index.html","hash":"4017af73214035f1379d2cb5ea4f8d71b4e5e731","modified":1572924260587},{"_id":"public/2019/03/28/nginx配置https出现no ssl_certificate/index.html","hash":"80fd9d7136f85d3f2d3635c08ea74f58c723a9d0","modified":1572924260587},{"_id":"public/2019/03/28/wsl搭建php环境请求超时的问题解决方案/index.html","hash":"14aeb8aa2b8a2f838fe5cba10c59b47be7d3934a","modified":1572924260587},{"_id":"public/2019/03/28/docker-mysql主从配置/index.html","hash":"6293b2b10fe690932ffe4c39de3151e4cfdc9bdd","modified":1572924260587},{"_id":"public/2019/02/25/《大话数据结构》读后总结（十一）/index.html","hash":"5cdede93f12b46796c6a35c22941c5ebaf21039b","modified":1572924260587},{"_id":"public/2019/02/20/《大话数据结构》读后总结（十）/index.html","hash":"320eaa0aafb85dbeaf3590b23921758265d71f69","modified":1572924260587},{"_id":"public/2019/02/15/《大话数据结构》读后总结（九）/index.html","hash":"40e4e91185886ccb1e55275a3effd9567c86f4cf","modified":1572924260587},{"_id":"public/2019/02/13/《大话数据结构》读后总结（八）/index.html","hash":"5380383dd8bcbb37042c5362110049f9a34ed7b8","modified":1572924260587},{"_id":"public/2019/02/11/《大话数据结构》读后总结（七）/index.html","hash":"812554f03491450116ecf16d232470025e7480b6","modified":1572924260587},{"_id":"public/2019/02/07/《大话数据结构》读后总结（六）/index.html","hash":"4edbd07bfec5a70486f38b7ecd1a30f8581b150a","modified":1572924260587},{"_id":"public/2019/02/05/《大话数据结构》读后总结（五）/index.html","hash":"152e44126b9de35b9a9ca5f7ba8395526ea112ba","modified":1572924260587},{"_id":"public/2019/02/04/《大话数据结构》读后总结（四）/index.html","hash":"42a1ab29457f725ad234a73648b909f37640f764","modified":1572924260588},{"_id":"public/2019/02/02/《大话数据结构》读后总结（三）/index.html","hash":"b2c03c1d2c171dbab41c009c3fb54b3bd7213960","modified":1572924260588},{"_id":"public/2019/01/30/《大话数据结构》读后总结（二）/index.html","hash":"7788f95c624bf1fdd8ebe294ef2443889cc8ffe3","modified":1572924260588},{"_id":"public/2019/01/29/《大话数据结构》读后总结（一）/index.html","hash":"9ae04f38be0d0c771e1d51c10dd6e9e296806d3b","modified":1572924260588},{"_id":"public/index.html","hash":"b6bb0a5a9fb4e524acdbdc6f1b6d2e63b1921a08","modified":1572924260588},{"_id":"public/page/2/index.html","hash":"0228d2e038b1c0d738a4e8ab1bf48db968013c59","modified":1572924260588},{"_id":"public/page/3/index.html","hash":"b1abb59ea26cf9877772f64aed573d17ec62532c","modified":1572924260588},{"_id":"public/page/4/index.html","hash":"413071ee550095131cc13f52f5cbb3b846d56c0d","modified":1572924260588},{"_id":"public/page/5/index.html","hash":"4fb7ae7813ecbe3a24e4b2f7dd0cfc50b2e78b4a","modified":1572924260588},{"_id":"public/page/6/index.html","hash":"b1312969053dc89b65c21f24dae94e45cb90b02e","modified":1572924260588},{"_id":"public/page/7/index.html","hash":"dc7e50e7c90f7b81acf9bd8812efe2b8f55b1289","modified":1572924260588},{"_id":"public/archives/index.html","hash":"bd402d4df9fb1ea5d36e43983265a253ecc41783","modified":1572924260588},{"_id":"public/archives/page/2/index.html","hash":"848e72fdc6b6307431ec1f2c6db230a541aa65da","modified":1572924260588},{"_id":"public/archives/page/3/index.html","hash":"3a80f311fc6c907105781daf8b44eebf21f3d309","modified":1572924260588},{"_id":"public/archives/page/4/index.html","hash":"290b66fca056812275bea2538f01296cb562e867","modified":1572924260588},{"_id":"public/archives/page/5/index.html","hash":"fa249ab4646f5f9074717f56e254543e46eab1cf","modified":1572924260588},{"_id":"public/archives/page/6/index.html","hash":"6eb759e210280a3ae9d855544ebb7b9a0fe1d7d0","modified":1572924260588},{"_id":"public/archives/2019/index.html","hash":"1b9a4344ad825a88d547bc45362975e438ff1b40","modified":1572924260588},{"_id":"public/archives/2019/page/3/index.html","hash":"2bcc80b93e19f95d15fd706ca9599f801a58306f","modified":1572924260588},{"_id":"public/archives/2019/page/2/index.html","hash":"4dbd36838cb9ae5f49cb7888bd60e2824d39652a","modified":1572924260588},{"_id":"public/archives/2019/page/4/index.html","hash":"cb0241a87deb75af0727a963145d378652ac45f7","modified":1572924260588},{"_id":"public/archives/2019/page/5/index.html","hash":"0e7a6c0811aabb035ed6367ec242996595a7fd93","modified":1572924260588},{"_id":"public/archives/2019/page/6/index.html","hash":"e87939a5f426b2767e76543facd08e23bc7667d9","modified":1572924260588},{"_id":"public/archives/2019/02/index.html","hash":"b46f33af198955bd7832e8b58ea7b720813eae4e","modified":1572924260588},{"_id":"public/archives/2019/03/index.html","hash":"d75d8983225e882b25fdd1c064e45db5f524d52a","modified":1572924260589},{"_id":"public/archives/2019/07/index.html","hash":"4e4b83365a2eb73fe626d529d2d3b6471cdcb6d9","modified":1572924260589},{"_id":"public/archives/2019/07/page/2/index.html","hash":"40ffbe8241e8953861bb4b2bcb43e77417e8bd28","modified":1572924260589},{"_id":"public/archives/2019/09/index.html","hash":"85fafc4d37a4af6b8e4b4b5bc5ae8978923094d0","modified":1572924260589},{"_id":"public/categories/php/index.html","hash":"c6d6ad9edd82094aaa15e24976a574aaa6bbdbaf","modified":1572924260589},{"_id":"public/categories/mysql/index.html","hash":"2eb4780309eab7e3f40bbed6bd39543adb42d2bc","modified":1572924260589},{"_id":"public/categories/mysql/page/2/index.html","hash":"673d099227c5e7273e68a3287cb7101e478919e7","modified":1572924260589},{"_id":"public/categories/大话数据结构/index.html","hash":"daffd984a657b75821267b7ceac3e5c488af67c2","modified":1572924260589},{"_id":"public/categories/数据结构/index.html","hash":"ef640c52cc002de9b0ee61851f09d0fcca299675","modified":1572924260589},{"_id":"public/categories/数据结构/page/2/index.html","hash":"f5ee0898025e8f90f5b843a9f302471c82d40e63","modified":1572924260589},{"_id":"public/tags/php/index.html","hash":"7d7a555c3ea175c529516f22ed47cc6fb7b1199d","modified":1572924260589},{"_id":"public/tags/golang/index.html","hash":"bce671c1f49c18fbddf01b93e786a2a834f85d59","modified":1572924260589},{"_id":"public/tags/php-fpm/index.html","hash":"e3756325f8f8d58602b06ce98186a49b3c02e74e","modified":1572924260589},{"_id":"public/tags/nginx/index.html","hash":"9e545fe2c2559b761f161535878dd2f0a330ba8a","modified":1572924260589},{"_id":"public/tags/mysql/index.html","hash":"de1fd8de9fa1cb3be7dc26f88ce119ad87fae2fe","modified":1572924260589},{"_id":"public/tags/mysql/page/2/index.html","hash":"89379e39b243283a2f18369dbd86ad31d2196ddd","modified":1572924260589},{"_id":"public/tags/vscode/index.html","hash":"a4206dc125586fa68ac30cbb7209edea87b51574","modified":1572924260589},{"_id":"public/tags/【数据结构，算法】/index.html","hash":"7563b7d8e5b62d01153b2b249a3baafad1c7c012","modified":1572924260589},{"_id":"public/tags/【数据结构，算法】/page/2/index.html","hash":"045cf992c4a74f6e62d09fc4b8548d267b6b8937","modified":1572924260589},{"_id":"public/tags/数据结构/index.html","hash":"9bbcaaff289864a9e61f480ba59b1af49986ccd6","modified":1572924260589},{"_id":"public/tags/算法/index.html","hash":"fa58dde74dc59afbbacd7c8aa4810f6aa6825819","modified":1572924260589},{"_id":"public/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1572924260598},{"_id":"public/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1572924260598},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1572924260598},{"_id":"public/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1572924260598},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1572924260598},{"_id":"public/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1572924260598},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1572924260598},{"_id":"public/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1572924260598},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1572924260599},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1572924260599},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1572924260599},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1572924260599},{"_id":"public/images/cover.jpg","hash":"2fad1d5eb1c80645aec5060e9b4d76815f74ca0d","modified":1572924260621},{"_id":"public/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1572924260621},{"_id":"public/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1572924260622},{"_id":"public/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1572924260622},{"_id":"public/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1572924260622},{"_id":"public/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1572924260622},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1572924260622},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1572924260622},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1572924260622},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1572924260625},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1572924260625},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1572924260625},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572924260625},{"_id":"public/js/main.min.js","hash":"ad83e2fd040c166ca99c3a2ea855c895056697b0","modified":1572924260626},{"_id":"public/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1572924260626},{"_id":"public/css/prism/prism-default.css","hash":"533461a46dba7ea010965f57e78ae05b3ab77a6e","modified":1572924260626},{"_id":"public/css/prism/prism-coy.css","hash":"a431ebe8a3f87ff88004d100938faa411a84aa96","modified":1572924260626},{"_id":"public/css/prism/prism-atom-dark.css","hash":"61b9747215709f1e10fe67138afc400dc93c5da2","modified":1572924260626},{"_id":"public/css/prism/prism-okaidia.css","hash":"ad237637eedf7360505553b0cd09721c40c27cca","modified":1572924260626},{"_id":"public/css/prism/prism-solarized-light.css","hash":"f1f9693fc8f6056f6866510d58e90d58e6c99fe9","modified":1572924260626},{"_id":"public/css/prism/prism-tomorrow-night.css","hash":"8a5880145ed5c00d10469b22f8f05fe311dbd30e","modified":1572924260626},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572924260646},{"_id":"public/js/main.js","hash":"6fedca400451a2389740251b5c5b61847ca19baf","modified":1572924260646},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572924260654},{"_id":"public/js/Valine.min.js","hash":"4429596ffe0aa32c9a1c8b17621aa20c8025d4b3","modified":1572924260709},{"_id":"public/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1572924260709},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1572924260712},{"_id":"public/js/prism.js","hash":"53fb3f2f4dccf00033a9b3fe2c81269e848e23bb","modified":1572924260880},{"_id":"public/css/style.css","hash":"e93840114982cef5d8f48eb1103cc70e2363b9d8","modified":1572924260882}],"Category":[{"name":"php","_id":"ck2lahosa00090gs6gor9g2tc"},{"name":"golang","_id":"ck2lahosk000s0gs661aa96nd"},{"name":"mysql","_id":"ck2lahosm000z0gs6exggjqup"},{"name":"nginx","_id":"ck2lahot3001z0gs67bm1utvo"},{"name":"node","_id":"ck2lahot9002g0gs6f35x1ijs"},{"name":"python","_id":"ck2lahotc002r0gs6gitqj24b"},{"name":"大话数据结构","_id":"ck2lahotg00320gs6vyf6doce"},{"name":"数据结构","_id":"ck2lahotu00470gs6l8k79u4z"}],"Data":[],"Page":[{"_content":"\n\n<h1>404</h1>\n\n\n","source":"404.html","raw":"\n\n<h1>404</h1>\n\n\n","date":"2019-07-13T03:30:41.441Z","updated":"2019-07-01T06:06:37.240Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck2lahor800000gs63a3etjd2","content":"\n\n<h1>404</h1>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n<h1>404</h1>\n\n\n"},{"title":"关于我","date":"2019-03-28T04:15:38.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2019-03-28 12:15:38\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-07-03T07:21:42.226Z","path":"about/index.html","comments":1,"_id":"ck2lahouz007f0gs6oblq9uf4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-02T09:09:23.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-02 17:09:23\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2019-07-01T09:19:37.294Z","path":"categories/index.html","_id":"ck2lahouz007g0gs60r6xvc16","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"时间轴","date":"2019-03-28T09:25:32.000Z","type":"timeline","comments":0,"_content":"\n@timeline{\n\n##### 2019\n\n@item{\n###### 7月3日\n单枪匹马面对生活的兵荒马乱\n\n}\n##### 2018\n@item{\n###### 2月23日\n结婚\n\n}\n##### 2016\n@item{\n###### 11月16日\n领证\n\n}\n\n}","source":"timeline/index.md","raw":"---\ntitle: 时间轴\ndate: 2019-03-28 17:25:32\ntype: \"timeline\"\ncomments: false\n---\n\n@timeline{\n\n##### 2019\n\n@item{\n###### 7月3日\n单枪匹马面对生活的兵荒马乱\n\n}\n##### 2018\n@item{\n###### 2月23日\n结婚\n\n}\n##### 2016\n@item{\n###### 11月16日\n领证\n\n}\n\n}","updated":"2019-07-03T07:32:23.476Z","path":"timeline/index.html","layout":"page","_id":"ck2lahov0007h0gs6sq924vkv","content":"<p>@timeline{</p>\n<h5 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h5><p>@item{</p>\n<h6 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h6><p>单枪匹马面对生活的兵荒马乱</p>\n<p>}</p>\n<h5 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h5><p>@item{</p>\n<h6 id=\"2月23日\"><a href=\"#2月23日\" class=\"headerlink\" title=\"2月23日\"></a>2月23日</h6><p>结婚</p>\n<p>}</p>\n<h5 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h5><p>@item{</p>\n<h6 id=\"11月16日\"><a href=\"#11月16日\" class=\"headerlink\" title=\"11月16日\"></a>11月16日</h6><p>领证</p>\n<p>}</p>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@timeline{</p>\n<h5 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h5><p>@item{</p>\n<h6 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h6><p>单枪匹马面对生活的兵荒马乱</p>\n<p>}</p>\n<h5 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h5><p>@item{</p>\n<h6 id=\"2月23日\"><a href=\"#2月23日\" class=\"headerlink\" title=\"2月23日\"></a>2月23日</h6><p>结婚</p>\n<p>}</p>\n<h5 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h5><p>@item{</p>\n<h6 id=\"11月16日\"><a href=\"#11月16日\" class=\"headerlink\" title=\"11月16日\"></a>11月16日</h6><p>领证</p>\n<p>}</p>\n<p>}</p>\n"},{"title":"标签","date":"2019-03-28T09:25:32.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-28 17:25:32\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-07-01T06:06:37.248Z","path":"tags/index.html","_id":"ck2lahov0007i0gs602col3ee","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AMDcpu 安装 ubuntu/deepin","date":"2019-04-20T01:45:35.000Z","top":0,"_content":"\n### 1、问题\n\n电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏\n\n### 2、安装\n\n开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在 linux 行的末尾加上这三个参数：\n\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x 就可以直接启动了\n\n### 3、开机启动\n\n按 E 编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub 文件\n在 GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得 update-grub 来更新下 grub 的菜单以生效\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/AMDcpu安装ubuntu-deepin.md","raw":"---\ntitle: AMDcpu 安装 ubuntu/deepin\ndate: 2019-04-20 09:45:35\ntags: [tool]\ntop: 0\n---\n\n### 1、问题\n\n电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏\n\n### 2、安装\n\n开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在 linux 行的末尾加上这三个参数：\n\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x 就可以直接启动了\n\n### 3、开机启动\n\n按 E 编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub 文件\n在 GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得 update-grub 来更新下 grub 的菜单以生效\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"AMDcpu安装ubuntu-deepin","published":1,"updated":"2019-08-01T02:43:06.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahorz00010gs6lzzxyil6","content":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 linux 行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x 就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按 E 编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub 文件<br>在 GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得 update-grub 来更新下 grub 的菜单以生效</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 linux 行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x 就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按 E 编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub 文件<br>在 GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得 update-grub 来更新下 grub 的菜单以生效</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 0 周","date":"2019-04-17T02:08:26.000Z","top":0,"_content":"\n### Algorithm\n\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n\n### Review\n\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n\n### Tip\n\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n\n### Share\n\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第0周.md","raw":"---\ntitle: ARTS 第 0 周\ndate: 2019-04-17 10:08:26\ntags:\ntop: 0\n---\n\n### Algorithm\n\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n\n### Review\n\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n\n### Tip\n\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n\n### Share\n\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第0周","published":1,"updated":"2019-08-01T02:43:09.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahos300020gs65jwflz3h","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 2 周","date":"2019-04-17T02:25:24.000Z","top":0,"_content":"\n### Algorithm\n\n\n[整数反转](https://leetcode-cn.com/problems/reverse-integer/ \"整数反转\")\n\n\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n\n```\n\n```\n\n### Review\n\n### Tip\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第2周.md","raw":"---\ntitle: ARTS 第 2 周\ndate: 2019-04-17 10:25:24\ntags:\ntop: 0\n---\n\n### Algorithm\n\n\n[整数反转](https://leetcode-cn.com/problems/reverse-integer/ \"整数反转\")\n\n\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n\n```\n\n```\n\n### Review\n\n### Tip\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第2周","published":1,"updated":"2019-11-02T06:13:59.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahos500040gs6ga1f0vvj","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" title=\"整数反转\" target=\"_blank\" rel=\"noopener\">整数反转</a></p>\n<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" title=\"整数反转\" target=\"_blank\" rel=\"noopener\">整数反转</a></p>\n<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 1 周","date":"2019-04-17T02:08:33.000Z","top":0,"_content":"\n### Algorithm\n\n\n\n[两数之和](https://leetcode-cn.com/problems/two-sum/ \"两数之和\")\n\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n\n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n\n### Review\n\n### Tip\n\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第1周.md","raw":"---\ntitle: ARTS 第 1 周\ndate: 2019-04-17 10:08:33\ntags:\ntop: 0\n---\n\n### Algorithm\n\n\n\n[两数之和](https://leetcode-cn.com/problems/two-sum/ \"两数之和\")\n\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n\n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n\n### Review\n\n### Tip\n\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第1周","published":1,"updated":"2019-11-02T06:06:19.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahos600050gs6n5b7a9bh","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" title=\"两数之和\" target=\"_blank\" rel=\"noopener\">两数之和</a></p>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" title=\"两数之和\" target=\"_blank\" rel=\"noopener\">两数之和</a></p>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP7 新特性","date":"2019-04-03T01:03:42.000Z","top":0,"_content":"\n#### 1. 太空船运算符\n\n```php\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n\n#### 2. 类型声明\n\n```php\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n\n#### 3.null 合并操作符\n\n```php\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n\n#### 4. 常量数组\n\n```php\ndefine('ANIMALS',['dog','cat']);\n```\n\n#### 5.namespace 批量导入\n\n```php\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n\n#### 6.intdiv 函数\n\n```php\nintdiv(10,3);\n```\n\n#### 7.list 方括号\n\n```php\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP7新特性.md","raw":"---\ntitle: PHP7 新特性\ndate: 2019-04-03 09:03:42\ntags: [php]\ncategories: \"php\"\ntop: 0\n---\n\n#### 1. 太空船运算符\n\n```php\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n\n#### 2. 类型声明\n\n```php\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n\n#### 3.null 合并操作符\n\n```php\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n\n#### 4. 常量数组\n\n```php\ndefine('ANIMALS',['dog','cat']);\n```\n\n#### 5.namespace 批量导入\n\n```php\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n\n#### 6.intdiv 函数\n\n```php\nintdiv(10,3);\n```\n\n#### 7.list 方括号\n\n```php\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP7新特性","published":1,"updated":"2019-08-01T02:44:41.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahos700060gs6xczu7dog","content":"<h4 id=\"1-太空船运算符\"><a href=\"#1-太空船运算符\" class=\"headerlink\" title=\"1. 太空船运算符\"></a>1. 太空船运算符</h4><pre><code class=\"lang-php\">echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre>\n<h4 id=\"2-类型声明\"><a href=\"#2-类型声明\" class=\"headerlink\" title=\"2. 类型声明\"></a>2. 类型声明</h4><pre><code class=\"lang-php\">declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre>\n<h4 id=\"3-null-合并操作符\"><a href=\"#3-null-合并操作符\" class=\"headerlink\" title=\"3.null 合并操作符\"></a>3.null 合并操作符</h4><pre><code class=\"lang-php\">$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre>\n<h4 id=\"4-常量数组\"><a href=\"#4-常量数组\" class=\"headerlink\" title=\"4. 常量数组\"></a>4. 常量数组</h4><pre><code class=\"lang-php\">define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre>\n<h4 id=\"5-namespace-批量导入\"><a href=\"#5-namespace-批量导入\" class=\"headerlink\" title=\"5.namespace 批量导入\"></a>5.namespace 批量导入</h4><pre><code class=\"lang-php\">use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre>\n<h4 id=\"6-intdiv-函数\"><a href=\"#6-intdiv-函数\" class=\"headerlink\" title=\"6.intdiv 函数\"></a>6.intdiv 函数</h4><pre><code class=\"lang-php\">intdiv(10,3);\n</code></pre>\n<h4 id=\"7-list-方括号\"><a href=\"#7-list-方括号\" class=\"headerlink\" title=\"7.list 方括号\"></a>7.list 方括号</h4><pre><code class=\"lang-php\">$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-太空船运算符\"><a href=\"#1-太空船运算符\" class=\"headerlink\" title=\"1. 太空船运算符\"></a>1. 太空船运算符</h4><pre><code class=\"lang-php\">echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre>\n<h4 id=\"2-类型声明\"><a href=\"#2-类型声明\" class=\"headerlink\" title=\"2. 类型声明\"></a>2. 类型声明</h4><pre><code class=\"lang-php\">declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre>\n<h4 id=\"3-null-合并操作符\"><a href=\"#3-null-合并操作符\" class=\"headerlink\" title=\"3.null 合并操作符\"></a>3.null 合并操作符</h4><pre><code class=\"lang-php\">$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre>\n<h4 id=\"4-常量数组\"><a href=\"#4-常量数组\" class=\"headerlink\" title=\"4. 常量数组\"></a>4. 常量数组</h4><pre><code class=\"lang-php\">define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre>\n<h4 id=\"5-namespace-批量导入\"><a href=\"#5-namespace-批量导入\" class=\"headerlink\" title=\"5.namespace 批量导入\"></a>5.namespace 批量导入</h4><pre><code class=\"lang-php\">use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre>\n<h4 id=\"6-intdiv-函数\"><a href=\"#6-intdiv-函数\" class=\"headerlink\" title=\"6.intdiv 函数\"></a>6.intdiv 函数</h4><pre><code class=\"lang-php\">intdiv(10,3);\n</code></pre>\n<h4 id=\"7-list-方括号\"><a href=\"#7-list-方括号\" class=\"headerlink\" title=\"7.list 方括号\"></a>7.list 方括号</h4><pre><code class=\"lang-php\">$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP和Go通过jsonrpc通信","top":1,"date":"2019-08-01T08:19:27.000Z","_content":"### 说明\nPHP和GO通过jsonrpc通信\n### 代码\n``` go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n\tA int\n\tB int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n\tPro int // 乘积\n\tQuo int // 商\n\tRem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n\tres.Pro = req.A * req.B\n\treturn nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n\tif req.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\tres.Quo = req.A / req.B\n\tres.Rem = req.A % req.B\n\treturn nil\n}\n\nfunc main() {\n\trpc.Register(new(Arith)) // 注册rpc服务\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:8096\")\n\tif err != nil {\n\t\tlog.Fatalln(\"fatal error: \", err)\n\t}\n\tfmt.Fprintf(os.Stdout, \"%s\", \"wait connection\")\n\tfor {\n\t\tconn, err := lis.Accept() // 接收客户端连接请求\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tgo func(conn net.Conn) { // 并发处理客户端请求\n\t\t\tfmt.Fprintf(os.Stdout, \"%s\", \"\\n new client in coming\\n\")\n\t\t\tjsonrpc.ServeConn(conn)\n\t\t}(conn)\n\t}\n}\n\n```\n```php\nclass JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this->conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this->conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this->conn) {\n            return false;\n        }\n        $err = fwrite($this->conn, json_encode(array(\n                'method' => $method,\n                'params' => array($params),\n                'id'     => 0,\n            )).\"\\n\");\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this->conn, 0, 3000);\n        $line = fgets($this->conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(\"127.0.0.1\", 8096);\n$args = array('A'=>9, 'B'=>2);\n$r = $client->Call(\"Arith.Multiply\", $args);\nprintf(\"%d * %d = %d\\n\", $args['A'], $args['B'], $r['result']['Pro']);\n$r = $client->Call(\"Arith.Divide\", $args);\nprintf(\"%d / %d, Quo is %d, Rem is %d\\n\", $args['A'], $args['B'], $r['result']['Quo'], $r['result']['Rem']);\n```","source":"_posts/PHP和Go通过jsonrpc通信.md","raw":"---\ntitle: PHP和Go通过jsonrpc通信\ntop: 1\ndate: 2019-08-01 16:19:27\ntags: [golang,PHP]\ncategories:\n---\n### 说明\nPHP和GO通过jsonrpc通信\n### 代码\n``` go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n\tA int\n\tB int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n\tPro int // 乘积\n\tQuo int // 商\n\tRem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n\tres.Pro = req.A * req.B\n\treturn nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n\tif req.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\tres.Quo = req.A / req.B\n\tres.Rem = req.A % req.B\n\treturn nil\n}\n\nfunc main() {\n\trpc.Register(new(Arith)) // 注册rpc服务\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:8096\")\n\tif err != nil {\n\t\tlog.Fatalln(\"fatal error: \", err)\n\t}\n\tfmt.Fprintf(os.Stdout, \"%s\", \"wait connection\")\n\tfor {\n\t\tconn, err := lis.Accept() // 接收客户端连接请求\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tgo func(conn net.Conn) { // 并发处理客户端请求\n\t\t\tfmt.Fprintf(os.Stdout, \"%s\", \"\\n new client in coming\\n\")\n\t\t\tjsonrpc.ServeConn(conn)\n\t\t}(conn)\n\t}\n}\n\n```\n```php\nclass JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this->conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this->conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this->conn) {\n            return false;\n        }\n        $err = fwrite($this->conn, json_encode(array(\n                'method' => $method,\n                'params' => array($params),\n                'id'     => 0,\n            )).\"\\n\");\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this->conn, 0, 3000);\n        $line = fgets($this->conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(\"127.0.0.1\", 8096);\n$args = array('A'=>9, 'B'=>2);\n$r = $client->Call(\"Arith.Multiply\", $args);\nprintf(\"%d * %d = %d\\n\", $args['A'], $args['B'], $r['result']['Pro']);\n$r = $client->Call(\"Arith.Divide\", $args);\nprintf(\"%d / %d, Quo is %d, Rem is %d\\n\", $args['A'], $args['B'], $r['result']['Quo'], $r['result']['Rem']);\n```","slug":"PHP和Go通过jsonrpc通信","published":1,"updated":"2019-09-07T01:11:30.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahos800080gs6rczslylc","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>PHP和GO通过jsonrpc通信</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"lang-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n    &quot;log&quot;\n    &quot;net&quot;\n    &quot;net/rpc&quot;\n    &quot;net/rpc/jsonrpc&quot;\n    &quot;os&quot;\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n    A int\n    B int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n    Pro int // 乘积\n    Quo int // 商\n    Rem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n    res.Pro = req.A * req.B\n    return nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n    if req.B == 0 {\n        return errors.New(&quot;divide by zero&quot;)\n    }\n    res.Quo = req.A / req.B\n    res.Rem = req.A % req.B\n    return nil\n}\n\nfunc main() {\n    rpc.Register(new(Arith)) // 注册rpc服务\n    lis, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8096&quot;)\n    if err != nil {\n        log.Fatalln(&quot;fatal error: &quot;, err)\n    }\n    fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;wait connection&quot;)\n    for {\n        conn, err := lis.Accept() // 接收客户端连接请求\n        if err != nil {\n            continue\n        }\n\n        go func(conn net.Conn) { // 并发处理客户端请求\n            fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;\\n new client in coming\\n&quot;)\n            jsonrpc.ServeConn(conn)\n        }(conn)\n    }\n}\n</code></pre>\n<pre><code class=\"lang-php\">class JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this-&gt;conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this-&gt;conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this-&gt;conn) {\n            return false;\n        }\n        $err = fwrite($this-&gt;conn, json_encode(array(\n                &#39;method&#39; =&gt; $method,\n                &#39;params&#39; =&gt; array($params),\n                &#39;id&#39;     =&gt; 0,\n            )).&quot;\\n&quot;);\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this-&gt;conn, 0, 3000);\n        $line = fgets($this-&gt;conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(&quot;127.0.0.1&quot;, 8096);\n$args = array(&#39;A&#39;=&gt;9, &#39;B&#39;=&gt;2);\n$r = $client-&gt;Call(&quot;Arith.Multiply&quot;, $args);\nprintf(&quot;%d * %d = %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Pro&#39;]);\n$r = $client-&gt;Call(&quot;Arith.Divide&quot;, $args);\nprintf(&quot;%d / %d, Quo is %d, Rem is %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Quo&#39;], $r[&#39;result&#39;][&#39;Rem&#39;]);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>PHP和GO通过jsonrpc通信</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"lang-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n    &quot;log&quot;\n    &quot;net&quot;\n    &quot;net/rpc&quot;\n    &quot;net/rpc/jsonrpc&quot;\n    &quot;os&quot;\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n    A int\n    B int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n    Pro int // 乘积\n    Quo int // 商\n    Rem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n    res.Pro = req.A * req.B\n    return nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n    if req.B == 0 {\n        return errors.New(&quot;divide by zero&quot;)\n    }\n    res.Quo = req.A / req.B\n    res.Rem = req.A % req.B\n    return nil\n}\n\nfunc main() {\n    rpc.Register(new(Arith)) // 注册rpc服务\n    lis, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8096&quot;)\n    if err != nil {\n        log.Fatalln(&quot;fatal error: &quot;, err)\n    }\n    fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;wait connection&quot;)\n    for {\n        conn, err := lis.Accept() // 接收客户端连接请求\n        if err != nil {\n            continue\n        }\n\n        go func(conn net.Conn) { // 并发处理客户端请求\n            fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;\\n new client in coming\\n&quot;)\n            jsonrpc.ServeConn(conn)\n        }(conn)\n    }\n}\n</code></pre>\n<pre><code class=\"lang-php\">class JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this-&gt;conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this-&gt;conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this-&gt;conn) {\n            return false;\n        }\n        $err = fwrite($this-&gt;conn, json_encode(array(\n                &#39;method&#39; =&gt; $method,\n                &#39;params&#39; =&gt; array($params),\n                &#39;id&#39;     =&gt; 0,\n            )).&quot;\\n&quot;);\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this-&gt;conn, 0, 3000);\n        $line = fgets($this-&gt;conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(&quot;127.0.0.1&quot;, 8096);\n$args = array(&#39;A&#39;=&gt;9, &#39;B&#39;=&gt;2);\n$r = $client-&gt;Call(&quot;Arith.Multiply&quot;, $args);\nprintf(&quot;%d * %d = %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Pro&#39;]);\n$r = $client-&gt;Call(&quot;Arith.Divide&quot;, $args);\nprintf(&quot;%d / %d, Quo is %d, Rem is %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Quo&#39;], $r[&#39;result&#39;][&#39;Rem&#39;]);\n</code></pre>\n"},{"title":"PHP 运行模式","date":"2019-03-29T06:52:24.000Z","top":0,"_content":"\n### 运行模式\n\nphp 分为五大运行模式\n- cgi（通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi 升级版本）\n- cli（命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）\n- apache2handler（将 php 作为 apache 的模块）\n- 其他 (continuity,embed,litespeed,milter 等）\n\n本地查看运行模式的方法\n\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI 模式\n\n- Command Line Interface 的简称，支持 windows 和 Linux 平台\n- 直接在命令行运行，不需要 http server, 例如 php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用 PHP-CLI 和 GTK 包\n\n### CGI 模式\n\n- Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台\n- 执行过程\n    - http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行\n    - 生成一个 php-cgi 进程，并执行 php 程序\n    - 执行结果返回给 http 服务器\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）\n    - 逐渐少见\n\n### FastCGI 模式\n\n- 快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)\n    - FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接\n    - 当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi\n    - FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n\n- 模块模式指把 PHP 作为 web 服务器的一个模块运行\n- IIS 的 ISAPI 和 Apache 的 apache2handler\n\napache2handler\n- apache 监听一个用户请求 index.php\n- apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP\n- 在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook\n- php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。\n- php 执行完成后数据通过。so 或 dll 返回给 apache\n- apache 将数据返回到客户端\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP运行模式.md","raw":"---\ntitle: PHP 运行模式\ndate: 2019-03-29 14:52:24\ntags: [php,php-fpm,apache,nginx]\ncategories: \"php\"\ntop: 0\n---\n\n### 运行模式\n\nphp 分为五大运行模式\n- cgi（通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi 升级版本）\n- cli（命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）\n- apache2handler（将 php 作为 apache 的模块）\n- 其他 (continuity,embed,litespeed,milter 等）\n\n本地查看运行模式的方法\n\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI 模式\n\n- Command Line Interface 的简称，支持 windows 和 Linux 平台\n- 直接在命令行运行，不需要 http server, 例如 php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用 PHP-CLI 和 GTK 包\n\n### CGI 模式\n\n- Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台\n- 执行过程\n    - http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行\n    - 生成一个 php-cgi 进程，并执行 php 程序\n    - 执行结果返回给 http 服务器\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）\n    - 逐渐少见\n\n### FastCGI 模式\n\n- 快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)\n    - FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接\n    - 当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi\n    - FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n\n- 模块模式指把 PHP 作为 web 服务器的一个模块运行\n- IIS 的 ISAPI 和 Apache 的 apache2handler\n\napache2handler\n- apache 监听一个用户请求 index.php\n- apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP\n- 在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook\n- php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。\n- php 执行完成后数据通过。so 或 dll 返回给 apache\n- apache 将数据返回到客户端\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP运行模式","published":1,"updated":"2019-08-01T02:44:11.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosa000b0gs6ev2l1lfh","content":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>php 分为五大运行模式</p>\n<ul>\n<li>cgi（通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi 升级版本）</li>\n<li>cli（命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）</li>\n<li>apache2handler（将 php 作为 apache 的模块）</li>\n<li>其他 (continuity,embed,litespeed,milter 等）</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI-模式\"><a href=\"#CLI-模式\" class=\"headerlink\" title=\"CLI 模式\"></a>CLI 模式</h3><ul>\n<li>Command Line Interface 的简称，支持 windows 和 Linux 平台</li>\n<li>直接在命令行运行，不需要 http server, 例如 php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用 PHP-CLI 和 GTK 包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI-模式\"><a href=\"#CGI-模式\" class=\"headerlink\" title=\"CGI 模式\"></a>CGI 模式</h3><ul>\n<li>Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行</li>\n<li>生成一个 php-cgi 进程，并执行 php 程序</li>\n<li>执行结果返回给 http 服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI-模式\"><a href=\"#FastCGI-模式\" class=\"headerlink\" title=\"FastCGI 模式\"></a>FastCGI 模式</h3><ul>\n<li>快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)</li>\n<li>FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接</li>\n<li>当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把 PHP 作为 web 服务器的一个模块运行</li>\n<li>IIS 的 ISAPI 和 Apache 的 apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache 监听一个用户请求 index.php</li>\n<li>apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP</li>\n<li>在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook</li>\n<li>php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。</li>\n<li>php 执行完成后数据通过。so 或 dll 返回给 apache</li>\n<li>apache 将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>php 分为五大运行模式</p>\n<ul>\n<li>cgi（通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi 升级版本）</li>\n<li>cli（命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）</li>\n<li>apache2handler（将 php 作为 apache 的模块）</li>\n<li>其他 (continuity,embed,litespeed,milter 等）</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI-模式\"><a href=\"#CLI-模式\" class=\"headerlink\" title=\"CLI 模式\"></a>CLI 模式</h3><ul>\n<li>Command Line Interface 的简称，支持 windows 和 Linux 平台</li>\n<li>直接在命令行运行，不需要 http server, 例如 php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用 PHP-CLI 和 GTK 包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI-模式\"><a href=\"#CGI-模式\" class=\"headerlink\" title=\"CGI 模式\"></a>CGI 模式</h3><ul>\n<li>Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行</li>\n<li>生成一个 php-cgi 进程，并执行 php 程序</li>\n<li>执行结果返回给 http 服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI-模式\"><a href=\"#FastCGI-模式\" class=\"headerlink\" title=\"FastCGI 模式\"></a>FastCGI 模式</h3><ul>\n<li>快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)</li>\n<li>FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接</li>\n<li>当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把 PHP 作为 web 服务器的一个模块运行</li>\n<li>IIS 的 ISAPI 和 Apache 的 apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache 监听一个用户请求 index.php</li>\n<li>apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP</li>\n<li>在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook</li>\n<li>php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。</li>\n<li>php 执行完成后数据通过。so 或 dll 返回给 apache</li>\n<li>apache 将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP 写入文件权限失败 file_put_contents: failed to open stream: Permission denied","date":"2019-06-08T10:16:44.000Z","top":0,"_content":"\n### 问题\n\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n\n### 解决过程\n\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中\n\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n\n如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。\n在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：\n\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\n\nlinux 系统中默认的 umask 为 022，与我们的 777& 运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。\n\n### 最后解决方案\n\n先创建目录，再使用 chmod 将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","raw":"---\ntitle: 'PHP 写入文件权限失败 file_put_contents: failed to open stream: Permission denied'\ndate: 2019-06-08 18:16:44\ntags: [php]\ncategories: \"php\"\ntop: 0\n---\n\n### 问题\n\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n\n### 解决过程\n\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中\n\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n\n如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。\n在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：\n\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\n\nlinux 系统中默认的 umask 为 022，与我们的 777& 运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。\n\n### 最后解决方案\n\n先创建目录，再使用 chmod 将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied","published":1,"updated":"2019-08-01T02:44:14.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosb000c0gs6gfx6gcc1","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。<br>在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux 系统中默认的 umask 为 022，与我们的 777&amp; 运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用 chmod 将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。<br>在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux 系统中默认的 umask 为 022，与我们的 777&amp; 运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用 chmod 将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"docker+mysql 主从配置","date":"2019-03-28T08:15:38.000Z","top":0,"_content":"\n### 1. 安装启动 docker\n\n```bash\nyum install docker\nsystemctl start docker\n```\n\n### 2. 启动 docker 容器\n\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n\n### 3. 修改 mysql 配置文件\n\n这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入\n\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n\n重启从库容器\n\n### 4. 配置 mysql 主从\n\n远程连接主库和从库\n\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n\n### 5. 测试接口\n\n主库中添加表，查看从库是否同步\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/docker-mysql主从配置.md","raw":"---\ntitle: docker+mysql 主从配置\ndate: 2019-03-28 16:15:38\ntags: [docker, mysql]\ntop: 0\n---\n\n### 1. 安装启动 docker\n\n```bash\nyum install docker\nsystemctl start docker\n```\n\n### 2. 启动 docker 容器\n\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n\n### 3. 修改 mysql 配置文件\n\n这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入\n\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n\n重启从库容器\n\n### 4. 配置 mysql 主从\n\n远程连接主库和从库\n\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n\n### 5. 测试接口\n\n主库中添加表，查看从库是否同步\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"docker-mysql主从配置","published":1,"updated":"2019-08-01T02:43:19.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosd000d0gs6hzt2ho2p","content":"<h3 id=\"1-安装启动-docker\"><a href=\"#1-安装启动-docker\" class=\"headerlink\" title=\"1. 安装启动 docker\"></a>1. 安装启动 docker</h3><pre><code class=\"lang-bash\">yum install docker\nsystemctl start docker\n</code></pre>\n<h3 id=\"2-启动-docker-容器\"><a href=\"#2-启动-docker-容器\" class=\"headerlink\" title=\"2. 启动 docker 容器\"></a>2. 启动 docker 容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改-mysql-配置文件\"><a href=\"#3-修改-mysql-配置文件\" class=\"headerlink\" title=\"3. 修改 mysql 配置文件\"></a>3. 修改 mysql 配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置-mysql-主从\"><a href=\"#4-配置-mysql-主从\" class=\"headerlink\" title=\"4. 配置 mysql 主从\"></a>4. 配置 mysql 主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5. 测试接口\"></a>5. 测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-安装启动-docker\"><a href=\"#1-安装启动-docker\" class=\"headerlink\" title=\"1. 安装启动 docker\"></a>1. 安装启动 docker</h3><pre><code class=\"lang-bash\">yum install docker\nsystemctl start docker\n</code></pre>\n<h3 id=\"2-启动-docker-容器\"><a href=\"#2-启动-docker-容器\" class=\"headerlink\" title=\"2. 启动 docker 容器\"></a>2. 启动 docker 容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改-mysql-配置文件\"><a href=\"#3-修改-mysql-配置文件\" class=\"headerlink\" title=\"3. 修改 mysql 配置文件\"></a>3. 修改 mysql 配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置-mysql-主从\"><a href=\"#4-配置-mysql-主从\" class=\"headerlink\" title=\"4. 配置 mysql 主从\"></a>4. 配置 mysql 主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5. 测试接口\"></a>5. 测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"git 入门","date":"2019-04-20T02:25:48.000Z","top":0,"_content":"\n### 安装\n\n- Windows\n\n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n\n```bash\nyum install git / apt-get install git\n```\n\n安装后执行，正常显示则安装正常\n\n```bash\ngit --version\n```\n\n### 使用\n\n#### 生成 ssh\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\"\n```\n\n\"xxx@xxxxx.com\" 是 git 的账号，完成三次回车，即可生成 ssh key。\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n把 ssh key 绑定到 git 平台，绑定后输入命令验证\n\n```bash\nssh -T git@github.com\n```\n\n#### 关联 git 仓库\n\n- 在工作目录中初始化新仓库\n\n  ```bash\n  git init\n  ```\n\n  绑定远程仓库\n\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n\n- 从现有仓库克隆\n\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/git入门.md","raw":"---\ntitle: git 入门\ndate: 2019-04-20 10:25:48\ntags:\ntop: 0\n---\n\n### 安装\n\n- Windows\n\n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n\n```bash\nyum install git / apt-get install git\n```\n\n安装后执行，正常显示则安装正常\n\n```bash\ngit --version\n```\n\n### 使用\n\n#### 生成 ssh\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\"\n```\n\n\"xxx@xxxxx.com\" 是 git 的账号，完成三次回车，即可生成 ssh key。\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n把 ssh key 绑定到 git 平台，绑定后输入命令验证\n\n```bash\nssh -T git@github.com\n```\n\n#### 关联 git 仓库\n\n- 在工作目录中初始化新仓库\n\n  ```bash\n  git init\n  ```\n\n  绑定远程仓库\n\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n\n- 从现有仓库克隆\n\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"git入门","published":1,"updated":"2019-08-01T02:43:36.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosf000h0gs69n95lze9","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n</li>\n</ul>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是 git 的账号，完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把 ssh key 绑定到 git 平台，绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联-git-仓库\"><a href=\"#关联-git-仓库\" class=\"headerlink\" title=\"关联 git 仓库\"></a>关联 git 仓库</h4><ul>\n<li><p>在工作目录中初始化新仓库</p>\n<pre><code class=\"lang-bash\">git init\n</code></pre>\n<p>绑定远程仓库</p>\n<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n<li><p>从现有仓库克隆</p>\n<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n</li>\n</ul>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是 git 的账号，完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把 ssh key 绑定到 git 平台，绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联-git-仓库\"><a href=\"#关联-git-仓库\" class=\"headerlink\" title=\"关联 git 仓库\"></a>关联 git 仓库</h4><ul>\n<li><p>在工作目录中初始化新仓库</p>\n<pre><code class=\"lang-bash\">git init\n</code></pre>\n<p>绑定远程仓库</p>\n<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n<li><p>从现有仓库克隆</p>\n<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"golang 封装日志","top":1,"date":"2019-07-03T09:54:20.000Z","_content":"\n### 问题\n\ngolang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能\n- 按天记录日志\n- 日志按不同级别分开\n- 日志放到统一的文件夹\n\n### 解决方案\n\n```go\nvar (\n\tInfo    *log.Logger\n\tWarning *log.Logger\n\tError   *log.Logger\n\tDebug   *log.Logger\n)\n\nfunc init() {\n\tInfo = log.New(newLogFile(\"info\"), \"\\nInfo:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tDebug = log.New(newLogFile(\"debug\"), \"\\nDebug:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tWarning = log.New(newLogFile(\"warning\"), \"\\nWarning:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tError = log.New(newLogFile(\"error\"), \"\\nError:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n\ttoday := time.Now().Format(\"2006-01-02\")\n\treturn \"./logs/\" + level + today + \".log\"\n}\nfunc newLogFile(level string) *os.File {\n\tfilename := todayFileName(level)\n\tf, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n\tif err != nil {\n\t\tlog.Fatalln(\"打开日志文件失败：\", err)\n\t}\n\treturn f\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/golang封装日志.md","raw":"---\ntitle: golang 封装日志\ntop: 1\ndate: 2019-07-03 17:54:20\ntags: [\"golang\"]\n---\n\n### 问题\n\ngolang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能\n- 按天记录日志\n- 日志按不同级别分开\n- 日志放到统一的文件夹\n\n### 解决方案\n\n```go\nvar (\n\tInfo    *log.Logger\n\tWarning *log.Logger\n\tError   *log.Logger\n\tDebug   *log.Logger\n)\n\nfunc init() {\n\tInfo = log.New(newLogFile(\"info\"), \"\\nInfo:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tDebug = log.New(newLogFile(\"debug\"), \"\\nDebug:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tWarning = log.New(newLogFile(\"warning\"), \"\\nWarning:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tError = log.New(newLogFile(\"error\"), \"\\nError:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n\ttoday := time.Now().Format(\"2006-01-02\")\n\treturn \"./logs/\" + level + today + \".log\"\n}\nfunc newLogFile(level string) *os.File {\n\tfilename := todayFileName(level)\n\tf, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n\tif err != nil {\n\t\tlog.Fatalln(\"打开日志文件失败：\", err)\n\t}\n\treturn f\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"golang封装日志","published":1,"updated":"2019-08-01T02:43:42.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosg000j0gs6znrz7jwb","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>golang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能</p>\n<ul>\n<li>按天记录日志</li>\n<li>日志按不同级别分开</li>\n<li>日志放到统一的文件夹</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre><code class=\"lang-go\">var (\n    Info    *log.Logger\n    Warning *log.Logger\n    Error   *log.Logger\n    Debug   *log.Logger\n)\n\nfunc init() {\n    Info = log.New(newLogFile(&quot;info&quot;), &quot;\\nInfo:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Debug = log.New(newLogFile(&quot;debug&quot;), &quot;\\nDebug:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Warning = log.New(newLogFile(&quot;warning&quot;), &quot;\\nWarning:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Error = log.New(newLogFile(&quot;error&quot;), &quot;\\nError:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n    today := time.Now().Format(&quot;2006-01-02&quot;)\n    return &quot;./logs/&quot; + level + today + &quot;.log&quot;\n}\nfunc newLogFile(level string) *os.File {\n    filename := todayFileName(level)\n    f, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n    if err != nil {\n        log.Fatalln(&quot;打开日志文件失败：&quot;, err)\n    }\n    return f\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>golang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能</p>\n<ul>\n<li>按天记录日志</li>\n<li>日志按不同级别分开</li>\n<li>日志放到统一的文件夹</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre><code class=\"lang-go\">var (\n    Info    *log.Logger\n    Warning *log.Logger\n    Error   *log.Logger\n    Debug   *log.Logger\n)\n\nfunc init() {\n    Info = log.New(newLogFile(&quot;info&quot;), &quot;\\nInfo:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Debug = log.New(newLogFile(&quot;debug&quot;), &quot;\\nDebug:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Warning = log.New(newLogFile(&quot;warning&quot;), &quot;\\nWarning:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Error = log.New(newLogFile(&quot;error&quot;), &quot;\\nError:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n    today := time.Now().Format(&quot;2006-01-02&quot;)\n    return &quot;./logs/&quot; + level + today + &quot;.log&quot;\n}\nfunc newLogFile(level string) *os.File {\n    filename := todayFileName(level)\n    f, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n    if err != nil {\n        log.Fatalln(&quot;打开日志文件失败：&quot;, err)\n    }\n    return f\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"layout":"vscode","title":"golang无法安装golang.org安装包的问题","date":"2019-03-28T08:44:37.000Z","top":0,"_content":"### 一、问题\n今天在安装vscode时，报错\n```bash \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/golang无法安装golang-org安装包的问题.md","raw":"---\nlayout: vscode\ntitle: golang无法安装golang.org安装包的问题\ndate: 2019-03-28 16:44:37\ntags: [vscode,golang]\ncategories: \"golang\"\ntop: 0\n---\n### 一、问题\n今天在安装vscode时，报错\n```bash \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"golang无法安装golang-org安装包的问题","published":1,"updated":"2019-11-02T04:49:42.358Z","comments":1,"photos":[],"link":"","_id":"ck2lahosh000m0gs66ux583gb","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code class=\"lang-bash\">github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code class=\"lang-bash\">github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"Hello World","top":0,"_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntop: 0\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-07-01T06:06:37.242Z","updated":"2019-08-01T02:43:49.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosi000p0gs63n1z52oc","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"mysql字段类型详解","top":1,"date":"2019-08-15T08:35:38.000Z","_content":"### 字符串类型\n|类型|范围|说明|\n|:-----  |:-----|-----|\n|char(M)|M=1~255字符|固定长度|\n|varchar(M)|一行中所有varchar的列所占用的字节数不能超过65535字节|存储可变长度的M个字符|\n|tinytext|最大长度255|可变长度|\n|text|最大长度65535|可变长度|\n|mediumtext|最大长度16777215|可变长度|\n|longtext|最大长度4294967295|可变长度|\n|enum|集合最大数目为65535|只能插入列表中的值|\n\n\n### 时间类型\n|类型|存储空间(字节)|格式|取值范围|\n|:-----  |:-----|:-----|-----|\n|date | 3  |YYYY-MM-DD |1000-01-01~9999-12-31|\n|time | 3~6  |HH:MM:SS[微秒值] |-838:59:59~838:59:59|\n|year | 1  |YYYY |1907~2155|\n|datetime |5~8 |YYYY-MM-DD HH:MM:SS[微秒值]  |1000-01-01 00:00:00~9999-12-31 23:59:59|\n|timestamp | 4~7 |YYYY-MM-DD HH:MM:SS[微秒值]  |1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC|\n\n|微秒|存储空间(字节)|      \n|:-----  |-----|         \n|0 |0|\n|1,2  |1|\n|3,4  |2|\n|5,6  |3|\n\n\n\n### 整数类型\n\n|类型|存储空间(字节)|属性|取值范围|\n|:-----  |:-----|:-----|-----|\n|tinyint | 1  |signed/unsigned |-128~127/0~255|\n|smallint | 2  |signed/unsigned |-32768~32767/0~65535|\n|mediumint | 3  |signed/unsigned |-8388608~8388607/0~16777215|\n|int | 4  |signed/unsigned |-2147483648~2147483647/0~4294967295|\n|bigint | 8  |signed/unsigned |-9223372036854775808~9223372036854775807/0~18446744073709551615|\n\n### 浮点类型\n\n|类型|存储空间(字节)|是否精确类型|\n|:-----  |:-----|-----|\n|float | 4  |否 |\n|double | 8  |否 |\n|decimal | 每4个字节存9个数字，小数点占一个字节  |是 |\n\n","source":"_posts/mysql字段类型详解.md","raw":"---\ntitle: mysql字段类型详解\ntop: 1\ndate: 2019-08-15 16:35:38\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 字符串类型\n|类型|范围|说明|\n|:-----  |:-----|-----|\n|char(M)|M=1~255字符|固定长度|\n|varchar(M)|一行中所有varchar的列所占用的字节数不能超过65535字节|存储可变长度的M个字符|\n|tinytext|最大长度255|可变长度|\n|text|最大长度65535|可变长度|\n|mediumtext|最大长度16777215|可变长度|\n|longtext|最大长度4294967295|可变长度|\n|enum|集合最大数目为65535|只能插入列表中的值|\n\n\n### 时间类型\n|类型|存储空间(字节)|格式|取值范围|\n|:-----  |:-----|:-----|-----|\n|date | 3  |YYYY-MM-DD |1000-01-01~9999-12-31|\n|time | 3~6  |HH:MM:SS[微秒值] |-838:59:59~838:59:59|\n|year | 1  |YYYY |1907~2155|\n|datetime |5~8 |YYYY-MM-DD HH:MM:SS[微秒值]  |1000-01-01 00:00:00~9999-12-31 23:59:59|\n|timestamp | 4~7 |YYYY-MM-DD HH:MM:SS[微秒值]  |1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC|\n\n|微秒|存储空间(字节)|      \n|:-----  |-----|         \n|0 |0|\n|1,2  |1|\n|3,4  |2|\n|5,6  |3|\n\n\n\n### 整数类型\n\n|类型|存储空间(字节)|属性|取值范围|\n|:-----  |:-----|:-----|-----|\n|tinyint | 1  |signed/unsigned |-128~127/0~255|\n|smallint | 2  |signed/unsigned |-32768~32767/0~65535|\n|mediumint | 3  |signed/unsigned |-8388608~8388607/0~16777215|\n|int | 4  |signed/unsigned |-2147483648~2147483647/0~4294967295|\n|bigint | 8  |signed/unsigned |-9223372036854775808~9223372036854775807/0~18446744073709551615|\n\n### 浮点类型\n\n|类型|存储空间(字节)|是否精确类型|\n|:-----  |:-----|-----|\n|float | 4  |否 |\n|double | 8  |否 |\n|decimal | 每4个字节存9个数字，小数点占一个字节  |是 |\n\n","slug":"mysql字段类型详解","published":1,"updated":"2019-08-16T02:20:08.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosk000t0gs6k045r9r3","content":"<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char(M)</td>\n<td style=\"text-align:left\">M=1~255字符</td>\n<td>固定长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">varchar(M)</td>\n<td style=\"text-align:left\">一行中所有varchar的列所占用的字节数不能超过65535字节</td>\n<td>存储可变长度的M个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tinytext</td>\n<td style=\"text-align:left\">最大长度255</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">最大长度65535</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td style=\"text-align:left\">最大长度16777215</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td style=\"text-align:left\">最大长度4294967295</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enum</td>\n<td style=\"text-align:left\">集合最大数目为65535</td>\n<td>只能插入列表中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th style=\"text-align:left\">格式</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">YYYY-MM-DD</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:left\">3~6</td>\n<td style=\"text-align:left\">HH:MM:SS[微秒值]</td>\n<td>-838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">year</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">YYYY</td>\n<td>1907~2155</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">datetime</td>\n<td style=\"text-align:left\">5~8</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS[微秒值]</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">4~7</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS[微秒值]</td>\n<td>1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">微秒</th>\n<th>存储空间(字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1,2</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3,4</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5,6</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th style=\"text-align:left\">属性</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-128~127/0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">smallint</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-32768~32767/0~65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumint</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-8388608~8388607/0~16777215</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-2147483648~2147483647/0~4294967295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-9223372036854775808~9223372036854775807/0~18446744073709551615</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th>是否精确类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td style=\"text-align:left\">每4个字节存9个数字，小数点占一个字节</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char(M)</td>\n<td style=\"text-align:left\">M=1~255字符</td>\n<td>固定长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">varchar(M)</td>\n<td style=\"text-align:left\">一行中所有varchar的列所占用的字节数不能超过65535字节</td>\n<td>存储可变长度的M个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tinytext</td>\n<td style=\"text-align:left\">最大长度255</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">最大长度65535</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td style=\"text-align:left\">最大长度16777215</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td style=\"text-align:left\">最大长度4294967295</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enum</td>\n<td style=\"text-align:left\">集合最大数目为65535</td>\n<td>只能插入列表中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th style=\"text-align:left\">格式</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">YYYY-MM-DD</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:left\">3~6</td>\n<td style=\"text-align:left\">HH:MM:SS[微秒值]</td>\n<td>-838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">year</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">YYYY</td>\n<td>1907~2155</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">datetime</td>\n<td style=\"text-align:left\">5~8</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS[微秒值]</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">4~7</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS[微秒值]</td>\n<td>1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">微秒</th>\n<th>存储空间(字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1,2</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3,4</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5,6</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th style=\"text-align:left\">属性</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-128~127/0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">smallint</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-32768~32767/0~65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumint</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-8388608~8388607/0~16777215</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-2147483648~2147483647/0~4294967295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-9223372036854775808~9223372036854775807/0~18446744073709551615</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间(字节)</th>\n<th>是否精确类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td style=\"text-align:left\">每4个字节存9个数字，小数点占一个字节</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"mysql存储引擎详解","top":1,"date":"2019-08-15T08:38:43.000Z","_content":"\n### InnoDB\n\n### MyIASM\n\n### Memory\n\n","source":"_posts/mysql存储引擎详解.md","raw":"---\ntitle: mysql存储引擎详解\ntop: 1\ndate: 2019-08-15 16:38:43\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### InnoDB\n\n### MyIASM\n\n### Memory\n\n","slug":"mysql存储引擎详解","published":1,"updated":"2019-08-16T10:34:26.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosl000v0gs6kyf6xhq0","content":"<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h3 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h3><h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h3 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h3><h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3>"},{"title":"mysql事务","top":1,"date":"2019-08-10T03:18:32.000Z","_content":"### 事务\n- 事务是数据库执行操作的最小逻辑单元\n- 事务可以由一个或多个SQL组成\n- 组成事务的SQL或全部成功或全部失败\n### 特性\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n### 并发问题\n#### 脏读\n- 一个事务读取了另一个事务未提交的数据\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n|select score from course where id=1 /*score=10*/| |\n||rollback; |\n\n#### 不可重复读\n- 一个事务前后两次读取同一数据不一致\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n| |commit|\n|select score from course where id=1 /*score=10*/| |\n|commit||\n\n#### 幻读\n- 一个事务前后两次读取结果集记录数不一致\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select id,score from course where score>9 and score<10 /*1,9.2 - 2,9.4*/| |\n| |start transation;|\n| |update course set score=9.5 where id=3|\n| |commit|\n|select id,score from course where score>9 and score<10/*1,9.2 - 2,9.4 -3,9.5* /| |\n|commit||\n\n### INNODB事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|隔离性|并发性|\n|----- |-----|-----|-----|-----|-----|\n|串行化 |N|N|N|最高|最低|\n|可重复读 |N|N|N|||\n|已提交读 |N|Y|Y|||\n|未提交读 |Y|Y|Y|最低|最高|\n\n### INNODB锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 事务阻塞\n- 由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源\n#### 发现阻塞\n```mysql\nselect waiting_pid as '被阻塞线程', waiting_query as '被阻塞SQL',blocking_pid as '阻塞线程',\nblocking_query as '阻塞SQL',wait_age as '阻塞时间',sql_kill_blocking_query as '建议操作' from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))>30\n```\n#### 解决阻塞\n- 终止占用资源的事务\n- 优化占用资源的事务SQL\n\n### 死锁\n- 并行执行的多个事务互相占用了对方需要的资源\n#### 发现死锁\n```\nset global innodb_print_all_deadlocks=on;\n```\n#### 解决死锁\n- 数据库自行回滚占用资源少的事务\n- 并发事务按相同顺序占用资源","source":"_posts/mysql事务.md","raw":"---\ntitle: mysql事务\ntop: 1\ndate: 2019-08-10 11:18:32\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 事务\n- 事务是数据库执行操作的最小逻辑单元\n- 事务可以由一个或多个SQL组成\n- 组成事务的SQL或全部成功或全部失败\n### 特性\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n### 并发问题\n#### 脏读\n- 一个事务读取了另一个事务未提交的数据\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n|select score from course where id=1 /*score=10*/| |\n||rollback; |\n\n#### 不可重复读\n- 一个事务前后两次读取同一数据不一致\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n| |commit|\n|select score from course where id=1 /*score=10*/| |\n|commit||\n\n#### 幻读\n- 一个事务前后两次读取结果集记录数不一致\n\n|事务1|事务2|\n|----- |-----|\n|start transation;| |\n|select id,score from course where score>9 and score<10 /*1,9.2 - 2,9.4*/| |\n| |start transation;|\n| |update course set score=9.5 where id=3|\n| |commit|\n|select id,score from course where score>9 and score<10/*1,9.2 - 2,9.4 -3,9.5* /| |\n|commit||\n\n### INNODB事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|隔离性|并发性|\n|----- |-----|-----|-----|-----|-----|\n|串行化 |N|N|N|最高|最低|\n|可重复读 |N|N|N|||\n|已提交读 |N|Y|Y|||\n|未提交读 |Y|Y|Y|最低|最高|\n\n### INNODB锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 事务阻塞\n- 由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源\n#### 发现阻塞\n```mysql\nselect waiting_pid as '被阻塞线程', waiting_query as '被阻塞SQL',blocking_pid as '阻塞线程',\nblocking_query as '阻塞SQL',wait_age as '阻塞时间',sql_kill_blocking_query as '建议操作' from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))>30\n```\n#### 解决阻塞\n- 终止占用资源的事务\n- 优化占用资源的事务SQL\n\n### 死锁\n- 并行执行的多个事务互相占用了对方需要的资源\n#### 发现死锁\n```\nset global innodb_print_all_deadlocks=on;\n```\n#### 解决死锁\n- 数据库自行回滚占用资源少的事务\n- 并发事务按相同顺序占用资源","slug":"mysql事务","published":1,"updated":"2019-11-02T08:05:49.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosm000y0gs6yj6yzo0e","content":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><ul>\n<li>事务是数据库执行操作的最小逻辑单元</li>\n<li>事务可以由一个或多个SQL组成</li>\n<li>组成事务的SQL或全部成功或全部失败<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3>|特征|说明|<br>|:——- |——-|<br>|原子性（A）|一个事务的所有操作，或全部成功或全部失败|<br>|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性<br>|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见<br>|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><ul>\n<li>一个事务读取了另一个事务未提交的数据</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>rollback;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><ul>\n<li>一个事务前后两次读取同一数据不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><ul>\n<li>一个事务前后两次读取结果集记录数不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10 /<em>1,9.2 - 2,9.4</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=9.5 where id=3</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10/<em>1,9.2 - 2,9.4 -3,9.5</em> /</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB事务隔离级别\"><a href=\"#INNODB事务隔离级别\" class=\"headerlink\" title=\"INNODB事务隔离级别\"></a>INNODB事务隔离级别</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>隔离性</th>\n<th>并发性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>串行化</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>最高</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>未提交读</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>最低</td>\n<td>最高</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB锁\"><a href=\"#INNODB锁\" class=\"headerlink\" title=\"INNODB锁\"></a>INNODB锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"事务阻塞\"><a href=\"#事务阻塞\" class=\"headerlink\" title=\"事务阻塞\"></a>事务阻塞</h3><ul>\n<li>由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源<h4 id=\"发现阻塞\"><a href=\"#发现阻塞\" class=\"headerlink\" title=\"发现阻塞\"></a>发现阻塞</h4><pre><code class=\"lang-mysql\">select waiting_pid as &#39;被阻塞线程&#39;, waiting_query as &#39;被阻塞SQL&#39;,blocking_pid as &#39;阻塞线程&#39;,\nblocking_query as &#39;阻塞SQL&#39;,wait_age as &#39;阻塞时间&#39;,sql_kill_blocking_query as &#39;建议操作&#39; from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))&gt;30\n</code></pre>\n<h4 id=\"解决阻塞\"><a href=\"#解决阻塞\" class=\"headerlink\" title=\"解决阻塞\"></a>解决阻塞</h4></li>\n<li>终止占用资源的事务</li>\n<li>优化占用资源的事务SQL</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li>并行执行的多个事务互相占用了对方需要的资源<h4 id=\"发现死锁\"><a href=\"#发现死锁\" class=\"headerlink\" title=\"发现死锁\"></a>发现死锁</h4><pre><code>set global innodb_print_all_deadlocks=on;\n</code></pre><h4 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h4></li>\n<li>数据库自行回滚占用资源少的事务</li>\n<li>并发事务按相同顺序占用资源</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><ul>\n<li>事务是数据库执行操作的最小逻辑单元</li>\n<li>事务可以由一个或多个SQL组成</li>\n<li>组成事务的SQL或全部成功或全部失败<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3>|特征|说明|<br>|:——- |——-|<br>|原子性（A）|一个事务的所有操作，或全部成功或全部失败|<br>|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性<br>|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见<br>|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复</li>\n</ul>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><ul>\n<li>一个事务读取了另一个事务未提交的数据</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>rollback;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><ul>\n<li>一个事务前后两次读取同一数据不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><ul>\n<li>一个事务前后两次读取结果集记录数不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务1</th>\n<th>事务2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10 /<em>1,9.2 - 2,9.4</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=9.5 where id=3</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10/<em>1,9.2 - 2,9.4 -3,9.5</em> /</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB事务隔离级别\"><a href=\"#INNODB事务隔离级别\" class=\"headerlink\" title=\"INNODB事务隔离级别\"></a>INNODB事务隔离级别</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>隔离性</th>\n<th>并发性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>串行化</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>最高</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>未提交读</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>最低</td>\n<td>最高</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB锁\"><a href=\"#INNODB锁\" class=\"headerlink\" title=\"INNODB锁\"></a>INNODB锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"事务阻塞\"><a href=\"#事务阻塞\" class=\"headerlink\" title=\"事务阻塞\"></a>事务阻塞</h3><ul>\n<li>由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源<h4 id=\"发现阻塞\"><a href=\"#发现阻塞\" class=\"headerlink\" title=\"发现阻塞\"></a>发现阻塞</h4><pre><code class=\"lang-mysql\">select waiting_pid as &#39;被阻塞线程&#39;, waiting_query as &#39;被阻塞SQL&#39;,blocking_pid as &#39;阻塞线程&#39;,\nblocking_query as &#39;阻塞SQL&#39;,wait_age as &#39;阻塞时间&#39;,sql_kill_blocking_query as &#39;建议操作&#39; from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))&gt;30\n</code></pre>\n<h4 id=\"解决阻塞\"><a href=\"#解决阻塞\" class=\"headerlink\" title=\"解决阻塞\"></a>解决阻塞</h4></li>\n<li>终止占用资源的事务</li>\n<li>优化占用资源的事务SQL</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li>并行执行的多个事务互相占用了对方需要的资源<h4 id=\"发现死锁\"><a href=\"#发现死锁\" class=\"headerlink\" title=\"发现死锁\"></a>发现死锁</h4><pre><code>set global innodb_print_all_deadlocks=on;\n</code></pre><h4 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h4></li>\n<li>数据库自行回滚占用资源少的事务</li>\n<li>并发事务按相同顺序占用资源</li>\n</ul>\n"},{"title":"mysql的sql优化（一）","top":1,"date":"2019-08-26T03:06:21.000Z","_content":"\n### 配置慢查询日志\n\n``` mysql\nset global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx秒\nset global log_queries_not_using_indexes= [ON|OFF]\n```\n\n### 分析慢查询日志\n\n``` mysql\nmysqldumpslow [options][logs]\npt-query-digest [options][files][dsn]\n```\n\n### 实时监控慢查询\n\n``` mysql\nselect id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time >=60;\n```\n\n### 分析执行计划\n\nexplain sql\n\n#### id 列\n\n* id表示查询执行顺序\n* id相同时由上到下执行\n* id不同时由大到小执行\n\n#### select_type 列\n\n|值|说明|\n|:----- |-----|\n|SIMPLE |不包含子查询或是union操作的查询|\n|PRIMARY |查询中如果包含任何子查询，那么最外层的查询则是PRIMARY|\n|SUBQUERY |SELECT列表中的子查询|\n|DEPENDENT SUBQUERY |依赖外部结果的子查询|\n|UNION  |UNION操作的第二个或是之后的查询的值为union|\n|DEPENDENT UNION |当UNION作为子查询的时候，第二或者第二个后的查询的select_type值|\n|UNION RESULT |UNION产生的结果集|\n|DERIVED |出现在from子句中的子查询|\n\n#### table 列\n\n* 指明从哪个表获取数据\n* <union M, N>由id列为M, N查询union产生的结果集\n* <derived N>/<subquery N> 由id列为N的查询产生的结果\n\n#### partitions\n\n* 对于分区表，显示查询的分区id\n* 对于非分区表，显示null\n\n#### type\n\n性能由高到低\n\n|值|说明|\n|:----- |-----|\n|NULL |MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成|\n|system |cost连接类型的一个特例，当查询的表只有一行时使用|\n|const |表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式|\n|eq_ref |唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配|\n|ref |非唯一索引查找，返回匹配某个单独值的所有行|\n|ref_or_null |类似与ref类型查询，但是附加了对null值列的查询|\n|index_merge |使用了索引合并优化|\n|range |索引范围扫描，常见于between, >, <这样的查询条件|\n|index |全索引扫描，遍历索引树|\n|all |全表扫描，效率最差|\n\n#### possible_keys\n\n* 查询时可能使用的索引\n\n#### key\n\n* 查询时实际使用的索引\n\n#### key_len\n\n* 实际使用索引的最大长度\n\n#### ref\n\n* 哪些列或产量用于索引查找\n\n#### rows\n\n* 根据统计信息预估扫描行数\n\n#### filtered\n\n* 返回结果行数占读取行数的百分比\n\n#### extra\n\n|值|说明|\n|:----- |-----|\n|Distinct |优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作|\n|Not exists |使用not exist优化查询|\n|Using filesort |使用文件来排序，通常会出现在order by或groub by查询|\n|Using index |使用覆盖索引进行查询|\n|Using temporary|使用临时表进行处理查询，常见于排序，子查询和分组查询|\n|Using where|使用where条件过滤数据|\n|select tables optimized away|直接通过索引获取数据，不用访问表|\n\n","source":"_posts/mysql的sql优化（一）.md","raw":"---\ntitle: mysql的sql优化（一）\ntop: 1\ndate: 2019-08-26 11:06:21\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 配置慢查询日志\n\n``` mysql\nset global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx秒\nset global log_queries_not_using_indexes= [ON|OFF]\n```\n\n### 分析慢查询日志\n\n``` mysql\nmysqldumpslow [options][logs]\npt-query-digest [options][files][dsn]\n```\n\n### 实时监控慢查询\n\n``` mysql\nselect id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time >=60;\n```\n\n### 分析执行计划\n\nexplain sql\n\n#### id 列\n\n* id表示查询执行顺序\n* id相同时由上到下执行\n* id不同时由大到小执行\n\n#### select_type 列\n\n|值|说明|\n|:----- |-----|\n|SIMPLE |不包含子查询或是union操作的查询|\n|PRIMARY |查询中如果包含任何子查询，那么最外层的查询则是PRIMARY|\n|SUBQUERY |SELECT列表中的子查询|\n|DEPENDENT SUBQUERY |依赖外部结果的子查询|\n|UNION  |UNION操作的第二个或是之后的查询的值为union|\n|DEPENDENT UNION |当UNION作为子查询的时候，第二或者第二个后的查询的select_type值|\n|UNION RESULT |UNION产生的结果集|\n|DERIVED |出现在from子句中的子查询|\n\n#### table 列\n\n* 指明从哪个表获取数据\n* <union M, N>由id列为M, N查询union产生的结果集\n* <derived N>/<subquery N> 由id列为N的查询产生的结果\n\n#### partitions\n\n* 对于分区表，显示查询的分区id\n* 对于非分区表，显示null\n\n#### type\n\n性能由高到低\n\n|值|说明|\n|:----- |-----|\n|NULL |MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成|\n|system |cost连接类型的一个特例，当查询的表只有一行时使用|\n|const |表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式|\n|eq_ref |唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配|\n|ref |非唯一索引查找，返回匹配某个单独值的所有行|\n|ref_or_null |类似与ref类型查询，但是附加了对null值列的查询|\n|index_merge |使用了索引合并优化|\n|range |索引范围扫描，常见于between, >, <这样的查询条件|\n|index |全索引扫描，遍历索引树|\n|all |全表扫描，效率最差|\n\n#### possible_keys\n\n* 查询时可能使用的索引\n\n#### key\n\n* 查询时实际使用的索引\n\n#### key_len\n\n* 实际使用索引的最大长度\n\n#### ref\n\n* 哪些列或产量用于索引查找\n\n#### rows\n\n* 根据统计信息预估扫描行数\n\n#### filtered\n\n* 返回结果行数占读取行数的百分比\n\n#### extra\n\n|值|说明|\n|:----- |-----|\n|Distinct |优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作|\n|Not exists |使用not exist优化查询|\n|Using filesort |使用文件来排序，通常会出现在order by或groub by查询|\n|Using index |使用覆盖索引进行查询|\n|Using temporary|使用临时表进行处理查询，常见于排序，子查询和分组查询|\n|Using where|使用where条件过滤数据|\n|select tables optimized away|直接通过索引获取数据，不用访问表|\n\n","slug":"mysql的sql优化（一）","published":1,"updated":"2019-11-02T08:23:13.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosn00100gs6b2g53qsi","content":"<h3 id=\"配置慢查询日志\"><a href=\"#配置慢查询日志\" class=\"headerlink\" title=\"配置慢查询日志\"></a>配置慢查询日志</h3><pre><code class=\"lang-mysql\">set global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx秒\nset global log_queries_not_using_indexes= [ON|OFF]\n</code></pre>\n<h3 id=\"分析慢查询日志\"><a href=\"#分析慢查询日志\" class=\"headerlink\" title=\"分析慢查询日志\"></a>分析慢查询日志</h3><pre><code class=\"lang-mysql\">mysqldumpslow [options][logs]\npt-query-digest [options][files][dsn]\n</code></pre>\n<h3 id=\"实时监控慢查询\"><a href=\"#实时监控慢查询\" class=\"headerlink\" title=\"实时监控慢查询\"></a>实时监控慢查询</h3><pre><code class=\"lang-mysql\">select id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time &gt;=60;\n</code></pre>\n<h3 id=\"分析执行计划\"><a href=\"#分析执行计划\" class=\"headerlink\" title=\"分析执行计划\"></a>分析执行计划</h3><p>explain sql</p>\n<h4 id=\"id-列\"><a href=\"#id-列\" class=\"headerlink\" title=\"id 列\"></a>id 列</h4><ul>\n<li>id表示查询执行顺序</li>\n<li>id相同时由上到下执行</li>\n<li>id不同时由大到小执行</li>\n</ul>\n<h4 id=\"select-type-列\"><a href=\"#select-type-列\" class=\"headerlink\" title=\"select_type 列\"></a>select_type 列</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SIMPLE</td>\n<td>不包含子查询或是union操作的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PRIMARY</td>\n<td>查询中如果包含任何子查询，那么最外层的查询则是PRIMARY</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUBQUERY</td>\n<td>SELECT列表中的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT SUBQUERY</td>\n<td>依赖外部结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION</td>\n<td>UNION操作的第二个或是之后的查询的值为union</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT UNION</td>\n<td>当UNION作为子查询的时候，第二或者第二个后的查询的select_type值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION RESULT</td>\n<td>UNION产生的结果集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DERIVED</td>\n<td>出现在from子句中的子查询</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"table-列\"><a href=\"#table-列\" class=\"headerlink\" title=\"table 列\"></a>table 列</h4><ul>\n<li>指明从哪个表获取数据</li>\n<li><union m, n>由id列为M, N查询union产生的结果集</union></li>\n<li><derived n>/<subquery n> 由id列为N的查询产生的结果</subquery></derived></li>\n</ul>\n<h4 id=\"partitions\"><a href=\"#partitions\" class=\"headerlink\" title=\"partitions\"></a>partitions</h4><ul>\n<li>对于分区表，显示查询的分区id</li>\n<li>对于非分区表，显示null</li>\n</ul>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>性能由高到低</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NULL</td>\n<td>MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">system</td>\n<td>cost连接类型的一个特例，当查询的表只有一行时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td>表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eq_ref</td>\n<td>唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref</td>\n<td>非唯一索引查找，返回匹配某个单独值的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref_or_null</td>\n<td>类似与ref类型查询，但是附加了对null值列的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index_merge</td>\n<td>使用了索引合并优化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">range</td>\n<td>索引范围扫描，常见于between, &gt;, &lt;这样的查询条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td>全索引扫描，遍历索引树</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td>全表扫描，效率最差</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h4><ul>\n<li>查询时可能使用的索引</li>\n</ul>\n<h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><ul>\n<li>查询时实际使用的索引</li>\n</ul>\n<h4 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h4><ul>\n<li>实际使用索引的最大长度</li>\n</ul>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ul>\n<li>哪些列或产量用于索引查找</li>\n</ul>\n<h4 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h4><ul>\n<li>根据统计信息预估扫描行数</li>\n</ul>\n<h4 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h4><ul>\n<li>返回结果行数占读取行数的百分比</li>\n</ul>\n<h4 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Distinct</td>\n<td>优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Not exists</td>\n<td>使用not exist优化查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using filesort</td>\n<td>使用文件来排序，通常会出现在order by或groub by查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using index</td>\n<td>使用覆盖索引进行查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using temporary</td>\n<td>使用临时表进行处理查询，常见于排序，子查询和分组查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using where</td>\n<td>使用where条件过滤数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">select tables optimized away</td>\n<td>直接通过索引获取数据，不用访问表</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"配置慢查询日志\"><a href=\"#配置慢查询日志\" class=\"headerlink\" title=\"配置慢查询日志\"></a>配置慢查询日志</h3><pre><code class=\"lang-mysql\">set global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx秒\nset global log_queries_not_using_indexes= [ON|OFF]\n</code></pre>\n<h3 id=\"分析慢查询日志\"><a href=\"#分析慢查询日志\" class=\"headerlink\" title=\"分析慢查询日志\"></a>分析慢查询日志</h3><pre><code class=\"lang-mysql\">mysqldumpslow [options][logs]\npt-query-digest [options][files][dsn]\n</code></pre>\n<h3 id=\"实时监控慢查询\"><a href=\"#实时监控慢查询\" class=\"headerlink\" title=\"实时监控慢查询\"></a>实时监控慢查询</h3><pre><code class=\"lang-mysql\">select id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time &gt;=60;\n</code></pre>\n<h3 id=\"分析执行计划\"><a href=\"#分析执行计划\" class=\"headerlink\" title=\"分析执行计划\"></a>分析执行计划</h3><p>explain sql</p>\n<h4 id=\"id-列\"><a href=\"#id-列\" class=\"headerlink\" title=\"id 列\"></a>id 列</h4><ul>\n<li>id表示查询执行顺序</li>\n<li>id相同时由上到下执行</li>\n<li>id不同时由大到小执行</li>\n</ul>\n<h4 id=\"select-type-列\"><a href=\"#select-type-列\" class=\"headerlink\" title=\"select_type 列\"></a>select_type 列</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SIMPLE</td>\n<td>不包含子查询或是union操作的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PRIMARY</td>\n<td>查询中如果包含任何子查询，那么最外层的查询则是PRIMARY</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUBQUERY</td>\n<td>SELECT列表中的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT SUBQUERY</td>\n<td>依赖外部结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION</td>\n<td>UNION操作的第二个或是之后的查询的值为union</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT UNION</td>\n<td>当UNION作为子查询的时候，第二或者第二个后的查询的select_type值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION RESULT</td>\n<td>UNION产生的结果集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DERIVED</td>\n<td>出现在from子句中的子查询</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"table-列\"><a href=\"#table-列\" class=\"headerlink\" title=\"table 列\"></a>table 列</h4><ul>\n<li>指明从哪个表获取数据</li>\n<li><union m, n>由id列为M, N查询union产生的结果集</union></li>\n<li><derived n>/<subquery n> 由id列为N的查询产生的结果</subquery></derived></li>\n</ul>\n<h4 id=\"partitions\"><a href=\"#partitions\" class=\"headerlink\" title=\"partitions\"></a>partitions</h4><ul>\n<li>对于分区表，显示查询的分区id</li>\n<li>对于非分区表，显示null</li>\n</ul>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>性能由高到低</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NULL</td>\n<td>MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">system</td>\n<td>cost连接类型的一个特例，当查询的表只有一行时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td>表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eq_ref</td>\n<td>唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref</td>\n<td>非唯一索引查找，返回匹配某个单独值的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref_or_null</td>\n<td>类似与ref类型查询，但是附加了对null值列的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index_merge</td>\n<td>使用了索引合并优化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">range</td>\n<td>索引范围扫描，常见于between, &gt;, &lt;这样的查询条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td>全索引扫描，遍历索引树</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td>全表扫描，效率最差</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h4><ul>\n<li>查询时可能使用的索引</li>\n</ul>\n<h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><ul>\n<li>查询时实际使用的索引</li>\n</ul>\n<h4 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h4><ul>\n<li>实际使用索引的最大长度</li>\n</ul>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ul>\n<li>哪些列或产量用于索引查找</li>\n</ul>\n<h4 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h4><ul>\n<li>根据统计信息预估扫描行数</li>\n</ul>\n<h4 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h4><ul>\n<li>返回结果行数占读取行数的百分比</li>\n</ul>\n<h4 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Distinct</td>\n<td>优化distinct操作，在找到第一匹配的元祖后即停止找同样值的动作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Not exists</td>\n<td>使用not exist优化查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using filesort</td>\n<td>使用文件来排序，通常会出现在order by或groub by查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using index</td>\n<td>使用覆盖索引进行查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using temporary</td>\n<td>使用临时表进行处理查询，常见于排序，子查询和分组查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using where</td>\n<td>使用where条件过滤数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">select tables optimized away</td>\n<td>直接通过索引获取数据，不用访问表</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"mysql的sql优化（二）","top":1,"date":"2019-08-16T10:01:44.000Z","_content":"\n### InnoDB支持索引类型\n\n* Btree索引\n\n - 以B+树的结构存储索引数据\n - 适用于全值匹配的查询（class_name='mysql', class_name in ('mysql', 'postgresql')）\n - 范围查找（study_cnt between 100 and 300, study_cnt >300）\n - 从索引最左侧列开始匹配查找列\n\n* 自适应HASH索引\n* 全文索引（elasticseach）\n* 空间索引\n\n### 建索引的列\n\n* where 子句中的列\n* 包含order by 、group by 、distinct中的字段\n* 多表join的关联列\n\n### 选择复合索引键的顺序\n- 区分度最高的列放在联合索引的最左侧\n- 使用最频繁的列放在联合索引的最左侧\n- 尽量把字段长度小的列放在联合索引的最左侧\n### Btree索引的限制\n- 只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键\n- not in 和 <>操作无法使用索引\n- 索引列上不能使用表达式或函数\n### 索引使用误区\n- 索引越多越好\n- 使用in列表查询不会使用到索引\n- 查询过滤顺序必须同索引键顺序相同才能使用到索引\n\n### sql改写原则\n- 使用outer in 代替not in (5.7以下)\n- 使用CTE代替子查询\n- 拆分复杂的大sql为多个简单的小sql\n- 巧用计算列优化查询","source":"_posts/mysql的sql优化（二）.md","raw":"---\ntitle: mysql的sql优化（二）\ntop: 1\ndate: 2019-08-16 18:01:44\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### InnoDB支持索引类型\n\n* Btree索引\n\n - 以B+树的结构存储索引数据\n - 适用于全值匹配的查询（class_name='mysql', class_name in ('mysql', 'postgresql')）\n - 范围查找（study_cnt between 100 and 300, study_cnt >300）\n - 从索引最左侧列开始匹配查找列\n\n* 自适应HASH索引\n* 全文索引（elasticseach）\n* 空间索引\n\n### 建索引的列\n\n* where 子句中的列\n* 包含order by 、group by 、distinct中的字段\n* 多表join的关联列\n\n### 选择复合索引键的顺序\n- 区分度最高的列放在联合索引的最左侧\n- 使用最频繁的列放在联合索引的最左侧\n- 尽量把字段长度小的列放在联合索引的最左侧\n### Btree索引的限制\n- 只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键\n- not in 和 <>操作无法使用索引\n- 索引列上不能使用表达式或函数\n### 索引使用误区\n- 索引越多越好\n- 使用in列表查询不会使用到索引\n- 查询过滤顺序必须同索引键顺序相同才能使用到索引\n\n### sql改写原则\n- 使用outer in 代替not in (5.7以下)\n- 使用CTE代替子查询\n- 拆分复杂的大sql为多个简单的小sql\n- 巧用计算列优化查询","slug":"mysql的sql优化（二）","published":1,"updated":"2019-08-16T10:42:41.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosq00120gs6m416fdrs","content":"<h3 id=\"InnoDB支持索引类型\"><a href=\"#InnoDB支持索引类型\" class=\"headerlink\" title=\"InnoDB支持索引类型\"></a>InnoDB支持索引类型</h3><ul>\n<li><p>Btree索引</p>\n<ul>\n<li>以B+树的结构存储索引数据</li>\n<li>适用于全值匹配的查询（class_name=’mysql’, class_name in (‘mysql’, ‘postgresql’)）</li>\n<li>范围查找（study_cnt between 100 and 300, study_cnt &gt;300）</li>\n<li>从索引最左侧列开始匹配查找列</li>\n</ul>\n</li>\n<li><p>自适应HASH索引</p>\n</li>\n<li>全文索引（elasticseach）</li>\n<li>空间索引</li>\n</ul>\n<h3 id=\"建索引的列\"><a href=\"#建索引的列\" class=\"headerlink\" title=\"建索引的列\"></a>建索引的列</h3><ul>\n<li>where 子句中的列</li>\n<li>包含order by 、group by 、distinct中的字段</li>\n<li>多表join的关联列</li>\n</ul>\n<h3 id=\"选择复合索引键的顺序\"><a href=\"#选择复合索引键的顺序\" class=\"headerlink\" title=\"选择复合索引键的顺序\"></a>选择复合索引键的顺序</h3><ul>\n<li>区分度最高的列放在联合索引的最左侧</li>\n<li>使用最频繁的列放在联合索引的最左侧</li>\n<li>尽量把字段长度小的列放在联合索引的最左侧<h3 id=\"Btree索引的限制\"><a href=\"#Btree索引的限制\" class=\"headerlink\" title=\"Btree索引的限制\"></a>Btree索引的限制</h3></li>\n<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>\n<li>not in 和 &lt;&gt;操作无法使用索引</li>\n<li>索引列上不能使用表达式或函数<h3 id=\"索引使用误区\"><a href=\"#索引使用误区\" class=\"headerlink\" title=\"索引使用误区\"></a>索引使用误区</h3></li>\n<li>索引越多越好</li>\n<li>使用in列表查询不会使用到索引</li>\n<li>查询过滤顺序必须同索引键顺序相同才能使用到索引</li>\n</ul>\n<h3 id=\"sql改写原则\"><a href=\"#sql改写原则\" class=\"headerlink\" title=\"sql改写原则\"></a>sql改写原则</h3><ul>\n<li>使用outer in 代替not in (5.7以下)</li>\n<li>使用CTE代替子查询</li>\n<li>拆分复杂的大sql为多个简单的小sql</li>\n<li>巧用计算列优化查询</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"InnoDB支持索引类型\"><a href=\"#InnoDB支持索引类型\" class=\"headerlink\" title=\"InnoDB支持索引类型\"></a>InnoDB支持索引类型</h3><ul>\n<li><p>Btree索引</p>\n<ul>\n<li>以B+树的结构存储索引数据</li>\n<li>适用于全值匹配的查询（class_name=’mysql’, class_name in (‘mysql’, ‘postgresql’)）</li>\n<li>范围查找（study_cnt between 100 and 300, study_cnt &gt;300）</li>\n<li>从索引最左侧列开始匹配查找列</li>\n</ul>\n</li>\n<li><p>自适应HASH索引</p>\n</li>\n<li>全文索引（elasticseach）</li>\n<li>空间索引</li>\n</ul>\n<h3 id=\"建索引的列\"><a href=\"#建索引的列\" class=\"headerlink\" title=\"建索引的列\"></a>建索引的列</h3><ul>\n<li>where 子句中的列</li>\n<li>包含order by 、group by 、distinct中的字段</li>\n<li>多表join的关联列</li>\n</ul>\n<h3 id=\"选择复合索引键的顺序\"><a href=\"#选择复合索引键的顺序\" class=\"headerlink\" title=\"选择复合索引键的顺序\"></a>选择复合索引键的顺序</h3><ul>\n<li>区分度最高的列放在联合索引的最左侧</li>\n<li>使用最频繁的列放在联合索引的最左侧</li>\n<li>尽量把字段长度小的列放在联合索引的最左侧<h3 id=\"Btree索引的限制\"><a href=\"#Btree索引的限制\" class=\"headerlink\" title=\"Btree索引的限制\"></a>Btree索引的限制</h3></li>\n<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>\n<li>not in 和 &lt;&gt;操作无法使用索引</li>\n<li>索引列上不能使用表达式或函数<h3 id=\"索引使用误区\"><a href=\"#索引使用误区\" class=\"headerlink\" title=\"索引使用误区\"></a>索引使用误区</h3></li>\n<li>索引越多越好</li>\n<li>使用in列表查询不会使用到索引</li>\n<li>查询过滤顺序必须同索引键顺序相同才能使用到索引</li>\n</ul>\n<h3 id=\"sql改写原则\"><a href=\"#sql改写原则\" class=\"headerlink\" title=\"sql改写原则\"></a>sql改写原则</h3><ul>\n<li>使用outer in 代替not in (5.7以下)</li>\n<li>使用CTE代替子查询</li>\n<li>拆分复杂的大sql为多个简单的小sql</li>\n<li>巧用计算列优化查询</li>\n</ul>\n"},{"title":"mysql 索引最左原则","date":"2019-05-06T23:52:59.000Z","top":0,"_content":"\n### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试 sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql索引最左原则问题.md","raw":"---\ntitle: mysql 索引最左原则\ndate: 2019-05-07 07:52:59\ntags:\ncategories: \"mysql\"\ntop: 0\n---\n\n### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试 sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql索引最左原则问题","published":1,"updated":"2019-08-01T02:43:53.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosr00150gs6mw3l2g49","content":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试-sql\"><a href=\"#测试-sql\" class=\"headerlink\" title=\"测试 sql\"></a>测试 sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试-sql\"><a href=\"#测试-sql\" class=\"headerlink\" title=\"测试 sql\"></a>测试 sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（一）版本类问题","top":1,"date":"2019-09-02T06:53:46.000Z","_content":"\n### 各个发行版区别及优缺点\n\n||MySQL|Percona MySQL|MariaDB|\n|---|--- |---|---|\n|服务器特性|开源 |开源|开源|\n||支持分区表 |支持分区表|支持分区表|\n||InnoDB |XtraDB|XtraDB|\n||企业版监控工具，社区版不提供 |Percon Monitor|Monyog|\n|高可用特性|基于日志点复制 |基于日志点复制|基于日志点复制|\n||基于Gtid复制 |基于Gtid复制|基于Gtid复制，但Gtid与MySQL不兼容|\n||MGR |MGR & PXC|Galera Cluster|\n||MySQL Router|Proxy SQL|MaxScale|\n|安全特性|企业版防火墙 |ProxySQL FireWall|MaxScale FireWall|\n||企业版用户审计 |审计日志|审计日志|\n||用户密码生命周期 |用户密码生命周期|-|\n||sha256_password caching_sha2_password |sha256_password caching_sha2_password |ed25519 sha256_password|\n|开发及管理|窗口函数（8.0） |窗口函数（8.0）|窗口函数（10.2）|\n||Super read_only |Super read_only|支持基于日志回滚，支持修改日志表中记录|\n\n### MySQL升级\n\n#### 升级前考虑问题\n\n* 升级给业务带来的益处 \n  + 是否解决业务某一方面痛点\n  + 是否解决运维某一方面痛点\n* 升级给业务带来的影响 \n  + 对原来业务程序支持是否有影响\n  + 对原来业务程序性能是否有影响\n* 数据库升级方案制定 \n  + 评估受影响业务系统\n  + 升级详细步骤\n  + 升级后的数据库环境检查\n  + 升级后业务检查\n* 升级失败回滚方案\n  + 升级失败回滚的步骤\n  + 回滚后的数据库环境检查\n  + 回滚后的业务检查\n\n#### 升级步骤\n\n* 对升级数据库进行备份\n* 升级slave服务器版本\n* 手动进行主从切换\n* 升级master服务器版本\n* 升级完成后进行业务检查\n\n### MySQL8.0新特性\n\n* 所有元数据使用InnoDB引擎存储，无frm文件\n* 系统表采用InnoDB存储并采用独立表空间\n* 支持定义资源管理组（目前仅支持CPU资源）\n* 支持不可见索引和降序索引，支持直方图优化\n* 支持窗口函数\n* 支持在线修改全局参数持久化\n* 默认使用caching_sha2_password认证插件\n* 新增支持定义角色（role）\n* 新增密码历史记录功能，限制重复使用密码\n* InnoDB DDL语句支持原子操作\n* 支持在线修改UNDO表空间\n* 新增管理视图用于监控InnoDB表状态\n* 新增innodb_dedicated_server配置 \n\n","source":"_posts/mysql面试（一）版本类问题.md","raw":"---\ntitle: mysql面试（一）版本类问题\ntop: 1\ndate: 2019-09-02 14:53:46\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 各个发行版区别及优缺点\n\n||MySQL|Percona MySQL|MariaDB|\n|---|--- |---|---|\n|服务器特性|开源 |开源|开源|\n||支持分区表 |支持分区表|支持分区表|\n||InnoDB |XtraDB|XtraDB|\n||企业版监控工具，社区版不提供 |Percon Monitor|Monyog|\n|高可用特性|基于日志点复制 |基于日志点复制|基于日志点复制|\n||基于Gtid复制 |基于Gtid复制|基于Gtid复制，但Gtid与MySQL不兼容|\n||MGR |MGR & PXC|Galera Cluster|\n||MySQL Router|Proxy SQL|MaxScale|\n|安全特性|企业版防火墙 |ProxySQL FireWall|MaxScale FireWall|\n||企业版用户审计 |审计日志|审计日志|\n||用户密码生命周期 |用户密码生命周期|-|\n||sha256_password caching_sha2_password |sha256_password caching_sha2_password |ed25519 sha256_password|\n|开发及管理|窗口函数（8.0） |窗口函数（8.0）|窗口函数（10.2）|\n||Super read_only |Super read_only|支持基于日志回滚，支持修改日志表中记录|\n\n### MySQL升级\n\n#### 升级前考虑问题\n\n* 升级给业务带来的益处 \n  + 是否解决业务某一方面痛点\n  + 是否解决运维某一方面痛点\n* 升级给业务带来的影响 \n  + 对原来业务程序支持是否有影响\n  + 对原来业务程序性能是否有影响\n* 数据库升级方案制定 \n  + 评估受影响业务系统\n  + 升级详细步骤\n  + 升级后的数据库环境检查\n  + 升级后业务检查\n* 升级失败回滚方案\n  + 升级失败回滚的步骤\n  + 回滚后的数据库环境检查\n  + 回滚后的业务检查\n\n#### 升级步骤\n\n* 对升级数据库进行备份\n* 升级slave服务器版本\n* 手动进行主从切换\n* 升级master服务器版本\n* 升级完成后进行业务检查\n\n### MySQL8.0新特性\n\n* 所有元数据使用InnoDB引擎存储，无frm文件\n* 系统表采用InnoDB存储并采用独立表空间\n* 支持定义资源管理组（目前仅支持CPU资源）\n* 支持不可见索引和降序索引，支持直方图优化\n* 支持窗口函数\n* 支持在线修改全局参数持久化\n* 默认使用caching_sha2_password认证插件\n* 新增支持定义角色（role）\n* 新增密码历史记录功能，限制重复使用密码\n* InnoDB DDL语句支持原子操作\n* 支持在线修改UNDO表空间\n* 新增管理视图用于监控InnoDB表状态\n* 新增innodb_dedicated_server配置 \n\n","slug":"mysql面试（一）版本类问题","published":1,"updated":"2019-11-04T05:54:14.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahoss00160gs68aux96na","content":"<h3 id=\"各个发行版区别及优缺点\"><a href=\"#各个发行版区别及优缺点\" class=\"headerlink\" title=\"各个发行版区别及优缺点\"></a>各个发行版区别及优缺点</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MySQL</th>\n<th>Percona MySQL</th>\n<th>MariaDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器特性</td>\n<td>开源</td>\n<td>开源</td>\n<td>开源</td>\n</tr>\n<tr>\n<td></td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>XtraDB</td>\n<td>XtraDB</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版监控工具，社区版不提供</td>\n<td>Percon Monitor</td>\n<td>Monyog</td>\n</tr>\n<tr>\n<td>高可用特性</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n</tr>\n<tr>\n<td></td>\n<td>基于Gtid复制</td>\n<td>基于Gtid复制</td>\n<td>基于Gtid复制，但Gtid与MySQL不兼容</td>\n</tr>\n<tr>\n<td></td>\n<td>MGR</td>\n<td>MGR &amp; PXC</td>\n<td>Galera Cluster</td>\n</tr>\n<tr>\n<td></td>\n<td>MySQL Router</td>\n<td>Proxy SQL</td>\n<td>MaxScale</td>\n</tr>\n<tr>\n<td>安全特性</td>\n<td>企业版防火墙</td>\n<td>ProxySQL FireWall</td>\n<td>MaxScale FireWall</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版用户审计</td>\n<td>审计日志</td>\n<td>审计日志</td>\n</tr>\n<tr>\n<td></td>\n<td>用户密码生命周期</td>\n<td>用户密码生命周期</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>sha256_password caching_sha2_password</td>\n<td>sha256_password caching_sha2_password</td>\n<td>ed25519 sha256_password</td>\n</tr>\n<tr>\n<td>开发及管理</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（10.2）</td>\n</tr>\n<tr>\n<td></td>\n<td>Super read_only</td>\n<td>Super read_only</td>\n<td>支持基于日志回滚，支持修改日志表中记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MySQL升级\"><a href=\"#MySQL升级\" class=\"headerlink\" title=\"MySQL升级\"></a>MySQL升级</h3><h4 id=\"升级前考虑问题\"><a href=\"#升级前考虑问题\" class=\"headerlink\" title=\"升级前考虑问题\"></a>升级前考虑问题</h4><ul>\n<li>升级给业务带来的益处 <ul>\n<li>是否解决业务某一方面痛点</li>\n<li>是否解决运维某一方面痛点</li>\n</ul>\n</li>\n<li>升级给业务带来的影响 <ul>\n<li>对原来业务程序支持是否有影响</li>\n<li>对原来业务程序性能是否有影响</li>\n</ul>\n</li>\n<li>数据库升级方案制定 <ul>\n<li>评估受影响业务系统</li>\n<li>升级详细步骤</li>\n<li>升级后的数据库环境检查</li>\n<li>升级后业务检查</li>\n</ul>\n</li>\n<li>升级失败回滚方案<ul>\n<li>升级失败回滚的步骤</li>\n<li>回滚后的数据库环境检查</li>\n<li>回滚后的业务检查</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h4><ul>\n<li>对升级数据库进行备份</li>\n<li>升级slave服务器版本</li>\n<li>手动进行主从切换</li>\n<li>升级master服务器版本</li>\n<li>升级完成后进行业务检查</li>\n</ul>\n<h3 id=\"MySQL8-0新特性\"><a href=\"#MySQL8-0新特性\" class=\"headerlink\" title=\"MySQL8.0新特性\"></a>MySQL8.0新特性</h3><ul>\n<li>所有元数据使用InnoDB引擎存储，无frm文件</li>\n<li>系统表采用InnoDB存储并采用独立表空间</li>\n<li>支持定义资源管理组（目前仅支持CPU资源）</li>\n<li>支持不可见索引和降序索引，支持直方图优化</li>\n<li>支持窗口函数</li>\n<li>支持在线修改全局参数持久化</li>\n<li>默认使用caching_sha2_password认证插件</li>\n<li>新增支持定义角色（role）</li>\n<li>新增密码历史记录功能，限制重复使用密码</li>\n<li>InnoDB DDL语句支持原子操作</li>\n<li>支持在线修改UNDO表空间</li>\n<li>新增管理视图用于监控InnoDB表状态</li>\n<li>新增innodb_dedicated_server配置 </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"各个发行版区别及优缺点\"><a href=\"#各个发行版区别及优缺点\" class=\"headerlink\" title=\"各个发行版区别及优缺点\"></a>各个发行版区别及优缺点</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MySQL</th>\n<th>Percona MySQL</th>\n<th>MariaDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器特性</td>\n<td>开源</td>\n<td>开源</td>\n<td>开源</td>\n</tr>\n<tr>\n<td></td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>XtraDB</td>\n<td>XtraDB</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版监控工具，社区版不提供</td>\n<td>Percon Monitor</td>\n<td>Monyog</td>\n</tr>\n<tr>\n<td>高可用特性</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n</tr>\n<tr>\n<td></td>\n<td>基于Gtid复制</td>\n<td>基于Gtid复制</td>\n<td>基于Gtid复制，但Gtid与MySQL不兼容</td>\n</tr>\n<tr>\n<td></td>\n<td>MGR</td>\n<td>MGR &amp; PXC</td>\n<td>Galera Cluster</td>\n</tr>\n<tr>\n<td></td>\n<td>MySQL Router</td>\n<td>Proxy SQL</td>\n<td>MaxScale</td>\n</tr>\n<tr>\n<td>安全特性</td>\n<td>企业版防火墙</td>\n<td>ProxySQL FireWall</td>\n<td>MaxScale FireWall</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版用户审计</td>\n<td>审计日志</td>\n<td>审计日志</td>\n</tr>\n<tr>\n<td></td>\n<td>用户密码生命周期</td>\n<td>用户密码生命周期</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>sha256_password caching_sha2_password</td>\n<td>sha256_password caching_sha2_password</td>\n<td>ed25519 sha256_password</td>\n</tr>\n<tr>\n<td>开发及管理</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（10.2）</td>\n</tr>\n<tr>\n<td></td>\n<td>Super read_only</td>\n<td>Super read_only</td>\n<td>支持基于日志回滚，支持修改日志表中记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MySQL升级\"><a href=\"#MySQL升级\" class=\"headerlink\" title=\"MySQL升级\"></a>MySQL升级</h3><h4 id=\"升级前考虑问题\"><a href=\"#升级前考虑问题\" class=\"headerlink\" title=\"升级前考虑问题\"></a>升级前考虑问题</h4><ul>\n<li>升级给业务带来的益处 <ul>\n<li>是否解决业务某一方面痛点</li>\n<li>是否解决运维某一方面痛点</li>\n</ul>\n</li>\n<li>升级给业务带来的影响 <ul>\n<li>对原来业务程序支持是否有影响</li>\n<li>对原来业务程序性能是否有影响</li>\n</ul>\n</li>\n<li>数据库升级方案制定 <ul>\n<li>评估受影响业务系统</li>\n<li>升级详细步骤</li>\n<li>升级后的数据库环境检查</li>\n<li>升级后业务检查</li>\n</ul>\n</li>\n<li>升级失败回滚方案<ul>\n<li>升级失败回滚的步骤</li>\n<li>回滚后的数据库环境检查</li>\n<li>回滚后的业务检查</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h4><ul>\n<li>对升级数据库进行备份</li>\n<li>升级slave服务器版本</li>\n<li>手动进行主从切换</li>\n<li>升级master服务器版本</li>\n<li>升级完成后进行业务检查</li>\n</ul>\n<h3 id=\"MySQL8-0新特性\"><a href=\"#MySQL8-0新特性\" class=\"headerlink\" title=\"MySQL8.0新特性\"></a>MySQL8.0新特性</h3><ul>\n<li>所有元数据使用InnoDB引擎存储，无frm文件</li>\n<li>系统表采用InnoDB存储并采用独立表空间</li>\n<li>支持定义资源管理组（目前仅支持CPU资源）</li>\n<li>支持不可见索引和降序索引，支持直方图优化</li>\n<li>支持窗口函数</li>\n<li>支持在线修改全局参数持久化</li>\n<li>默认使用caching_sha2_password认证插件</li>\n<li>新增支持定义角色（role）</li>\n<li>新增密码历史记录功能，限制重复使用密码</li>\n<li>InnoDB DDL语句支持原子操作</li>\n<li>支持在线修改UNDO表空间</li>\n<li>新增管理视图用于监控InnoDB表状态</li>\n<li>新增innodb_dedicated_server配置 </li>\n</ul>\n"},{"title":"mysql面试（七）备份恢复类问题","top":1,"date":"2019-09-18T05:51:22.000Z","_content":"","source":"_posts/mysql面试（七）备份恢复类问题.md","raw":"---\ntitle: mysql面试（七）备份恢复类问题\ntop: 1\ndate: 2019-09-18 13:51:22\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n","slug":"mysql面试（七）备份恢复类问题","published":1,"updated":"2019-11-04T06:00:32.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahost001a0gs633jqli2y","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mysql面试（三）服务器配置类问题","top":1,"date":"2019-09-12T08:39:30.000Z","_content":"### SQL_MODE\n- 配置MySQL处理SQL方式\n- set [session/global/persisi] sql_model='xxxx'\n- [mysqld] sql_model=xxx\n\n|SQL_MODE|说明|\n|---|---|\n|ONLY_FULL_GROUP_BY|对于GROUP BY聚合操作，如果出现在SELECT中的列、HAVING或者ORDER BY子句的非聚合列，没有在GROUP BY中出现，那么这个SQL语法检查报错|\n|ANSI_QUOTES|禁止使用双引号来引用字符串|\n|REAL_AS_FLOAT|Real作为float的同义词|\n|PIPES_AS_CONCAT|把'||'视为字符串的连接操作符而不是或运算符|\n|STRICT_TRANS_TABLES/STRICT_ALL_TABLES|在事务存储引擎/所有存储引擎上启用严格模式，SQL语法检查报错|\n|ERROR_FOR_DIVISION_BY_ZERO|不允许0作为除数|\n|NO_AUTO_CREATE_USER|在用户不存在时不允许grant语句自动建立用户|\n|NO_ZERO_IN_DATE/NO_ZERO_DATE|日期数据内/日期数据不能含0|\n|NO_ENGINE_SUBSTITUTION|当指定存储引擎不可用时报错|\n\n### 使用set命令配置动态参数\n- set[session|@@session.]system_var_name=expr\n- set[global|@@global.]system_var_name=expr\n- set[persist|@@persist.]system_var_name=expr\n\n### 使用pt-config-diff工具比较配置文件\n- pt-config-diff u=root,p=,h=localhost /etc/my.cnf\n\n### 常用性能参数\n||参数|说明|\n|--|---|--|\n|服务器配置参数|max_connections|设置MySQL允许访问的最大连接数量|\n||interactive_timeout|设置交互连接的超时时间|\n||wait_timeout|设置非交互连接的超时时间|\n||max_allowed_packet|MySQL可以接收的数据包大小|\n||sync_binlog|每写多少次缓冲会向磁盘同步一次binlog|\n||sort_buffer_size|设置每个会话使用的排序缓存区的大小|\n||join_buffer_size|设置每个会话使用的连接缓冲的大小|\n||read_buffer_size|当对一个MYISAM进行表扫描时锁分配的读缓存池大小|\n||read_rnd_buffer_size|设置控制索引缓冲区大小|\n||read_rnd_buffer_size|设置每个会话用于缓存未提交事务缓存大小 |\n|存储引擎参数|innodb_flush_log_at_trx_commit|0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次 |\n||innodb_buffer_pool_size|设置innodb缓冲池大小，应为系统可用内存的75%|\n||innodb_buffer_pool_instances|Innodb缓冲池的实例个数，每个实例大小为总缓冲池大小/实例个数|\n||innodb_file_per_table|设置每个表独立使用一个表空间文件|","source":"_posts/mysql面试（三）服务器配置类问题.md","raw":"---\ntitle: mysql面试（三）服务器配置类问题\ntop: 1\ndate: 2019-09-12 16:39:30\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### SQL_MODE\n- 配置MySQL处理SQL方式\n- set [session/global/persisi] sql_model='xxxx'\n- [mysqld] sql_model=xxx\n\n|SQL_MODE|说明|\n|---|---|\n|ONLY_FULL_GROUP_BY|对于GROUP BY聚合操作，如果出现在SELECT中的列、HAVING或者ORDER BY子句的非聚合列，没有在GROUP BY中出现，那么这个SQL语法检查报错|\n|ANSI_QUOTES|禁止使用双引号来引用字符串|\n|REAL_AS_FLOAT|Real作为float的同义词|\n|PIPES_AS_CONCAT|把'||'视为字符串的连接操作符而不是或运算符|\n|STRICT_TRANS_TABLES/STRICT_ALL_TABLES|在事务存储引擎/所有存储引擎上启用严格模式，SQL语法检查报错|\n|ERROR_FOR_DIVISION_BY_ZERO|不允许0作为除数|\n|NO_AUTO_CREATE_USER|在用户不存在时不允许grant语句自动建立用户|\n|NO_ZERO_IN_DATE/NO_ZERO_DATE|日期数据内/日期数据不能含0|\n|NO_ENGINE_SUBSTITUTION|当指定存储引擎不可用时报错|\n\n### 使用set命令配置动态参数\n- set[session|@@session.]system_var_name=expr\n- set[global|@@global.]system_var_name=expr\n- set[persist|@@persist.]system_var_name=expr\n\n### 使用pt-config-diff工具比较配置文件\n- pt-config-diff u=root,p=,h=localhost /etc/my.cnf\n\n### 常用性能参数\n||参数|说明|\n|--|---|--|\n|服务器配置参数|max_connections|设置MySQL允许访问的最大连接数量|\n||interactive_timeout|设置交互连接的超时时间|\n||wait_timeout|设置非交互连接的超时时间|\n||max_allowed_packet|MySQL可以接收的数据包大小|\n||sync_binlog|每写多少次缓冲会向磁盘同步一次binlog|\n||sort_buffer_size|设置每个会话使用的排序缓存区的大小|\n||join_buffer_size|设置每个会话使用的连接缓冲的大小|\n||read_buffer_size|当对一个MYISAM进行表扫描时锁分配的读缓存池大小|\n||read_rnd_buffer_size|设置控制索引缓冲区大小|\n||read_rnd_buffer_size|设置每个会话用于缓存未提交事务缓存大小 |\n|存储引擎参数|innodb_flush_log_at_trx_commit|0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次 |\n||innodb_buffer_pool_size|设置innodb缓冲池大小，应为系统可用内存的75%|\n||innodb_buffer_pool_instances|Innodb缓冲池的实例个数，每个实例大小为总缓冲池大小/实例个数|\n||innodb_file_per_table|设置每个表独立使用一个表空间文件|","slug":"mysql面试（三）服务器配置类问题","published":1,"updated":"2019-11-04T05:56:21.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosu001c0gs6c9rcc0c7","content":"<h3 id=\"SQL-MODE\"><a href=\"#SQL-MODE\" class=\"headerlink\" title=\"SQL_MODE\"></a>SQL_MODE</h3><ul>\n<li>配置MySQL处理SQL方式</li>\n<li>set [session/global/persisi] sql_model=’xxxx’</li>\n<li>[mysqld] sql_model=xxx</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL_MODE</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ONLY_FULL_GROUP_BY</td>\n<td>对于GROUP BY聚合操作，如果出现在SELECT中的列、HAVING或者ORDER BY子句的非聚合列，没有在GROUP BY中出现，那么这个SQL语法检查报错</td>\n</tr>\n<tr>\n<td>ANSI_QUOTES</td>\n<td>禁止使用双引号来引用字符串</td>\n</tr>\n<tr>\n<td>REAL_AS_FLOAT</td>\n<td>Real作为float的同义词</td>\n</tr>\n<tr>\n<td>PIPES_AS_CONCAT</td>\n<td>把’</td>\n<td></td>\n<td>‘视为字符串的连接操作符而不是或运算符</td>\n</tr>\n<tr>\n<td>STRICT_TRANS_TABLES/STRICT_ALL_TABLES</td>\n<td>在事务存储引擎/所有存储引擎上启用严格模式，SQL语法检查报错</td>\n</tr>\n<tr>\n<td>ERROR_FOR_DIVISION_BY_ZERO</td>\n<td>不允许0作为除数</td>\n</tr>\n<tr>\n<td>NO_AUTO_CREATE_USER</td>\n<td>在用户不存在时不允许grant语句自动建立用户</td>\n</tr>\n<tr>\n<td>NO_ZERO_IN_DATE/NO_ZERO_DATE</td>\n<td>日期数据内/日期数据不能含0</td>\n</tr>\n<tr>\n<td>NO_ENGINE_SUBSTITUTION</td>\n<td>当指定存储引擎不可用时报错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"使用set命令配置动态参数\"><a href=\"#使用set命令配置动态参数\" class=\"headerlink\" title=\"使用set命令配置动态参数\"></a>使用set命令配置动态参数</h3><ul>\n<li>set[session|@@session.]system_var_name=expr</li>\n<li>set[global|@@global.]system_var_name=expr</li>\n<li>set[persist|@@persist.]system_var_name=expr</li>\n</ul>\n<h3 id=\"使用pt-config-diff工具比较配置文件\"><a href=\"#使用pt-config-diff工具比较配置文件\" class=\"headerlink\" title=\"使用pt-config-diff工具比较配置文件\"></a>使用pt-config-diff工具比较配置文件</h3><ul>\n<li>pt-config-diff u=root,p=,h=localhost /etc/my.cnf</li>\n</ul>\n<h3 id=\"常用性能参数\"><a href=\"#常用性能参数\" class=\"headerlink\" title=\"常用性能参数\"></a>常用性能参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器配置参数</td>\n<td>max_connections</td>\n<td>设置MySQL允许访问的最大连接数量</td>\n</tr>\n<tr>\n<td></td>\n<td>interactive_timeout</td>\n<td>设置交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>wait_timeout</td>\n<td>设置非交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>max_allowed_packet</td>\n<td>MySQL可以接收的数据包大小</td>\n</tr>\n<tr>\n<td></td>\n<td>sync_binlog</td>\n<td>每写多少次缓冲会向磁盘同步一次binlog</td>\n</tr>\n<tr>\n<td></td>\n<td>sort_buffer_size</td>\n<td>设置每个会话使用的排序缓存区的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>join_buffer_size</td>\n<td>设置每个会话使用的连接缓冲的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_buffer_size</td>\n<td>当对一个MYISAM进行表扫描时锁分配的读缓存池大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置控制索引缓冲区大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置每个会话用于缓存未提交事务缓存大小</td>\n</tr>\n<tr>\n<td>存储引擎参数</td>\n<td>innodb_flush_log_at_trx_commit</td>\n<td>0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_size</td>\n<td>设置innodb缓冲池大小，应为系统可用内存的75%</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_instances</td>\n<td>Innodb缓冲池的实例个数，每个实例大小为总缓冲池大小/实例个数</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_file_per_table</td>\n<td>设置每个表独立使用一个表空间文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SQL-MODE\"><a href=\"#SQL-MODE\" class=\"headerlink\" title=\"SQL_MODE\"></a>SQL_MODE</h3><ul>\n<li>配置MySQL处理SQL方式</li>\n<li>set [session/global/persisi] sql_model=’xxxx’</li>\n<li>[mysqld] sql_model=xxx</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL_MODE</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ONLY_FULL_GROUP_BY</td>\n<td>对于GROUP BY聚合操作，如果出现在SELECT中的列、HAVING或者ORDER BY子句的非聚合列，没有在GROUP BY中出现，那么这个SQL语法检查报错</td>\n</tr>\n<tr>\n<td>ANSI_QUOTES</td>\n<td>禁止使用双引号来引用字符串</td>\n</tr>\n<tr>\n<td>REAL_AS_FLOAT</td>\n<td>Real作为float的同义词</td>\n</tr>\n<tr>\n<td>PIPES_AS_CONCAT</td>\n<td>把’</td>\n<td></td>\n<td>‘视为字符串的连接操作符而不是或运算符</td>\n</tr>\n<tr>\n<td>STRICT_TRANS_TABLES/STRICT_ALL_TABLES</td>\n<td>在事务存储引擎/所有存储引擎上启用严格模式，SQL语法检查报错</td>\n</tr>\n<tr>\n<td>ERROR_FOR_DIVISION_BY_ZERO</td>\n<td>不允许0作为除数</td>\n</tr>\n<tr>\n<td>NO_AUTO_CREATE_USER</td>\n<td>在用户不存在时不允许grant语句自动建立用户</td>\n</tr>\n<tr>\n<td>NO_ZERO_IN_DATE/NO_ZERO_DATE</td>\n<td>日期数据内/日期数据不能含0</td>\n</tr>\n<tr>\n<td>NO_ENGINE_SUBSTITUTION</td>\n<td>当指定存储引擎不可用时报错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"使用set命令配置动态参数\"><a href=\"#使用set命令配置动态参数\" class=\"headerlink\" title=\"使用set命令配置动态参数\"></a>使用set命令配置动态参数</h3><ul>\n<li>set[session|@@session.]system_var_name=expr</li>\n<li>set[global|@@global.]system_var_name=expr</li>\n<li>set[persist|@@persist.]system_var_name=expr</li>\n</ul>\n<h3 id=\"使用pt-config-diff工具比较配置文件\"><a href=\"#使用pt-config-diff工具比较配置文件\" class=\"headerlink\" title=\"使用pt-config-diff工具比较配置文件\"></a>使用pt-config-diff工具比较配置文件</h3><ul>\n<li>pt-config-diff u=root,p=,h=localhost /etc/my.cnf</li>\n</ul>\n<h3 id=\"常用性能参数\"><a href=\"#常用性能参数\" class=\"headerlink\" title=\"常用性能参数\"></a>常用性能参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器配置参数</td>\n<td>max_connections</td>\n<td>设置MySQL允许访问的最大连接数量</td>\n</tr>\n<tr>\n<td></td>\n<td>interactive_timeout</td>\n<td>设置交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>wait_timeout</td>\n<td>设置非交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>max_allowed_packet</td>\n<td>MySQL可以接收的数据包大小</td>\n</tr>\n<tr>\n<td></td>\n<td>sync_binlog</td>\n<td>每写多少次缓冲会向磁盘同步一次binlog</td>\n</tr>\n<tr>\n<td></td>\n<td>sort_buffer_size</td>\n<td>设置每个会话使用的排序缓存区的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>join_buffer_size</td>\n<td>设置每个会话使用的连接缓冲的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_buffer_size</td>\n<td>当对一个MYISAM进行表扫描时锁分配的读缓存池大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置控制索引缓冲区大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置每个会话用于缓存未提交事务缓存大小</td>\n</tr>\n<tr>\n<td>存储引擎参数</td>\n<td>innodb_flush_log_at_trx_commit</td>\n<td>0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_size</td>\n<td>设置innodb缓冲池大小，应为系统可用内存的75%</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_instances</td>\n<td>Innodb缓冲池的实例个数，每个实例大小为总缓冲池大小/实例个数</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_file_per_table</td>\n<td>设置每个表独立使用一个表空间文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"mysql面试（九）异常处理问题","top":1,"date":"2019-09-20T06:01:43.000Z","_content":"","source":"_posts/mysql面试（九）异常处理问题.md","raw":"---\ntitle: mysql面试（九）异常处理问题\ntop: 1\ndate: 2019-09-20 14:01:43\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n","slug":"mysql面试（九）异常处理问题","published":1,"updated":"2019-11-04T06:02:09.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosv001f0gs678xpagkv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"mysql面试（二）用户管理类问题","top":1,"date":"2019-09-10T08:04:47.000Z","_content":"### 如何定义MySQL数据库账号\n- 用户名@可访问控制列表\n  - % 可以从所有外部主机访问\n  - 192.168.1.%可以从192.168.1网段访问\n  - localhost 从服务器本地访问\n- 使用CREATE USER 建立用户\n### MySQL常用用户权限\n\n||语句|说明|\n|----|---- |-----|\n|Admin|Create User|建立新用户\n||Grant option|为其他用户授权\n||Super|管理服务器\n|DDL|Create|新建数据库\n||Alter|修改表结构\n||Drop|删除数据库和表\n||Index|建立和删除索引\n|DML|Select|查询表数据\n||Insert|插入表数据\n||Update|更新表数据\n||Delete|删除表数据\n||Execute|执行存储过程\n\n### 为用户授权\n- 遵循最小权限原则\n- 使用grant命令授权，revoke收回权限\n```\ngrant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n```\n### 数据库用户管理流程规范\n- 最小权限原则\n- 密码强度策略\n- 密码过期原则\n- 限制历史密码重用原则\n\n### 导出用户建立和授权语句\n```\npt-show-grants u=root,p=123456,h=localhost\n```","source":"_posts/mysql面试（二）用户管理类问题.md","raw":"---\ntitle: mysql面试（二）用户管理类问题\ntop: 1\ndate: 2019-09-10 16:04:47\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 如何定义MySQL数据库账号\n- 用户名@可访问控制列表\n  - % 可以从所有外部主机访问\n  - 192.168.1.%可以从192.168.1网段访问\n  - localhost 从服务器本地访问\n- 使用CREATE USER 建立用户\n### MySQL常用用户权限\n\n||语句|说明|\n|----|---- |-----|\n|Admin|Create User|建立新用户\n||Grant option|为其他用户授权\n||Super|管理服务器\n|DDL|Create|新建数据库\n||Alter|修改表结构\n||Drop|删除数据库和表\n||Index|建立和删除索引\n|DML|Select|查询表数据\n||Insert|插入表数据\n||Update|更新表数据\n||Delete|删除表数据\n||Execute|执行存储过程\n\n### 为用户授权\n- 遵循最小权限原则\n- 使用grant命令授权，revoke收回权限\n```\ngrant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n```\n### 数据库用户管理流程规范\n- 最小权限原则\n- 密码强度策略\n- 密码过期原则\n- 限制历史密码重用原则\n\n### 导出用户建立和授权语句\n```\npt-show-grants u=root,p=123456,h=localhost\n```","slug":"mysql面试（二）用户管理类问题","published":1,"updated":"2019-11-04T05:56:02.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahosx001i0gs677r9dsvs","content":"<h3 id=\"如何定义MySQL数据库账号\"><a href=\"#如何定义MySQL数据库账号\" class=\"headerlink\" title=\"如何定义MySQL数据库账号\"></a>如何定义MySQL数据库账号</h3><ul>\n<li>用户名@可访问控制列表<ul>\n<li>% 可以从所有外部主机访问</li>\n<li>192.168.1.%可以从192.168.1网段访问</li>\n<li>localhost 从服务器本地访问</li>\n</ul>\n</li>\n<li>使用CREATE USER 建立用户<h3 id=\"MySQL常用用户权限\"><a href=\"#MySQL常用用户权限\" class=\"headerlink\" title=\"MySQL常用用户权限\"></a>MySQL常用用户权限</h3></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Admin</td>\n<td>Create User</td>\n<td>建立新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>Grant option</td>\n<td>为其他用户授权</td>\n</tr>\n<tr>\n<td></td>\n<td>Super</td>\n<td>管理服务器</td>\n</tr>\n<tr>\n<td>DDL</td>\n<td>Create</td>\n<td>新建数据库</td>\n</tr>\n<tr>\n<td></td>\n<td>Alter</td>\n<td>修改表结构</td>\n</tr>\n<tr>\n<td></td>\n<td>Drop</td>\n<td>删除数据库和表</td>\n</tr>\n<tr>\n<td></td>\n<td>Index</td>\n<td>建立和删除索引</td>\n</tr>\n<tr>\n<td>DML</td>\n<td>Select</td>\n<td>查询表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Insert</td>\n<td>插入表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Update</td>\n<td>更新表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Delete</td>\n<td>删除表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Execute</td>\n<td>执行存储过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"为用户授权\"><a href=\"#为用户授权\" class=\"headerlink\" title=\"为用户授权\"></a>为用户授权</h3><ul>\n<li>遵循最小权限原则</li>\n<li>使用grant命令授权，revoke收回权限<pre><code>grant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n</code></pre><h3 id=\"数据库用户管理流程规范\"><a href=\"#数据库用户管理流程规范\" class=\"headerlink\" title=\"数据库用户管理流程规范\"></a>数据库用户管理流程规范</h3></li>\n<li>最小权限原则</li>\n<li>密码强度策略</li>\n<li>密码过期原则</li>\n<li>限制历史密码重用原则</li>\n</ul>\n<h3 id=\"导出用户建立和授权语句\"><a href=\"#导出用户建立和授权语句\" class=\"headerlink\" title=\"导出用户建立和授权语句\"></a>导出用户建立和授权语句</h3><pre><code>pt-show-grants u=root,p=123456,h=localhost\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何定义MySQL数据库账号\"><a href=\"#如何定义MySQL数据库账号\" class=\"headerlink\" title=\"如何定义MySQL数据库账号\"></a>如何定义MySQL数据库账号</h3><ul>\n<li>用户名@可访问控制列表<ul>\n<li>% 可以从所有外部主机访问</li>\n<li>192.168.1.%可以从192.168.1网段访问</li>\n<li>localhost 从服务器本地访问</li>\n</ul>\n</li>\n<li>使用CREATE USER 建立用户<h3 id=\"MySQL常用用户权限\"><a href=\"#MySQL常用用户权限\" class=\"headerlink\" title=\"MySQL常用用户权限\"></a>MySQL常用用户权限</h3></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Admin</td>\n<td>Create User</td>\n<td>建立新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>Grant option</td>\n<td>为其他用户授权</td>\n</tr>\n<tr>\n<td></td>\n<td>Super</td>\n<td>管理服务器</td>\n</tr>\n<tr>\n<td>DDL</td>\n<td>Create</td>\n<td>新建数据库</td>\n</tr>\n<tr>\n<td></td>\n<td>Alter</td>\n<td>修改表结构</td>\n</tr>\n<tr>\n<td></td>\n<td>Drop</td>\n<td>删除数据库和表</td>\n</tr>\n<tr>\n<td></td>\n<td>Index</td>\n<td>建立和删除索引</td>\n</tr>\n<tr>\n<td>DML</td>\n<td>Select</td>\n<td>查询表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Insert</td>\n<td>插入表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Update</td>\n<td>更新表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Delete</td>\n<td>删除表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Execute</td>\n<td>执行存储过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"为用户授权\"><a href=\"#为用户授权\" class=\"headerlink\" title=\"为用户授权\"></a>为用户授权</h3><ul>\n<li>遵循最小权限原则</li>\n<li>使用grant命令授权，revoke收回权限<pre><code>grant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n</code></pre><h3 id=\"数据库用户管理流程规范\"><a href=\"#数据库用户管理流程规范\" class=\"headerlink\" title=\"数据库用户管理流程规范\"></a>数据库用户管理流程规范</h3></li>\n<li>最小权限原则</li>\n<li>密码强度策略</li>\n<li>密码过期原则</li>\n<li>限制历史密码重用原则</li>\n</ul>\n<h3 id=\"导出用户建立和授权语句\"><a href=\"#导出用户建立和授权语句\" class=\"headerlink\" title=\"导出用户建立和授权语句\"></a>导出用户建立和授权语句</h3><pre><code>pt-show-grants u=root,p=123456,h=localhost\n</code></pre>"},{"title":"mysql面试（五）存储引擎类问题","top":1,"date":"2019-09-15T05:28:16.000Z","_content":"### MySQL常用存储引擎\n\n|引擎名称|事务|说明|\n|-|-|-|\n|MYISAM|N|MySQL5.6之前的默认引擎，最常用的非事务型存储引擎|\n|CSV|N|以CSV格式存储的非事务型存储引擎|\n|Archive|N|只运行查询和新增数据不允许修改的非事务型存储引擎|\n|Memory|N|是一种易失性非事务型存储引擎|\n|InnoDB|Y|最常用事务性存储引擎|\n|NDB|Y|MySQL集群使用的内存型事务存储引擎|\n\n### MYISAM\n#### 特点\n- 非事务存储引擎\n- 以堆表方式存储\n- 使用表级锁\n- 支持BTree索引，空间索引，全文索引\n\n#### 使用场景\n- 读操作远远大于写操作\n- 不需要使用事务\n\n### CSV\n\n#### 特点\n- 非事务型存储引擎\n- 数据以CSV格式存储\n- 所有列都不能为NULL\n- 不支持索引\n\n#### 使用场景\n- 作为数据交换的中间表使用\n\n### Archive\n\n#### 特点\n- 非事务型存储引擎\n- 表数据使用zlib压缩\n- 只支持Insert和Select\n- 只允许在自增ID上建立索引\n\n#### 使用场景\n- 日志和数据采集类应用\n- 数据归档存储\n\n### Memory\n\n#### 特点\n- 非事务型存储引擎\n- 数据保存在内存中\n- 所有字段长度固定\n- 支持Btree和Hash索引\n\n#### 使用场景\n- 用于缓存字典映射表\n- 缓存周期性分析数据\n\n### InnoDB\n\n#### 特点\n- 事务型存储引擎\n- 数据按主键聚集存储\n- 支持行级锁和MVCC\n- 支持Btree和自适应Hash索引\n- 支持全文和空间索引\n\n#### 使用场景\n- 大多数OLTP场景\n\n### NDB\n\n#### 特点\n- 事务型存储引擎\n- 数据保存在内存中\n- 支持行级锁\n- 支持高可用集群\n- 支持Ttree索引\n\n#### 使用场景\n- 需要数据完全同步的高可用场景\n\n### 什么情况下InnoDB无法在线修改表\n\n|操作|语法|\n|-|-|\n|加全文索引|CREATE FULTEXT INDEX name ON table(column)|\n|加空间索引|ALTER TABLE geom ADD SPATIAL INDEX(g)|\n|删除主键|ALTER TABLE tb_name DROP PRIMARY KEY|\n|增加自增列|alert table t add column id int auto_increment not null primary key|\n|修改列类型|alter table t change c1 c1 NEW_TYPE|\n|修改字符集|alter table t character set = charset_name|\n\n####　在线DDL存在的问题\n- 有部分语句不支持在线DDL\n- 长时间DDL操作会引起严重主从延迟\n- 无法对DDL操作进行资源限制\n\n#### 如何更安全执行DDL\n- pt-online-shema-change [OPTIONS]DSN\n\n### InnoDB如何实现事务\n\n#### 原理\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n#### 实现方式\n|特征|说明|\n|:----- |-----|\n|原子性（A）|回滚日志（Undo log）:用于记录数据修改前的状态|\n|一致性（C）|重作日志（Redo log）:用于记录数据修改后的状态|\n|隔离性（I）|锁：用于资源隔离，分为共享锁和排他锁|\n|持久性（D）|重作日志（Redo log）+回滚日志（Undo log）\n\n\n### INNODB锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|","source":"_posts/mysql面试（五）存储引擎类问题.md","raw":"---\ntitle: mysql面试（五）存储引擎类问题\ntop: 1\ndate: 2019-09-15 13:28:16\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### MySQL常用存储引擎\n\n|引擎名称|事务|说明|\n|-|-|-|\n|MYISAM|N|MySQL5.6之前的默认引擎，最常用的非事务型存储引擎|\n|CSV|N|以CSV格式存储的非事务型存储引擎|\n|Archive|N|只运行查询和新增数据不允许修改的非事务型存储引擎|\n|Memory|N|是一种易失性非事务型存储引擎|\n|InnoDB|Y|最常用事务性存储引擎|\n|NDB|Y|MySQL集群使用的内存型事务存储引擎|\n\n### MYISAM\n#### 特点\n- 非事务存储引擎\n- 以堆表方式存储\n- 使用表级锁\n- 支持BTree索引，空间索引，全文索引\n\n#### 使用场景\n- 读操作远远大于写操作\n- 不需要使用事务\n\n### CSV\n\n#### 特点\n- 非事务型存储引擎\n- 数据以CSV格式存储\n- 所有列都不能为NULL\n- 不支持索引\n\n#### 使用场景\n- 作为数据交换的中间表使用\n\n### Archive\n\n#### 特点\n- 非事务型存储引擎\n- 表数据使用zlib压缩\n- 只支持Insert和Select\n- 只允许在自增ID上建立索引\n\n#### 使用场景\n- 日志和数据采集类应用\n- 数据归档存储\n\n### Memory\n\n#### 特点\n- 非事务型存储引擎\n- 数据保存在内存中\n- 所有字段长度固定\n- 支持Btree和Hash索引\n\n#### 使用场景\n- 用于缓存字典映射表\n- 缓存周期性分析数据\n\n### InnoDB\n\n#### 特点\n- 事务型存储引擎\n- 数据按主键聚集存储\n- 支持行级锁和MVCC\n- 支持Btree和自适应Hash索引\n- 支持全文和空间索引\n\n#### 使用场景\n- 大多数OLTP场景\n\n### NDB\n\n#### 特点\n- 事务型存储引擎\n- 数据保存在内存中\n- 支持行级锁\n- 支持高可用集群\n- 支持Ttree索引\n\n#### 使用场景\n- 需要数据完全同步的高可用场景\n\n### 什么情况下InnoDB无法在线修改表\n\n|操作|语法|\n|-|-|\n|加全文索引|CREATE FULTEXT INDEX name ON table(column)|\n|加空间索引|ALTER TABLE geom ADD SPATIAL INDEX(g)|\n|删除主键|ALTER TABLE tb_name DROP PRIMARY KEY|\n|增加自增列|alert table t add column id int auto_increment not null primary key|\n|修改列类型|alter table t change c1 c1 NEW_TYPE|\n|修改字符集|alter table t character set = charset_name|\n\n####　在线DDL存在的问题\n- 有部分语句不支持在线DDL\n- 长时间DDL操作会引起严重主从延迟\n- 无法对DDL操作进行资源限制\n\n#### 如何更安全执行DDL\n- pt-online-shema-change [OPTIONS]DSN\n\n### InnoDB如何实现事务\n\n#### 原理\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n#### 实现方式\n|特征|说明|\n|:----- |-----|\n|原子性（A）|回滚日志（Undo log）:用于记录数据修改前的状态|\n|一致性（C）|重作日志（Redo log）:用于记录数据修改后的状态|\n|隔离性（I）|锁：用于资源隔离，分为共享锁和排他锁|\n|持久性（D）|重作日志（Redo log）+回滚日志（Undo log）\n\n\n### INNODB锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|","slug":"mysql面试（五）存储引擎类问题","published":1,"updated":"2019-11-05T03:29:31.116Z","_id":"ck2lahosz001m0gs68ip6dy2q","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"MySQL常用存储引擎\"><a href=\"#MySQL常用存储引擎\" class=\"headerlink\" title=\"MySQL常用存储引擎\"></a>MySQL常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎名称</th>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MYISAM</td>\n<td>N</td>\n<td>MySQL5.6之前的默认引擎，最常用的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>N</td>\n<td>以CSV格式存储的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>N</td>\n<td>只运行查询和新增数据不允许修改的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>N</td>\n<td>是一种易失性非事务型存储引擎</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>Y</td>\n<td>最常用事务性存储引擎</td>\n</tr>\n<tr>\n<td>NDB</td>\n<td>Y</td>\n<td>MySQL集群使用的内存型事务存储引擎</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MYISAM\"><a href=\"#MYISAM\" class=\"headerlink\" title=\"MYISAM\"></a>MYISAM</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务存储引擎</li>\n<li>以堆表方式存储</li>\n<li>使用表级锁</li>\n<li>支持BTree索引，空间索引，全文索引</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>读操作远远大于写操作</li>\n<li>不需要使用事务</li>\n</ul>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据以CSV格式存储</li>\n<li>所有列都不能为NULL</li>\n<li>不支持索引</li>\n</ul>\n<h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>作为数据交换的中间表使用</li>\n</ul>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>表数据使用zlib压缩</li>\n<li>只支持Insert和Select</li>\n<li>只允许在自增ID上建立索引</li>\n</ul>\n<h4 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>日志和数据采集类应用</li>\n<li>数据归档存储</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>所有字段长度固定</li>\n<li>支持Btree和Hash索引</li>\n</ul>\n<h4 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>用于缓存字典映射表</li>\n<li>缓存周期性分析数据</li>\n</ul>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁和MVCC</li>\n<li>支持Btree和自适应Hash索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<h4 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>大多数OLTP场景</li>\n</ul>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>支持行级锁</li>\n<li>支持高可用集群</li>\n<li>支持Ttree索引</li>\n</ul>\n<h4 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>需要数据完全同步的高可用场景</li>\n</ul>\n<h3 id=\"什么情况下InnoDB无法在线修改表\"><a href=\"#什么情况下InnoDB无法在线修改表\" class=\"headerlink\" title=\"什么情况下InnoDB无法在线修改表\"></a>什么情况下InnoDB无法在线修改表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>加全文索引</td>\n<td>CREATE FULTEXT INDEX name ON table(column)</td>\n</tr>\n<tr>\n<td>加空间索引</td>\n<td>ALTER TABLE geom ADD SPATIAL INDEX(g)</td>\n</tr>\n<tr>\n<td>删除主键</td>\n<td>ALTER TABLE tb_name DROP PRIMARY KEY</td>\n</tr>\n<tr>\n<td>增加自增列</td>\n<td>alert table t add column id int auto_increment not null primary key</td>\n</tr>\n<tr>\n<td>修改列类型</td>\n<td>alter table t change c1 c1 NEW_TYPE</td>\n</tr>\n<tr>\n<td>修改字符集</td>\n<td>alter table t character set = charset_name</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"在线DDL存在的问题\"><a href=\"#在线DDL存在的问题\" class=\"headerlink\" title=\"　在线DDL存在的问题\"></a>　在线DDL存在的问题</h4><ul>\n<li>有部分语句不支持在线DDL</li>\n<li>长时间DDL操作会引起严重主从延迟</li>\n<li>无法对DDL操作进行资源限制</li>\n</ul>\n<h4 id=\"如何更安全执行DDL\"><a href=\"#如何更安全执行DDL\" class=\"headerlink\" title=\"如何更安全执行DDL\"></a>如何更安全执行DDL</h4><ul>\n<li>pt-online-shema-change [OPTIONS]DSN</li>\n</ul>\n<h3 id=\"InnoDB如何实现事务\"><a href=\"#InnoDB如何实现事务\" class=\"headerlink\" title=\"InnoDB如何实现事务\"></a>InnoDB如何实现事务</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>回滚日志（Undo log）:用于记录数据修改前的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>重作日志（Redo log）:用于记录数据修改后的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>锁：用于资源隔离，分为共享锁和排他锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>重作日志（Redo log）+回滚日志（Undo log）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB锁\"><a href=\"#INNODB锁\" class=\"headerlink\" title=\"INNODB锁\"></a>INNODB锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL常用存储引擎\"><a href=\"#MySQL常用存储引擎\" class=\"headerlink\" title=\"MySQL常用存储引擎\"></a>MySQL常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎名称</th>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MYISAM</td>\n<td>N</td>\n<td>MySQL5.6之前的默认引擎，最常用的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>N</td>\n<td>以CSV格式存储的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>N</td>\n<td>只运行查询和新增数据不允许修改的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>N</td>\n<td>是一种易失性非事务型存储引擎</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>Y</td>\n<td>最常用事务性存储引擎</td>\n</tr>\n<tr>\n<td>NDB</td>\n<td>Y</td>\n<td>MySQL集群使用的内存型事务存储引擎</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MYISAM\"><a href=\"#MYISAM\" class=\"headerlink\" title=\"MYISAM\"></a>MYISAM</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务存储引擎</li>\n<li>以堆表方式存储</li>\n<li>使用表级锁</li>\n<li>支持BTree索引，空间索引，全文索引</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>读操作远远大于写操作</li>\n<li>不需要使用事务</li>\n</ul>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据以CSV格式存储</li>\n<li>所有列都不能为NULL</li>\n<li>不支持索引</li>\n</ul>\n<h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>作为数据交换的中间表使用</li>\n</ul>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>表数据使用zlib压缩</li>\n<li>只支持Insert和Select</li>\n<li>只允许在自增ID上建立索引</li>\n</ul>\n<h4 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>日志和数据采集类应用</li>\n<li>数据归档存储</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>所有字段长度固定</li>\n<li>支持Btree和Hash索引</li>\n</ul>\n<h4 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>用于缓存字典映射表</li>\n<li>缓存周期性分析数据</li>\n</ul>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁和MVCC</li>\n<li>支持Btree和自适应Hash索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<h4 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>大多数OLTP场景</li>\n</ul>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>支持行级锁</li>\n<li>支持高可用集群</li>\n<li>支持Ttree索引</li>\n</ul>\n<h4 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>需要数据完全同步的高可用场景</li>\n</ul>\n<h3 id=\"什么情况下InnoDB无法在线修改表\"><a href=\"#什么情况下InnoDB无法在线修改表\" class=\"headerlink\" title=\"什么情况下InnoDB无法在线修改表\"></a>什么情况下InnoDB无法在线修改表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>加全文索引</td>\n<td>CREATE FULTEXT INDEX name ON table(column)</td>\n</tr>\n<tr>\n<td>加空间索引</td>\n<td>ALTER TABLE geom ADD SPATIAL INDEX(g)</td>\n</tr>\n<tr>\n<td>删除主键</td>\n<td>ALTER TABLE tb_name DROP PRIMARY KEY</td>\n</tr>\n<tr>\n<td>增加自增列</td>\n<td>alert table t add column id int auto_increment not null primary key</td>\n</tr>\n<tr>\n<td>修改列类型</td>\n<td>alter table t change c1 c1 NEW_TYPE</td>\n</tr>\n<tr>\n<td>修改字符集</td>\n<td>alter table t character set = charset_name</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"在线DDL存在的问题\"><a href=\"#在线DDL存在的问题\" class=\"headerlink\" title=\"　在线DDL存在的问题\"></a>　在线DDL存在的问题</h4><ul>\n<li>有部分语句不支持在线DDL</li>\n<li>长时间DDL操作会引起严重主从延迟</li>\n<li>无法对DDL操作进行资源限制</li>\n</ul>\n<h4 id=\"如何更安全执行DDL\"><a href=\"#如何更安全执行DDL\" class=\"headerlink\" title=\"如何更安全执行DDL\"></a>如何更安全执行DDL</h4><ul>\n<li>pt-online-shema-change [OPTIONS]DSN</li>\n</ul>\n<h3 id=\"InnoDB如何实现事务\"><a href=\"#InnoDB如何实现事务\" class=\"headerlink\" title=\"InnoDB如何实现事务\"></a>InnoDB如何实现事务</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>回滚日志（Undo log）:用于记录数据修改前的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>重作日志（Redo log）:用于记录数据修改后的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>锁：用于资源隔离，分为共享锁和排他锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>重作日志（Redo log）+回滚日志（Undo log）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB锁\"><a href=\"#INNODB锁\" class=\"headerlink\" title=\"INNODB锁\"></a>INNODB锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n"},{"title":"mysql面试（四）日志类问题","top":1,"date":"2019-09-14T02:49:21.000Z","_content":"### MySQL常用日志类型\n\n|日志名称|作用|\n|--|--|\n|错误日志（error_log）|记录mysql在启动、运行或停止时候出现的问题|\n|常规日志（general_log）|记录所有发向MySQL请求|\n|慢查询日志（slow_query_log）|记录符合条件的查询|\n|二进制日志（binary_log）|记录全部有效的数据修改日志|\n|中继日志（relay_log）|用于主从复制、临时存储从主库同步的二进制日志|\n\n### 错误日志（error_log）\n\n- 分析排除MySQL运行错误\n- 记录未经授权的访问\n- log_error=$mysql/sql_log/mysql-error.log\n- log_error_verbosity=[1,2,3]\n\n|verbosity|作用|\n|--|--|\n|1|Error messages|\n|2|Error and warning messages|\n|3|Error ,warning and note messages|\n\n- log_error_services=[日志服务组件;日志服务组件]\n\n|组件名称|作用|\n|--|--|\n|log_filter_internal|默认日志过滤组件，依赖log_error_verbosity|\n|log_sink_internal|默认日志输出组件，依赖log_error|\n|log_sink_json|将错误日志输出到json文件|\n|log_sink_syseventlog|将错误日志输出到系统日志文件|\n\n### 常规日志（general_log）\n\n- 分析客户端发送到MySQL的实际请求\n- general_log=[ON|OFF]\n- general_log_file=$mysql/sql_log/general.log\n- log_output=[FILE|TABLE|NONE]\n\n### 慢查询日志（slow_query_log）\n- 将执行成功并符合条件的查询记录到日志\n- 找到需要优化的SQL\n- slow_query_log=[ON|OFF]\n- slow_query_log_file=$mysql/sql_log/slowlog.log\n- long_query_time=xx秒\n- log_queries_not_using_indexes=[ON|OFF]\n- log_slow_admin_statements=[ON|OFF]\n- log_slow_slave_statements=[ON|OFF]\n\n### 二进制日志（binary_log）\n- 记录所有对数据库的数据修改\n- 基于时间点的备份和恢复\n- 主从复制\n- log-bin[=base_name]\n- binlog_format=[ROW|STATEMENT|MIXED]\n- binlog_rows_query_log_events=[ON|OFF]\n- log_slave_updates=[ON|OFF]\n- sync_binlog=[1|0]\n- expire_logs_days=days\n- PURGE BINARY LOGS TO 'mysql-bin.010'\n- PURGE BINARY LOGS BEFORE '2008-04-02 22:46:24'\n\n### 中继日志（relay_log）\n- relay_log=filename\n- relay_log_purge=[ON|OFF]","source":"_posts/mysql面试（四）日志类问题.md","raw":"---\ntitle: mysql面试（四）日志类问题\ntop: 1\ndate: 2019-09-14 10:49:21\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### MySQL常用日志类型\n\n|日志名称|作用|\n|--|--|\n|错误日志（error_log）|记录mysql在启动、运行或停止时候出现的问题|\n|常规日志（general_log）|记录所有发向MySQL请求|\n|慢查询日志（slow_query_log）|记录符合条件的查询|\n|二进制日志（binary_log）|记录全部有效的数据修改日志|\n|中继日志（relay_log）|用于主从复制、临时存储从主库同步的二进制日志|\n\n### 错误日志（error_log）\n\n- 分析排除MySQL运行错误\n- 记录未经授权的访问\n- log_error=$mysql/sql_log/mysql-error.log\n- log_error_verbosity=[1,2,3]\n\n|verbosity|作用|\n|--|--|\n|1|Error messages|\n|2|Error and warning messages|\n|3|Error ,warning and note messages|\n\n- log_error_services=[日志服务组件;日志服务组件]\n\n|组件名称|作用|\n|--|--|\n|log_filter_internal|默认日志过滤组件，依赖log_error_verbosity|\n|log_sink_internal|默认日志输出组件，依赖log_error|\n|log_sink_json|将错误日志输出到json文件|\n|log_sink_syseventlog|将错误日志输出到系统日志文件|\n\n### 常规日志（general_log）\n\n- 分析客户端发送到MySQL的实际请求\n- general_log=[ON|OFF]\n- general_log_file=$mysql/sql_log/general.log\n- log_output=[FILE|TABLE|NONE]\n\n### 慢查询日志（slow_query_log）\n- 将执行成功并符合条件的查询记录到日志\n- 找到需要优化的SQL\n- slow_query_log=[ON|OFF]\n- slow_query_log_file=$mysql/sql_log/slowlog.log\n- long_query_time=xx秒\n- log_queries_not_using_indexes=[ON|OFF]\n- log_slow_admin_statements=[ON|OFF]\n- log_slow_slave_statements=[ON|OFF]\n\n### 二进制日志（binary_log）\n- 记录所有对数据库的数据修改\n- 基于时间点的备份和恢复\n- 主从复制\n- log-bin[=base_name]\n- binlog_format=[ROW|STATEMENT|MIXED]\n- binlog_rows_query_log_events=[ON|OFF]\n- log_slave_updates=[ON|OFF]\n- sync_binlog=[1|0]\n- expire_logs_days=days\n- PURGE BINARY LOGS TO 'mysql-bin.010'\n- PURGE BINARY LOGS BEFORE '2008-04-02 22:46:24'\n\n### 中继日志（relay_log）\n- relay_log=filename\n- relay_log_purge=[ON|OFF]","slug":"mysql面试（四）日志类问题","published":1,"updated":"2019-11-05T03:27:58.010Z","_id":"ck2lahot0001p0gs6hv65v569","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"MySQL常用日志类型\"><a href=\"#MySQL常用日志类型\" class=\"headerlink\" title=\"MySQL常用日志类型\"></a>MySQL常用日志类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>日志名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误日志（error_log）</td>\n<td>记录mysql在启动、运行或停止时候出现的问题</td>\n</tr>\n<tr>\n<td>常规日志（general_log）</td>\n<td>记录所有发向MySQL请求</td>\n</tr>\n<tr>\n<td>慢查询日志（slow_query_log）</td>\n<td>记录符合条件的查询</td>\n</tr>\n<tr>\n<td>二进制日志（binary_log）</td>\n<td>记录全部有效的数据修改日志</td>\n</tr>\n<tr>\n<td>中继日志（relay_log）</td>\n<td>用于主从复制、临时存储从主库同步的二进制日志</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"错误日志（error-log）\"><a href=\"#错误日志（error-log）\" class=\"headerlink\" title=\"错误日志（error_log）\"></a>错误日志（error_log）</h3><ul>\n<li>分析排除MySQL运行错误</li>\n<li>记录未经授权的访问</li>\n<li>log_error=$mysql/sql_log/mysql-error.log</li>\n<li>log_error_verbosity=[1,2,3]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>verbosity</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Error and warning messages</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Error ,warning and note messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>log_error_services=[日志服务组件;日志服务组件]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_filter_internal</td>\n<td>默认日志过滤组件，依赖log_error_verbosity</td>\n</tr>\n<tr>\n<td>log_sink_internal</td>\n<td>默认日志输出组件，依赖log_error</td>\n</tr>\n<tr>\n<td>log_sink_json</td>\n<td>将错误日志输出到json文件</td>\n</tr>\n<tr>\n<td>log_sink_syseventlog</td>\n<td>将错误日志输出到系统日志文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"常规日志（general-log）\"><a href=\"#常规日志（general-log）\" class=\"headerlink\" title=\"常规日志（general_log）\"></a>常规日志（general_log）</h3><ul>\n<li>分析客户端发送到MySQL的实际请求</li>\n<li>general_log=[ON|OFF]</li>\n<li>general_log_file=$mysql/sql_log/general.log</li>\n<li>log_output=[FILE|TABLE|NONE]</li>\n</ul>\n<h3 id=\"慢查询日志（slow-query-log）\"><a href=\"#慢查询日志（slow-query-log）\" class=\"headerlink\" title=\"慢查询日志（slow_query_log）\"></a>慢查询日志（slow_query_log）</h3><ul>\n<li>将执行成功并符合条件的查询记录到日志</li>\n<li>找到需要优化的SQL</li>\n<li>slow_query_log=[ON|OFF]</li>\n<li>slow_query_log_file=$mysql/sql_log/slowlog.log</li>\n<li>long_query_time=xx秒</li>\n<li>log_queries_not_using_indexes=[ON|OFF]</li>\n<li>log_slow_admin_statements=[ON|OFF]</li>\n<li>log_slow_slave_statements=[ON|OFF]</li>\n</ul>\n<h3 id=\"二进制日志（binary-log）\"><a href=\"#二进制日志（binary-log）\" class=\"headerlink\" title=\"二进制日志（binary_log）\"></a>二进制日志（binary_log）</h3><ul>\n<li>记录所有对数据库的数据修改</li>\n<li>基于时间点的备份和恢复</li>\n<li>主从复制</li>\n<li>log-bin[=base_name]</li>\n<li>binlog_format=[ROW|STATEMENT|MIXED]</li>\n<li>binlog_rows_query_log_events=[ON|OFF]</li>\n<li>log_slave_updates=[ON|OFF]</li>\n<li>sync_binlog=[1|0]</li>\n<li>expire_logs_days=days</li>\n<li>PURGE BINARY LOGS TO ‘mysql-bin.010’</li>\n<li>PURGE BINARY LOGS BEFORE ‘2008-04-02 22:46:24’</li>\n</ul>\n<h3 id=\"中继日志（relay-log）\"><a href=\"#中继日志（relay-log）\" class=\"headerlink\" title=\"中继日志（relay_log）\"></a>中继日志（relay_log）</h3><ul>\n<li>relay_log=filename</li>\n<li>relay_log_purge=[ON|OFF]</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL常用日志类型\"><a href=\"#MySQL常用日志类型\" class=\"headerlink\" title=\"MySQL常用日志类型\"></a>MySQL常用日志类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>日志名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误日志（error_log）</td>\n<td>记录mysql在启动、运行或停止时候出现的问题</td>\n</tr>\n<tr>\n<td>常规日志（general_log）</td>\n<td>记录所有发向MySQL请求</td>\n</tr>\n<tr>\n<td>慢查询日志（slow_query_log）</td>\n<td>记录符合条件的查询</td>\n</tr>\n<tr>\n<td>二进制日志（binary_log）</td>\n<td>记录全部有效的数据修改日志</td>\n</tr>\n<tr>\n<td>中继日志（relay_log）</td>\n<td>用于主从复制、临时存储从主库同步的二进制日志</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"错误日志（error-log）\"><a href=\"#错误日志（error-log）\" class=\"headerlink\" title=\"错误日志（error_log）\"></a>错误日志（error_log）</h3><ul>\n<li>分析排除MySQL运行错误</li>\n<li>记录未经授权的访问</li>\n<li>log_error=$mysql/sql_log/mysql-error.log</li>\n<li>log_error_verbosity=[1,2,3]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>verbosity</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Error and warning messages</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Error ,warning and note messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>log_error_services=[日志服务组件;日志服务组件]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_filter_internal</td>\n<td>默认日志过滤组件，依赖log_error_verbosity</td>\n</tr>\n<tr>\n<td>log_sink_internal</td>\n<td>默认日志输出组件，依赖log_error</td>\n</tr>\n<tr>\n<td>log_sink_json</td>\n<td>将错误日志输出到json文件</td>\n</tr>\n<tr>\n<td>log_sink_syseventlog</td>\n<td>将错误日志输出到系统日志文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"常规日志（general-log）\"><a href=\"#常规日志（general-log）\" class=\"headerlink\" title=\"常规日志（general_log）\"></a>常规日志（general_log）</h3><ul>\n<li>分析客户端发送到MySQL的实际请求</li>\n<li>general_log=[ON|OFF]</li>\n<li>general_log_file=$mysql/sql_log/general.log</li>\n<li>log_output=[FILE|TABLE|NONE]</li>\n</ul>\n<h3 id=\"慢查询日志（slow-query-log）\"><a href=\"#慢查询日志（slow-query-log）\" class=\"headerlink\" title=\"慢查询日志（slow_query_log）\"></a>慢查询日志（slow_query_log）</h3><ul>\n<li>将执行成功并符合条件的查询记录到日志</li>\n<li>找到需要优化的SQL</li>\n<li>slow_query_log=[ON|OFF]</li>\n<li>slow_query_log_file=$mysql/sql_log/slowlog.log</li>\n<li>long_query_time=xx秒</li>\n<li>log_queries_not_using_indexes=[ON|OFF]</li>\n<li>log_slow_admin_statements=[ON|OFF]</li>\n<li>log_slow_slave_statements=[ON|OFF]</li>\n</ul>\n<h3 id=\"二进制日志（binary-log）\"><a href=\"#二进制日志（binary-log）\" class=\"headerlink\" title=\"二进制日志（binary_log）\"></a>二进制日志（binary_log）</h3><ul>\n<li>记录所有对数据库的数据修改</li>\n<li>基于时间点的备份和恢复</li>\n<li>主从复制</li>\n<li>log-bin[=base_name]</li>\n<li>binlog_format=[ROW|STATEMENT|MIXED]</li>\n<li>binlog_rows_query_log_events=[ON|OFF]</li>\n<li>log_slave_updates=[ON|OFF]</li>\n<li>sync_binlog=[1|0]</li>\n<li>expire_logs_days=days</li>\n<li>PURGE BINARY LOGS TO ‘mysql-bin.010’</li>\n<li>PURGE BINARY LOGS BEFORE ‘2008-04-02 22:46:24’</li>\n</ul>\n<h3 id=\"中继日志（relay-log）\"><a href=\"#中继日志（relay-log）\" class=\"headerlink\" title=\"中继日志（relay_log）\"></a>中继日志（relay_log）</h3><ul>\n<li>relay_log=filename</li>\n<li>relay_log_purge=[ON|OFF]</li>\n</ul>\n"},{"title":"nginx 负载均衡模式","date":"2019-03-29T06:48:42.000Z","top":0,"_content":"Nginx 的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight 默认值为 1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的 server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx负载均衡模式.md","raw":"---\ntitle: nginx 负载均衡模式\ndate: 2019-03-29 14:48:42\ntags: [nginx]\ncategories: \"nginx\"\ntop: 0\n---\nNginx 的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight 默认值为 1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的 server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx负载均衡模式","published":1,"updated":"2019-08-01T02:44:00.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot1001t0gs680jxinl8","content":"<p>Nginx 的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight 默认值为 1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的 server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx 的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight 默认值为 1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的 server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（八）管理及监控类问题","top":1,"date":"2019-09-18T05:52:54.000Z","_content":"","source":"_posts/mysql面试（八）管理及监控类问题.md","raw":"---\ntitle: mysql面试（八）管理及监控类问题\ntop: 1\ndate: 2019-09-18 13:52:54\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n","slug":"mysql面试（八）管理及监控类问题","published":1,"updated":"2019-11-04T06:00:55.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot2001w0gs6wtli207b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"nginx 配置 https 出现 no\"ssl_certificate\" is defined","date":"2019-03-28T08:43:50.000Z","top":0,"_content":"\n### 一、问题\n\n今天在配置 nginx 的 https 发现报错：\n\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n\n意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。\n\n### 二、解决方案\n\nnginx 的配置文件中 nginx.conf 中加入\n\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置https出现no ssl_certificate.md","raw":"---\ntitle: nginx 配置 https 出现 no\"ssl_certificate\" is defined\ndate: 2019-03-28 16:43:50\ntags: [nginx, https, ssl]\ncategories: \"nginx\"\ntop: 0\n---\n\n### 一、问题\n\n今天在配置 nginx 的 https 发现报错：\n\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n\n意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。\n\n### 二、解决方案\n\nnginx 的配置文件中 nginx.conf 中加入\n\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置https出现no ssl_certificate","published":1,"updated":"2019-11-02T04:06:51.079Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot400200gs6skrlgp81","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置 nginx 的 https 发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx 的配置文件中 nginx.conf 中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置 nginx 的 https 发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx 的配置文件中 nginx.conf 中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（六）MySQL架构类问题","top":1,"date":"2019-09-17T05:28:35.000Z","_content":"### MySQL主从复制实现原理\n- 开启二进制日志\n\n#### 异步复制\n\n- master修改后写入binary_log（execute-binlog-commit）\n- slave开启io线程，读取master binlog_dump，写入relaylog\n- slave的sql线程，读取relaylog，重新执行到从库\n\n#### 半同步复制\n- master修改后写入binary_log（execute-binlog）\n- slave开启io线程，读取master binlog_dump，写入relaylog\n- slave发送ACK到master，master commit(阻塞) 提交\n- slave的sql线程，读取relaylog，重新执行到从库\n\n### MySQL主从复制配置步骤\n\n#### master服务器操作\n1. 开启binlog(必须)开启gtid(可选)\n2. 建立同步所用的数据库账号\n3. 使用master_data参数备份数据库\n4. 备份数据传到slave服务器\n\n#### slave服务器操作\n1. 开启binlog(可选)开启gtid(可选)\n2. 恢复master上的备份数据库\n3. 使用change master配置链路\n4. 使用startslave启动复制","source":"_posts/mysql面试（六）MySQL架构类问题.md","raw":"---\ntitle: mysql面试（六）MySQL架构类问题\ntop: 1\ndate: 2019-09-17 13:28:35\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### MySQL主从复制实现原理\n- 开启二进制日志\n\n#### 异步复制\n\n- master修改后写入binary_log（execute-binlog-commit）\n- slave开启io线程，读取master binlog_dump，写入relaylog\n- slave的sql线程，读取relaylog，重新执行到从库\n\n#### 半同步复制\n- master修改后写入binary_log（execute-binlog）\n- slave开启io线程，读取master binlog_dump，写入relaylog\n- slave发送ACK到master，master commit(阻塞) 提交\n- slave的sql线程，读取relaylog，重新执行到从库\n\n### MySQL主从复制配置步骤\n\n#### master服务器操作\n1. 开启binlog(必须)开启gtid(可选)\n2. 建立同步所用的数据库账号\n3. 使用master_data参数备份数据库\n4. 备份数据传到slave服务器\n\n#### slave服务器操作\n1. 开启binlog(可选)开启gtid(可选)\n2. 恢复master上的备份数据库\n3. 使用change master配置链路\n4. 使用startslave启动复制","slug":"mysql面试（六）MySQL架构类问题","published":1,"updated":"2019-11-05T05:54:49.383Z","_id":"ck2lahot500240gs6dneq1ss4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"MySQL主从复制实现原理\"><a href=\"#MySQL主从复制实现原理\" class=\"headerlink\" title=\"MySQL主从复制实现原理\"></a>MySQL主从复制实现原理</h3><ul>\n<li>开启二进制日志</li>\n</ul>\n<h4 id=\"异步复制\"><a href=\"#异步复制\" class=\"headerlink\" title=\"异步复制\"></a>异步复制</h4><ul>\n<li>master修改后写入binary_log（execute-binlog-commit）</li>\n<li>slave开启io线程，读取master binlog_dump，写入relaylog</li>\n<li>slave的sql线程，读取relaylog，重新执行到从库</li>\n</ul>\n<h4 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h4><ul>\n<li>master修改后写入binary_log（execute-binlog）</li>\n<li>slave开启io线程，读取master binlog_dump，写入relaylog</li>\n<li>slave发送ACK到master，master commit(阻塞) 提交</li>\n<li>slave的sql线程，读取relaylog，重新执行到从库</li>\n</ul>\n<h3 id=\"MySQL主从复制配置步骤\"><a href=\"#MySQL主从复制配置步骤\" class=\"headerlink\" title=\"MySQL主从复制配置步骤\"></a>MySQL主从复制配置步骤</h3><h4 id=\"master服务器操作\"><a href=\"#master服务器操作\" class=\"headerlink\" title=\"master服务器操作\"></a>master服务器操作</h4><ol>\n<li>开启binlog(必须)开启gtid(可选)</li>\n<li>建立同步所用的数据库账号</li>\n<li>使用master_data参数备份数据库</li>\n<li>备份数据传到slave服务器</li>\n</ol>\n<h4 id=\"slave服务器操作\"><a href=\"#slave服务器操作\" class=\"headerlink\" title=\"slave服务器操作\"></a>slave服务器操作</h4><ol>\n<li>开启binlog(可选)开启gtid(可选)</li>\n<li>恢复master上的备份数据库</li>\n<li>使用change master配置链路</li>\n<li>使用startslave启动复制</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL主从复制实现原理\"><a href=\"#MySQL主从复制实现原理\" class=\"headerlink\" title=\"MySQL主从复制实现原理\"></a>MySQL主从复制实现原理</h3><ul>\n<li>开启二进制日志</li>\n</ul>\n<h4 id=\"异步复制\"><a href=\"#异步复制\" class=\"headerlink\" title=\"异步复制\"></a>异步复制</h4><ul>\n<li>master修改后写入binary_log（execute-binlog-commit）</li>\n<li>slave开启io线程，读取master binlog_dump，写入relaylog</li>\n<li>slave的sql线程，读取relaylog，重新执行到从库</li>\n</ul>\n<h4 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h4><ul>\n<li>master修改后写入binary_log（execute-binlog）</li>\n<li>slave开启io线程，读取master binlog_dump，写入relaylog</li>\n<li>slave发送ACK到master，master commit(阻塞) 提交</li>\n<li>slave的sql线程，读取relaylog，重新执行到从库</li>\n</ul>\n<h3 id=\"MySQL主从复制配置步骤\"><a href=\"#MySQL主从复制配置步骤\" class=\"headerlink\" title=\"MySQL主从复制配置步骤\"></a>MySQL主从复制配置步骤</h3><h4 id=\"master服务器操作\"><a href=\"#master服务器操作\" class=\"headerlink\" title=\"master服务器操作\"></a>master服务器操作</h4><ol>\n<li>开启binlog(必须)开启gtid(可选)</li>\n<li>建立同步所用的数据库账号</li>\n<li>使用master_data参数备份数据库</li>\n<li>备份数据传到slave服务器</li>\n</ol>\n<h4 id=\"slave服务器操作\"><a href=\"#slave服务器操作\" class=\"headerlink\" title=\"slave服务器操作\"></a>slave服务器操作</h4><ol>\n<li>开启binlog(可选)开启gtid(可选)</li>\n<li>恢复master上的备份数据库</li>\n<li>使用change master配置链路</li>\n<li>使用startslave启动复制</li>\n</ol>\n"},{"title":"nginx配置socket.io负载均衡","date":"2019-05-06T23:57:34.000Z","top":0,"_content":"nginx 配置\n\n```shell\nupstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\nsocket.io\n\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置socket.io负载均衡.md","raw":"---\ntitle: nginx配置socket.io负载均衡\ndate: 2019-05-07 07:57:34\ntags: [\"node\",\"nginx\"]\ncategories: \"node\"\ntop: 0\n---\nnginx 配置\n\n```shell\nupstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\nsocket.io\n\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置socket.io负载均衡","published":1,"updated":"2019-11-02T04:31:14.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot600270gs6z0jrsroa","content":"<p>nginx 配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>nginx 配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx 配置文件","date":"2019-04-03T01:40:29.000Z","top":0,"_content":"\n### nginx 配置文件\n\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置文件.md","raw":"---\ntitle: nginx 配置文件\ndate: 2019-04-03 09:40:29\ntags: [nginx]\ncategories: \"nginx\"\ntop: 0\n---\n\n### nginx 配置文件\n\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置文件","published":1,"updated":"2019-08-01T02:44:16.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot7002c0gs6rm1n4sx7","content":"<h3 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"python 在类中实现 swith 功能","date":"2019-03-29T06:51:12.000Z","top":0,"_content":"\n### 问题\n\nPython 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码\n\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n\n其中主要用到 getattr 这个函数，用于返回一个对象属性值。\n\n```python\ngetattr(object, name[, default])\n```\n\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/python在类中实现swith功能.md","raw":"---\ntitle: python 在类中实现 swith 功能\ndate: 2019-03-29 14:51:12\ntags: [python]\ncategories: \"python\"\ntop: 0\n---\n\n### 问题\n\nPython 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码\n\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n\n其中主要用到 getattr 这个函数，用于返回一个对象属性值。\n\n```python\ngetattr(object, name[, default])\n```\n\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"python在类中实现swith功能","published":1,"updated":"2019-08-01T02:44:31.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahot8002f0gs6szmqv8nj","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到 getattr 这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到 getattr 这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"swoole 异步 task","date":"2019-03-29T06:41:35.000Z","top":0,"_content":"\n### 记录\n\n今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n\n```PHP\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始、n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了、n\";\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo \"finish\";\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n\n客户端\n\n```PHP\nclass Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/swoole异步task.md","raw":"---\ntitle: swoole 异步 task\ndate: 2019-03-29 14:41:35\ntags: [swoole]\ncategories: \"php\"\ntop: 0\n---\n\n### 记录\n\n今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n\n```PHP\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始、n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了、n\";\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo \"finish\";\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n\n客户端\n\n```PHP\nclass Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"swoole异步task","published":1,"updated":"2019-08-01T02:44:27.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahota002k0gs69ttbvhqz","content":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">class Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始、n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了、n&quot;;\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo &quot;finish&quot;;\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">class Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始、n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了、n&quot;;\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo &quot;finish&quot;;\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"vscode 快捷键和扩展","date":"2019-04-03T06:39:39.000Z","top":2,"_content":"\n### 快捷键\n\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首 / 行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行 / 末行    Ctrl + Home/End\n- 选中字符到左边 / 右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式 (Toggle Zen Mode)\n\n### 插件\n\n- Code Runner\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/vscode快捷键.md","raw":"---\ntitle: vscode 快捷键和扩展\ndate: 2019-04-03 14:39:39\ntags: [vscode]\ntop: 2\n---\n\n### 快捷键\n\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首 / 行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行 / 末行    Ctrl + Home/End\n- 选中字符到左边 / 右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式 (Toggle Zen Mode)\n\n### 插件\n\n- Code Runner\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"vscode快捷键","published":1,"updated":"2019-08-01T03:05:34.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotb002n0gs6ewpj926y","content":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首 / 行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行 / 末行    Ctrl + Home/End</li>\n<li>选中字符到左边 / 右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式 (Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首 / 行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行 / 末行    Ctrl + Home/End</li>\n<li>选中字符到左边 / 右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式 (Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"wsl 搭建 php 环境请求超时的问题解决方案","date":"2019-03-28T08:42:53.000Z","top":0,"_content":"\n### 一、出现问题\n\n今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示\n\n```bash\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\n\nnginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了\n1.TCP 是使用 TCP 端口连接 127.0.0.1:9000\n\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n\n2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。\n当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。\n\n### 三、解决方案\n\n在 nginx 的配置文件中加入\n\n```bash\n fastcgi_buffering off;\n```\n\n这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/wsl搭建php环境请求超时的问题解决方案.md","raw":"---\ntitle: wsl 搭建 php 环境请求超时的问题解决方案\ndate: 2019-03-28 16:42:53\ntags: [wsl,nginx,php-fpm]\ncategories: \"php\"\ntop: 0\n---\n\n### 一、出现问题\n\n今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示\n\n```bash\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\n\nnginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了\n1.TCP 是使用 TCP 端口连接 127.0.0.1:9000\n\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n\n2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。\n当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。\n\n### 三、解决方案\n\n在 nginx 的配置文件中加入\n\n```bash\n fastcgi_buffering off;\n```\n\n这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"wsl搭建php环境请求超时的问题解决方案","published":1,"updated":"2019-08-01T02:44:20.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotc002s0gs699mdlyed","content":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示</p>\n<pre><code class=\"lang-bash\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre>\n<p>nginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了<br>1.TCP 是使用 TCP 端口连接 127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。<br>当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在 nginx 的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示</p>\n<pre><code class=\"lang-bash\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre>\n<p>nginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了<br>1.TCP 是使用 TCP 端口连接 127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。<br>当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在 nginx 的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（一）","date":"2019-01-29T06:55:52.000Z","top":0,"_content":"\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。**\n\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n\n##### 1.1、集合结构\n\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg)\n\n##### 1.2 线性结构\n\n  - 线性结构中的数据元素之间是一对一的关系。\n ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg)\n\n##### 1.3 树形结构\n\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg)\n\n#### 1.4 图形结构\n\n  - 图形结构的数据元素是多对多的关系。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg)\n\n#### 2、物理结构\n\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n\n##### 2.1、顺序存储\n\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg)\n\n##### 2.2、链式存储\n\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（一）\ndate: 2019-01-29 14:55:52\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。**\n\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n\n##### 1.1、集合结构\n\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg)\n\n##### 1.2 线性结构\n\n  - 线性结构中的数据元素之间是一对一的关系。\n ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg)\n\n##### 1.3 树形结构\n\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg)\n\n#### 1.4 图形结构\n\n  - 图形结构的数据元素是多对多的关系。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg)\n\n#### 2、物理结构\n\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n\n##### 2.1、顺序存储\n\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg)\n\n##### 2.2、链式存储\n\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（一）","published":1,"updated":"2019-11-02T06:50:40.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotd002v0gs6eq1e775p","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。</strong></p>\n</li>\n</ul>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3><h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。</li>\n</ul>\n<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg\" alt></li>\n</ul>\n<h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5><ul>\n<li>线性结构中的数据元素之间是一对一的关系。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5><ul>\n<li><p>树形结构中的数据元素之间存在一种一对多的层次关系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg\" alt></p>\n</li>\n</ul>\n<h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg\" alt></li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。</li>\n</ul>\n<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg\" alt></li>\n</ul>\n<h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5><ul>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。</strong></p>\n</li>\n</ul>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3><h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。</li>\n</ul>\n<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg\" alt></li>\n</ul>\n<h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5><ul>\n<li>线性结构中的数据元素之间是一对一的关系。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5><ul>\n<li><p>树形结构中的数据元素之间存在一种一对多的层次关系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg\" alt></p>\n</li>\n</ul>\n<h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg\" alt></li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。</li>\n</ul>\n<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg\" alt></li>\n</ul>\n<h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5><ul>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（七）","date":"2019-02-11T03:12:17.000Z","top":0,"_content":"\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语\n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn 阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)\n```\n\n### 最坏情况与平均情况\n\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n\n### 空间复杂度\n\n计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（七）.md","raw":"---\ntitle: 《大话数据结构》读后总结（七）\ndate: 2019-02-11 11:12:17\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语\n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn 阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)\n```\n\n### 最坏情况与平均情况\n\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n\n### 空间复杂度\n\n计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（七）","published":1,"updated":"2019-11-02T06:51:51.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotf002z0gs6m6we5ncq","content":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn 阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn 阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（三）","date":"2019-02-02T06:57:45.000Z","top":0,"_content":"\n### 一、算法\n\n#### 1、定义\n\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n\n**ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n\n#### 2、算法与数据结构的关系\n\n- 算法是数据结构的具体运用。\n\n#### 3、算法的特性\n\n##### 3.1 输入输出\n\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n\n##### 3.2 有穷性\n\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n\n##### 3.3 确定性\n\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n\n##### 3.4 可行性\n\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n\n#### 4、算法设计的要求\n\n##### 4.1 正确性\n\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1. 算法程序没有语法错误。\n\n  2. 算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3. 算法程序对于非法的输入数据能够得出满足规格说明的结果。\n\n  4. 算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。\n\n##### 4.2 可读性\n\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n\n##### 4.3 健壮性\n\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n\n##### 4.4 时间效率高和存储量低\n\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（三）.md","raw":"---\ntitle: 《大话数据结构》读后总结（三）\ndate: 2019-02-02 14:57:45\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、算法\n\n#### 1、定义\n\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n\n**ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n\n#### 2、算法与数据结构的关系\n\n- 算法是数据结构的具体运用。\n\n#### 3、算法的特性\n\n##### 3.1 输入输出\n\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n\n##### 3.2 有穷性\n\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n\n##### 3.3 确定性\n\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n\n##### 3.4 可行性\n\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n\n#### 4、算法设计的要求\n\n##### 4.1 正确性\n\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1. 算法程序没有语法错误。\n\n  2. 算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3. 算法程序对于非法的输入数据能够得出满足规格说明的结果。\n\n  4. 算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。\n\n##### 4.2 可读性\n\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n\n##### 4.3 健壮性\n\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n\n##### 4.4 时间效率高和存储量低\n\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（三）","published":1,"updated":"2019-11-02T06:51:05.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotg00330gs6915ikoyf","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。</li>\n</ul>\n<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5><ul>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</li>\n</ul>\n<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5><ul>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。</li>\n</ul>\n<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5><ul>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。</li>\n</ul>\n<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5><ul>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<ol>\n<li><p>算法程序没有语法错误。</p>\n</li>\n<li><p>算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n</li>\n<li><p>算法程序对于非法的输入数据能够得出满足规格说明的结果。</p>\n</li>\n<li><p>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n</ol>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。</p>\n</li>\n</ul>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5><ul>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。</li>\n</ul>\n<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5><ul>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。</li>\n</ul>\n<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5><ul>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。</li>\n</ul>\n<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5><ul>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</li>\n</ul>\n<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5><ul>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。</li>\n</ul>\n<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5><ul>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。</li>\n</ul>\n<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5><ul>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<ol>\n<li><p>算法程序没有语法错误。</p>\n</li>\n<li><p>算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n</li>\n<li><p>算法程序对于非法的输入数据能够得出满足规格说明的结果。</p>\n</li>\n<li><p>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n</ol>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。</p>\n</li>\n</ul>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5><ul>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。</li>\n</ul>\n<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5><ul>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。</li>\n</ul>\n<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5><ul>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（九）","date":"2019-02-15T03:47:11.000Z","top":0,"_content":"\n### 线性表\n\n#### 顺序存储结构的插入与删除\n\n##### 获得元素操作\n\n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 ||\n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n\n##### 插入操作\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)\n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i < 1 || i >L->length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)\n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;\n    L->length++;\n    return OK;\n}\n```\n\n##### 删除操作\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)\n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)\n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。\n\n##### 线性表顺序存储结构的优缺点\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（九）.md","raw":"---\ntitle: 《大话数据结构》读后总结（九）\ndate: 2019-02-15 11:47:11\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 顺序存储结构的插入与删除\n\n##### 获得元素操作\n\n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 ||\n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n\n##### 插入操作\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)\n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i < 1 || i >L->length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)\n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;\n    L->length++;\n    return OK;\n}\n```\n\n##### 删除操作\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)\n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)\n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。\n\n##### 线性表顺序存储结构的优缺点\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（九）","published":1,"updated":"2019-11-02T06:52:11.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahoti00370gs6ev9rbwv1","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code class=\"lang-c\">#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 ||\n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre>\n<h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)\n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)\n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;\n    L-&gt;length++;\n    return OK;\n}\n</code></pre>\n<h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)\n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)\n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre>\n<p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code class=\"lang-c\">#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 ||\n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre>\n<h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)\n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)\n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;\n    L-&gt;length++;\n    return OK;\n}\n</code></pre>\n<h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)\n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)\n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre>\n<p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（二）","date":"2019-01-30T06:57:38.000Z","top":0,"_content":"\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在 C 语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（二）.md","raw":"---\ntitle: 《大话数据结构》读后总结（二）\ndate: 2019-01-30 14:57:38\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在 C 语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（二）","published":1,"updated":"2019-11-02T06:50:54.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahoti003a0gs6avmz2xxm","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在 C 语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在 C 语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（五）","date":"2019-02-05T02:55:55.000Z","top":0,"_content":"\n### 函数的渐近增长\n\n假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg)\n\n当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n>2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。\n\n输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n>N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg)\n\n当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n>3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg)\n\n当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n>1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg)\n\n当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（五）.md","raw":"---\ntitle: 《大话数据结构》读后总结（五）\ndate: 2019-02-05 10:55:55\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 函数的渐近增长\n\n假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg)\n\n当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n>2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。\n\n输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n>N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg)\n\n当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n>3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg)\n\n当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n>1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg)\n\n当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（五）","published":1,"updated":"2019-11-02T06:51:26.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotk003f0gs62f064w42","content":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n&gt;2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。</p>\n<p>输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n&gt;N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n&gt;3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n&gt;1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n&gt;2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。</p>\n<p>输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n&gt;N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n&gt;3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n&gt;1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（八）","date":"2019-02-13T03:47:01.000Z","top":0,"_content":"\n### 线性表\n\n#### 定义\n\n线性表（List）：零个或多个数据元素的有限序列\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg)\n\n线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。\n\n#### 抽象数据类型\n\n```\nADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n\n##### 定义\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg)\n\n##### 顺序存储方式\n\n把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n\n```c\n/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n```\n\n##### 数组长度与线性表长度区别\n\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。\n\n```c\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（八）.md","raw":"---\ntitle: 《大话数据结构》读后总结（八）\ndate: 2019-02-13 11:47:01\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 定义\n\n线性表（List）：零个或多个数据元素的有限序列\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg)\n\n线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。\n\n#### 抽象数据类型\n\n```\nADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n\n##### 定义\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg)\n\n##### 顺序存储方式\n\n把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n\n```c\n/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n```\n\n##### 数组长度与线性表长度区别\n\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。\n\n```c\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（八）","published":1,"updated":"2019-11-02T06:52:00.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotl003h0gs6n1whq3f5","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code class=\"lang-c\">/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n</code></pre>\n<h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。</p>\n<pre><code class=\"lang-c\">LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code class=\"lang-c\">/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n</code></pre>\n<h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。</p>\n<pre><code class=\"lang-c\">LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（六）","date":"2019-02-07T02:56:25.000Z","top":0,"_content":"\n### 算法时间复杂度定义\n\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。\n\n一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。\n\nO(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。\n\n推导大 O 阶：\n\n1．用常数 1 取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。\n\n#### 常数阶\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。\n\n#### 线性阶\n\n```c\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n\n时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。\n\n#### 对数阶\n\n```c\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n\n由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。\n\n#### 平方阶\n\n```c\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n\n外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。\n\n```c\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n\n执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（六）.md","raw":"---\ntitle: 《大话数据结构》读后总结（六）\ndate: 2019-02-07 10:56:25\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 算法时间复杂度定义\n\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。\n\n一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。\n\nO(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。\n\n推导大 O 阶：\n\n1．用常数 1 取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。\n\n#### 常数阶\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。\n\n#### 线性阶\n\n```c\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n\n时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。\n\n#### 对数阶\n\n```c\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n\n由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。\n\n#### 平方阶\n\n```c\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n\n外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。\n\n```c\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n\n执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（六）","published":1,"updated":"2019-11-02T06:51:39.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotm003m0gs6ac6pxj16","content":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。</p>\n<p>一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</p>\n<p>O(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。</p>\n<p>推导大 O 阶：</p>\n<p>1．用常数 1 取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<p>运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code class=\"lang-c\">int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre>\n<p>时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code class=\"lang-c\">int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre>\n<p>由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code class=\"lang-c\">int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。</p>\n<pre><code class=\"lang-c\">n++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。</p>\n<p>一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</p>\n<p>O(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。</p>\n<p>推导大 O 阶：</p>\n<p>1．用常数 1 取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<p>运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code class=\"lang-c\">int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre>\n<p>时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code class=\"lang-c\">int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre>\n<p>由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code class=\"lang-c\">int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。</p>\n<pre><code class=\"lang-c\">n++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十一）","date":"2019-02-25T03:47:28.000Z","top":0,"_content":"\n### 单链表的读取\n\n单链表第 i 个数据的算法思路：\n\n1. 声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，返回结点 p 的数据。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L->next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p && j < i)\n    {\n        p = p->next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p->data;       /* 取第i个结点的数据 */\n    return OK;\n}\n```\n\n从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。\n\n### 单链表的插入与删除\n\n#### 单链表的插入\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg)\n\n```c\ns->next = p->next; p->next = s;\n```\n\n单链表第 i 个数据插入结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，在系统中生成一个空结点 s；\n\n5. 将数据元素 e 赋值给 s->data；\n\n6. 单链表的插入标准语句 s->next=p->next;p->next=s；\n\n7. 返回成功。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j > i)\n        return ERROR;\n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s->next = p->next;\n    /* 将s赋值给p的后继 */\n    p->next = s;\n    return OK;\n}\n```\n\n#### 单链表的删除\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg)\n\n```c\nq=p->next; p->next=q->next;\n```\n\n单链表第 i 个数据删除结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，将欲删除的结点 p->next 赋值给 q；\n\n5. 单链表的删除标准语句 p->next=q->next；\n\n6. 将 q 结点中的数据赋值给 e，作为返回；\n\n7. 释放 q 结点；\n\n8. 返回成功。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p->next && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;\n    q = p->next;\n    /* 将q的后继赋值给p的后继 */\n    p->next = q->next;\n    /* 将q结点中的数据给e */\n    *e = q->data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n```\n\n### 总结\n\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是 O(n)。\n\n如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（十一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十一）\ndate: 2019-02-25 11:47:28\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 单链表的读取\n\n单链表第 i 个数据的算法思路：\n\n1. 声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，返回结点 p 的数据。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L->next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p && j < i)\n    {\n        p = p->next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p->data;       /* 取第i个结点的数据 */\n    return OK;\n}\n```\n\n从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。\n\n### 单链表的插入与删除\n\n#### 单链表的插入\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg)\n\n```c\ns->next = p->next; p->next = s;\n```\n\n单链表第 i 个数据插入结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，在系统中生成一个空结点 s；\n\n5. 将数据元素 e 赋值给 s->data；\n\n6. 单链表的插入标准语句 s->next=p->next;p->next=s；\n\n7. 返回成功。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j > i)\n        return ERROR;\n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s->next = p->next;\n    /* 将s赋值给p的后继 */\n    p->next = s;\n    return OK;\n}\n```\n\n#### 单链表的删除\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg)\n\n```c\nq=p->next; p->next=q->next;\n```\n\n单链表第 i 个数据删除结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，将欲删除的结点 p->next 赋值给 q；\n\n5. 单链表的删除标准语句 p->next=q->next；\n\n6. 将 q 结点中的数据赋值给 e，作为返回；\n\n7. 释放 q 结点；\n\n8. 返回成功。\n\n```c\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p->next && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;\n    q = p->next;\n    /* 将q的后继赋值给p的后继 */\n    p->next = q->next;\n    /* 将q结点中的数据给e */\n    *e = q->data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n```\n\n### 总结\n\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是 O(n)。\n\n如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（十一）","published":1,"updated":"2019-11-02T06:52:30.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotn003p0gs6exs7tijv","content":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第 i 个数据的算法思路：</p>\n<ol>\n<li><p>声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，返回结点 p 的数据。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L-&gt;next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p-&gt;data;       /* 取第i个结点的数据 */\n    return OK;\n}\n</code></pre>\n<p>从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre>\n<p>单链表第 i 个数据插入结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，在系统中生成一个空结点 s；</p>\n</li>\n<li><p>将数据元素 e 赋值给 s-&gt;data；</p>\n</li>\n<li><p>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;\n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s-&gt;data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s-&gt;next = p-&gt;next;\n    /* 将s赋值给p的后继 */\n    p-&gt;next = s;\n    return OK;\n}\n</code></pre>\n<h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre>\n<p>单链表第 i 个数据删除结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，将欲删除的结点 p-&gt;next 赋值给 q；</p>\n</li>\n<li><p>单链表的删除标准语句 p-&gt;next=q-&gt;next；</p>\n</li>\n<li><p>将 q 结点中的数据赋值给 e，作为返回；</p>\n</li>\n<li><p>释放 q 结点；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;\n    q = p-&gt;next;\n    /* 将q的后继赋值给p的后继 */\n    p-&gt;next = q-&gt;next;\n    /* 将q结点中的数据给e */\n    *e = q-&gt;data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是 O(n)。</p>\n<p>如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第 i 个数据的算法思路：</p>\n<ol>\n<li><p>声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，返回结点 p 的数据。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L-&gt;next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p-&gt;data;       /* 取第i个结点的数据 */\n    return OK;\n}\n</code></pre>\n<p>从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre>\n<p>单链表第 i 个数据插入结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，在系统中生成一个空结点 s；</p>\n</li>\n<li><p>将数据元素 e 赋值给 s-&gt;data；</p>\n</li>\n<li><p>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;\n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s-&gt;data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s-&gt;next = p-&gt;next;\n    /* 将s赋值给p的后继 */\n    p-&gt;next = s;\n    return OK;\n}\n</code></pre>\n<h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre>\n<p>单链表第 i 个数据删除结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，将欲删除的结点 p-&gt;next 赋值给 q；</p>\n</li>\n<li><p>单链表的删除标准语句 p-&gt;next=q-&gt;next；</p>\n</li>\n<li><p>将 q 结点中的数据赋值给 e，作为返回；</p>\n</li>\n<li><p>释放 q 结点；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;\n    q = p-&gt;next;\n    /* 将q的后继赋值给p的后继 */\n    p-&gt;next = q-&gt;next;\n    /* 将q结点中的数据给e */\n    *e = q-&gt;data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是 O(n)。</p>\n<p>如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（四）","date":"2019-02-04T06:57:52.000Z","top":0,"_content":"\n### 一、算法\n\n#### 1、算法效率的度量方法\n\n##### 1.1 事后统计方法\n\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1. 必须依据算法事先编制好程序，花费时间和人力\n\n  2. 时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n\n  3. 算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n\n##### 1.2 事后统计方法\n\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：\n\n  1. 算法采用的策略、方法。\n\n  2. 编译产生的代码质量。\n\n  3. 问题的输入规模。\n\n  4. 机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n\n```c\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n\n第二种\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n- 第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；\n- 第二种算法，是 1+1+1=3 次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。\n第三种\n\n```c\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n\n这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+...+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是 n，求和算法的第一种，求 1+2+...+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg)\n\n随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（四）.md","raw":"---\ntitle: 《大话数据结构》读后总结（四）\ndate: 2019-02-04 14:57:52\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、算法\n\n#### 1、算法效率的度量方法\n\n##### 1.1 事后统计方法\n\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1. 必须依据算法事先编制好程序，花费时间和人力\n\n  2. 时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n\n  3. 算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n\n##### 1.2 事后统计方法\n\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：\n\n  1. 算法采用的策略、方法。\n\n  2. 编译产生的代码质量。\n\n  3. 问题的输入规模。\n\n  4. 机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n\n```c\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n\n第二种\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n- 第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；\n- 第二种算法，是 1+1+1=3 次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。\n第三种\n\n```c\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n\n这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+...+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是 n，求和算法的第一种，求 1+2+...+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg)\n\n随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（四）","published":1,"updated":"2019-11-02T06:51:16.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotp003t0gs6lq8l9un0","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<ol>\n<li><p>必须依据算法事先编制好程序，花费时间和人力</p>\n</li>\n<li><p>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n</li>\n<li><p>算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5><ul>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li><p>算法采用的策略、方法。</p>\n</li>\n<li><p>编译产生的代码质量。</p>\n</li>\n<li><p>问题的输入规模。</p>\n</li>\n<li><p>机器执行指令的速度。</p>\n</li>\n</ol>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行1次 */\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<ul>\n<li>第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；</li>\n<li>第二种算法，是 1+1+1=3 次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。<br>第三种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n    for (j = 1; j &lt;= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>\n<p>这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+…+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是 n，求和算法的第一种，求 1+2+…+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<ol>\n<li><p>必须依据算法事先编制好程序，花费时间和人力</p>\n</li>\n<li><p>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n</li>\n<li><p>算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5><ul>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li><p>算法采用的策略、方法。</p>\n</li>\n<li><p>编译产生的代码质量。</p>\n</li>\n<li><p>问题的输入规模。</p>\n</li>\n<li><p>机器执行指令的速度。</p>\n</li>\n</ol>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行1次 */\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<ul>\n<li>第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；</li>\n<li>第二种算法，是 1+1+1=3 次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。<br>第三种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n    for (j = 1; j &lt;= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>\n<p>这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+…+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是 n，求和算法的第一种，求 1+2+…+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十）","date":"2019-02-20T03:47:21.000Z","top":0,"_content":"\n### 线性表\n\n#### 线性表的链式存储结构\n\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。\n\nn 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg)\n\n线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg)\n\n#### 头指针与头结点的异同\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg)\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p->data 来表示，p->data 的值是一个数据元素，结点 ai 的指针域可以用 p->next 来表示，p->next 的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（十）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十）\ndate: 2019-02-20 11:47:21\ntags: 【数据结构，算法】\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 线性表的链式存储结构\n\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。\n\nn 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg)\n\n线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg)\n\n#### 头指针与头结点的异同\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg)\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p->data 来表示，p->data 的值是一个数据元素，结点 ai 的指针域可以用 p->next 来表示，p->next 的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（十）","published":1,"updated":"2019-11-02T06:52:23.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotq003v0gs6zqusrhki","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。</p>\n<p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p-&gt;data 来表示，p-&gt;data 的值是一个数据元素，结点 ai 的指针域可以用 p-&gt;next 来表示，p-&gt;next 的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。</p>\n<p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p-&gt;data 来表示，p-&gt;data 的值是一个数据元素，结点 ai 的指针域可以用 p-&gt;next 来表示，p-&gt;next 的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"信息记录","top":2,"date":"2019-07-25T03:23:58.000Z","_content":"### ev4\n32121-A78A-7C50-F695-FDE1\n\n32121-598C-4238-6A58-4802\n\n### vscode setting sync \nGithub Personal access tokens : 997baa6462aca7741808446f1b0c9912\n","source":"_posts/信息记录.md","raw":"---\ntitle: 信息记录\ntop: 2\ndate: 2019-07-25 11:23:58\ntags:\n---\n### ev4\n32121-A78A-7C50-F695-FDE1\n\n32121-598C-4238-6A58-4802\n\n### vscode setting sync \nGithub Personal access tokens : 997baa6462aca7741808446f1b0c9912\n","slug":"信息记录","published":1,"updated":"2019-08-01T10:59:54.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotr003z0gs6edq8gc70","content":"<h3 id=\"ev4\"><a href=\"#ev4\" class=\"headerlink\" title=\"ev4\"></a>ev4</h3><p>32121-A78A-7C50-F695-FDE1</p>\n<p>32121-598C-4238-6A58-4802</p>\n<h3 id=\"vscode-setting-sync\"><a href=\"#vscode-setting-sync\" class=\"headerlink\" title=\"vscode setting sync\"></a>vscode setting sync</h3><p>Github Personal access tokens : 997baa6462aca7741808446f1b0c9912</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ev4\"><a href=\"#ev4\" class=\"headerlink\" title=\"ev4\"></a>ev4</h3><p>32121-A78A-7C50-F695-FDE1</p>\n<p>32121-598C-4238-6A58-4802</p>\n<h3 id=\"vscode-setting-sync\"><a href=\"#vscode-setting-sync\" class=\"headerlink\" title=\"vscode setting sync\"></a>vscode setting sync</h3><p>Github Personal access tokens : 997baa6462aca7741808446f1b0c9912</p>\n"},{"title":"数据结构之二分搜索树","top":1,"date":"2019-07-29T03:48:27.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：二分搜索树 [（Binary Search Tree）](https://github.com/xushuhui/Data-Structures/tree/master/BinarySearchTree)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之二分搜索树.md","raw":"---\ntitle: 数据结构之二分搜索树\ntop: 1\ndate: 2019-07-29 11:48:27\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：二分搜索树 [（Binary Search Tree）](https://github.com/xushuhui/Data-Structures/tree/master/BinarySearchTree)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之二分搜索树","published":1,"updated":"2019-07-31T10:07:41.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahots00410gs6qx1zbtuj","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/BinarySearchTree\" target=\"_blank\" rel=\"noopener\">（Binary Search Tree）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/BinarySearchTree\" target=\"_blank\" rel=\"noopener\">（Binary Search Tree）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之二分搜索树映射","top":1,"date":"2019-07-29T03:49:09.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：二分搜索树映射 [（BST Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map/BSTMap.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之二分搜索树映射.md","raw":"---\ntitle: 数据结构之二分搜索树映射\ntop: 1\ndate: 2019-07-29 11:49:09\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：二分搜索树映射 [（BST Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map/BSTMap.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之二分搜索树映射","published":1,"updated":"2019-07-31T10:08:23.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahott00450gs6zolo0ofo","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map/BSTMap.php\" target=\"_blank\" rel=\"noopener\">（BST Map）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map/BSTMap.php\" target=\"_blank\" rel=\"noopener\">（BST Map）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之二分搜索树集合","top":1,"date":"2019-07-29T03:48:55.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：二分搜索树集合 [（BST Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set/BSTSet.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之二分搜索树集合.md","raw":"---\ntitle: 数据结构之二分搜索树集合\ntop: 1\ndate: 2019-07-29 11:48:55\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：二分搜索树集合 [（BST Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set/BSTSet.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之二分搜索树集合","published":1,"updated":"2019-07-31T10:08:52.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotv00480gs60l0s0vfj","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树集合 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set/BSTSet.php\" target=\"_blank\" rel=\"noopener\">（BST Set）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：二分搜索树集合 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set/BSTSet.php\" target=\"_blank\" rel=\"noopener\">（BST Set）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之数组","top":1,"date":"2019-07-25T03:29:51.000Z","_content":"### 定义\nphp 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。\ntitle|title|title\n-----|-----|-----\nconte|conte|conte\n\n### 代码\ngithub 地址：数组 [（Arrays）](https://github.com/xushuhui/Data-Structures/tree/master/Arrays)\n```php\nclass Arrays\n{\n    private $data;\n    private $size;\n    private $capacity;\n    // 构造函数，传入数组的容量 capacity 构造 Array, 默认数组的容量 capacity=10\n    public function __construct(int $capacity = 10)\n    {\n        $this->data = new SplFixedArray($capacity);\n        $this->capacity = $capacity;\n        $this->size = 0;\n    }\n    // 获取数组中的元素个数\n    public function getSize():int\n    {\n        return $this->size;\n    }\n     // 返回数组是否为空\n    public function isEmpty():bool\n    {\n        return $this->size == 0;\n    }\n    // 获取数组的容量\n    public function getCapacity():int\n    {\n        return $this->data->getSize();\n    }\n    // 在 index 索引的位置插入一个新元素 e O(n)\n    public function add(int $index,int $e)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        if ($this->size == $this->capacity){\n            $this->resize(2 * $this->capacity);\n        }\n        for ($i=$this->size -1 ; $i >=$index; $i--) {\n            $this->data[$i + 1] = $this->data[$i];\n        }\n        $this->data[$index] = $e;\n        $this->size ++;\n\n    }\n    // 向所有元素后添加一个新元素 O(1)\n    public function addLast($e)\n    {\n        $this->add($this->size,$e);\n    }\n    // 在所有元素前添加一个新元素 O(n)\n    public function addFirst($e)\n    {\n        $this->add(0,$e);\n    }\n    // 获取 index 索引位置的元素 O(1)\n    public function get($index)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        return $this->data[$index];\n    }\n    public function getLast(){\n        return $this->get($this->size-1);\n    }\n    public function getFirst(){\n        return $this->get(0);\n    }\n    // 修改 index 索引位置的元素为 e O(1)\n    public function set($index,$e)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $this->data[$index] = $e;\n    }\n    // 查找数组中是否有元素 e O(n)\n    public function contains($e):bool\n    {\n        for ($i=0; $i < $this->size; $i++) {\n            if($this->data[$i] == $e){\n                return true;\n            }\n        }\n        return false;\n    }\n    // 查找数组中元素 e 所在的索引，如果不存在元素 e，则返回 -1 O(n)\n    public function find($e):int\n    {\n        for ($i=0; $i < $this->size; $i++) {\n            if($this->data[$i] == $e){\n                return $i;\n            }\n        }\n        return -1;\n    }\n    // 从数组中删除 index 位置的元素，返回删除的元素\n    public function remove($index)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $ret = $this->data[$index];\n\n        for ($i=$index+1; $i < $this->size; $i++) {\n            $this->data[$i-1] = $this->data[$i];\n        }\n        $this->size--;\n        unset($this->data[$this->size]);\n        if($this->size == $this->capacity / 4 && $this->capacity /2 != 0){\n            $this->resize($this->capacity/2);\n        }\n        return $ret;\n    }\n     // 从数组中删除最后一个元素，返回删除的元素\n    public function removeLast()\n    {\n        $this->remove($this->size-1);\n    }\n    // 从数组中删除第一个元素，返回删除的元素\n    public function removeFirst()\n    {\n        $this->remove(0);\n    }\n     // 从数组中删除元素 e\n    public function removeElement($e)\n    {\n        $index = $this->find($e);\n        if($index != -1){\n            $this->remove($index);\n        }\n    }\n    // 将数组空间的容量变成 newCapacity 大小\n    private function resize($newCapacity)\n    {\n        $newData = (new self($newCapacity))->data;\n        for($i=0;$i<$this->size;$i++){\n            $newData[$i] = $this->data[$i];\n        }\n        $this->data = $newData;\n        $this->capacity = $newCapacity;\n    }\n\n    public function __toString()\n    {\n        $str = sprintf(\"\\nArray: size = %d , capacity = %d\\n\",$this->size,$this->getCapacity());\n        $str.='[';\n        for($i = 0 ; $i < $this->size; $i ++){\n            $str.= $i;\n            if($i != $this->size - 1){\n                $str.= \", \";\n            }\n        }\n        $str.=\"]\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|add | 添加元素  |O(n)|在最坏情况下要重新移动所有元素位置|\n|addFirst| 在头部添加元素 |O(n) | 最坏情况|\n|addLast| 在尾部添加元素 |O(1) | 最好情况|\n|get|  获取指定位置元素 |O(1) |数据是连续的，能够直接根据位置获取到元素 |\n|getFirst| 获取首个元素 |O(1) | 同上|\n|getLast| 获取末尾元素 |O(1) |  同上|\n|set| 修改指定索引位置的元素  |O(1) | 同上|\n|contains|  查找数组中是否有元素 |O(1) |需要循环查找|\n|find| 查找数组中元素所在的索引 |O(1) | 需要循环查找|\n|remove| 删除指定元素|O(n)| 在最坏情况下要重新移动所有元素位置|\n|removeFirst| 删除首个元素 |O(n) | 最坏情况|\n|removeLast| 删除末尾元素 |O(1) |  最好情况|\n|removeElement| 删除指定元素 |O(1) | 需要循环查找|\n\n### 总结\n\n数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之数组.md","raw":"---\ntitle: 数据结构之数组\ntop: 1\ndate: 2019-07-25 11:29:51\ntags: 『数据结构，算法』\ncategories: \"数据结构\"\n---\n### 定义\nphp 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。\ntitle|title|title\n-----|-----|-----\nconte|conte|conte\n\n### 代码\ngithub 地址：数组 [（Arrays）](https://github.com/xushuhui/Data-Structures/tree/master/Arrays)\n```php\nclass Arrays\n{\n    private $data;\n    private $size;\n    private $capacity;\n    // 构造函数，传入数组的容量 capacity 构造 Array, 默认数组的容量 capacity=10\n    public function __construct(int $capacity = 10)\n    {\n        $this->data = new SplFixedArray($capacity);\n        $this->capacity = $capacity;\n        $this->size = 0;\n    }\n    // 获取数组中的元素个数\n    public function getSize():int\n    {\n        return $this->size;\n    }\n     // 返回数组是否为空\n    public function isEmpty():bool\n    {\n        return $this->size == 0;\n    }\n    // 获取数组的容量\n    public function getCapacity():int\n    {\n        return $this->data->getSize();\n    }\n    // 在 index 索引的位置插入一个新元素 e O(n)\n    public function add(int $index,int $e)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        if ($this->size == $this->capacity){\n            $this->resize(2 * $this->capacity);\n        }\n        for ($i=$this->size -1 ; $i >=$index; $i--) {\n            $this->data[$i + 1] = $this->data[$i];\n        }\n        $this->data[$index] = $e;\n        $this->size ++;\n\n    }\n    // 向所有元素后添加一个新元素 O(1)\n    public function addLast($e)\n    {\n        $this->add($this->size,$e);\n    }\n    // 在所有元素前添加一个新元素 O(n)\n    public function addFirst($e)\n    {\n        $this->add(0,$e);\n    }\n    // 获取 index 索引位置的元素 O(1)\n    public function get($index)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        return $this->data[$index];\n    }\n    public function getLast(){\n        return $this->get($this->size-1);\n    }\n    public function getFirst(){\n        return $this->get(0);\n    }\n    // 修改 index 索引位置的元素为 e O(1)\n    public function set($index,$e)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $this->data[$index] = $e;\n    }\n    // 查找数组中是否有元素 e O(n)\n    public function contains($e):bool\n    {\n        for ($i=0; $i < $this->size; $i++) {\n            if($this->data[$i] == $e){\n                return true;\n            }\n        }\n        return false;\n    }\n    // 查找数组中元素 e 所在的索引，如果不存在元素 e，则返回 -1 O(n)\n    public function find($e):int\n    {\n        for ($i=0; $i < $this->size; $i++) {\n            if($this->data[$i] == $e){\n                return $i;\n            }\n        }\n        return -1;\n    }\n    // 从数组中删除 index 位置的元素，返回删除的元素\n    public function remove($index)\n    {\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $ret = $this->data[$index];\n\n        for ($i=$index+1; $i < $this->size; $i++) {\n            $this->data[$i-1] = $this->data[$i];\n        }\n        $this->size--;\n        unset($this->data[$this->size]);\n        if($this->size == $this->capacity / 4 && $this->capacity /2 != 0){\n            $this->resize($this->capacity/2);\n        }\n        return $ret;\n    }\n     // 从数组中删除最后一个元素，返回删除的元素\n    public function removeLast()\n    {\n        $this->remove($this->size-1);\n    }\n    // 从数组中删除第一个元素，返回删除的元素\n    public function removeFirst()\n    {\n        $this->remove(0);\n    }\n     // 从数组中删除元素 e\n    public function removeElement($e)\n    {\n        $index = $this->find($e);\n        if($index != -1){\n            $this->remove($index);\n        }\n    }\n    // 将数组空间的容量变成 newCapacity 大小\n    private function resize($newCapacity)\n    {\n        $newData = (new self($newCapacity))->data;\n        for($i=0;$i<$this->size;$i++){\n            $newData[$i] = $this->data[$i];\n        }\n        $this->data = $newData;\n        $this->capacity = $newCapacity;\n    }\n\n    public function __toString()\n    {\n        $str = sprintf(\"\\nArray: size = %d , capacity = %d\\n\",$this->size,$this->getCapacity());\n        $str.='[';\n        for($i = 0 ; $i < $this->size; $i ++){\n            $str.= $i;\n            if($i != $this->size - 1){\n                $str.= \", \";\n            }\n        }\n        $str.=\"]\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|add | 添加元素  |O(n)|在最坏情况下要重新移动所有元素位置|\n|addFirst| 在头部添加元素 |O(n) | 最坏情况|\n|addLast| 在尾部添加元素 |O(1) | 最好情况|\n|get|  获取指定位置元素 |O(1) |数据是连续的，能够直接根据位置获取到元素 |\n|getFirst| 获取首个元素 |O(1) | 同上|\n|getLast| 获取末尾元素 |O(1) |  同上|\n|set| 修改指定索引位置的元素  |O(1) | 同上|\n|contains|  查找数组中是否有元素 |O(1) |需要循环查找|\n|find| 查找数组中元素所在的索引 |O(1) | 需要循环查找|\n|remove| 删除指定元素|O(n)| 在最坏情况下要重新移动所有元素位置|\n|removeFirst| 删除首个元素 |O(n) | 最坏情况|\n|removeLast| 删除末尾元素 |O(1) |  最好情况|\n|removeElement| 删除指定元素 |O(1) | 需要循环查找|\n\n### 总结\n\n数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之数组","published":1,"updated":"2019-08-01T02:25:11.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotw004b0gs6sqccox6l","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>php 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。<br>title|title|title<br>——-|——-|——-<br>conte|conte|conte</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Arrays\" target=\"_blank\" rel=\"noopener\">（Arrays）</a></p>\n<pre><code class=\"lang-php\">class Arrays\n{\n    private $data;\n    private $size;\n    private $capacity;\n    // 构造函数，传入数组的容量 capacity 构造 Array, 默认数组的容量 capacity=10\n    public function __construct(int $capacity = 10)\n    {\n        $this-&gt;data = new SplFixedArray($capacity);\n        $this-&gt;capacity = $capacity;\n        $this-&gt;size = 0;\n    }\n    // 获取数组中的元素个数\n    public function getSize():int\n    {\n        return $this-&gt;size;\n    }\n     // 返回数组是否为空\n    public function isEmpty():bool\n    {\n        return $this-&gt;size == 0;\n    }\n    // 获取数组的容量\n    public function getCapacity():int\n    {\n        return $this-&gt;data-&gt;getSize();\n    }\n    // 在 index 索引的位置插入一个新元素 e O(n)\n    public function add(int $index,int $e)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        if ($this-&gt;size == $this-&gt;capacity){\n            $this-&gt;resize(2 * $this-&gt;capacity);\n        }\n        for ($i=$this-&gt;size -1 ; $i &gt;=$index; $i--) {\n            $this-&gt;data[$i + 1] = $this-&gt;data[$i];\n        }\n        $this-&gt;data[$index] = $e;\n        $this-&gt;size ++;\n\n    }\n    // 向所有元素后添加一个新元素 O(1)\n    public function addLast($e)\n    {\n        $this-&gt;add($this-&gt;size,$e);\n    }\n    // 在所有元素前添加一个新元素 O(n)\n    public function addFirst($e)\n    {\n        $this-&gt;add(0,$e);\n    }\n    // 获取 index 索引位置的元素 O(1)\n    public function get($index)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        return $this-&gt;data[$index];\n    }\n    public function getLast(){\n        return $this-&gt;get($this-&gt;size-1);\n    }\n    public function getFirst(){\n        return $this-&gt;get(0);\n    }\n    // 修改 index 索引位置的元素为 e O(1)\n    public function set($index,$e)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $this-&gt;data[$index] = $e;\n    }\n    // 查找数组中是否有元素 e O(n)\n    public function contains($e):bool\n    {\n        for ($i=0; $i &lt; $this-&gt;size; $i++) {\n            if($this-&gt;data[$i] == $e){\n                return true;\n            }\n        }\n        return false;\n    }\n    // 查找数组中元素 e 所在的索引，如果不存在元素 e，则返回 -1 O(n)\n    public function find($e):int\n    {\n        for ($i=0; $i &lt; $this-&gt;size; $i++) {\n            if($this-&gt;data[$i] == $e){\n                return $i;\n            }\n        }\n        return -1;\n    }\n    // 从数组中删除 index 位置的元素，返回删除的元素\n    public function remove($index)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $ret = $this-&gt;data[$index];\n\n        for ($i=$index+1; $i &lt; $this-&gt;size; $i++) {\n            $this-&gt;data[$i-1] = $this-&gt;data[$i];\n        }\n        $this-&gt;size--;\n        unset($this-&gt;data[$this-&gt;size]);\n        if($this-&gt;size == $this-&gt;capacity / 4 &amp;&amp; $this-&gt;capacity /2 != 0){\n            $this-&gt;resize($this-&gt;capacity/2);\n        }\n        return $ret;\n    }\n     // 从数组中删除最后一个元素，返回删除的元素\n    public function removeLast()\n    {\n        $this-&gt;remove($this-&gt;size-1);\n    }\n    // 从数组中删除第一个元素，返回删除的元素\n    public function removeFirst()\n    {\n        $this-&gt;remove(0);\n    }\n     // 从数组中删除元素 e\n    public function removeElement($e)\n    {\n        $index = $this-&gt;find($e);\n        if($index != -1){\n            $this-&gt;remove($index);\n        }\n    }\n    // 将数组空间的容量变成 newCapacity 大小\n    private function resize($newCapacity)\n    {\n        $newData = (new self($newCapacity))-&gt;data;\n        for($i=0;$i&lt;$this-&gt;size;$i++){\n            $newData[$i] = $this-&gt;data[$i];\n        }\n        $this-&gt;data = $newData;\n        $this-&gt;capacity = $newCapacity;\n    }\n\n    public function __toString()\n    {\n        $str = sprintf(&quot;\\nArray: size = %d , capacity = %d\\n&quot;,$this-&gt;size,$this-&gt;getCapacity());\n        $str.=&#39;[&#39;;\n        for($i = 0 ; $i &lt; $this-&gt;size; $i ++){\n            $str.= $i;\n            if($i != $this-&gt;size - 1){\n                $str.= &quot;, &quot;;\n            }\n        }\n        $str.=&quot;]&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">add</td>\n<td style=\"text-align:left\">添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addFirst</td>\n<td style=\"text-align:left\">在头部添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addLast</td>\n<td style=\"text-align:left\">在尾部添加元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get</td>\n<td style=\"text-align:left\">获取指定位置元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>数据是连续的，能够直接根据位置获取到元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFirst</td>\n<td style=\"text-align:left\">获取首个元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLast</td>\n<td style=\"text-align:left\">获取末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">修改指定索引位置的元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">contains</td>\n<td style=\"text-align:left\">查找数组中是否有元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:left\">查找数组中元素所在的索引</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remove</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeFirst</td>\n<td style=\"text-align:left\">删除首个元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeLast</td>\n<td style=\"text-align:left\">删除末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeElement</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>php 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。<br>title|title|title<br>——-|——-|——-<br>conte|conte|conte</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Arrays\" target=\"_blank\" rel=\"noopener\">（Arrays）</a></p>\n<pre><code class=\"lang-php\">class Arrays\n{\n    private $data;\n    private $size;\n    private $capacity;\n    // 构造函数，传入数组的容量 capacity 构造 Array, 默认数组的容量 capacity=10\n    public function __construct(int $capacity = 10)\n    {\n        $this-&gt;data = new SplFixedArray($capacity);\n        $this-&gt;capacity = $capacity;\n        $this-&gt;size = 0;\n    }\n    // 获取数组中的元素个数\n    public function getSize():int\n    {\n        return $this-&gt;size;\n    }\n     // 返回数组是否为空\n    public function isEmpty():bool\n    {\n        return $this-&gt;size == 0;\n    }\n    // 获取数组的容量\n    public function getCapacity():int\n    {\n        return $this-&gt;data-&gt;getSize();\n    }\n    // 在 index 索引的位置插入一个新元素 e O(n)\n    public function add(int $index,int $e)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        if ($this-&gt;size == $this-&gt;capacity){\n            $this-&gt;resize(2 * $this-&gt;capacity);\n        }\n        for ($i=$this-&gt;size -1 ; $i &gt;=$index; $i--) {\n            $this-&gt;data[$i + 1] = $this-&gt;data[$i];\n        }\n        $this-&gt;data[$index] = $e;\n        $this-&gt;size ++;\n\n    }\n    // 向所有元素后添加一个新元素 O(1)\n    public function addLast($e)\n    {\n        $this-&gt;add($this-&gt;size,$e);\n    }\n    // 在所有元素前添加一个新元素 O(n)\n    public function addFirst($e)\n    {\n        $this-&gt;add(0,$e);\n    }\n    // 获取 index 索引位置的元素 O(1)\n    public function get($index)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        return $this-&gt;data[$index];\n    }\n    public function getLast(){\n        return $this-&gt;get($this-&gt;size-1);\n    }\n    public function getFirst(){\n        return $this-&gt;get(0);\n    }\n    // 修改 index 索引位置的元素为 e O(1)\n    public function set($index,$e)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $this-&gt;data[$index] = $e;\n    }\n    // 查找数组中是否有元素 e O(n)\n    public function contains($e):bool\n    {\n        for ($i=0; $i &lt; $this-&gt;size; $i++) {\n            if($this-&gt;data[$i] == $e){\n                return true;\n            }\n        }\n        return false;\n    }\n    // 查找数组中元素 e 所在的索引，如果不存在元素 e，则返回 -1 O(n)\n    public function find($e):int\n    {\n        for ($i=0; $i &lt; $this-&gt;size; $i++) {\n            if($this-&gt;data[$i] == $e){\n                return $i;\n            }\n        }\n        return -1;\n    }\n    // 从数组中删除 index 位置的元素，返回删除的元素\n    public function remove($index)\n    {\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $ret = $this-&gt;data[$index];\n\n        for ($i=$index+1; $i &lt; $this-&gt;size; $i++) {\n            $this-&gt;data[$i-1] = $this-&gt;data[$i];\n        }\n        $this-&gt;size--;\n        unset($this-&gt;data[$this-&gt;size]);\n        if($this-&gt;size == $this-&gt;capacity / 4 &amp;&amp; $this-&gt;capacity /2 != 0){\n            $this-&gt;resize($this-&gt;capacity/2);\n        }\n        return $ret;\n    }\n     // 从数组中删除最后一个元素，返回删除的元素\n    public function removeLast()\n    {\n        $this-&gt;remove($this-&gt;size-1);\n    }\n    // 从数组中删除第一个元素，返回删除的元素\n    public function removeFirst()\n    {\n        $this-&gt;remove(0);\n    }\n     // 从数组中删除元素 e\n    public function removeElement($e)\n    {\n        $index = $this-&gt;find($e);\n        if($index != -1){\n            $this-&gt;remove($index);\n        }\n    }\n    // 将数组空间的容量变成 newCapacity 大小\n    private function resize($newCapacity)\n    {\n        $newData = (new self($newCapacity))-&gt;data;\n        for($i=0;$i&lt;$this-&gt;size;$i++){\n            $newData[$i] = $this-&gt;data[$i];\n        }\n        $this-&gt;data = $newData;\n        $this-&gt;capacity = $newCapacity;\n    }\n\n    public function __toString()\n    {\n        $str = sprintf(&quot;\\nArray: size = %d , capacity = %d\\n&quot;,$this-&gt;size,$this-&gt;getCapacity());\n        $str.=&#39;[&#39;;\n        for($i = 0 ; $i &lt; $this-&gt;size; $i ++){\n            $str.= $i;\n            if($i != $this-&gt;size - 1){\n                $str.= &quot;, &quot;;\n            }\n        }\n        $str.=&quot;]&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">add</td>\n<td style=\"text-align:left\">添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addFirst</td>\n<td style=\"text-align:left\">在头部添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addLast</td>\n<td style=\"text-align:left\">在尾部添加元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get</td>\n<td style=\"text-align:left\">获取指定位置元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>数据是连续的，能够直接根据位置获取到元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFirst</td>\n<td style=\"text-align:left\">获取首个元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLast</td>\n<td style=\"text-align:left\">获取末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">修改指定索引位置的元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">contains</td>\n<td style=\"text-align:left\">查找数组中是否有元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:left\">查找数组中元素所在的索引</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remove</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeFirst</td>\n<td style=\"text-align:left\">删除首个元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeLast</td>\n<td style=\"text-align:left\">删除末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeElement</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之循环队列","top":1,"date":"2019-07-27T11:03:48.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：循环队列 [（Loop Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/LoopQueue.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之循环队列.md","raw":"---\ntitle: 数据结构之循环队列\ntop: 1\ndate: 2019-07-27 19:03:48\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：循环队列 [（Loop Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/LoopQueue.php)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之循环队列","published":1,"updated":"2019-07-31T10:09:22.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotx004d0gs64o60jqow","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：循环队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/LoopQueue.php\" target=\"_blank\" rel=\"noopener\">（Loop Queue）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：循环队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/LoopQueue.php\" target=\"_blank\" rel=\"noopener\">（Loop Queue）</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之数组栈","top":1,"date":"2019-07-27T11:02:54.000Z","_content":"\n### 定义\n\n基于数组 array 实现的先进后出的数据结构。\n\n### 代码\n\ngithub 地址：数组栈 [（Array Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack/ArrayStack.php)\n\n```php\nclass ArrayStack implements Stack\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this->array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this->array->getSize();\n    }\n    public function isEmpty(){\n        return $this->array->isEmpty();\n    }\n    public function getCapacity(){\n        return $this->array->getCapacity();\n    }\n    public function push($e){\n        $this->array->addLast($e);\n    }\n    public function pop(){\n        return  $this->array->removeLast();\n    }\n    public function peek(){\n        return  $this->array->getLast();\n    }\n    public function __toString()\n    {\n        $str=\"\\nStack: [\";\n        for($i = 0 ; $i < $this->getSize(); $i ++){\n            $str.= $this->array->get($i);\n            if($i != $this->getSize() - 1){\n                $str.= \", \";\n            }\n\n        }\n        $str.=\"]  top\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|push | 添加元素到栈顶  |O(1)|直接添加元素到数组尾部|\n|pop| 取出栈顶元素 |O(1) |直接查询数组尾部元素|\n|peek| 查询栈顶元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之数组栈.md","raw":"---\ntitle: 数据结构之数组栈\ntop: 1\ndate: 2019-07-27 19:02:54\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n基于数组 array 实现的先进后出的数据结构。\n\n### 代码\n\ngithub 地址：数组栈 [（Array Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack/ArrayStack.php)\n\n```php\nclass ArrayStack implements Stack\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this->array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this->array->getSize();\n    }\n    public function isEmpty(){\n        return $this->array->isEmpty();\n    }\n    public function getCapacity(){\n        return $this->array->getCapacity();\n    }\n    public function push($e){\n        $this->array->addLast($e);\n    }\n    public function pop(){\n        return  $this->array->removeLast();\n    }\n    public function peek(){\n        return  $this->array->getLast();\n    }\n    public function __toString()\n    {\n        $str=\"\\nStack: [\";\n        for($i = 0 ; $i < $this->getSize(); $i ++){\n            $str.= $this->array->get($i);\n            if($i != $this->getSize() - 1){\n                $str.= \", \";\n            }\n\n        }\n        $str.=\"]  top\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|push | 添加元素到栈顶  |O(1)|直接添加元素到数组尾部|\n|pop| 取出栈顶元素 |O(1) |直接查询数组尾部元素|\n|peek| 查询栈顶元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之数组栈","published":1,"updated":"2019-08-01T02:44:43.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahoty004h0gs6g8zzl07x","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进后出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack/ArrayStack.php\" target=\"_blank\" rel=\"noopener\">（Array Stack）</a></p>\n<pre><code class=\"lang-php\">class ArrayStack implements Stack\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this-&gt;array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this-&gt;array-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;array-&gt;isEmpty();\n    }\n    public function getCapacity(){\n        return $this-&gt;array-&gt;getCapacity();\n    }\n    public function push($e){\n        $this-&gt;array-&gt;addLast($e);\n    }\n    public function pop(){\n        return  $this-&gt;array-&gt;removeLast();\n    }\n    public function peek(){\n        return  $this-&gt;array-&gt;getLast();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nStack: [&quot;;\n        for($i = 0 ; $i &lt; $this-&gt;getSize(); $i ++){\n            $str.= $this-&gt;array-&gt;get($i);\n            if($i != $this-&gt;getSize() - 1){\n                $str.= &quot;, &quot;;\n            }\n\n        }\n        $str.=&quot;]  top&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">push</td>\n<td style=\"text-align:left\">添加元素到栈顶</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n<td style=\"text-align:left\">取出栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接查询数组尾部元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">peek</td>\n<td style=\"text-align:left\">查询栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进后出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack/ArrayStack.php\" target=\"_blank\" rel=\"noopener\">（Array Stack）</a></p>\n<pre><code class=\"lang-php\">class ArrayStack implements Stack\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this-&gt;array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this-&gt;array-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;array-&gt;isEmpty();\n    }\n    public function getCapacity(){\n        return $this-&gt;array-&gt;getCapacity();\n    }\n    public function push($e){\n        $this-&gt;array-&gt;addLast($e);\n    }\n    public function pop(){\n        return  $this-&gt;array-&gt;removeLast();\n    }\n    public function peek(){\n        return  $this-&gt;array-&gt;getLast();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nStack: [&quot;;\n        for($i = 0 ; $i &lt; $this-&gt;getSize(); $i ++){\n            $str.= $this-&gt;array-&gt;get($i);\n            if($i != $this-&gt;getSize() - 1){\n                $str.= &quot;, &quot;;\n            }\n\n        }\n        $str.=&quot;]  top&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">push</td>\n<td style=\"text-align:left\">添加元素到栈顶</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n<td style=\"text-align:left\">取出栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接查询数组尾部元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">peek</td>\n<td style=\"text-align:left\">查询栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之数组队列","top":1,"date":"2019-07-27T11:03:34.000Z","_content":"\n### 定义\n\n基于数组 array 实现的先进先出的数据结构。\n\n### 代码\n\ngithub 地址：数组队列 [（Array Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/ArrayQueue.php)\n\n```php\nclass ArrayQueue implements Queue\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this->array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this->array->getSize();\n    }\n    public function isEmpty(){\n        return $this->array->isEmpty();\n    }\n    public function enqueue($e){\n        $this->array->addLast($e);\n    }\n    public function dequeue(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        return $this->array->removeFirst();\n    }\n    public function getFront(){\n        return $this->array->getFirst();\n    }\n    public function __toString()\n    {\n        $str=\"\\nQueue front [\";\n        for($i = 0 ; $i < $this->getSize(); $i ++){\n            $str.= $this->array->get($i);\n            if($i != $this->getSize() - 1){\n                $str.= \", \";\n            }\n        }\n        $str.=\"] tail\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|enqueue | 入队  |O(1)|直接添加元素到数组尾部|\n|dequeue| 出队 |O(n) |取出数组头部元素，然后移动其他元素位置 |\n|getFront| 查询队首元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组队列是基于数组实现的队列。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之数组队列.md","raw":"---\ntitle: 数据结构之数组队列\ntop: 1\ndate: 2019-07-27 19:03:34\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n基于数组 array 实现的先进先出的数据结构。\n\n### 代码\n\ngithub 地址：数组队列 [（Array Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/ArrayQueue.php)\n\n```php\nclass ArrayQueue implements Queue\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this->array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this->array->getSize();\n    }\n    public function isEmpty(){\n        return $this->array->isEmpty();\n    }\n    public function enqueue($e){\n        $this->array->addLast($e);\n    }\n    public function dequeue(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        return $this->array->removeFirst();\n    }\n    public function getFront(){\n        return $this->array->getFirst();\n    }\n    public function __toString()\n    {\n        $str=\"\\nQueue front [\";\n        for($i = 0 ; $i < $this->getSize(); $i ++){\n            $str.= $this->array->get($i);\n            if($i != $this->getSize() - 1){\n                $str.= \", \";\n            }\n        }\n        $str.=\"] tail\";\n        return $str;\n    }\n}\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|enqueue | 入队  |O(1)|直接添加元素到数组尾部|\n|dequeue| 出队 |O(n) |取出数组头部元素，然后移动其他元素位置 |\n|getFront| 查询队首元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组队列是基于数组实现的队列。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之数组队列","published":1,"updated":"2019-08-01T02:44:47.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahotz004j0gs62whdeb10","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进先出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/ArrayQueue.php\" target=\"_blank\" rel=\"noopener\">（Array Queue）</a></p>\n<pre><code class=\"lang-php\">class ArrayQueue implements Queue\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this-&gt;array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this-&gt;array-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;array-&gt;isEmpty();\n    }\n    public function enqueue($e){\n        $this-&gt;array-&gt;addLast($e);\n    }\n    public function dequeue(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        return $this-&gt;array-&gt;removeFirst();\n    }\n    public function getFront(){\n        return $this-&gt;array-&gt;getFirst();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nQueue front [&quot;;\n        for($i = 0 ; $i &lt; $this-&gt;getSize(); $i ++){\n            $str.= $this-&gt;array-&gt;get($i);\n            if($i != $this-&gt;getSize() - 1){\n                $str.= &quot;, &quot;;\n            }\n        }\n        $str.=&quot;] tail&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">enqueue</td>\n<td style=\"text-align:left\">入队</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dequeue</td>\n<td style=\"text-align:left\">出队</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>取出数组头部元素，然后移动其他元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFront</td>\n<td style=\"text-align:left\">查询队首元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组队列是基于数组实现的队列。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进先出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：数组队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/ArrayQueue.php\" target=\"_blank\" rel=\"noopener\">（Array Queue）</a></p>\n<pre><code class=\"lang-php\">class ArrayQueue implements Queue\n{\n    private $array;\n    public function __construct(int $capacity = 10){\n        $this-&gt;array = new arrays($capacity);\n    }\n    public function getSize(){\n        return $this-&gt;array-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;array-&gt;isEmpty();\n    }\n    public function enqueue($e){\n        $this-&gt;array-&gt;addLast($e);\n    }\n    public function dequeue(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        return $this-&gt;array-&gt;removeFirst();\n    }\n    public function getFront(){\n        return $this-&gt;array-&gt;getFirst();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nQueue front [&quot;;\n        for($i = 0 ; $i &lt; $this-&gt;getSize(); $i ++){\n            $str.= $this-&gt;array-&gt;get($i);\n            if($i != $this-&gt;getSize() - 1){\n                $str.= &quot;, &quot;;\n            }\n        }\n        $str.=&quot;] tail&quot;;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">enqueue</td>\n<td style=\"text-align:left\">入队</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dequeue</td>\n<td style=\"text-align:left\">出队</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>取出数组头部元素，然后移动其他元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFront</td>\n<td style=\"text-align:left\">查询队首元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组队列是基于数组实现的队列。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之映射","top":1,"date":"2019-07-29T03:49:42.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：映射 [（Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map)\n\n``` php\ninterface Map{\n    function add($key,$value);\n    function contains($key);\n    function get($key);\n    function set($key,$value);\n    function remove($key);\n    function getSize();\n    function isEmpty();\n}\n```\n\n### 总结\n\n这是 map 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之映射.md","raw":"---\ntitle: 数据结构之映射\ntop: 1\ndate: 2019-07-29 11:49:42\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：映射 [（Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map)\n\n``` php\ninterface Map{\n    function add($key,$value);\n    function contains($key);\n    function get($key);\n    function set($key,$value);\n    function remove($key);\n    function getSize();\n    function isEmpty();\n}\n```\n\n### 总结\n\n这是 map 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之映射","published":1,"updated":"2019-08-01T02:28:57.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou1004o0gs6d4q4n511","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map\" target=\"_blank\" rel=\"noopener\">（Map）</a></p>\n<pre><code class=\"lang-php\">interface Map{\n    function add($key,$value);\n    function contains($key);\n    function get($key);\n    function set($key,$value);\n    function remove($key);\n    function getSize();\n    function isEmpty();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是 map 总结</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map\" target=\"_blank\" rel=\"noopener\">（Map）</a></p>\n<pre><code class=\"lang-php\">interface Map{\n    function add($key,$value);\n    function contains($key);\n    function get($key);\n    function set($key,$value);\n    function remove($key);\n    function getSize();\n    function isEmpty();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是 map 总结</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之栈","top":1,"date":"2019-07-27T11:02:07.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：栈 [（Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack)\n\n```php\ninterface Stack{\n    function getSize();\n    function isEmpty();\n    function push($e);\n    function pop();\n    function peek();\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之栈.md","raw":"---\ntitle: 数据结构之栈\ntop: 1\ndate: 2019-07-27 19:02:07\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：栈 [（Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack)\n\n```php\ninterface Stack{\n    function getSize();\n    function isEmpty();\n    function push($e);\n    function pop();\n    function peek();\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之栈","published":1,"updated":"2019-08-01T02:44:52.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou2004r0gs6n97p815v","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack\" target=\"_blank\" rel=\"noopener\">（Stack）</a></p>\n<pre><code class=\"lang-php\">interface Stack{\n    function getSize();\n    function isEmpty();\n    function push($e);\n    function pop();\n    function peek();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack\" target=\"_blank\" rel=\"noopener\">（Stack）</a></p>\n<pre><code class=\"lang-php\">interface Stack{\n    function getSize();\n    function isEmpty();\n    function push($e);\n    function pop();\n    function peek();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表映射","top":1,"date":"2019-07-29T03:50:33.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：链表映射 [（Linked List Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map/LinkedListMap.php)\n\n```php\nclass Node\n{\n    public $key;\n    public $value;\n    public $next;\n    public function __construct($key = null, $value = null, $next = null)\n    {\n        $this->key = $key;\n        $this->value = $value;\n        $this->next = $next;\n    }\n    public function __toString()\n    {\n        return $this->key . ':' . $this->value;\n    }\n}\nclass LinkedListMap implements Map\n{\n    private $size;\n    private $dummyHead;\n    public function __construct()\n    {\n        $this->dummyHead = new Node();\n        $this->size = 0;\n    }\n    public function getSize()\n    {\n        return $this->size;\n    }\n    public function isEmpty()\n    {\n        return $this->size == 0;\n    }\n    private function getNode($key)\n    {\n        $cur = $this->dummyHead->next;\n        while ($cur != null) {\n            if ($cur->key == $key) {\n                return $cur;\n            }\n            $cur = $cur->next;\n        }\n        return null;\n    }\n    public function contains($key)\n    {\n        return $this->getNode($key) != null;\n    }\n    public function get($key)\n    {\n        $node = $this->getNode($key);\n        return $node == null ? null : $node->value;\n    }\n    public function add($key, $value)\n    {\n        $node = $this->getNode($key);\n        if ($node == null) {\n            $this->dummyHead->next = new Node($key, $value, $this->dummyHead->next);\n            $this->size++;\n        } else {\n            $node->value = $value;\n        }\n    }\n    public function set($key, $value)\n    {\n        $node = $this->getNode($key);\n        if($node == null){\n            throw new Exception($key.\" not exist\");\n        }\n        $node->value = $value;\n    }\n    public function remove($key)\n    {\n        $prev = $this->dummyHead;\n        while($prev->next != null){\n            if($prev->next->key == $key){\n                break;\n            }\n            $prev = $prev->next;\n        }\n        if($prev->next != null){\n            $delNode = $prev->next;\n            $prev->next =$delNode->next;\n            $delNode->next = null;\n            $this->size--;\n            return $delNode->value;\n        }\n        return null;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之链表映射.md","raw":"---\ntitle: 数据结构之链表映射\ntop: 1\ndate: 2019-07-29 11:50:33\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：链表映射 [（Linked List Map）](https://github.com/xushuhui/Data-Structures/tree/master/Map/LinkedListMap.php)\n\n```php\nclass Node\n{\n    public $key;\n    public $value;\n    public $next;\n    public function __construct($key = null, $value = null, $next = null)\n    {\n        $this->key = $key;\n        $this->value = $value;\n        $this->next = $next;\n    }\n    public function __toString()\n    {\n        return $this->key . ':' . $this->value;\n    }\n}\nclass LinkedListMap implements Map\n{\n    private $size;\n    private $dummyHead;\n    public function __construct()\n    {\n        $this->dummyHead = new Node();\n        $this->size = 0;\n    }\n    public function getSize()\n    {\n        return $this->size;\n    }\n    public function isEmpty()\n    {\n        return $this->size == 0;\n    }\n    private function getNode($key)\n    {\n        $cur = $this->dummyHead->next;\n        while ($cur != null) {\n            if ($cur->key == $key) {\n                return $cur;\n            }\n            $cur = $cur->next;\n        }\n        return null;\n    }\n    public function contains($key)\n    {\n        return $this->getNode($key) != null;\n    }\n    public function get($key)\n    {\n        $node = $this->getNode($key);\n        return $node == null ? null : $node->value;\n    }\n    public function add($key, $value)\n    {\n        $node = $this->getNode($key);\n        if ($node == null) {\n            $this->dummyHead->next = new Node($key, $value, $this->dummyHead->next);\n            $this->size++;\n        } else {\n            $node->value = $value;\n        }\n    }\n    public function set($key, $value)\n    {\n        $node = $this->getNode($key);\n        if($node == null){\n            throw new Exception($key.\" not exist\");\n        }\n        $node->value = $value;\n    }\n    public function remove($key)\n    {\n        $prev = $this->dummyHead;\n        while($prev->next != null){\n            if($prev->next->key == $key){\n                break;\n            }\n            $prev = $prev->next;\n        }\n        if($prev->next != null){\n            $delNode = $prev->next;\n            $prev->next =$delNode->next;\n            $delNode->next = null;\n            $this->size--;\n            return $delNode->value;\n        }\n        return null;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之链表映射","published":1,"updated":"2019-08-01T01:57:38.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou3004u0gs6mb3wfmwr","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map/LinkedListMap.php\" target=\"_blank\" rel=\"noopener\">（Linked List Map）</a></p>\n<pre><code class=\"lang-php\">class Node\n{\n    public $key;\n    public $value;\n    public $next;\n    public function __construct($key = null, $value = null, $next = null)\n    {\n        $this-&gt;key = $key;\n        $this-&gt;value = $value;\n        $this-&gt;next = $next;\n    }\n    public function __toString()\n    {\n        return $this-&gt;key . &#39;:&#39; . $this-&gt;value;\n    }\n}\nclass LinkedListMap implements Map\n{\n    private $size;\n    private $dummyHead;\n    public function __construct()\n    {\n        $this-&gt;dummyHead = new Node();\n        $this-&gt;size = 0;\n    }\n    public function getSize()\n    {\n        return $this-&gt;size;\n    }\n    public function isEmpty()\n    {\n        return $this-&gt;size == 0;\n    }\n    private function getNode($key)\n    {\n        $cur = $this-&gt;dummyHead-&gt;next;\n        while ($cur != null) {\n            if ($cur-&gt;key == $key) {\n                return $cur;\n            }\n            $cur = $cur-&gt;next;\n        }\n        return null;\n    }\n    public function contains($key)\n    {\n        return $this-&gt;getNode($key) != null;\n    }\n    public function get($key)\n    {\n        $node = $this-&gt;getNode($key);\n        return $node == null ? null : $node-&gt;value;\n    }\n    public function add($key, $value)\n    {\n        $node = $this-&gt;getNode($key);\n        if ($node == null) {\n            $this-&gt;dummyHead-&gt;next = new Node($key, $value, $this-&gt;dummyHead-&gt;next);\n            $this-&gt;size++;\n        } else {\n            $node-&gt;value = $value;\n        }\n    }\n    public function set($key, $value)\n    {\n        $node = $this-&gt;getNode($key);\n        if($node == null){\n            throw new Exception($key.&quot; not exist&quot;);\n        }\n        $node-&gt;value = $value;\n    }\n    public function remove($key)\n    {\n        $prev = $this-&gt;dummyHead;\n        while($prev-&gt;next != null){\n            if($prev-&gt;next-&gt;key == $key){\n                break;\n            }\n            $prev = $prev-&gt;next;\n        }\n        if($prev-&gt;next != null){\n            $delNode = $prev-&gt;next;\n            $prev-&gt;next =$delNode-&gt;next;\n            $delNode-&gt;next = null;\n            $this-&gt;size--;\n            return $delNode-&gt;value;\n        }\n        return null;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表映射 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Map/LinkedListMap.php\" target=\"_blank\" rel=\"noopener\">（Linked List Map）</a></p>\n<pre><code class=\"lang-php\">class Node\n{\n    public $key;\n    public $value;\n    public $next;\n    public function __construct($key = null, $value = null, $next = null)\n    {\n        $this-&gt;key = $key;\n        $this-&gt;value = $value;\n        $this-&gt;next = $next;\n    }\n    public function __toString()\n    {\n        return $this-&gt;key . &#39;:&#39; . $this-&gt;value;\n    }\n}\nclass LinkedListMap implements Map\n{\n    private $size;\n    private $dummyHead;\n    public function __construct()\n    {\n        $this-&gt;dummyHead = new Node();\n        $this-&gt;size = 0;\n    }\n    public function getSize()\n    {\n        return $this-&gt;size;\n    }\n    public function isEmpty()\n    {\n        return $this-&gt;size == 0;\n    }\n    private function getNode($key)\n    {\n        $cur = $this-&gt;dummyHead-&gt;next;\n        while ($cur != null) {\n            if ($cur-&gt;key == $key) {\n                return $cur;\n            }\n            $cur = $cur-&gt;next;\n        }\n        return null;\n    }\n    public function contains($key)\n    {\n        return $this-&gt;getNode($key) != null;\n    }\n    public function get($key)\n    {\n        $node = $this-&gt;getNode($key);\n        return $node == null ? null : $node-&gt;value;\n    }\n    public function add($key, $value)\n    {\n        $node = $this-&gt;getNode($key);\n        if ($node == null) {\n            $this-&gt;dummyHead-&gt;next = new Node($key, $value, $this-&gt;dummyHead-&gt;next);\n            $this-&gt;size++;\n        } else {\n            $node-&gt;value = $value;\n        }\n    }\n    public function set($key, $value)\n    {\n        $node = $this-&gt;getNode($key);\n        if($node == null){\n            throw new Exception($key.&quot; not exist&quot;);\n        }\n        $node-&gt;value = $value;\n    }\n    public function remove($key)\n    {\n        $prev = $this-&gt;dummyHead;\n        while($prev-&gt;next != null){\n            if($prev-&gt;next-&gt;key == $key){\n                break;\n            }\n            $prev = $prev-&gt;next;\n        }\n        if($prev-&gt;next != null){\n            $delNode = $prev-&gt;next;\n            $prev-&gt;next =$delNode-&gt;next;\n            $delNode-&gt;next = null;\n            $this-&gt;size--;\n            return $delNode-&gt;value;\n        }\n        return null;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表","top":1,"date":"2019-07-29T03:45:38.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：链表 [（Linked List）](https://github.com/xushuhui/Data-Structures/tree/master/LinkedList)\n```php\nclass Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this->e = $e;\n        $this->next = $next;\n    }\n    public function __toString(){\n        return (string)$this->e;\n    }\n}\nclass LinkedList{\n   \n    private $size;\n    private $dummyHead;\n    public function __construct() {\n        $this->dummyHead = new Node(null,null);\n        $this->size = 0;\n    }\n     // 获取链表中的元素个数\n    public function getSize():int\n    {\n        return $this->size;\n    }\n     // 返回链表是否为空\n    public function isEmpty():bool\n    {\n        return $this->size == 0;\n    }\n    // 在链表的index(0-based)位置添加新的元素e\n    // 在链表中不是一个常用的操作\n    public function add($index,$e){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $prev = $this->dummyHead;\n        for ($i=0; $i < $index; $i++) { \n            $prev = $prev->next;\n        }\n        $prev->next = new Node($e,$prev->next);\n        $this->size ++;\n    }\n    // 在链表头添加新的元素e\n    public function addFirst($e){\n        $this->add(0,$e);\n    }\n    // 在链表末尾添加新的元素e\n    public function addLast($e){\n        $this->add($this->size,$e);\n    }\n    // 获得链表的第index(0-based)个位置的元素\n    // 在链表中不是一个常用的操作\n    public function get($index){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $cur = $this->dummyHead->next;\n        for ($i=0; $i < $index; $i++) { \n            $cur = $cur->next;\n        }\n        return $cur->e;\n    }\n    // 获得链表的第一个元素\n    public function getFirst(){\n        $this->get(0);\n    }\n     // 获得链表的最后一个元素\n    public function getLast(){\n        $this->get($this->size-1);\n    }\n     // 修改链表的第index(0-based)个位置的元素为e\n    // 在链表中不是一个常用的操作\n    public function set($index,$e){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $cur = $this->dummyHead->next;\n        for ($i=0; $i < $index; $i++) { \n            $cur = $cur->next;\n        }\n        $cur->e = $e;\n    }\n    // 查找链表中是否有元素e\n    public function contains($e){\n        $cur = $this->dummyHead->next;\n        while($cur != null){\n            if ($cur->e == $e){\n                return true;\n            }\n            $cur = $cur->next;\n        }\n        return false;\n    }\n    \n    // 从链表中删除index(0-based)位置的元素, 返回删除的元素\n    // 在链表中不是一个常用的操作\n    public function remove($index){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $prev = $this->dummyHead;\n        for ($i=0; $i < $index; $i++) { \n            $prev= $prev->next;\n        }\n        $retNode = $prev->next;\n        $prev->next = $retNode->next;\n        $retNode->next = null;\n        $this->size--;\n    }\n    // 从链表中删除第一个元素, 返回删除的元素\n    public function removeLast(){\n        $this->remove($this->size-1);\n    }\n    // 从链表中删除最后一个元素, 返回删除的元素\n    public function removeFirst(){\n        $this->remove(0);\n    }\n     // 从链表中删除元素e\n    public function removeElement($e){\n        \n    }\n    public function __toString(){\n        $cur = $this->dummyHead->next;\n        $res = '';\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.'->';\n            $cur = $cur->next;\n        }\n        //第二种\n        // for ($cur=$this->dummyHead->next; $cur != null; $cur=$cur->next) { \n        //     $res .= $cur.'->';\n        // }\n        $res.=\"NULL\\n\";\n        return $res;\n    }\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之链表.md","raw":"---\ntitle: 数据结构之链表\ntop: 1\ndate: 2019-07-29 11:45:38\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：链表 [（Linked List）](https://github.com/xushuhui/Data-Structures/tree/master/LinkedList)\n```php\nclass Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this->e = $e;\n        $this->next = $next;\n    }\n    public function __toString(){\n        return (string)$this->e;\n    }\n}\nclass LinkedList{\n   \n    private $size;\n    private $dummyHead;\n    public function __construct() {\n        $this->dummyHead = new Node(null,null);\n        $this->size = 0;\n    }\n     // 获取链表中的元素个数\n    public function getSize():int\n    {\n        return $this->size;\n    }\n     // 返回链表是否为空\n    public function isEmpty():bool\n    {\n        return $this->size == 0;\n    }\n    // 在链表的index(0-based)位置添加新的元素e\n    // 在链表中不是一个常用的操作\n    public function add($index,$e){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $prev = $this->dummyHead;\n        for ($i=0; $i < $index; $i++) { \n            $prev = $prev->next;\n        }\n        $prev->next = new Node($e,$prev->next);\n        $this->size ++;\n    }\n    // 在链表头添加新的元素e\n    public function addFirst($e){\n        $this->add(0,$e);\n    }\n    // 在链表末尾添加新的元素e\n    public function addLast($e){\n        $this->add($this->size,$e);\n    }\n    // 获得链表的第index(0-based)个位置的元素\n    // 在链表中不是一个常用的操作\n    public function get($index){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $cur = $this->dummyHead->next;\n        for ($i=0; $i < $index; $i++) { \n            $cur = $cur->next;\n        }\n        return $cur->e;\n    }\n    // 获得链表的第一个元素\n    public function getFirst(){\n        $this->get(0);\n    }\n     // 获得链表的最后一个元素\n    public function getLast(){\n        $this->get($this->size-1);\n    }\n     // 修改链表的第index(0-based)个位置的元素为e\n    // 在链表中不是一个常用的操作\n    public function set($index,$e){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $cur = $this->dummyHead->next;\n        for ($i=0; $i < $index; $i++) { \n            $cur = $cur->next;\n        }\n        $cur->e = $e;\n    }\n    // 查找链表中是否有元素e\n    public function contains($e){\n        $cur = $this->dummyHead->next;\n        while($cur != null){\n            if ($cur->e == $e){\n                return true;\n            }\n            $cur = $cur->next;\n        }\n        return false;\n    }\n    \n    // 从链表中删除index(0-based)位置的元素, 返回删除的元素\n    // 在链表中不是一个常用的操作\n    public function remove($index){\n        if($index <0 || $index > $this->size){\n            throw new Exception(\"index is illegal\");\n        }\n        $prev = $this->dummyHead;\n        for ($i=0; $i < $index; $i++) { \n            $prev= $prev->next;\n        }\n        $retNode = $prev->next;\n        $prev->next = $retNode->next;\n        $retNode->next = null;\n        $this->size--;\n    }\n    // 从链表中删除第一个元素, 返回删除的元素\n    public function removeLast(){\n        $this->remove($this->size-1);\n    }\n    // 从链表中删除最后一个元素, 返回删除的元素\n    public function removeFirst(){\n        $this->remove(0);\n    }\n     // 从链表中删除元素e\n    public function removeElement($e){\n        \n    }\n    public function __toString(){\n        $cur = $this->dummyHead->next;\n        $res = '';\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.'->';\n            $cur = $cur->next;\n        }\n        //第二种\n        // for ($cur=$this->dummyHead->next; $cur != null; $cur=$cur->next) { \n        //     $res .= $cur.'->';\n        // }\n        $res.=\"NULL\\n\";\n        return $res;\n    }\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之链表","published":1,"updated":"2019-08-01T01:54:03.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou4004y0gs6pna997a1","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/LinkedList\" target=\"_blank\" rel=\"noopener\">（Linked List）</a></p>\n<pre><code class=\"lang-php\">class Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this-&gt;e = $e;\n        $this-&gt;next = $next;\n    }\n    public function __toString(){\n        return (string)$this-&gt;e;\n    }\n}\nclass LinkedList{\n\n    private $size;\n    private $dummyHead;\n    public function __construct() {\n        $this-&gt;dummyHead = new Node(null,null);\n        $this-&gt;size = 0;\n    }\n     // 获取链表中的元素个数\n    public function getSize():int\n    {\n        return $this-&gt;size;\n    }\n     // 返回链表是否为空\n    public function isEmpty():bool\n    {\n        return $this-&gt;size == 0;\n    }\n    // 在链表的index(0-based)位置添加新的元素e\n    // 在链表中不是一个常用的操作\n    public function add($index,$e){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $prev = $this-&gt;dummyHead;\n        for ($i=0; $i &lt; $index; $i++) { \n            $prev = $prev-&gt;next;\n        }\n        $prev-&gt;next = new Node($e,$prev-&gt;next);\n        $this-&gt;size ++;\n    }\n    // 在链表头添加新的元素e\n    public function addFirst($e){\n        $this-&gt;add(0,$e);\n    }\n    // 在链表末尾添加新的元素e\n    public function addLast($e){\n        $this-&gt;add($this-&gt;size,$e);\n    }\n    // 获得链表的第index(0-based)个位置的元素\n    // 在链表中不是一个常用的操作\n    public function get($index){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $cur = $this-&gt;dummyHead-&gt;next;\n        for ($i=0; $i &lt; $index; $i++) { \n            $cur = $cur-&gt;next;\n        }\n        return $cur-&gt;e;\n    }\n    // 获得链表的第一个元素\n    public function getFirst(){\n        $this-&gt;get(0);\n    }\n     // 获得链表的最后一个元素\n    public function getLast(){\n        $this-&gt;get($this-&gt;size-1);\n    }\n     // 修改链表的第index(0-based)个位置的元素为e\n    // 在链表中不是一个常用的操作\n    public function set($index,$e){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $cur = $this-&gt;dummyHead-&gt;next;\n        for ($i=0; $i &lt; $index; $i++) { \n            $cur = $cur-&gt;next;\n        }\n        $cur-&gt;e = $e;\n    }\n    // 查找链表中是否有元素e\n    public function contains($e){\n        $cur = $this-&gt;dummyHead-&gt;next;\n        while($cur != null){\n            if ($cur-&gt;e == $e){\n                return true;\n            }\n            $cur = $cur-&gt;next;\n        }\n        return false;\n    }\n\n    // 从链表中删除index(0-based)位置的元素, 返回删除的元素\n    // 在链表中不是一个常用的操作\n    public function remove($index){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $prev = $this-&gt;dummyHead;\n        for ($i=0; $i &lt; $index; $i++) { \n            $prev= $prev-&gt;next;\n        }\n        $retNode = $prev-&gt;next;\n        $prev-&gt;next = $retNode-&gt;next;\n        $retNode-&gt;next = null;\n        $this-&gt;size--;\n    }\n    // 从链表中删除第一个元素, 返回删除的元素\n    public function removeLast(){\n        $this-&gt;remove($this-&gt;size-1);\n    }\n    // 从链表中删除最后一个元素, 返回删除的元素\n    public function removeFirst(){\n        $this-&gt;remove(0);\n    }\n     // 从链表中删除元素e\n    public function removeElement($e){\n\n    }\n    public function __toString(){\n        $cur = $this-&gt;dummyHead-&gt;next;\n        $res = &#39;&#39;;\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.&#39;-&gt;&#39;;\n            $cur = $cur-&gt;next;\n        }\n        //第二种\n        // for ($cur=$this-&gt;dummyHead-&gt;next; $cur != null; $cur=$cur-&gt;next) { \n        //     $res .= $cur.&#39;-&gt;&#39;;\n        // }\n        $res.=&quot;NULL\\n&quot;;\n        return $res;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/LinkedList\" target=\"_blank\" rel=\"noopener\">（Linked List）</a></p>\n<pre><code class=\"lang-php\">class Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this-&gt;e = $e;\n        $this-&gt;next = $next;\n    }\n    public function __toString(){\n        return (string)$this-&gt;e;\n    }\n}\nclass LinkedList{\n\n    private $size;\n    private $dummyHead;\n    public function __construct() {\n        $this-&gt;dummyHead = new Node(null,null);\n        $this-&gt;size = 0;\n    }\n     // 获取链表中的元素个数\n    public function getSize():int\n    {\n        return $this-&gt;size;\n    }\n     // 返回链表是否为空\n    public function isEmpty():bool\n    {\n        return $this-&gt;size == 0;\n    }\n    // 在链表的index(0-based)位置添加新的元素e\n    // 在链表中不是一个常用的操作\n    public function add($index,$e){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $prev = $this-&gt;dummyHead;\n        for ($i=0; $i &lt; $index; $i++) { \n            $prev = $prev-&gt;next;\n        }\n        $prev-&gt;next = new Node($e,$prev-&gt;next);\n        $this-&gt;size ++;\n    }\n    // 在链表头添加新的元素e\n    public function addFirst($e){\n        $this-&gt;add(0,$e);\n    }\n    // 在链表末尾添加新的元素e\n    public function addLast($e){\n        $this-&gt;add($this-&gt;size,$e);\n    }\n    // 获得链表的第index(0-based)个位置的元素\n    // 在链表中不是一个常用的操作\n    public function get($index){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $cur = $this-&gt;dummyHead-&gt;next;\n        for ($i=0; $i &lt; $index; $i++) { \n            $cur = $cur-&gt;next;\n        }\n        return $cur-&gt;e;\n    }\n    // 获得链表的第一个元素\n    public function getFirst(){\n        $this-&gt;get(0);\n    }\n     // 获得链表的最后一个元素\n    public function getLast(){\n        $this-&gt;get($this-&gt;size-1);\n    }\n     // 修改链表的第index(0-based)个位置的元素为e\n    // 在链表中不是一个常用的操作\n    public function set($index,$e){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $cur = $this-&gt;dummyHead-&gt;next;\n        for ($i=0; $i &lt; $index; $i++) { \n            $cur = $cur-&gt;next;\n        }\n        $cur-&gt;e = $e;\n    }\n    // 查找链表中是否有元素e\n    public function contains($e){\n        $cur = $this-&gt;dummyHead-&gt;next;\n        while($cur != null){\n            if ($cur-&gt;e == $e){\n                return true;\n            }\n            $cur = $cur-&gt;next;\n        }\n        return false;\n    }\n\n    // 从链表中删除index(0-based)位置的元素, 返回删除的元素\n    // 在链表中不是一个常用的操作\n    public function remove($index){\n        if($index &lt;0 || $index &gt; $this-&gt;size){\n            throw new Exception(&quot;index is illegal&quot;);\n        }\n        $prev = $this-&gt;dummyHead;\n        for ($i=0; $i &lt; $index; $i++) { \n            $prev= $prev-&gt;next;\n        }\n        $retNode = $prev-&gt;next;\n        $prev-&gt;next = $retNode-&gt;next;\n        $retNode-&gt;next = null;\n        $this-&gt;size--;\n    }\n    // 从链表中删除第一个元素, 返回删除的元素\n    public function removeLast(){\n        $this-&gt;remove($this-&gt;size-1);\n    }\n    // 从链表中删除最后一个元素, 返回删除的元素\n    public function removeFirst(){\n        $this-&gt;remove(0);\n    }\n     // 从链表中删除元素e\n    public function removeElement($e){\n\n    }\n    public function __toString(){\n        $cur = $this-&gt;dummyHead-&gt;next;\n        $res = &#39;&#39;;\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.&#39;-&gt;&#39;;\n            $cur = $cur-&gt;next;\n        }\n        //第二种\n        // for ($cur=$this-&gt;dummyHead-&gt;next; $cur != null; $cur=$cur-&gt;next) { \n        //     $res .= $cur.&#39;-&gt;&#39;;\n        // }\n        $res.=&quot;NULL\\n&quot;;\n        return $res;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表栈","top":1,"date":"2019-07-29T03:46:29.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：链表栈 [（Linked List Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack/LinkedListStack.php)\n\n```php\nclass LinkedListStack  implements Stack\n{\n    private $list;\n    public function __construct() {\n        $this->list = new LinkedList();\n    }\n    public function getSize(){\n        return $this->list->getSize();\n    }\n    public function isEmpty() {\n        return $this->list->isEmpty();\n    }\n    public function pop(){\n        return $this->list->removeFirst();\n    }\n    public function push($e){\n        return $this->list->addFirst($e);\n    }\n    public function peek(){\n        return $this->list->getFirst();\n    }\n    public function __toString()\n    {\n        $str=\"\\nStack: top \";\n        $str.=$this->list;\n        return $str;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之链表栈.md","raw":"---\ntitle: 数据结构之链表栈\ntop: 1\ndate: 2019-07-29 11:46:29\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：链表栈 [（Linked List Stack）](https://github.com/xushuhui/Data-Structures/tree/master/Stack/LinkedListStack.php)\n\n```php\nclass LinkedListStack  implements Stack\n{\n    private $list;\n    public function __construct() {\n        $this->list = new LinkedList();\n    }\n    public function getSize(){\n        return $this->list->getSize();\n    }\n    public function isEmpty() {\n        return $this->list->isEmpty();\n    }\n    public function pop(){\n        return $this->list->removeFirst();\n    }\n    public function push($e){\n        return $this->list->addFirst($e);\n    }\n    public function peek(){\n        return $this->list->getFirst();\n    }\n    public function __toString()\n    {\n        $str=\"\\nStack: top \";\n        $str.=$this->list;\n        return $str;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之链表栈","published":1,"updated":"2019-08-01T01:57:33.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou500510gs6zq5wpg4h","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack/LinkedListStack.php\" target=\"_blank\" rel=\"noopener\">（Linked List Stack）</a></p>\n<pre><code class=\"lang-php\">class LinkedListStack  implements Stack\n{\n    private $list;\n    public function __construct() {\n        $this-&gt;list = new LinkedList();\n    }\n    public function getSize(){\n        return $this-&gt;list-&gt;getSize();\n    }\n    public function isEmpty() {\n        return $this-&gt;list-&gt;isEmpty();\n    }\n    public function pop(){\n        return $this-&gt;list-&gt;removeFirst();\n    }\n    public function push($e){\n        return $this-&gt;list-&gt;addFirst($e);\n    }\n    public function peek(){\n        return $this-&gt;list-&gt;getFirst();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nStack: top &quot;;\n        $str.=$this-&gt;list;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表栈 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Stack/LinkedListStack.php\" target=\"_blank\" rel=\"noopener\">（Linked List Stack）</a></p>\n<pre><code class=\"lang-php\">class LinkedListStack  implements Stack\n{\n    private $list;\n    public function __construct() {\n        $this-&gt;list = new LinkedList();\n    }\n    public function getSize(){\n        return $this-&gt;list-&gt;getSize();\n    }\n    public function isEmpty() {\n        return $this-&gt;list-&gt;isEmpty();\n    }\n    public function pop(){\n        return $this-&gt;list-&gt;removeFirst();\n    }\n    public function push($e){\n        return $this-&gt;list-&gt;addFirst($e);\n    }\n    public function peek(){\n        return $this-&gt;list-&gt;getFirst();\n    }\n    public function __toString()\n    {\n        $str=&quot;\\nStack: top &quot;;\n        $str.=$this-&gt;list;\n        return $str;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表队列","top":1,"date":"2019-07-29T03:45:32.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：链表队列 [（Linked List Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/LinkedListQueue.php)\n\n```php\nclass Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this->e = $e;\n        $this->next = $next;\n    }\n    public function __toString(){\n        return (string)$this->e;\n    }\n}\nclass LinkedListQueue implements Queue\n{\n    private $head,$tail;\n    private $size;\n    public function __construct(){\n        $this->head = $this->tail= null;\n        $this->size = 0;\n    }\n    public function isEmpty(){\n        return $this->size == 0;\n    }\n    public function getSize(){\n        return $this->size;\n    }\n    public function enqueue($e){\n        if(is_null($this->tail)){\n            $this->tail = new Node($e);\n            $this->head = $this->tail;\n        }else{\n            $this->tail->next = new Node($e);\n            $this->tail = $this->tail->next;\n        }\n        $this->size ++ ;\n    }\n    public function dequeue(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        $retNode = $this->head;\n        $this->head= $this->head->next;\n        $retNode->next = null;\n        if($this->head == null){\n            $this->tail = null;\n        }\n        $this->size--;\n        return $retNode->e;\n    }\n    public function getFront(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        return $this->head->e;\n    }\n    public function __toString(){\n        $cur = $this->head;\n        $res = 'Queue: front ';\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.'->';\n            $cur = $cur->next;\n        }\n\n        $res.=\"NULL tail \\n\";\n        return $res;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之链表队列.md","raw":"---\ntitle: 数据结构之链表队列\ntop: 1\ndate: 2019-07-29 11:45:32\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：链表队列 [（Linked List Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue/LinkedListQueue.php)\n\n```php\nclass Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this->e = $e;\n        $this->next = $next;\n    }\n    public function __toString(){\n        return (string)$this->e;\n    }\n}\nclass LinkedListQueue implements Queue\n{\n    private $head,$tail;\n    private $size;\n    public function __construct(){\n        $this->head = $this->tail= null;\n        $this->size = 0;\n    }\n    public function isEmpty(){\n        return $this->size == 0;\n    }\n    public function getSize(){\n        return $this->size;\n    }\n    public function enqueue($e){\n        if(is_null($this->tail)){\n            $this->tail = new Node($e);\n            $this->head = $this->tail;\n        }else{\n            $this->tail->next = new Node($e);\n            $this->tail = $this->tail->next;\n        }\n        $this->size ++ ;\n    }\n    public function dequeue(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        $retNode = $this->head;\n        $this->head= $this->head->next;\n        $retNode->next = null;\n        if($this->head == null){\n            $this->tail = null;\n        }\n        $this->size--;\n        return $retNode->e;\n    }\n    public function getFront(){\n        if($this->isEmpty()){\n            throw new Exception(\"Queue is empty\");\n        }\n        return $this->head->e;\n    }\n    public function __toString(){\n        $cur = $this->head;\n        $res = 'Queue: front ';\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.'->';\n            $cur = $cur->next;\n        }\n\n        $res.=\"NULL tail \\n\";\n        return $res;\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之链表队列","published":1,"updated":"2019-08-01T01:57:29.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou600540gs6u6nudwp4","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/LinkedListQueue.php\" target=\"_blank\" rel=\"noopener\">（Linked List Queue）</a></p>\n<pre><code class=\"lang-php\">class Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this-&gt;e = $e;\n        $this-&gt;next = $next;\n    }\n    public function __toString(){\n        return (string)$this-&gt;e;\n    }\n}\nclass LinkedListQueue implements Queue\n{\n    private $head,$tail;\n    private $size;\n    public function __construct(){\n        $this-&gt;head = $this-&gt;tail= null;\n        $this-&gt;size = 0;\n    }\n    public function isEmpty(){\n        return $this-&gt;size == 0;\n    }\n    public function getSize(){\n        return $this-&gt;size;\n    }\n    public function enqueue($e){\n        if(is_null($this-&gt;tail)){\n            $this-&gt;tail = new Node($e);\n            $this-&gt;head = $this-&gt;tail;\n        }else{\n            $this-&gt;tail-&gt;next = new Node($e);\n            $this-&gt;tail = $this-&gt;tail-&gt;next;\n        }\n        $this-&gt;size ++ ;\n    }\n    public function dequeue(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        $retNode = $this-&gt;head;\n        $this-&gt;head= $this-&gt;head-&gt;next;\n        $retNode-&gt;next = null;\n        if($this-&gt;head == null){\n            $this-&gt;tail = null;\n        }\n        $this-&gt;size--;\n        return $retNode-&gt;e;\n    }\n    public function getFront(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        return $this-&gt;head-&gt;e;\n    }\n    public function __toString(){\n        $cur = $this-&gt;head;\n        $res = &#39;Queue: front &#39;;\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.&#39;-&gt;&#39;;\n            $cur = $cur-&gt;next;\n        }\n\n        $res.=&quot;NULL tail \\n&quot;;\n        return $res;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue/LinkedListQueue.php\" target=\"_blank\" rel=\"noopener\">（Linked List Queue）</a></p>\n<pre><code class=\"lang-php\">class Node{\n    public $e;\n    public $next;\n    public function __construct($e = null,$next=null){\n        $this-&gt;e = $e;\n        $this-&gt;next = $next;\n    }\n    public function __toString(){\n        return (string)$this-&gt;e;\n    }\n}\nclass LinkedListQueue implements Queue\n{\n    private $head,$tail;\n    private $size;\n    public function __construct(){\n        $this-&gt;head = $this-&gt;tail= null;\n        $this-&gt;size = 0;\n    }\n    public function isEmpty(){\n        return $this-&gt;size == 0;\n    }\n    public function getSize(){\n        return $this-&gt;size;\n    }\n    public function enqueue($e){\n        if(is_null($this-&gt;tail)){\n            $this-&gt;tail = new Node($e);\n            $this-&gt;head = $this-&gt;tail;\n        }else{\n            $this-&gt;tail-&gt;next = new Node($e);\n            $this-&gt;tail = $this-&gt;tail-&gt;next;\n        }\n        $this-&gt;size ++ ;\n    }\n    public function dequeue(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        $retNode = $this-&gt;head;\n        $this-&gt;head= $this-&gt;head-&gt;next;\n        $retNode-&gt;next = null;\n        if($this-&gt;head == null){\n            $this-&gt;tail = null;\n        }\n        $this-&gt;size--;\n        return $retNode-&gt;e;\n    }\n    public function getFront(){\n        if($this-&gt;isEmpty()){\n            throw new Exception(&quot;Queue is empty&quot;);\n        }\n        return $this-&gt;head-&gt;e;\n    }\n    public function __toString(){\n        $cur = $this-&gt;head;\n        $res = &#39;Queue: front &#39;;\n        //第一种写法\n        while($cur != null){\n            $res.=$cur.&#39;-&gt;&#39;;\n            $cur = $cur-&gt;next;\n        }\n\n        $res.=&quot;NULL tail \\n&quot;;\n        return $res;\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表集合","top":1,"date":"2019-07-29T03:50:21.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：链表集合 [（Linked List Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set/LinkedListSet.php)\n\n```php\nclass LinkedListSet implements Set\n{\n    private $list;\n    public function __construct(){\n        $this->list = new LinkedList();\n    }\n    public function add($e){\n        if(!$this->list->contains($e)){\n            $this->list->addFirst($e);\n        }\n    }\n    public function contains($e){\n        return $this->list->contains($e);\n    }\n    public function remove($e){\n        $this->list->removeElement($e);\n    }\n    public function getSize(){\n        return $this->list->getSize();\n    }\n    public function isEmpty(){\n        return $this->list->isEmpty();\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之链表集合.md","raw":"---\ntitle: 数据结构之链表集合\ntop: 1\ndate: 2019-07-29 11:50:21\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：链表集合 [（Linked List Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set/LinkedListSet.php)\n\n```php\nclass LinkedListSet implements Set\n{\n    private $list;\n    public function __construct(){\n        $this->list = new LinkedList();\n    }\n    public function add($e){\n        if(!$this->list->contains($e)){\n            $this->list->addFirst($e);\n        }\n    }\n    public function contains($e){\n        return $this->list->contains($e);\n    }\n    public function remove($e){\n        $this->list->removeElement($e);\n    }\n    public function getSize(){\n        return $this->list->getSize();\n    }\n    public function isEmpty(){\n        return $this->list->isEmpty();\n    }\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之链表集合","published":1,"updated":"2019-08-01T01:57:19.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou700570gs6zhcmh3j8","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表集合 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set/LinkedListSet.php\" target=\"_blank\" rel=\"noopener\">（Linked List Set）</a></p>\n<pre><code class=\"lang-php\">class LinkedListSet implements Set\n{\n    private $list;\n    public function __construct(){\n        $this-&gt;list = new LinkedList();\n    }\n    public function add($e){\n        if(!$this-&gt;list-&gt;contains($e)){\n            $this-&gt;list-&gt;addFirst($e);\n        }\n    }\n    public function contains($e){\n        return $this-&gt;list-&gt;contains($e);\n    }\n    public function remove($e){\n        $this-&gt;list-&gt;removeElement($e);\n    }\n    public function getSize(){\n        return $this-&gt;list-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;list-&gt;isEmpty();\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：链表集合 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set/LinkedListSet.php\" target=\"_blank\" rel=\"noopener\">（Linked List Set）</a></p>\n<pre><code class=\"lang-php\">class LinkedListSet implements Set\n{\n    private $list;\n    public function __construct(){\n        $this-&gt;list = new LinkedList();\n    }\n    public function add($e){\n        if(!$this-&gt;list-&gt;contains($e)){\n            $this-&gt;list-&gt;addFirst($e);\n        }\n    }\n    public function contains($e){\n        return $this-&gt;list-&gt;contains($e);\n    }\n    public function remove($e){\n        $this-&gt;list-&gt;removeElement($e);\n    }\n    public function getSize(){\n        return $this-&gt;list-&gt;getSize();\n    }\n    public function isEmpty(){\n        return $this-&gt;list-&gt;isEmpty();\n    }\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列","top":1,"date":"2019-07-27T11:03:25.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：队列 [（Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue)\n\n```php\ninterface Queue{\n    function getSize();\n    function isEmpty();\n    function enqueue($e);\n    function dequeue();\n    function getFront();\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之队列.md","raw":"---\ntitle: 数据结构之队列\ntop: 1\ndate: 2019-07-27 19:03:25\ntags: 【数据结构，算法】\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：队列 [（Queue）](https://github.com/xushuhui/Data-Structures/tree/master/Queue)\n\n```php\ninterface Queue{\n    function getSize();\n    function isEmpty();\n    function enqueue($e);\n    function dequeue();\n    function getFront();\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之队列","published":1,"updated":"2019-08-01T02:44:56.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou8005a0gs6b6wxiz2s","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue\" target=\"_blank\" rel=\"noopener\">（Queue）</a></p>\n<pre><code class=\"lang-php\">interface Queue{\n    function getSize();\n    function isEmpty();\n    function enqueue($e);\n    function dequeue();\n    function getFront();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：队列 <a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Queue\" target=\"_blank\" rel=\"noopener\">（Queue）</a></p>\n<pre><code class=\"lang-php\">interface Queue{\n    function getSize();\n    function isEmpty();\n    function enqueue($e);\n    function dequeue();\n    function getFront();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之集合","top":1,"date":"2019-07-29T03:49:36.000Z","_content":"### 定义\n\n### 代码\ngithub 地址：[（Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set)\n```php\ninterface Set{\n    function add($e);\n    function contains($e);\n    function remove($e);\n    function getSize();\n    function isEmpty();\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之集合.md","raw":"---\ntitle: 数据结构之集合\ntop: 1\ndate: 2019-07-29 11:49:36\ntags: [数据结构,算法]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\ngithub 地址：[（Set）](https://github.com/xushuhui/Data-Structures/tree/master/Set)\n```php\ninterface Set{\n    function add($e);\n    function contains($e);\n    function remove($e);\n    function getSize();\n    function isEmpty();\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之集合","published":1,"updated":"2019-08-01T01:20:50.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lahou9005d0gs6wedqb9ku","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：<a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set\" target=\"_blank\" rel=\"noopener\">（Set）</a></p>\n<pre><code class=\"lang-php\">interface Set{\n    function add($e);\n    function contains($e);\n    function remove($e);\n    function getSize();\n    function isEmpty();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：<a href=\"https://github.com/xushuhui/Data-Structures/tree/master/Set\" target=\"_blank\" rel=\"noopener\">（Set）</a></p>\n<pre><code class=\"lang-php\">interface Set{\n    function add($e);\n    function contains($e);\n    function remove($e);\n    function getSize();\n    function isEmpty();\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2lahosb000c0gs6gfx6gcc1","category_id":"ck2lahosa00090gs6gor9g2tc","_id":"ck2lahosh000k0gs6awoog957"},{"post_id":"ck2lahos700060gs6xczu7dog","category_id":"ck2lahosa00090gs6gor9g2tc","_id":"ck2lahosi000n0gs6v9tosn04"},{"post_id":"ck2lahosa000b0gs6ev2l1lfh","category_id":"ck2lahosa00090gs6gor9g2tc","_id":"ck2lahosj000q0gs6wsd71hdo"},{"post_id":"ck2lahosh000m0gs66ux583gb","category_id":"ck2lahosk000s0gs661aa96nd","_id":"ck2lahosr00130gs6x2dvcqjq"},{"post_id":"ck2lahosn00100gs6b2g53qsi","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahost00170gs6gtom7m9w"},{"post_id":"ck2lahosk000t0gs6k045r9r3","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahosu001b0gs6kchgw9on"},{"post_id":"ck2lahosq00120gs6m416fdrs","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahosv001d0gs6khzxrloj"},{"post_id":"ck2lahosr00150gs6mw3l2g49","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahosw001g0gs6gix3y6hp"},{"post_id":"ck2lahosl000v0gs6kyf6xhq0","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahosy001j0gs62snaazhd"},{"post_id":"ck2lahoss00160gs68aux96na","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahosz001n0gs657e5olbq"},{"post_id":"ck2lahost001a0gs633jqli2y","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot0001q0gs63b2l030d"},{"post_id":"ck2lahosm000y0gs6yj6yzo0e","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot2001u0gs6od21p359"},{"post_id":"ck2lahosu001c0gs6c9rcc0c7","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot3001x0gs6reuyu0ql"},{"post_id":"ck2lahosv001f0gs678xpagkv","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot400210gs6enyc1zyn"},{"post_id":"ck2lahosx001i0gs677r9dsvs","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot500250gs6vkbud8jr"},{"post_id":"ck2lahosz001m0gs68ip6dy2q","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot600290gs6x5ori74p"},{"post_id":"ck2lahot2001w0gs6wtli207b","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahot9002h0gs6hwc6ot3e"},{"post_id":"ck2lahot500240gs6dneq1ss4","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lahota002l0gs6rsr8qhmu"},{"post_id":"ck2lahot1001t0gs680jxinl8","category_id":"ck2lahot3001z0gs67bm1utvo","_id":"ck2lahotb002o0gs6lr5b3udm"},{"post_id":"ck2lahot7002c0gs6rm1n4sx7","category_id":"ck2lahot3001z0gs67bm1utvo","_id":"ck2lahotd002t0gs6rccc7pts"},{"post_id":"ck2lahot400200gs6skrlgp81","category_id":"ck2lahot3001z0gs67bm1utvo","_id":"ck2lahote002w0gs6dv86n3k8"},{"post_id":"ck2lahota002k0gs69ttbvhqz","category_id":"ck2lahosa00090gs6gor9g2tc","_id":"ck2lahotg00300gs6al6yb97l"},{"post_id":"ck2lahot600270gs6z0jrsroa","category_id":"ck2lahot9002g0gs6f35x1ijs","_id":"ck2lahoth00340gs64p2wx37y"},{"post_id":"ck2lahotc002s0gs699mdlyed","category_id":"ck2lahosa00090gs6gor9g2tc","_id":"ck2lahoti00380gs6kaxsj6ik"},{"post_id":"ck2lahot8002f0gs6szmqv8nj","category_id":"ck2lahotc002r0gs6gitqj24b","_id":"ck2lahotj003c0gs6czkzef87"},{"post_id":"ck2lahoti00370gs6ev9rbwv1","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotl003i0gs6x96n20t1"},{"post_id":"ck2lahotd002v0gs6eq1e775p","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotn003n0gs64ymrdosd"},{"post_id":"ck2lahoti003a0gs6avmz2xxm","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahoto003q0gs6gqyh2wpw"},{"post_id":"ck2lahotk003f0gs62f064w42","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotq003u0gs6pleu87pj"},{"post_id":"ck2lahotf002z0gs6m6we5ncq","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotr003w0gs6yug9csyo"},{"post_id":"ck2lahotl003h0gs6n1whq3f5","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahots00400gs66osx0pz4"},{"post_id":"ck2lahotm003m0gs6ac6pxj16","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahott00420gs669llw3yb"},{"post_id":"ck2lahotg00330gs6915ikoyf","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotu00460gs6yymd1127"},{"post_id":"ck2lahotn003p0gs6exs7tijv","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotv00490gs6bqa2mhlt"},{"post_id":"ck2lahotp003t0gs6lq8l9un0","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahotx004c0gs64beppq35"},{"post_id":"ck2lahotq003v0gs6zqusrhki","category_id":"ck2lahotg00320gs6vyf6doce","_id":"ck2lahoty004f0gs6g0o686fu"},{"post_id":"ck2lahotw004b0gs6sqccox6l","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahotz004k0gs6omluz9s5"},{"post_id":"ck2lahots00410gs6qx1zbtuj","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou1004p0gs6sllaitp4"},{"post_id":"ck2lahotx004d0gs64o60jqow","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou2004s0gs6coal0sya"},{"post_id":"ck2lahoty004h0gs6g8zzl07x","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou3004v0gs6epg4fdyj"},{"post_id":"ck2lahott00450gs6zolo0ofo","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou4004z0gs6m0t8tdmm"},{"post_id":"ck2lahotz004j0gs62whdeb10","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou500520gs6bef1c6fw"},{"post_id":"ck2lahou1004o0gs6d4q4n511","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou700550gs662bykhsq"},{"post_id":"ck2lahotv00480gs60l0s0vfj","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou700580gs6bc0hjeqn"},{"post_id":"ck2lahou2004r0gs6n97p815v","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou8005b0gs6enjzuybw"},{"post_id":"ck2lahou3004u0gs6mb3wfmwr","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou9005e0gs60awoo3l2"},{"post_id":"ck2lahou4004y0gs6pna997a1","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahou9005h0gs6bqbg1pc1"},{"post_id":"ck2lahou500510gs6zq5wpg4h","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahoua005j0gs6ol3le5l2"},{"post_id":"ck2lahou600540gs6u6nudwp4","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahoua005m0gs67nkxr3cx"},{"post_id":"ck2lahou700570gs6zhcmh3j8","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahoub005o0gs6jowy4c9i"},{"post_id":"ck2lahou8005a0gs6b6wxiz2s","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahoub005r0gs6xiahfhfw"},{"post_id":"ck2lahou9005d0gs6wedqb9ku","category_id":"ck2lahotu00470gs6l8k79u4z","_id":"ck2lahoub005t0gs64atctoxj"},{"post_id":"ck2lahot0001p0gs6hv65v569","category_id":"ck2lahosm000z0gs6exggjqup","_id":"ck2lam8qk0001gos6kkfgx49u"}],"PostTag":[{"post_id":"ck2lahorz00010gs6lzzxyil6","tag_id":"ck2lahos400030gs66nvhs971","_id":"ck2lahos800070gs6z4ffvqhi"},{"post_id":"ck2lahosb000c0gs6gfx6gcc1","tag_id":"ck2lahosa000a0gs6jpn6a87c","_id":"ck2lahosf000g0gs6fnigwnt3"},{"post_id":"ck2lahos700060gs6xczu7dog","tag_id":"ck2lahosa000a0gs6jpn6a87c","_id":"ck2lahosg000i0gs6rmq9bwue"},{"post_id":"ck2lahosg000j0gs6znrz7jwb","tag_id":"ck2lahose000f0gs6pgv3x1lu","_id":"ck2lahosi000o0gs6yu8f3x96"},{"post_id":"ck2lahos800080gs6rczslylc","tag_id":"ck2lahose000f0gs6pgv3x1lu","_id":"ck2lahosl000u0gs6d0j8w4jl"},{"post_id":"ck2lahos800080gs6rczslylc","tag_id":"ck2lahosh000l0gs6dd4p6e8r","_id":"ck2lahosl000w0gs6i3kz55o6"},{"post_id":"ck2lahosa000b0gs6ev2l1lfh","tag_id":"ck2lahosa000a0gs6jpn6a87c","_id":"ck2lahosw001h0gs6j554har6"},{"post_id":"ck2lahosa000b0gs6ev2l1lfh","tag_id":"ck2lahosm000x0gs6sg5inc1j","_id":"ck2lahosy001k0gs6bot0f1pa"},{"post_id":"ck2lahosa000b0gs6ev2l1lfh","tag_id":"ck2lahosq00110gs60tgyloii","_id":"ck2lahosz001o0gs6srvckumu"},{"post_id":"ck2lahosa000b0gs6ev2l1lfh","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahot0001r0gs6zu7d406f"},{"post_id":"ck2lahosz001m0gs68ip6dy2q","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahot2001v0gs60aa788hb"},{"post_id":"ck2lahosd000d0gs6hzt2ho2p","tag_id":"ck2lahosv001e0gs65xlpqp8e","_id":"ck2lahot3001y0gs6y3zzryzg"},{"post_id":"ck2lahosd000d0gs6hzt2ho2p","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahot400230gs6y4zd02ni"},{"post_id":"ck2lahot1001t0gs680jxinl8","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahot7002b0gs68i56a9fq"},{"post_id":"ck2lahot2001w0gs6wtli207b","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahot8002e0gs6hg2ebkhl"},{"post_id":"ck2lahosh000m0gs66ux583gb","tag_id":"ck2lahot1001s0gs6cpb8qc25","_id":"ck2lahot9002j0gs6tvzz41ev"},{"post_id":"ck2lahosh000m0gs66ux583gb","tag_id":"ck2lahose000f0gs6pgv3x1lu","_id":"ck2lahota002m0gs6oqd07c1g"},{"post_id":"ck2lahot500240gs6dneq1ss4","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotb002q0gs6v36bcjew"},{"post_id":"ck2lahosk000t0gs6k045r9r3","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotd002u0gs6l2pzw2h0"},{"post_id":"ck2lahot7002c0gs6rm1n4sx7","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahote002y0gs62bhzqirk"},{"post_id":"ck2lahosl000v0gs6kyf6xhq0","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotg00310gs6zny3pgfq"},{"post_id":"ck2lahosm000y0gs6yj6yzo0e","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahoth00360gs6lxsxqsji"},{"post_id":"ck2lahotb002n0gs6ewpj926y","tag_id":"ck2lahot1001s0gs6cpb8qc25","_id":"ck2lahoti00390gs67dffgmzb"},{"post_id":"ck2lahosn00100gs6b2g53qsi","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotj003e0gs6xtyes9vv"},{"post_id":"ck2lahosq00120gs6m416fdrs","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotk003g0gs6p244kavw"},{"post_id":"ck2lahoss00160gs68aux96na","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotm003l0gs6dq4lo2id"},{"post_id":"ck2lahost001a0gs633jqli2y","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotn003o0gs6yhq7nn71"},{"post_id":"ck2lahosu001c0gs6c9rcc0c7","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotp003s0gs653d809yx"},{"post_id":"ck2lahosv001f0gs678xpagkv","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahotr003y0gs6r8zo8rhk"},{"post_id":"ck2lahosx001i0gs677r9dsvs","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lahott00440gs6cnn87nj9"},{"post_id":"ck2lahot400200gs6skrlgp81","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahotz004i0gs63tqymn3k"},{"post_id":"ck2lahot400200gs6skrlgp81","tag_id":"ck2lahott00430gs6e1s4f5gm","_id":"ck2lahou1004m0gs6bjlbh7s9"},{"post_id":"ck2lahot400200gs6skrlgp81","tag_id":"ck2lahotv004a0gs67exr052l","_id":"ck2lahou2004q0gs61gqy6iyj"},{"post_id":"ck2lahot600270gs6z0jrsroa","tag_id":"ck2lahoty004g0gs6xxyfe0el","_id":"ck2lahou3004t0gs6upcnpq29"},{"post_id":"ck2lahot600270gs6z0jrsroa","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahou4004x0gs6s2beb2g6"},{"post_id":"ck2lahot8002f0gs6szmqv8nj","tag_id":"ck2lahou1004n0gs6ris72seq","_id":"ck2lahou400500gs6lb9ywmih"},{"post_id":"ck2lahota002k0gs69ttbvhqz","tag_id":"ck2lahou3004w0gs686osotps","_id":"ck2lahou700560gs6gquqzadm"},{"post_id":"ck2lahotc002s0gs699mdlyed","tag_id":"ck2lahou500530gs6dpkrnetl","_id":"ck2lahou8005c0gs6i0e1idzd"},{"post_id":"ck2lahotc002s0gs699mdlyed","tag_id":"ck2lahost00180gs6w43imy2b","_id":"ck2lahou9005f0gs64ft9o35p"},{"post_id":"ck2lahotc002s0gs699mdlyed","tag_id":"ck2lahosm000x0gs6sg5inc1j","_id":"ck2lahoua005i0gs6qr4tqyyl"},{"post_id":"ck2lahou8005a0gs6b6wxiz2s","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoua005k0gs6lfxlrntu"},{"post_id":"ck2lahotd002v0gs6eq1e775p","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoua005n0gs6bhp1uzrw"},{"post_id":"ck2lahotf002z0gs6m6we5ncq","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoub005p0gs6ozagdd1a"},{"post_id":"ck2lahotg00330gs6915ikoyf","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoub005s0gs6l503vwpy"},{"post_id":"ck2lahoti00370gs6ev9rbwv1","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouc005v0gs60x9t5b5q"},{"post_id":"ck2lahoti003a0gs6avmz2xxm","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouc005x0gs6yfeuu2j8"},{"post_id":"ck2lahotk003f0gs62f064w42","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoud005z0gs6490ylfo0"},{"post_id":"ck2lahotl003h0gs6n1whq3f5","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoud00610gs6rxce8xe0"},{"post_id":"ck2lahotm003m0gs6ac6pxj16","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoud00630gs6l51j0aqx"},{"post_id":"ck2lahotn003p0gs6exs7tijv","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoue00650gs6a60xx8he"},{"post_id":"ck2lahotp003t0gs6lq8l9un0","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoue00670gs6cxixwoky"},{"post_id":"ck2lahotq003v0gs6zqusrhki","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouf00690gs6q4j4nw7a"},{"post_id":"ck2lahots00410gs6qx1zbtuj","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahouf006c0gs6f8af3rgq"},{"post_id":"ck2lahots00410gs6qx1zbtuj","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahouf006d0gs6dcby6qjw"},{"post_id":"ck2lahott00450gs6zolo0ofo","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahoug006g0gs64230azs7"},{"post_id":"ck2lahott00450gs6zolo0ofo","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahoug006h0gs6j2iullyb"},{"post_id":"ck2lahotv00480gs60l0s0vfj","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahouh006k0gs6qm5y8hus"},{"post_id":"ck2lahotv00480gs60l0s0vfj","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahouh006l0gs6mwr69lj3"},{"post_id":"ck2lahotw004b0gs6sqccox6l","tag_id":"ck2lahouh006j0gs6r1gcal61","_id":"ck2lahouh006n0gs6ewcyz924"},{"post_id":"ck2lahotx004d0gs64o60jqow","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahoui006q0gs60x3ag7w3"},{"post_id":"ck2lahotx004d0gs64o60jqow","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahoui006r0gs6pmj8l6zf"},{"post_id":"ck2lahoty004h0gs6g8zzl07x","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouj006t0gs6esjgjopv"},{"post_id":"ck2lahotz004j0gs62whdeb10","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouj006v0gs67gbzjiai"},{"post_id":"ck2lahou1004o0gs6d4q4n511","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouk006x0gs6czp5shez"},{"post_id":"ck2lahou2004r0gs6n97p815v","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouk006z0gs60m5a7hv8"},{"post_id":"ck2lahou3004u0gs6mb3wfmwr","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahouk00710gs6e4lvdznp"},{"post_id":"ck2lahou4004y0gs6pna997a1","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahoul00740gs6c3ax5rr5"},{"post_id":"ck2lahou4004y0gs6pna997a1","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahoul00750gs6e5os4h0t"},{"post_id":"ck2lahou500510gs6zq5wpg4h","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoum00770gs6z1c5itjx"},{"post_id":"ck2lahou600540gs6u6nudwp4","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoum00790gs63ejsusgd"},{"post_id":"ck2lahou700570gs6zhcmh3j8","tag_id":"ck2lahou700590gs653o39g8j","_id":"ck2lahoun007b0gs6j2t6w70j"},{"post_id":"ck2lahou9005d0gs6wedqb9ku","tag_id":"ck2lahoue00680gs6njllisyz","_id":"ck2lahoun007d0gs61gynp391"},{"post_id":"ck2lahou9005d0gs6wedqb9ku","tag_id":"ck2lahouf006a0gs64xbp5sq3","_id":"ck2lahoun007e0gs63dc28xb1"},{"post_id":"ck2lahot0001p0gs6hv65v569","tag_id":"ck2lahosz001l0gs6mo180573","_id":"ck2lam8qk0000gos6pakbwnq0"}],"Tag":[{"name":"tool","_id":"ck2lahos400030gs66nvhs971"},{"name":"php","_id":"ck2lahosa000a0gs6jpn6a87c"},{"name":"golang","_id":"ck2lahose000f0gs6pgv3x1lu"},{"name":"PHP","_id":"ck2lahosh000l0gs6dd4p6e8r"},{"name":"php-fpm","_id":"ck2lahosm000x0gs6sg5inc1j"},{"name":"apache","_id":"ck2lahosq00110gs60tgyloii"},{"name":"nginx","_id":"ck2lahost00180gs6w43imy2b"},{"name":"docker","_id":"ck2lahosv001e0gs65xlpqp8e"},{"name":"mysql","_id":"ck2lahosz001l0gs6mo180573"},{"name":"vscode","_id":"ck2lahot1001s0gs6cpb8qc25"},{"name":"https","_id":"ck2lahott00430gs6e1s4f5gm"},{"name":"ssl","_id":"ck2lahotv004a0gs67exr052l"},{"name":"node","_id":"ck2lahoty004g0gs6xxyfe0el"},{"name":"python","_id":"ck2lahou1004n0gs6ris72seq"},{"name":"swoole","_id":"ck2lahou3004w0gs686osotps"},{"name":"wsl","_id":"ck2lahou500530gs6dpkrnetl"},{"name":"【数据结构，算法】","_id":"ck2lahou700590gs653o39g8j"},{"name":"数据结构","_id":"ck2lahoue00680gs6njllisyz"},{"name":"算法","_id":"ck2lahouf006a0gs64xbp5sq3"},{"name":"『数据结构，算法』","_id":"ck2lahouh006j0gs6r1gcal61"}]}}