{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/indigo-plus/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/arrow-right.png","path":"img/arrow-right.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/fong.jpg","path":"img/fong.jpg","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/prism-vim.js","path":"js/prism-vim.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/back_blue.png","path":"img/back_blue.png","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/bayern.ico","path":"img/bayern.ico","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-atom-dark.css","path":"css/prism/prism-atom-dark.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-coy.css","path":"css/prism/prism-coy.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-default.css","path":"css/prism/prism-default.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-okaidia.css","path":"css/prism/prism-okaidia.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-solarized-light.css","path":"css/prism/prism-solarized-light.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/prism/prism-tomorrow-night.css","path":"css/prism/prism-tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/js/Valine.min.js.map","path":"js/Valine.min.js.map","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"98df3e612872f3b923b9fa34fde364f369e4feb4","modified":1561961197240},{"_id":"source/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1561961197240},{"_id":"themes/indigo-plus/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1561961658901},{"_id":"themes/indigo-plus/README.md","hash":"f7f2c77722635cd660d5286db5dca94636366413","modified":1561961658901},{"_id":"themes/indigo-plus/_config.yml","hash":"a0ccd8250adb8ba8cb0a280da6108e0ef4676f50","modified":1561968350464},{"_id":"themes/indigo-plus/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1561961658914},{"_id":"source/_posts/AMDcpu安装ubuntu-deepin.md","hash":"8da0fc48b2451ffdbf7899a783a188d528d56f83","modified":1561967759357},{"_id":"source/_posts/ARTS第0周.md","hash":"f7ba1da53af9a95ef0d0da9422b721d159b04003","modified":1561961197241},{"_id":"source/_posts/ARTS第1周.md","hash":"a81bde0769948b04cdc1ae68941b186ab3ff0d7e","modified":1561961197241},{"_id":"source/_posts/Nginx配置https出现no ssl_certificate.md","hash":"875f5661930322170285b659e77845be77f09442","modified":1561973125225},{"_id":"source/_posts/ARTS第2周.md","hash":"f084b3eddd38d153bdbb48796b580bfb913e056a","modified":1561961197241},{"_id":"source/_posts/PHP运行模式.md","hash":"996b9f7e5ccbc231499f36623758e728873c8deb","modified":1561973199637},{"_id":"source/_posts/docker-mysql主从配置.md","hash":"14d28c37d3c2bb6ae8abaa2269def1d26d3e7fbc","modified":1561967876823},{"_id":"source/_posts/git入门.md","hash":"43b5239c9a9071073f61386067c03a6f72a6dd2d","modified":1561967856139},{"_id":"source/_posts/hello-world.md","hash":"ccd14028a6ed10acc960cad818ec43068a4ca3e9","modified":1561961197242},{"_id":"source/_posts/mysql索引最左原则问题.md","hash":"3392148507f47cdcd473b7876a28f524f8c547f0","modified":1561973154076},{"_id":"source/_posts/nginx负载均衡模式.md","hash":"97f1abcb01d0a31840343442bcd6194405cb3db3","modified":1561973134773},{"_id":"source/_posts/nginx配置文件.md","hash":"b04dd46a7b5bf9841ecce2fd271805e69a933951","modified":1561973130295},{"_id":"source/_posts/php7新特性.md","hash":"9071b68c76125830846c6d9377dff952718d11b2","modified":1561973171413},{"_id":"source/_posts/php写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","hash":"f882b0dca7f10342f342ab635c5607e4efde49fa","modified":1561973192944},{"_id":"source/_posts/python在类中实现swith功能.md","hash":"86b5617ae721536a3594b4801048ada8af80546d","modified":1561973207224},{"_id":"source/_posts/socket-io配置nginx负载均衡.md","hash":"7ac230cdcea3e56b7ea2e5636af39b34d27de974","modified":1561973236986},{"_id":"source/_posts/swoole异步task.md","hash":"fe4d80ea83c660aef77bdd28ff7b1186b596cbab","modified":1561973265862},{"_id":"source/_posts/vscode快捷键.md","hash":"41cb091a7df151a978acdf9cbe3cd7ea98589919","modified":1561961197244},{"_id":"source/_posts/wsl搭建php环境请求超时的问题解决方案.md","hash":"20512d08a453b90e639078cea9ccd2d1c7baa012","modified":1561973277022},{"_id":"source/_posts/《大话数据结构》读后总结（一）.md","hash":"b48469fd3d84cff0a9d6139e0eeee83f7cba0cbd","modified":1561972660558},{"_id":"source/_posts/《大话数据结构》读后总结（七）.md","hash":"b6cec0d9568a2efba0b1c059883a6dea70c4ed0e","modified":1561972664486},{"_id":"source/_posts/《大话数据结构》读后总结（三）.md","hash":"6804ded4c96454da6f6941c54bf8bc8a9eacea21","modified":1561972668743},{"_id":"source/_posts/《大话数据结构》读后总结（九）.md","hash":"fcfae18c05b6022d0404748574830639b806d959","modified":1561972671991},{"_id":"source/_posts/《大话数据结构》读后总结（二）.md","hash":"c5954fda32208703855aeecc7bd49fd5527d455d","modified":1561972676229},{"_id":"source/_posts/《大话数据结构》读后总结（五）.md","hash":"f0f6f0ff82883a91fcc6b626bc3e0f25885fd852","modified":1561972680287},{"_id":"source/_posts/《大话数据结构》读后总结（八）.md","hash":"30fef90dc12ff907c5eb0641b70e48061118fc4b","modified":1561972683790},{"_id":"source/_posts/《大话数据结构》读后总结（六）.md","hash":"7dde0e2899d6673a63a235f182bc38cb52085f3d","modified":1561972687142},{"_id":"source/_posts/《大话数据结构》读后总结（十一）.md","hash":"aa4ba21475df9f930f59d792bb8d2a15cb8b5c55","modified":1561972691053},{"_id":"source/_posts/《大话数据结构》读后总结（十二）.md","hash":"5219d9930f6419facefe73fdf64f9b7d38dc668a","modified":1561972694405},{"_id":"source/_posts/《大话数据结构》读后总结（十）.md","hash":"cfbc0a2e3e782021db7632371b80dfe4736a6f9d","modified":1561972652993},{"_id":"source/_posts/《大话数据结构》读后总结（四）.md","hash":"99d1a42b59be703a2cb0c7de5f8faa48784d1108","modified":1561972697536},{"_id":"source/_posts/无法安装golang-org安装包的问题.md","hash":"1b14ac1d4faefe78c36c672b7d5c963946d6a879","modified":1561973284495},{"_id":"source/tags/index.md","hash":"431c6bf762a3627ccb3357c532348ef32e1f3467","modified":1561961197248},{"_id":"source/categories/index.md","hash":"f35f6c675475950435c1f599493624999d6d3f56","modified":1561972777294},{"_id":"source/about/index.md","hash":"e082f20a77f5bc9044edadbdfeba67b1f0fca775","modified":1561973062685},{"_id":"themes/indigo-plus/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1561961658897},{"_id":"themes/indigo-plus/.git/config","hash":"9918c393256f829dc10ea8b01364ff73555ea824","modified":1561961658899},{"_id":"themes/indigo-plus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561961639524},{"_id":"themes/indigo-plus/.git/index","hash":"5c66321e8ac330ffa39d5cd174329202a8f2c234","modified":1561963643269},{"_id":"themes/indigo-plus/.git/packed-refs","hash":"3a9cb895bd6033be0afa275c265c135b60b9a962","modified":1561961658894},{"_id":"themes/indigo-plus/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1561961658902},{"_id":"themes/indigo-plus/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1561961658903},{"_id":"themes/indigo-plus/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1561961658911},{"_id":"themes/indigo-plus/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1561961658903},{"_id":"themes/indigo-plus/layout/book.ejs","hash":"8155ceb559d8e1dcf877eca386f4eb041c62ceb8","modified":1561961658912},{"_id":"themes/indigo-plus/layout/categories.ejs","hash":"77c8c5c4a97c9b6a83297e7632a515d432964b1e","modified":1561961658912},{"_id":"themes/indigo-plus/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1561961658912},{"_id":"themes/indigo-plus/layout/game.ejs","hash":"3d294e92cc12f425eb135c659502372d56a82e3f","modified":1561961658912},{"_id":"themes/indigo-plus/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1561961658913},{"_id":"themes/indigo-plus/layout/movie.ejs","hash":"530f94b8ebfdb8b279804ac7a38a8e63b2a23a46","modified":1561961658913},{"_id":"themes/indigo-plus/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1561961658913},{"_id":"themes/indigo-plus/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1561961658913},{"_id":"themes/indigo-plus/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1561961658913},{"_id":"themes/indigo-plus/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1561961658913},{"_id":"themes/indigo-plus/layout/tags.ejs","hash":"f37c84501ef57a489ba4c85ae4e89ae0a6eac77b","modified":1561961658914},{"_id":"themes/indigo-plus/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1561961658914},{"_id":"themes/indigo-plus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561961639524},{"_id":"themes/indigo-plus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561961639524},{"_id":"themes/indigo-plus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1561961639524},{"_id":"themes/indigo-plus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561961639525},{"_id":"themes/indigo-plus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561961639525},{"_id":"themes/indigo-plus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1561961639525},{"_id":"themes/indigo-plus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561961639525},{"_id":"themes/indigo-plus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1561961639525},{"_id":"themes/indigo-plus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561961639526},{"_id":"themes/indigo-plus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1561961639526},{"_id":"themes/indigo-plus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561961639526},{"_id":"themes/indigo-plus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561961639526},{"_id":"themes/indigo-plus/.git/logs/HEAD","hash":"9370d75b238f3e7769c25665519d2ae258b6e6fe","modified":1561961658898},{"_id":"themes/indigo-plus/layout/_partial/after-footer.ejs","hash":"6ada6d56ef2e885deaf88709c586a8a128bd7659","modified":1561961658903},{"_id":"themes/indigo-plus/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1561961658903},{"_id":"themes/indigo-plus/layout/_partial/footer.ejs","hash":"70b0b32f4591d1a08c7f434eeb1649049398815a","modified":1561961658903},{"_id":"themes/indigo-plus/layout/_partial/header.ejs","hash":"966409769ec64f62acc3c5ac049b770ef13fe32f","modified":1561961658904},{"_id":"themes/indigo-plus/layout/_partial/head.ejs","hash":"c5f0de91525704771b88d84dd42898ee85ebd36a","modified":1561961658904},{"_id":"themes/indigo-plus/layout/_partial/index-item.ejs","hash":"91bbe5dd87981a5dd7635f3e9791f05f4d62abcc","modified":1561961658904},{"_id":"themes/indigo-plus/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1561961658904},{"_id":"themes/indigo-plus/layout/_partial/menu.ejs","hash":"461a6346294a85191065e86659d33cec120b15d0","modified":1561961658905},{"_id":"themes/indigo-plus/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1561961658905},{"_id":"themes/indigo-plus/layout/_partial/post.ejs","hash":"1c166aff499b7525edd2c2ad280e87f36774165a","modified":1561961658908},{"_id":"themes/indigo-plus/layout/_partial/script.ejs","hash":"dafd5bc19f54a8a54481d5b81ebadedbd3d68b45","modified":1561961658911},{"_id":"themes/indigo-plus/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1561961658911},{"_id":"themes/indigo-plus/layout/_partial/tags-bar.ejs","hash":"aa3dfcfc18d757993738f5dbecf48f0f95c39104","modified":1561961658911},{"_id":"themes/indigo-plus/source/css/style.less","hash":"e90aec92915a7268f540a9ca45421f891b08d2a8","modified":1561961658943},{"_id":"themes/indigo-plus/source/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1561961658944},{"_id":"themes/indigo-plus/source/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1561961658944},{"_id":"themes/indigo-plus/source/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1561961197287},{"_id":"themes/indigo-plus/source/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1561961658945},{"_id":"themes/indigo-plus/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1561961658945},{"_id":"themes/indigo-plus/source/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1561961658946},{"_id":"themes/indigo-plus/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1561961658947},{"_id":"themes/indigo-plus/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1561961658946},{"_id":"themes/indigo-plus/source/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1561961658947},{"_id":"themes/indigo-plus/source/js/Valine.min.js","hash":"9c5b9f907108ce5ee6f3268d4932a846a2bd9110","modified":1561961658948},{"_id":"themes/indigo-plus/source/js/main.js","hash":"a537f7b76e163611d782119ef09c8383593f108c","modified":1561961658949},{"_id":"themes/indigo-plus/source/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1561961658950},{"_id":"themes/indigo-plus/source/js/main.min.js","hash":"8d640ab1b72af2ea63fd77366f2a34b2a0c6e13c","modified":1561961658950},{"_id":"themes/indigo-plus/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1561961658951},{"_id":"themes/indigo-plus/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1561961658951},{"_id":"themes/indigo-plus/source/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1561961658944},{"_id":"themes/indigo-plus/source/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1561961658945},{"_id":"themes/indigo-plus/source/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1561961658946},{"_id":"themes/indigo-plus/source/js/prism.js","hash":"86045ad1c86a994d5c56d16239da4e8c6b8078e6","modified":1561961658951},{"_id":"themes/indigo-plus/.git/refs/heads/card","hash":"94cfc53a7d56964a65886e43b9cb6c2fbb3791e1","modified":1561961658898},{"_id":"themes/indigo-plus/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1561961658905},{"_id":"themes/indigo-plus/layout/_partial/plugins/changyan.ejs","hash":"ac9cd12965af6c9cdb3622f90e688626febf72ad","modified":1561961658905},{"_id":"themes/indigo-plus/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1561961658905},{"_id":"themes/indigo-plus/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1561961658906},{"_id":"themes/indigo-plus/layout/_partial/plugins/gitalk.ejs","hash":"204e592f51b46f14e2a1ae5683ef6813271f2ca7","modified":1561961658906},{"_id":"themes/indigo-plus/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1561961658906},{"_id":"themes/indigo-plus/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1561961658906},{"_id":"themes/indigo-plus/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1561961658906},{"_id":"themes/indigo-plus/layout/_partial/plugins/mathjax.ejs","hash":"55565988a7a6c98046ffb2c56b7d4f977e7c3bfc","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/plugins/valine.ejs","hash":"d1980ae291169c81402927cdcdc42d1e7eb14c1e","modified":1561961658907},{"_id":"themes/indigo-plus/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1561961658908},{"_id":"themes/indigo-plus/layout/_partial/post/comment.ejs","hash":"a0d8ae64a1ada7f0ea576afa3981c70e81399802","modified":1561961658908},{"_id":"themes/indigo-plus/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1561961658908},{"_id":"themes/indigo-plus/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1561961658908},{"_id":"themes/indigo-plus/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1561961658909},{"_id":"themes/indigo-plus/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1561961658909},{"_id":"themes/indigo-plus/layout/_partial/post/pin.ejs","hash":"e11b2ee0819ba25223bbd935bec7fe732582dfa7","modified":1561961658909},{"_id":"themes/indigo-plus/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1561961658909},{"_id":"themes/indigo-plus/layout/_partial/post/reward.ejs","hash":"b6aadc4819bd692b9091097b441742828a54dd0f","modified":1561961658909},{"_id":"themes/indigo-plus/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1561961658910},{"_id":"themes/indigo-plus/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1561961658910},{"_id":"themes/indigo-plus/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1561961658910},{"_id":"themes/indigo-plus/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1561961658910},{"_id":"themes/indigo-plus/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1561961658910},{"_id":"themes/indigo-plus/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1561961658911},{"_id":"themes/indigo-plus/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1561961658915},{"_id":"themes/indigo-plus/source/css/_partial/article.less","hash":"05fd401c4adf19632fdabb5da4cbdfd0eb672b64","modified":1561961658915},{"_id":"themes/indigo-plus/source/css/_partial/gotop.less","hash":"d1a9e26e431b8fe20d5ce73b7add3e00d8db3a8a","modified":1561961658916},{"_id":"themes/indigo-plus/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1561961658916},{"_id":"themes/indigo-plus/source/css/_partial/highlight.less","hash":"ba33616ac592b19255f1f4eb5f22a604e51cd302","modified":1561961658916},{"_id":"themes/indigo-plus/source/css/_partial/layout.less","hash":"0dd8bb9f029e260f599859e902e59595170ebe2c","modified":1561961658916},{"_id":"themes/indigo-plus/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1561961658917},{"_id":"themes/indigo-plus/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1561961658917},{"_id":"themes/indigo-plus/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1561961658917},{"_id":"themes/indigo-plus/source/css/_partial/reward.less","hash":"c9857599fcd8f2604e78e316bd8ffeac3ed48172","modified":1561961658918},{"_id":"themes/indigo-plus/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1561961658917},{"_id":"themes/indigo-plus/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1561961658918},{"_id":"themes/indigo-plus/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1561961658918},{"_id":"themes/indigo-plus/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1561961658918},{"_id":"themes/indigo-plus/source/css/_partial/tags.less","hash":"2d04a1f5076863950af57e328ffd4147b23e9b70","modified":1561961658918},{"_id":"themes/indigo-plus/source/css/_partial/variable.less","hash":"85c2b3191ad552ae018123b10ed96aabcda9baf8","modified":1561961658919},{"_id":"themes/indigo-plus/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1561961658919},{"_id":"themes/indigo-plus/source/css/prism/prism-atom-dark.css","hash":"eb3028ab798e86e0fc74df0f08861718a892ad1d","modified":1561961658942},{"_id":"themes/indigo-plus/source/css/prism/prism-coy.css","hash":"0abf3c5b72b3a99839cb5ce1a6979d387c4db53e","modified":1561961658942},{"_id":"themes/indigo-plus/source/css/prism/prism-default.css","hash":"8d928a084679be8fd43437394b2b64ed16788e5a","modified":1561961658942},{"_id":"themes/indigo-plus/source/css/prism/prism-okaidia.css","hash":"e7ed4638f2d9b1066a449157736ae6b87b4e9de3","modified":1561961658942},{"_id":"themes/indigo-plus/source/css/prism/prism-solarized-light.css","hash":"0dcef4ec85a626bfae208bec651891cb7d3479b0","modified":1561961658943},{"_id":"themes/indigo-plus/source/css/prism/prism-tomorrow-night.css","hash":"69a8fcbe45f04ae46193c7b6b886a96d48ca1aec","modified":1561961658943},{"_id":"themes/indigo-plus/source/css/_plugin/valine.less","hash":"23b633c252b87cd65c17cd901269b0c332eac77a","modified":1561961658919},{"_id":"themes/indigo-plus/.git/objects/pack/pack-1a8124669d256407e9c51002e635b80022cd1c79.idx","hash":"e24e834520c09163f5540dc10f4eaa27b0d8f848","modified":1561961658881},{"_id":"themes/indigo-plus/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1561961658916},{"_id":"themes/indigo-plus/.git/logs/refs/heads/card","hash":"9370d75b238f3e7769c25665519d2ae258b6e6fe","modified":1561961658898},{"_id":"themes/indigo-plus/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1561961658896},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1561961658930},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1561961658932},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1561961658932},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1561961658934},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1561961658935},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1561961658937},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1561961658937},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1561961658938},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1561961658939},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1561961658939},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1561961658941},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1561961658941},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561961658929},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561961658929},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1561961658931},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1561961658934},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1561961658936},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1561961658938},{"_id":"themes/indigo-plus/source/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1561961658949},{"_id":"themes/indigo-plus/.git/logs/refs/remotes/origin/HEAD","hash":"9370d75b238f3e7769c25665519d2ae258b6e6fe","modified":1561961658896},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561961658921},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561961658923},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561961658928},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1561961658931},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1561961658933},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1561961658936},{"_id":"themes/indigo-plus/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1561961658940},{"_id":"themes/indigo-plus/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1561961658926},{"_id":"themes/indigo-plus/.git/objects/pack/pack-1a8124669d256407e9c51002e635b80022cd1c79.pack","hash":"661073d36956448a7c2b830eab7dc5b4bd8dd1ff","modified":1561961658883},{"_id":"public/baidusitemap.xml","hash":"29d715f7c64983014677cacf1a0dd00efdaa5d48","modified":1561973291690},{"_id":"public/sitemap.xml","hash":"8ee3a85de9b2180bff2cd6764ab4dcf8110b8d88","modified":1561973292136},{"_id":"public/content.json","hash":"104d610879101245cbf3440ae0bb8894f4e9b3de","modified":1561973291690},{"_id":"public/404.html","hash":"342e47b1b3625e0011721a08aec23b92765e8546","modified":1561972826103},{"_id":"public/about/index.html","hash":"c734ec2068b4e174dcd07ac42524e2ceb158c63a","modified":1561973292189},{"_id":"public/2019/04/17/ARTS第2周/index.html","hash":"4fe41ce093f09616363350cb3024d3b07bfecea5","modified":1561972826103},{"_id":"public/archives/index.html","hash":"f19b2e867d63bad6906e507da0588a9235e5070a","modified":1561973292225},{"_id":"public/archives/page/4/index.html","hash":"1e483b26856897351a18541af822c3d759b5a3fa","modified":1561973292189},{"_id":"public/archives/2019/index.html","hash":"4dba612f7ce9da6cd5effc9e5d1d4d42dec5ab10","modified":1561973292226},{"_id":"public/archives/2019/page/4/index.html","hash":"02dc105c1095078f68ba4c7d9abf6812e9671e3a","modified":1561973292222},{"_id":"public/archives/2019/03/page/2/index.html","hash":"0d02058b752ac8313e23b4c729a4ae65ab6a4635","modified":1561973292222},{"_id":"public/archives/2019/04/page/2/index.html","hash":"a742b148b7e92ff15491c19387292fe6ff1add79","modified":1561973292223},{"_id":"public/archives/2019/05/index.html","hash":"4c5e68efa3d0f5cf884dcdf0de52cda93911bdfe","modified":1561973292223},{"_id":"public/archives/2019/06/index.html","hash":"db395fd51457db2e3cd73bc13e97418fe45e44b1","modified":1561973292223},{"_id":"public/archives/2019/07/index.html","hash":"27a70fb57a01149a8144927bafdafc2f19a864a3","modified":1561972826104},{"_id":"public/categories/大话数据结构/page/2/index.html","hash":"a09d1b064898577c831945d2b337aed3cb7eb756","modified":1561973292223},{"_id":"public/page/4/index.html","hash":"fb60db65160e06b8d7e26296941bb030e3790c0b","modified":1561973292223},{"_id":"public/tags/tool/index.html","hash":"8bcf0b860e1ff9a7adc3ff4e5a6a32193152c250","modified":1561973292223},{"_id":"public/tags/https/index.html","hash":"8bed2ef6c06f70c0f02c2c41f6eb81b416f721e1","modified":1561973292223},{"_id":"public/tags/ssl/index.html","hash":"eb9da15e0410e828f80bdcc3a0c06e48b1753679","modified":1561973292223},{"_id":"public/tags/php/index.html","hash":"0cede575453d50dd6d50f72ba1d05c7f0315e167","modified":1561973292223},{"_id":"public/tags/php-fpm/index.html","hash":"f82d2802a4a763f2822c9f624908d93bc01f6531","modified":1561973292223},{"_id":"public/tags/apache/index.html","hash":"34f43407a299e4cc1b58eb06851428bcc5c4e6d1","modified":1561973292223},{"_id":"public/tags/docker/index.html","hash":"4444a94ef99d7d67701eee1ba9d984d767962215","modified":1561973292223},{"_id":"public/tags/mysql/index.html","hash":"96174e94893f89ef2e7feec199e30e0ca9ab0b28","modified":1561973292223},{"_id":"public/tags/python/index.html","hash":"3903e534ba24de0a08bc269cb2a65d2970dde705","modified":1561973292223},{"_id":"public/tags/swoole/index.html","hash":"40dab2d4d15a338ba7953db41da400be577596ed","modified":1561973292223},{"_id":"public/tags/vscode/index.html","hash":"a655c4f889a351c65b732f6a3e4a47ce5b5d6f02","modified":1561973292223},{"_id":"public/tags/wsl/index.html","hash":"694fcb0f8517635638346174dcae1df3c5a4a882","modified":1561973292223},{"_id":"public/tags/数据结构/page/2/index.html","hash":"a4e53f6b4e8bde669dcf062b5f57adf4e4759c0e","modified":1561973292224},{"_id":"public/tags/算法/page/2/index.html","hash":"86d1b390d89dcd91e81e5a1327af510439dc42d2","modified":1561973292224},{"_id":"public/tags/golang/index.html","hash":"f57d2c0e91afd5001b14e19b126a1636ad5f6275","modified":1561973292224},{"_id":"public/tags/index.html","hash":"e67b259f558dda38d7af0eeb42fb8d958ec92c48","modified":1561973292224},{"_id":"public/categories/index.html","hash":"b8e97b2c176cde883ceb863318db90d21aa3b5f1","modified":1561973292224},{"_id":"public/2019/07/01/hello-world/index.html","hash":"acdbcf71e04b9d6ba3321392358581dabdc5da0e","modified":1561972826105},{"_id":"public/2019/06/08/php写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied/index.html","hash":"37ef31535ce0c7fbfcda9fdab3b00dfa001f94e7","modified":1561973292224},{"_id":"public/2019/05/07/socket-io配置nginx负载均衡/index.html","hash":"098de310816933dea11aa437b4a0ec90d7d31981","modified":1561973292224},{"_id":"public/2019/05/07/mysql索引最左原则问题/index.html","hash":"57109996efeb65b5d41b8af943d645490c5a2476","modified":1561973292224},{"_id":"public/2019/04/20/git入门/index.html","hash":"b50315d13239acfbf663691ff0f7ddf0a55ec64d","modified":1561972826105},{"_id":"public/2019/04/20/AMDcpu安装ubuntu-deepin/index.html","hash":"febba7412dd6fa309b2812f76dee9251913aadda","modified":1561972826105},{"_id":"public/2019/04/17/ARTS第1周/index.html","hash":"058917dad83cc8ee90bb5714c6e7b59295d8741a","modified":1561972826105},{"_id":"public/2019/04/17/ARTS第0周/index.html","hash":"2f859900a91391cc1d4118c41d1f487efe0d3a54","modified":1561972826105},{"_id":"public/2019/04/08/《大话数据结构》读后总结（十二）/index.html","hash":"6c688425636196dd8fe62077e74e6531c0460e02","modified":1561972826105},{"_id":"public/2019/04/08/《大话数据结构》读后总结（十一）/index.html","hash":"031bc490a889e5398ba4b9a74d9802e34bd60a70","modified":1561972826105},{"_id":"public/2019/04/08/《大话数据结构》读后总结（十）/index.html","hash":"32daac842ef647ab390b2e8cd97d4b4058dcfb0c","modified":1561972826105},{"_id":"public/2019/04/08/《大话数据结构》读后总结（九）/index.html","hash":"6123cc2b6619b1f1037ba1c87882b9bb7093a206","modified":1561972826105},{"_id":"public/2019/04/08/《大话数据结构》读后总结（八）/index.html","hash":"d4047b0d27148eef8efff753f2e807219a1ca796","modified":1561972826105},{"_id":"public/2019/04/03/vscode快捷键/index.html","hash":"4b1bb6bac7c0b5772448f3df56911ed9b7c28eca","modified":1561972826105},{"_id":"public/2019/04/03/nginx配置文件/index.html","hash":"e6e2a57ff8474c7b70a9899719f5edde24db6454","modified":1561973292224},{"_id":"public/2019/04/03/php7新特性/index.html","hash":"9fd3326f4f3b741a080b27b0bbe6780c9194dc4a","modified":1561973292224},{"_id":"public/2019/04/01/《大话数据结构》读后总结（七）/index.html","hash":"5fc9b929e66d34b4d2c30897c8fc2516a392a806","modified":1561972826105},{"_id":"public/2019/04/01/《大话数据结构》读后总结（六）/index.html","hash":"d115417676f8205d54ec5e1576366325e8b0261c","modified":1561972826105},{"_id":"public/2019/04/01/《大话数据结构》读后总结（五）/index.html","hash":"3ddf72c2bdcbb3cf2a49f3a27a72e42d1813b796","modified":1561972826105},{"_id":"public/2019/03/29/《大话数据结构》读后总结（四）/index.html","hash":"855a8a8f18bcc09bfbb7ad18531516620d9c381d","modified":1561972826105},{"_id":"public/2019/03/29/《大话数据结构》读后总结（三）/index.html","hash":"d8add9cb86b82619736a1a057c64ba7074cbb0c7","modified":1561972826105},{"_id":"public/2019/03/29/《大话数据结构》读后总结（二）/index.html","hash":"007727d9056b0c60b26a74dceaca6e77bca87eb2","modified":1561972826105},{"_id":"public/2019/03/29/《大话数据结构》读后总结（一）/index.html","hash":"b2101819ddfec78322b45bdb228177ecd6bd6d33","modified":1561972826105},{"_id":"public/2019/03/29/PHP运行模式/index.html","hash":"ced4cda280ef81dccb8faaebcb18d6e7dda907bd","modified":1561973292224},{"_id":"public/2019/03/29/python在类中实现swith功能/index.html","hash":"4273164c90f1c1a05b7e98f07bfbb83093d010e4","modified":1561973292224},{"_id":"public/2019/03/29/nginx负载均衡模式/index.html","hash":"387f3945b142b18319dae56870b49d61554e1a52","modified":1561973292224},{"_id":"public/2019/03/29/swoole异步task/index.html","hash":"5d5ea8377bb16972143f27d06f5ee4d9c06feab0","modified":1561973292224},{"_id":"public/2019/03/28/无法安装golang-org安装包的问题/index.html","hash":"53a1cbc7640c8f8ffce7c5fa408c50cfddadad9b","modified":1561973292224},{"_id":"public/2019/03/28/Nginx配置https出现no ssl_certificate/index.html","hash":"1994b2caca7667b8fff15f5c2b7be894650d814d","modified":1561973292224},{"_id":"public/2019/03/28/wsl搭建php环境请求超时的问题解决方案/index.html","hash":"429b51a46afa5e6cfd69f9cdd6cadc5a161b6488","modified":1561973292224},{"_id":"public/2019/03/28/docker-mysql主从配置/index.html","hash":"57f8aa6feb88520ae822074a1def139b06a3ecef","modified":1561972826106},{"_id":"public/archives/page/2/index.html","hash":"c5d363ed6704f28c4e1e321fd97ccc843a78b54a","modified":1561973292225},{"_id":"public/archives/page/3/index.html","hash":"9358554e20c310580721bd34c0679e815f031cf4","modified":1561973292225},{"_id":"public/archives/2019/page/2/index.html","hash":"f9e5e262a92a9429ccbdb73886ee4de25c750485","modified":1561973292226},{"_id":"public/archives/2019/page/3/index.html","hash":"6444cff40f0a06930d2e3da2a520d5339c8b9adf","modified":1561973292226},{"_id":"public/archives/2019/03/index.html","hash":"feed7e4dcdfd230d21085367b7aaeeb69e09e9b2","modified":1561973292226},{"_id":"public/archives/2019/04/index.html","hash":"ae4dac07718fdae1e7c31edbd7eb3bafafbd67bb","modified":1561972826106},{"_id":"public/categories/大话数据结构/index.html","hash":"c8303c90b127daa47243e5e4165544d6dc910819","modified":1561973292226},{"_id":"public/index.html","hash":"2b1fc2469bbcf25cfe57f4a500acf634a01f2f21","modified":1561973292226},{"_id":"public/page/2/index.html","hash":"a0d4a3f7b6e36b2635fdafe3ed9957a4d55d83d8","modified":1561973292226},{"_id":"public/page/3/index.html","hash":"b9ca14a118ad3c14656e9e4da341ded873743350","modified":1561973292226},{"_id":"public/tags/nginx/index.html","hash":"b07bbe428521a74a46914e0fb7563ee92dfcf0b2","modified":1561973292226},{"_id":"public/tags/数据结构/index.html","hash":"b4720285c7894a91d9eeb6a25330819e4cb64dd5","modified":1561973292226},{"_id":"public/tags/算法/index.html","hash":"5fd18bf9244f4fbe48d221362193b5431008aadb","modified":1561973292226},{"_id":"public/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1561972826115},{"_id":"public/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1561972826115},{"_id":"public/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1561972826115},{"_id":"public/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1561972826115},{"_id":"public/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1561972826115},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1561972826115},{"_id":"public/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1561972826115},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1561972826115},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1561972826115},{"_id":"public/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1561972826115},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1561972826116},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1561972826116},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1561972826116},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1561972826116},{"_id":"public/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1561972826133},{"_id":"public/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1561972826133},{"_id":"public/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1561972826133},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561972826133},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561972826134},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1561972826134},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1561972826134},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1561972826134},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1561972826134},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1561972826134},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1561972826142},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1561972826142},{"_id":"public/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1561972826150},{"_id":"public/js/main.min.js","hash":"ad83e2fd040c166ca99c3a2ea855c895056697b0","modified":1561972826150},{"_id":"public/css/prism/prism-atom-dark.css","hash":"61b9747215709f1e10fe67138afc400dc93c5da2","modified":1561972826150},{"_id":"public/css/prism/prism-coy.css","hash":"a431ebe8a3f87ff88004d100938faa411a84aa96","modified":1561972826150},{"_id":"public/css/prism/prism-default.css","hash":"533461a46dba7ea010965f57e78ae05b3ab77a6e","modified":1561972826150},{"_id":"public/css/prism/prism-okaidia.css","hash":"ad237637eedf7360505553b0cd09721c40c27cca","modified":1561972826150},{"_id":"public/css/prism/prism-tomorrow-night.css","hash":"8a5880145ed5c00d10469b22f8f05fe311dbd30e","modified":1561972826150},{"_id":"public/css/prism/prism-solarized-light.css","hash":"f1f9693fc8f6056f6866510d58e90d58e6c99fe9","modified":1561972826150},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561972826150},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561972826151},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561972826151},{"_id":"public/js/main.js","hash":"6fedca400451a2389740251b5c5b61847ca19baf","modified":1561972826154},{"_id":"public/js/Valine.min.js","hash":"4429596ffe0aa32c9a1c8b17621aa20c8025d4b3","modified":1561972826212},{"_id":"public/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1561972826212},{"_id":"public/js/prism.js","hash":"53fb3f2f4dccf00033a9b3fe2c81269e848e23bb","modified":1561972826217},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1561972826217},{"_id":"public/css/style.css","hash":"e93840114982cef5d8f48eb1103cc70e2363b9d8","modified":1561972826391},{"_id":"public/categories/nginx/index.html","hash":"b7bb3fe8f9c4d6a5186c8753e45197c60b4d1448","modified":1561973292228},{"_id":"public/categories/mysql/index.html","hash":"d31eef26727ceb802a945c6331f9145fd349de52","modified":1561973292228},{"_id":"public/categories/python/index.html","hash":"aa48ef6b8529cbdfa608ad13dce37cf45d029b97","modified":1561973292228},{"_id":"public/categories/node/index.html","hash":"6371e4612a8eda670143d432df82a5cc6a763786","modified":1561973292228},{"_id":"public/categories/golang/index.html","hash":"e714916d2883d8755c20a45cbaf82fbaa2ec074e","modified":1561973292228},{"_id":"public/tags/node/index.html","hash":"5ba9c95c3348856ce10805538dc04882da12ca3b","modified":1561973292228},{"_id":"public/categories/php/index.html","hash":"d92ce55038beecffda67bcc1cbc78c967ba7147b","modified":1561973292228}],"Category":[{"name":"大话数据结构","_id":"cjxk6agtn00145ss6ig0t3p00"},{"name":"nginx","_id":"cjxk6gwvf00010cs6rwsueowo"},{"name":"mysql","_id":"cjxk6hj4u00060cs6qszoltcz"},{"name":"php","_id":"cjxk6hwig00090cs60h211de6"},{"name":"python","_id":"cjxk6io56000f0cs6zg7fhyvj"},{"name":"node","_id":"cjxk6j4ir000i0cs6l26argcr"},{"name":"golang","_id":"cjxk6kbrk000o0cs6do9t38d7"}],"Data":[],"Page":[{"_content":"\n\n<h1>404</h1>\n\n\n","source":"404.html","raw":"\n\n<h1>404</h1>\n\n\n","date":"2019-07-01T06:06:37.240Z","updated":"2019-07-01T06:06:37.240Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjxk6agrr00005ss66pj6k1dd","content":"\n\n<h1>404</h1>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n<h1>404</h1>\n\n\n"},{"title":"标签","date":"2019-03-28T09:25:32.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-28 17:25:32\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-07-01T06:06:37.248Z","path":"tags/index.html","_id":"cjxk6agsy00025ss6fd3quii8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-02T09:09:23.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-02 17:09:23\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2019-07-01T09:19:37.294Z","path":"categories/index.html","_id":"cjxk6agt000045ss6ftyjtoik","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2019-03-28T04:15:38.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2019-03-28 12:15:38\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-07-01T09:24:22.685Z","path":"about/index.html","_id":"cjxk6agt100065ss6bg90zvh2","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ARTS第1周","date":"2019-04-17T02:08:33.000Z","_content":"### Algorithm\n\n[1. Two Sum](https://leetcode.com/problems/two-sum/ \"twoSum\").\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice. \n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n### Review\n### Tip\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n### Share","source":"_posts/ARTS第1周.md","raw":"---\ntitle: ARTS第1周\ndate: 2019-04-17 10:08:33\ntags:\n---\n### Algorithm\n\n[1. Two Sum](https://leetcode.com/problems/two-sum/ \"twoSum\").\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice. \n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n### Review\n### Tip\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n### Share","slug":"ARTS第1周","published":1,"updated":"2019-07-01T06:06:37.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agsv00015ss6y4altkem","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode.com/problems/two-sum/\" title=\"twoSum\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a>.</p>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice. </p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode.com/problems/two-sum/\" title=\"twoSum\" target=\"_blank\" rel=\"noopener\">1. Two Sum</a>.</p>\n<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice. </p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3>"},{"title":"AMDcpu安装ubuntu/deepin","date":"2019-04-20T01:45:35.000Z","_content":"### 1、问题\n电脑是thinkpad e485，cpu 锐龙2500u，安装ubuntu系统黑屏\n### 2、安装\n开机狂按F1，进BIOS，记得在security的选项里找到secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择u盘启动，需要按E编辑一下（目前E485（包括A485）的BIOS中ivrs还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在linux行的末尾加上这三个参数：\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x就可以直接启动了\n### 3、开机启动\n按E编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub文件\n在GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得update-grub来更新下grub的菜单以生效","source":"_posts/AMDcpu安装ubuntu-deepin.md","raw":"---\ntitle: AMDcpu安装ubuntu/deepin\ndate: 2019-04-20 09:45:35\ntags: [tool]\n---\n### 1、问题\n电脑是thinkpad e485，cpu 锐龙2500u，安装ubuntu系统黑屏\n### 2、安装\n开机狂按F1，进BIOS，记得在security的选项里找到secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择u盘启动，需要按E编辑一下（目前E485（包括A485）的BIOS中ivrs还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在linux行的末尾加上这三个参数：\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x就可以直接启动了\n### 3、开机启动\n按E编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub文件\n在GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得update-grub来更新下grub的菜单以生效","slug":"AMDcpu安装ubuntu-deepin","published":1,"updated":"2019-07-01T07:55:59.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agsz00035ss6oc2jx0l3","content":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是thinkpad e485，cpu 锐龙2500u，安装ubuntu系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按F1，进BIOS，记得在security的选项里找到secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择u盘启动，需要按E编辑一下（目前E485（包括A485）的BIOS中ivrs还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在linux行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按E编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub文件<br>在GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得update-grub来更新下grub的菜单以生效</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是thinkpad e485，cpu 锐龙2500u，安装ubuntu系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按F1，进BIOS，记得在security的选项里找到secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择u盘启动，需要按E编辑一下（目前E485（包括A485）的BIOS中ivrs还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在linux行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按E编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub文件<br>在GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得update-grub来更新下grub的菜单以生效</p>\n"},{"title":"ARTS第0周","date":"2019-04-17T02:08:26.000Z","_content":"\n### Algorithm\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n### Review\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n### Tip\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n### Share\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n","source":"_posts/ARTS第0周.md","raw":"---\ntitle: ARTS第0周\ndate: 2019-04-17 10:08:26\ntags:\n---\n\n### Algorithm\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n### Review\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n### Tip\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n### Share\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n","slug":"ARTS第0周","published":1,"updated":"2019-07-01T06:06:37.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agt100055ss6avqoxo4d","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从Easy开始，然后再Medium，最后才Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n"},{"title":"Nginx配置https出现no\"ssl_certificate\" is defined","date":"2019-03-28T08:43:50.000Z","_content":"### 一、问题\n今天在配置nginx的https发现报错：\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。\n### 二、解决方案\nnginx的配置文件中nginx.conf中加入\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/Nginx配置https出现no ssl_certificate.md","raw":"---\ntitle: Nginx配置https出现no\"ssl_certificate\" is defined\ndate: 2019-03-28 16:43:50\ntags: [nginx, https, ssl]\ncategories: \"nginx\"\n---\n### 一、问题\n今天在配置nginx的https发现报错：\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。\n### 二、解决方案\nnginx的配置文件中nginx.conf中加入\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"Nginx配置https出现no ssl_certificate","published":1,"updated":"2019-07-01T09:25:25.225Z","_id":"cjxk6agt400085ss6bfu479ni","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置nginx的https发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx的配置文件中nginx.conf中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置nginx的https发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是ssl_certificate没有配置，可是ssl_certificate和ssl_certificate_key都已经配置，网上搜索ssl_certificate必须在http段中先定义， 在server段才配置ssl_certificate已经来不及了， 检查我的nginx配置，ssl_certificate确实只在server段定义，而在http段未定义，加到http段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx的配置文件中nginx.conf中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS第2周","date":"2019-04-17T02:25:24.000Z","_content":"### Algorithm\n\n[7. Reverse Integer](https://leetcode.com/problems/reverse-integer/).\n\nGiven a 32-bit signed integer, reverse digits of an integer.\n```\n\n```\n### Review\n### Tip\n### Share","source":"_posts/ARTS第2周.md","raw":"---\ntitle: ARTS第2周\ndate: 2019-04-17 10:25:24\ntags:\n---\n### Algorithm\n\n[7. Reverse Integer](https://leetcode.com/problems/reverse-integer/).\n\nGiven a 32-bit signed integer, reverse digits of an integer.\n```\n\n```\n### Review\n### Tip\n### Share","slug":"ARTS第2周","published":1,"updated":"2019-07-01T06:06:37.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agt500095ss6ze57vyex","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. Reverse Integer</a>.</p>\n<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode.com/problems/reverse-integer/\" target=\"_blank\" rel=\"noopener\">7. Reverse Integer</a>.</p>\n<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3>"},{"title":"PHP运行模式","date":"2019-03-29T06:52:24.000Z","_content":"### php分为五大运行模式\n- cgi(通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi升级版本)\n- cli(命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)\n- apache2handler(将php作为apache的模块)\n- 其他(continuity,embed,litespeed,milter等)\n\n本地查看运行模式的方法\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI模式\n- Command Line Interface的简称，支持windows和Linux平台\n- 直接在命令行运行，不需要http server,例如php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用PHP-CLI和GTK包\n\n### CGI模式\n- Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台\n- 执行过程\n    - http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行\n    - 生成一个php-cgi进程，并执行php程序\n    - 执行结果返回给http服务器\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)\n    - 逐渐少见\n\n### FastCGI模式\n- 快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web服务器启动时载入Fast CGI进程管理器(php-fpm)\n    - FastCGI进程管理器会启动多个CGI进程等待web服务器的连接\n    - 当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi\n    - FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n- 模块模式指把PHP作为web服务器的一个模块运行\n- IIS的ISAPI和Apache的apache2handler\n\napache2handler\n- apache监听一个用户请求index.php\n- apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP\n- 在mod_php5.so注册一个php的钩子php_ap2_register_hook\n- php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。\n- php执行完成后数据通过.so或dll返回给apache\n- apache将数据返回到客户端\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/PHP运行模式.md","raw":"---\ntitle: PHP运行模式\ndate: 2019-03-29 14:52:24\ntags: [php,php-fpm,apache,nginx]\ncategories: \"php\"\n---\n### php分为五大运行模式\n- cgi(通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi升级版本)\n- cli(命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)\n- apache2handler(将php作为apache的模块)\n- 其他(continuity,embed,litespeed,milter等)\n\n本地查看运行模式的方法\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI模式\n- Command Line Interface的简称，支持windows和Linux平台\n- 直接在命令行运行，不需要http server,例如php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用PHP-CLI和GTK包\n\n### CGI模式\n- Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台\n- 执行过程\n    - http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行\n    - 生成一个php-cgi进程，并执行php程序\n    - 执行结果返回给http服务器\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)\n    - 逐渐少见\n\n### FastCGI模式\n- 快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web服务器启动时载入Fast CGI进程管理器(php-fpm)\n    - FastCGI进程管理器会启动多个CGI进程等待web服务器的连接\n    - 当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi\n    - FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web和server是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n- 模块模式指把PHP作为web服务器的一个模块运行\n- IIS的ISAPI和Apache的apache2handler\n\napache2handler\n- apache监听一个用户请求index.php\n- apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP\n- 在mod_php5.so注册一个php的钩子php_ap2_register_hook\n- php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。\n- php执行完成后数据通过.so或dll返回给apache\n- apache将数据返回到客户端\n- 应用场景\n    - 提供http服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"PHP运行模式","published":1,"updated":"2019-07-01T09:26:39.637Z","_id":"cjxk6agt6000a5ss6bcp8vlgw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"php分为五大运行模式\"><a href=\"#php分为五大运行模式\" class=\"headerlink\" title=\"php分为五大运行模式\"></a>php分为五大运行模式</h3><ul>\n<li>cgi(通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi升级版本)</li>\n<li>cli(命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)</li>\n<li>apache2handler(将php作为apache的模块)</li>\n<li>其他(continuity,embed,litespeed,milter等)</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI模式\"><a href=\"#CLI模式\" class=\"headerlink\" title=\"CLI模式\"></a>CLI模式</h3><ul>\n<li>Command Line Interface的简称，支持windows和Linux平台</li>\n<li>直接在命令行运行，不需要http server,例如php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用PHP-CLI和GTK包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行</li>\n<li>生成一个php-cgi进程，并执行php程序</li>\n<li>执行结果返回给http服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI模式\"><a href=\"#FastCGI模式\" class=\"headerlink\" title=\"FastCGI模式\"></a>FastCGI模式</h3><ul>\n<li>快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web服务器启动时载入Fast CGI进程管理器(php-fpm)</li>\n<li>FastCGI进程管理器会启动多个CGI进程等待web服务器的连接</li>\n<li>当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi</li>\n<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把PHP作为web服务器的一个模块运行</li>\n<li>IIS的ISAPI和Apache的apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache监听一个用户请求index.php</li>\n<li>apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP</li>\n<li>在mod_php5.so注册一个php的钩子php_ap2_register_hook</li>\n<li>php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。</li>\n<li>php执行完成后数据通过.so或dll返回给apache</li>\n<li>apache将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"php分为五大运行模式\"><a href=\"#php分为五大运行模式\" class=\"headerlink\" title=\"php分为五大运行模式\"></a>php分为五大运行模式</h3><ul>\n<li>cgi(通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi升级版本)</li>\n<li>cli(命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface,是微软提供的一套面向Internet服务的API接口)</li>\n<li>apache2handler(将php作为apache的模块)</li>\n<li>其他(continuity,embed,litespeed,milter等)</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI模式\"><a href=\"#CLI模式\" class=\"headerlink\" title=\"CLI模式\"></a>CLI模式</h3><ul>\n<li>Command Line Interface的简称，支持windows和Linux平台</li>\n<li>直接在命令行运行，不需要http server,例如php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用PHP-CLI和GTK包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI模式\"><a href=\"#CGI模式\" class=\"headerlink\" title=\"CGI模式\"></a>CGI模式</h3><ul>\n<li>Common Gateway Interface的简称，连接网页和web服务器执行程序，把http服务器接受指令传给执行程序，把执行程序的结果返回给http服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http服务器接收到用户请求，如index.php，会通过它配置的cgi服务执行</li>\n<li>生成一个php-cgi进程，并执行php程序</li>\n<li>执行结果返回给http服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求fork一个进程，消耗资源比较多(fork-and-execute模式)</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI模式\"><a href=\"#FastCGI模式\" class=\"headerlink\" title=\"FastCGI模式\"></a>FastCGI模式</h3><ul>\n<li>快速通用网关接口(Fast Common Gateway Interface)是CGI的增强版本，是一种让交互程序和web服务器通信的协议，致力于减少web服务器和CGI程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web服务器启动时载入Fast CGI进程管理器(php-fpm)</li>\n<li>FastCGI进程管理器会启动多个CGI进程等待web服务器的连接</li>\n<li>当客户端请求到达web服务器时，FastCGI进程管理器选择并连接到一个CGI解释器。web服务器把环境变量和标准输入发送到FastCGI子进程php-cgi</li>\n<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回web服务器。当FastCGI子进程关闭连接时，请求报告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器的下一个连接。在CGI模式中，php-cgi在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web和server是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把PHP作为web服务器的一个模块运行</li>\n<li>IIS的ISAPI和Apache的apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache监听一个用户请求index.php</li>\n<li>apache根据conf文件配置的LoadModule php_module modules/mod_php5.so(windows下面是php5apache2_2.dll)调用PHP</li>\n<li>在mod_php5.so注册一个php的钩子php_ap2_register_hook</li>\n<li>php_ap2_register_hook钩子函数中包括4个挂钩以及对应的函数ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中pre_config，post_config，child_init是启动挂钩，在服务器启动时调用。handler时请求挂钩，在服务器处理请求时调用。其中post_config挂钩中启动php。</li>\n<li>php执行完成后数据通过.so或dll返回给apache</li>\n<li>apache将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供http服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"git入门","date":"2019-04-20T02:25:48.000Z","_content":"### 安装\n- Windows\n  \n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n```bash\nyum install git / apt-get install git\n```\n安装后执行，正常显示则安装正常\n```bash\ngit --version\n```\n### 使用\n#### 生成ssh\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\" \n```\n\"xxx@xxxxx.com\" 是git的账号,完成三次回车，即可生成 ssh key。\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n把ssh key绑定到git平台,绑定后输入命令验证\n```bash\nssh -T git@github.com\n```\n#### 关联git仓库\n- 在工作目录中初始化新仓库\n  ```bash\n  git init\n  ```\n  绑定远程仓库\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n  \n\n- 从现有仓库克隆\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```","source":"_posts/git入门.md","raw":"---\ntitle: git入门\ndate: 2019-04-20 10:25:48\ntags:\n---\n### 安装\n- Windows\n  \n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n```bash\nyum install git / apt-get install git\n```\n安装后执行，正常显示则安装正常\n```bash\ngit --version\n```\n### 使用\n#### 生成ssh\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\" \n```\n\"xxx@xxxxx.com\" 是git的账号,完成三次回车，即可生成 ssh key。\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n把ssh key绑定到git平台,绑定后输入命令验证\n```bash\nssh -T git@github.com\n```\n#### 关联git仓库\n- 在工作目录中初始化新仓库\n  ```bash\n  git init\n  ```\n  绑定远程仓库\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n  \n\n- 从现有仓库克隆\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```","slug":"git入门","published":1,"updated":"2019-07-01T07:57:36.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agt8000d5ss6resafabm","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是git的账号,完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把ssh key绑定到git平台,绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联git仓库\"><a href=\"#关联git仓库\" class=\"headerlink\" title=\"关联git仓库\"></a>关联git仓库</h4></li>\n<li>在工作目录中初始化新仓库<pre><code class=\"lang-bash\">git init\n</code></pre>\n绑定远程仓库<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n</ul>\n<ul>\n<li>从现有仓库克隆<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成ssh\"><a href=\"#生成ssh\" class=\"headerlink\" title=\"生成ssh\"></a>生成ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是git的账号,完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把ssh key绑定到git平台,绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联git仓库\"><a href=\"#关联git仓库\" class=\"headerlink\" title=\"关联git仓库\"></a>关联git仓库</h4></li>\n<li>在工作目录中初始化新仓库<pre><code class=\"lang-bash\">git init\n</code></pre>\n绑定远程仓库<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n</ul>\n<ul>\n<li>从现有仓库克隆<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n"},{"title":"docker+mysql主从配置","date":"2019-03-28T08:15:38.000Z","_content":"### 1.安装启动docker\n\n```\nyum install docker\nsystemctl start docker\n```\n### 2.启动docker容器\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n### 3.修改mysql配置文件\n这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n重启从库容器\n### 4.配置mysql主从\n远程连接主库和从库\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n### 5.测试接口\n主库中添加表，查看从库是否同步\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/docker-mysql主从配置.md","raw":"---\ntitle: docker+mysql主从配置\ndate: 2019-03-28 16:15:38\ntags: [docker, mysql]\n---\n### 1.安装启动docker\n\n```\nyum install docker\nsystemctl start docker\n```\n### 2.启动docker容器\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n### 3.修改mysql配置文件\n这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n重启从库容器\n### 4.配置mysql主从\n远程连接主库和从库\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n### 5.测试接口\n主库中添加表，查看从库是否同步\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"docker-mysql主从配置","published":1,"updated":"2019-07-01T07:57:56.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agt9000e5ss667sbyj5v","content":"<h3 id=\"1-安装启动docker\"><a href=\"#1-安装启动docker\" class=\"headerlink\" title=\"1.安装启动docker\"></a>1.安装启动docker</h3><pre><code>yum install docker\nsystemctl start docker\n</code></pre><h3 id=\"2-启动docker容器\"><a href=\"#2-启动docker容器\" class=\"headerlink\" title=\"2.启动docker容器\"></a>2.启动docker容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改mysql配置文件\"><a href=\"#3-修改mysql配置文件\" class=\"headerlink\" title=\"3.修改mysql配置文件\"></a>3.修改mysql配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置mysql主从\"><a href=\"#4-配置mysql主从\" class=\"headerlink\" title=\"4.配置mysql主从\"></a>4.配置mysql主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5.测试接口\"></a>5.测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-安装启动docker\"><a href=\"#1-安装启动docker\" class=\"headerlink\" title=\"1.安装启动docker\"></a>1.安装启动docker</h3><pre><code>yum install docker\nsystemctl start docker\n</code></pre><h3 id=\"2-启动docker容器\"><a href=\"#2-启动docker容器\" class=\"headerlink\" title=\"2.启动docker容器\"></a>2.启动docker容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改mysql配置文件\"><a href=\"#3-修改mysql配置文件\" class=\"headerlink\" title=\"3.修改mysql配置文件\"></a>3.修改mysql配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库,在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置mysql主从\"><a href=\"#4-配置mysql主从\" class=\"headerlink\" title=\"4.配置mysql主从\"></a>4.配置mysql主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5.测试接口\"></a>5.测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"Hello World","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-07-01T06:06:37.242Z","updated":"2019-07-01T06:06:37.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agta000g5ss6m6dsrchg","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br></p>","more":"<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"mysql索引最左原则问题","date":"2019-05-06T23:52:59.000Z","_content":"### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有sql中where包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写where条件的顺序无关，mysql查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道第一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。","source":"_posts/mysql索引最左原则问题.md","raw":"---\ntitle: mysql索引最左原则问题\ndate: 2019-05-07 07:52:59\ntags:\ncategories: \"mysql\"\n---\n### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有sql中where包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写where条件的顺序无关，mysql查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道第一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。","slug":"mysql索引最左原则问题","published":1,"updated":"2019-07-01T09:25:54.076Z","_id":"cjxk6agtb000h5ss6izeaudr7","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试sql\"><a href=\"#测试sql\" class=\"headerlink\" title=\"测试sql\"></a>测试sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有sql中where包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写where条件的顺序无关，mysql查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道第一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试sql\"><a href=\"#测试sql\" class=\"headerlink\" title=\"测试sql\"></a>测试sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有sql中where包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写where条件的顺序无关，mysql查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+树是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道第一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。</p>\n"},{"title":"nginx负载均衡模式","date":"2019-03-29T06:48:42.000Z","_content":"Nginx的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight默认值为1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/nginx负载均衡模式.md","raw":"---\ntitle: nginx负载均衡模式\ndate: 2019-03-29 14:48:42\ntags: [nginx]\ncategories: \"nginx\"\n---\nNginx的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight默认值为1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"nginx负载均衡模式","published":1,"updated":"2019-07-01T09:25:34.773Z","_id":"cjxk6agtc000j5ss6i89lffrz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Nginx的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight默认值为1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight默认值为1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用ip_hash指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"php7新特性","date":"2019-04-03T01:03:42.000Z","_content":"#### 太空船运算符\n```\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n#### 类型声明\n```\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n#### null合并操作符\n```\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n#### 常量数组\n```\ndefine('ANIMALS',['dog','cat']);\n```\n#### namespace批量导入\n```\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n#### intdiv函数\n```\nintdiv(10,3);\n```\n#### list方括号\n```\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```","source":"_posts/php7新特性.md","raw":"---\ntitle: php7新特性\ndate: 2019-04-03 09:03:42\ntags: [php]\ncategories: \"php\"\n---\n#### 太空船运算符\n```\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n#### 类型声明\n```\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n#### null合并操作符\n```\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n#### 常量数组\n```\ndefine('ANIMALS',['dog','cat']);\n```\n#### namespace批量导入\n```\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n#### intdiv函数\n```\nintdiv(10,3);\n```\n#### list方括号\n```\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```","slug":"php7新特性","published":1,"updated":"2019-07-01T09:26:11.413Z","_id":"cjxk6agtc000k5ss67qjh1qdw","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"太空船运算符\"><a href=\"#太空船运算符\" class=\"headerlink\" title=\"太空船运算符\"></a>太空船运算符</h4><pre><code>echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre><h4 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h4><pre><code>declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre><h4 id=\"null合并操作符\"><a href=\"#null合并操作符\" class=\"headerlink\" title=\"null合并操作符\"></a>null合并操作符</h4><pre><code>$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre><h4 id=\"常量数组\"><a href=\"#常量数组\" class=\"headerlink\" title=\"常量数组\"></a>常量数组</h4><pre><code>define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre><h4 id=\"namespace批量导入\"><a href=\"#namespace批量导入\" class=\"headerlink\" title=\"namespace批量导入\"></a>namespace批量导入</h4><pre><code>use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre><h4 id=\"intdiv函数\"><a href=\"#intdiv函数\" class=\"headerlink\" title=\"intdiv函数\"></a>intdiv函数</h4><pre><code>intdiv(10,3);\n</code></pre><h4 id=\"list方括号\"><a href=\"#list方括号\" class=\"headerlink\" title=\"list方括号\"></a>list方括号</h4><pre><code>$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"太空船运算符\"><a href=\"#太空船运算符\" class=\"headerlink\" title=\"太空船运算符\"></a>太空船运算符</h4><pre><code>echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre><h4 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h4><pre><code>declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre><h4 id=\"null合并操作符\"><a href=\"#null合并操作符\" class=\"headerlink\" title=\"null合并操作符\"></a>null合并操作符</h4><pre><code>$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre><h4 id=\"常量数组\"><a href=\"#常量数组\" class=\"headerlink\" title=\"常量数组\"></a>常量数组</h4><pre><code>define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre><h4 id=\"namespace批量导入\"><a href=\"#namespace批量导入\" class=\"headerlink\" title=\"namespace批量导入\"></a>namespace批量导入</h4><pre><code>use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre><h4 id=\"intdiv函数\"><a href=\"#intdiv函数\" class=\"headerlink\" title=\"intdiv函数\"></a>intdiv函数</h4><pre><code>intdiv(10,3);\n</code></pre><h4 id=\"list方括号\"><a href=\"#list方括号\" class=\"headerlink\" title=\"list方括号\"></a>list方括号</h4><pre><code>$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>"},{"title":"php写入文件权限失败 file_put_contents: failed to open stream: Permission denied","date":"2019-06-08T10:16:44.000Z","_content":"### 问题\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n### 解决过程\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是root，所以生成文件夹用户和用户组都是root，而回调方法中执行用户是www，写入日志方法中\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n如果目录不存在，创建目录，但是在php的mkdir函数创建文件夹设置777权限，实际上创建的文件还是755的权限。\n在linux系统中在创建文件/文件夹时有一个默认权限，此权限受 umask 设置影响，在/etc/bashrc配置文件中我们可以找到如下配置：\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\nlinux系统中默认的umask为022，与我们的777 &运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到linux系统的默认权限设置，不仅仅是PHP的问题。所以不建议直接进行修改把022 改为 000 。\n\n### 最后解决方案\n先创建目录，再使用chmod将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```","source":"_posts/php写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","raw":"---\ntitle: 'php写入文件权限失败 file_put_contents: failed to open stream: Permission denied'\ndate: 2019-06-08 18:16:44\ntags: [php]\ncategories: \"php\"\n---\n### 问题\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n### 解决过程\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是root，所以生成文件夹用户和用户组都是root，而回调方法中执行用户是www，写入日志方法中\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n如果目录不存在，创建目录，但是在php的mkdir函数创建文件夹设置777权限，实际上创建的文件还是755的权限。\n在linux系统中在创建文件/文件夹时有一个默认权限，此权限受 umask 设置影响，在/etc/bashrc配置文件中我们可以找到如下配置：\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\nlinux系统中默认的umask为022，与我们的777 &运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到linux系统的默认权限设置，不仅仅是PHP的问题。所以不建议直接进行修改把022 改为 000 。\n\n### 最后解决方案\n先创建目录，再使用chmod将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```","slug":"php写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied","published":1,"updated":"2019-07-01T09:26:32.944Z","_id":"cjxk6agtd000n5ss6yz8i6cjq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是root，所以生成文件夹用户和用户组都是root，而回调方法中执行用户是www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在php的mkdir函数创建文件夹设置777权限，实际上创建的文件还是755的权限。<br>在linux系统中在创建文件/文件夹时有一个默认权限，此权限受 umask 设置影响，在/etc/bashrc配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux系统中默认的umask为022，与我们的777 &amp;运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到linux系统的默认权限设置，不仅仅是PHP的问题。所以不建议直接进行修改把022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用chmod将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是root，所以生成文件夹用户和用户组都是root，而回调方法中执行用户是www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在php的mkdir函数创建文件夹设置777权限，实际上创建的文件还是755的权限。<br>在linux系统中在创建文件/文件夹时有一个默认权限，此权限受 umask 设置影响，在/etc/bashrc配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux系统中默认的umask为022，与我们的777 &amp;运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到linux系统的默认权限设置，不仅仅是PHP的问题。所以不建议直接进行修改把022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用chmod将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n"},{"title":"nginx配置文件","date":"2019-04-03T01:40:29.000Z","_content":"### nginx配置文件\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n```","source":"_posts/nginx配置文件.md","raw":"---\ntitle: nginx配置文件\ndate: 2019-04-03 09:40:29\ntags: [nginx]\ncategories: \"nginx\"\n---\n### nginx配置文件\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n```","slug":"nginx配置文件","published":1,"updated":"2019-07-01T09:25:30.295Z","_id":"cjxk6agte000p5ss6tcz9m59g","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx配置文件\"><a href=\"#nginx配置文件\" class=\"headerlink\" title=\"nginx配置文件\"></a>nginx配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${ \n        expires 15d; \n    }\n    location ~ .*.(js|css)?${ \n        expires 1h; }\n    }\n}\n</code></pre>"},{"title":"python在类中实现swith功能","date":"2019-03-29T06:51:12.000Z","_content":"### 问题\nPython中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。\n实现代码\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n其中主要用到getattr这个函数，用于返回一个对象属性值。\n```python\ngetattr(object, name[, default])\n```\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/python在类中实现swith功能.md","raw":"---\ntitle: python在类中实现swith功能\ndate: 2019-03-29 14:51:12\ntags: [python]\ncategories: \"python\"\n---\n### 问题\nPython中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。\n实现代码\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n其中主要用到getattr这个函数，用于返回一个对象属性值。\n```python\ngetattr(object, name[, default])\n```\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"python在类中实现swith功能","published":1,"updated":"2019-07-01T09:26:47.224Z","_id":"cjxk6agtf000r5ss6fzu3y31t","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到getattr这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python中没有switch的语法，但是很多时候需要多重条件判断，又不想写多个if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到getattr这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"socket.io配置nginx负载均衡","date":"2019-05-06T23:57:34.000Z","_content":"nginx配置\n```shell\nupstream nodes {\n            ip_hash;\n       \t\tserver 192.168.1.114:3000;\n            server 192.168.1.114:3001;\n            server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\nsocket.io\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```","source":"_posts/socket-io配置nginx负载均衡.md","raw":"---\ntitle: socket.io配置nginx负载均衡\ndate: 2019-05-07 07:57:34\ntags: [\"node\",\"nginx\"]\ncategories: \"node\"\n---\nnginx配置\n```shell\nupstream nodes {\n            ip_hash;\n       \t\tserver 192.168.1.114:3000;\n            server 192.168.1.114:3001;\n            server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\nsocket.io\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```","slug":"socket-io配置nginx负载均衡","published":1,"updated":"2019-07-01T09:27:16.986Z","_id":"cjxk6agtg000u5ss665lp7b4y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>nginx配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n            ip_hash;\n               server 192.168.1.114:3000;\n            server 192.168.1.114:3001;\n            server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>nginx配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n            ip_hash;\n               server 192.168.1.114:3000;\n            server 192.168.1.114:3001;\n            server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n"},{"title":"swoole异步task","date":"2019-03-29T06:41:35.000Z","_content":"### 记录\n今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n```PHP\n\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始\\n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了\\n\";\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo \"message: {$data} form Client: {$fd} \\n\";\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(\"asyc task finish$data\",'asycTask');\n        echo \"finish\";\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n客户端\n```PHP\nclass Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/swoole异步task.md","raw":"---\ntitle: swoole异步task\ndate: 2019-03-29 14:41:35\ntags: [swoole]\ncategories: \"php\"\n---\n### 记录\n今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n```PHP\n\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始\\n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了\\n\";\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo \"message: {$data} form Client: {$fd} \\n\";\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(\"asyc task finish$data\",'asycTask');\n        echo \"finish\";\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n客户端\n```PHP\nclass Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"swoole异步task","published":1,"updated":"2019-07-01T09:27:45.862Z","_id":"cjxk6agth000w5ss6ikx5nteq","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始\\n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了\\n&quot;;\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo &quot;message: {$data} form Client: {$fd} \\n&quot;;\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(&quot;asyc task finish$data&quot;,&#39;asycTask&#39;);\n        echo &quot;finish&quot;;\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用nodejs调用企业微信sdk,后来发现发送http请求到腾讯接口总是报错，就换成用swoole投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始\\n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了\\n&quot;;\n    }\n\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n\n        //echo &quot;message: {$data} form Client: {$fd} \\n&quot;;\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        //$data = json_decode($data,true);\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        l(&quot;asyc task finish$data&quot;,&#39;asycTask&#39;);\n        echo &quot;finish&quot;;\n    }\n\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n\n    }\n\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"vscode快捷键和扩展","date":"2019-04-03T06:39:39.000Z","_content":"### 快捷键\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首/行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行/末行    Ctrl + Home/End\n- 选中字符到左边/右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式(Toggle Zen Mode)\n\n### 插件\n- Code Runner\n- SSH FS\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n","source":"_posts/vscode快捷键.md","raw":"---\ntitle: vscode快捷键和扩展\ndate: 2019-04-03 14:39:39\ntags: [vscode]\n---\n### 快捷键\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首/行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行/末行    Ctrl + Home/End\n- 选中字符到左边/右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式(Toggle Zen Mode)\n\n### 插件\n- Code Runner\n- SSH FS\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n","slug":"vscode快捷键","published":1,"updated":"2019-07-01T06:06:37.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agti000y5ss6lel8woan","content":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首/行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行/末行    Ctrl + Home/End</li>\n<li>选中字符到左边/右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式(Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>SSH FS</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首/行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行/末行    Ctrl + Home/End</li>\n<li>选中字符到左边/右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式(Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>SSH FS</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n"},{"title":"wsl搭建php环境请求超时的问题解决方案","date":"2019-03-28T08:42:53.000Z","_content":"### 一、出现问题\n今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示\n```\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\nnginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了\n1.TCP是使用TCP端口连接127.0.0.1:9000\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n2.Socket是使用unix domain socket连接套接字php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。\n当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。\n\n### 三、解决方案\n在nginx的配置文件中加入\n```bash\n fastcgi_buffering off;\n```\n这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小\n\n\n","source":"_posts/wsl搭建php环境请求超时的问题解决方案.md","raw":"---\ntitle: wsl搭建php环境请求超时的问题解决方案\ndate: 2019-03-28 16:42:53\ntags: [wsl,nginx,php-fpm]\ncategories: \"php\"\n---\n### 一、出现问题\n今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示\n```\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\nnginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了\n1.TCP是使用TCP端口连接127.0.0.1:9000\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n2.Socket是使用unix domain socket连接套接字php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。\n当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。\n\n### 三、解决方案\n在nginx的配置文件中加入\n```bash\n fastcgi_buffering off;\n```\n这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小\n\n\n","slug":"wsl搭建php环境请求超时的问题解决方案","published":1,"updated":"2019-07-01T09:27:57.022Z","_id":"cjxk6agtj000z5ss69k7qrgs2","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示</p>\n<pre><code>[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre><p>nginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了<br>1.TCP是使用TCP端口连接127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket是使用unix domain socket连接套接字php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。<br>当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在nginx的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了wsl,在部署php环境的时候发现由nginx转发到php-fpm的请求非常慢，查看nginx错误日志显示</p>\n<pre><code>[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre><p>nginx和fastcgi的通信方式有两种，一种是TCP socket的方式，一种是unix socket方式,因为wsl安装的php-fpm默认是unix socket，我就没改动了<br>1.TCP是使用TCP端口连接127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket是使用unix domain socket连接套接字php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket方式肯定要比tcp的方式快而且消耗资源少，因为socket之间在nginx和php-fpm的进程之间通信，而tcp需要经过本地回环驱动，还要申请临时端口和tcp相关资源。<br>当然还是从原理上来说，unix socket会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而TCP这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用unix socket,而服务器上用tcp,用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在nginx的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取fastcgi服务器消息的缓冲功能。 如果配置为on，nginx在接收到fastcgi服务器的响应结果时尽快将响应写到缓冲区（由fastcgi_buffer_size和fastcgi_buffering指令控制）中，如果响应结果超过了缓冲区的大小，nginx会将超出部分写到临时文件（由fastcgi_max_temp_file_size和fastcgi_temp_file_write_size指令控制）中。 如果配置为off，nginx在接收到fastcgi服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为fastcgi_buffer_size配置的大小</p>\n"},{"title":"《大话数据结构》读后总结（一）","date":"2019-03-29T06:55:52.000Z","_content":"### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。**\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n  ##### 1.1、集合结构\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&h=755&f=jpeg&s=31970)\n  ##### 1.2 线性结构\n  - 线性结构中的数据元素之间是一对一的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&h=447&f=jpeg&s=21493)\n  ##### 1.3 树形结构\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&h=384&f=jpeg&s=21497)\n  #### 1.4 图形结构\n  - 图形结构的数据元素是多对多的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&h=647&f=jpeg&s=28333)\n\n\n#### 2、物理结构\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n  ##### 2.1、顺序存储\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&h=117&f=jpeg&s=13899)\n  ##### 2.2、链式存储\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&h=716&f=jpeg&s=33022)\n  \n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（一）\ndate: 2019-03-29 14:55:52\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。**\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n  ##### 1.1、集合结构\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&h=755&f=jpeg&s=31970)\n  ##### 1.2 线性结构\n  - 线性结构中的数据元素之间是一对一的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&h=447&f=jpeg&s=21493)\n  ##### 1.3 树形结构\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&h=384&f=jpeg&s=21497)\n  #### 1.4 图形结构\n  - 图形结构的数据元素是多对多的关系。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&h=647&f=jpeg&s=28333)\n\n\n#### 2、物理结构\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n  ##### 2.1、顺序存储\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&h=117&f=jpeg&s=13899)\n  ##### 2.2、链式存储\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n  ![](https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&h=716&f=jpeg&s=33022)\n  \n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（一）","published":1,"updated":"2019-07-01T09:17:40.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtl00115ss6pxo9pj6x","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。</strong></p>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3></li>\n</ul>\n<h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&amp;h=755&amp;f=jpeg&amp;s=31970\" alt><h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5></li>\n<li>线性结构中的数据元素之间是一对一的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&amp;h=447&amp;f=jpeg&amp;s=21493\" alt><h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5></li>\n<li>树形结构中的数据元素之间存在一种一对多的层次关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&amp;h=384&amp;f=jpeg&amp;s=21497\" alt><h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4></li>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&amp;h=647&amp;f=jpeg&amp;s=28333\" alt></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&amp;h=117&amp;f=jpeg&amp;s=13899\" alt><h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5></li>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&amp;h=716&amp;f=jpeg&amp;s=33022\" alt></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理,也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps:数据项相当于数据库的字段的值,数据元素相当于数据表的一条记录,数据对象就相当于数据表。</strong></p>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3></li>\n</ul>\n<h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d8a458?w=768&amp;h=755&amp;f=jpeg&amp;s=31970\" alt><h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5></li>\n<li>线性结构中的数据元素之间是一对一的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f91d6d20b?w=768&amp;h=447&amp;f=jpeg&amp;s=21493\" alt><h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5></li>\n<li>树形结构中的数据元素之间存在一种一对多的层次关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92130fde?w=768&amp;h=384&amp;f=jpeg&amp;s=21497\" alt><h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4></li>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f92f4cf77?w=768&amp;h=647&amp;f=jpeg&amp;s=28333\" alt></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94cbeaa3?w=768&amp;h=117&amp;f=jpeg&amp;s=13899\" alt><h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5></li>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<br><img src=\"https://user-gold-cdn.xitu.io/2019/3/19/1699551f94f4c399?w=768&amp;h=716&amp;f=jpeg&amp;s=33022\" alt></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（七）","date":"2019-04-01T03:12:17.000Z","_content":"### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语  \n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)\n```\n### 最坏情况与平均情况\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n### 空间复杂度\n计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（七）.md","raw":"---\ntitle: 《大话数据结构》读后总结（七）\ndate: 2019-04-01 11:12:17\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语  \n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n2)<O(n3)<O(2n)<O(n!)<O(nn)\n```\n### 最坏情况与平均情况\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n### 空间复杂度\n计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（七）","published":1,"updated":"2019-07-01T09:17:44.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtm00125ss6t9vczm27","content":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2n)&lt;O(n!)&lt;O(nn)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语  </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n2)&lt;O(n3)&lt;O(2n)&lt;O(n!)&lt;O(nn)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（三）","date":"2019-03-29T06:57:45.000Z","_content":"### 一、算法\n#### 1、定义\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n \n**ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n#### 2、算法与数据结构的关系\n- 算法是数据结构的具体运用。\n#### 3、算法的特性\n##### 3.1 输入输出\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n##### 3.2 有穷性\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n##### 3.3 确定性\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n##### 3.4 可行性\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n#### 4、算法设计的要求\n##### 4.1 正确性\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1.算法程序没有语法错误。 \n\n  2.算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 \n\n  4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。\n##### 4.2 可读性\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n##### 4.3 健壮性\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n##### 4.4 时间效率高和存储量低\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（三）.md","raw":"---\ntitle: 《大话数据结构》读后总结（三）\ndate: 2019-03-29 14:57:45\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 一、算法\n#### 1、定义\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n \n**ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n#### 2、算法与数据结构的关系\n- 算法是数据结构的具体运用。\n#### 3、算法的特性\n##### 3.1 输入输出\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n##### 3.2 有穷性\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n##### 3.3 确定性\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n##### 3.4 可行性\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n#### 4、算法设计的要求\n##### 4.1 正确性\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1.算法程序没有语法错误。 \n\n  2.算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 \n\n  4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。\n##### 4.2 可读性\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n##### 4.3 健壮性\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n##### 4.4 时间效率高和存储量低\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（三）","published":1,"updated":"2019-07-01T09:17:48.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtn00155ss6vejn9ybq","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5></li>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5></li>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5></li>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5></li>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<p>1.算法程序没有语法错误。 </p>\n<p>2.算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n<p>3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 </p>\n<p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。</p>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5></li>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5></li>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5></li>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps:算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5></li>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps:输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5></li>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5></li>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5></li>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<p>1.算法程序没有语法错误。 </p>\n<p>2.算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n<p>3.算法程序对于非法的输入数据能够得出满足规格说明的结果。 </p>\n<p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次3作为一个算法是否正确的标准。</p>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5></li>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5></li>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5></li>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（九）","date":"2019-04-08T03:47:11.000Z","_content":"### 线性表\n#### 顺序存储结构的插入与删除\n##### 获得元素操作\n```\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 || \n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n##### 插入操作\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)                       \n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i < 1 || i >L->length + 1)                  \n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)                             \n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)    \n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;                             \n    L->length++;\n    return OK;\n}\n```\n##### 删除操作\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)                    \n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)            \n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)                     \n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)    \n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O(1)；而插入或删除时，时间复杂度都是O(n)。\n##### 线性表顺序存储结构的优缺点\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7bdf4117995d?w=1152&h=580&f=jpeg&s=58119)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（九）.md","raw":"---\ntitle: 《大话数据结构》读后总结（九）\ndate: 2019-04-08 11:47:11\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 线性表\n#### 顺序存储结构的插入与删除\n##### 获得元素操作\n```\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 || \n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n##### 插入操作\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)                       \n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i < 1 || i >L->length + 1)                  \n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)                             \n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)    \n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;                             \n    L->length++;\n    return OK;\n}\n```\n##### 删除操作\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)                    \n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)            \n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)                     \n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)    \n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O(1)；而插入或删除时，时间复杂度都是O(n)。\n##### 线性表顺序存储结构的优缺点\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7bdf4117995d?w=1152&h=580&f=jpeg&s=58119)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（九）","published":1,"updated":"2019-07-01T09:17:51.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agto00175ss6nzse4zno","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code>#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 || \n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre><h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)                       \n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)                  \n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)                             \n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)    \n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;                             \n    L-&gt;length++;\n    return OK;\n}\n</code></pre><h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)                    \n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)            \n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)                     \n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)    \n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre><p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O(1)；而插入或删除时，时间复杂度都是O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7bdf4117995d?w=1152&h=580&f=jpeg&s=58119\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code>#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status是函数的类型，其值是函数结果状态代\n   码，如OK等 */\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 || \n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre><h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个位置之前插入新的数据元\n   素e，L的长度加1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)                       \n        return ERROR;\n    /* 当i不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)                  \n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)                             \n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)    \n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;                             \n    L-&gt;length++;\n    return OK;\n}\n</code></pre><h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个数据元素，并用e返回\n   其值，L的长度减1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)                    \n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)            \n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)                     \n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)    \n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre><p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是O(1)；而插入或删除时，时间复杂度都是O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7bdf4117995d?w=1152&h=580&f=jpeg&s=58119\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（二）","date":"2019-03-29T06:57:38.000Z","_content":"### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在C语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（二）.md","raw":"---\ntitle: 《大话数据结构》读后总结（二）\ndate: 2019-03-29 14:57:38\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在C语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![image](http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![image](http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（二）","published":1,"updated":"2019-07-01T09:17:56.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtp001a5ss6nwud6uy1","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在C语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在C语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在C语言中变量声明int a,b，这就意味着，在给变量a和b赋值时不能超出int的取值范围，变量a和b之间的运算只能是int类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫point的抽象数据类型，它有x、y、z三个整型变量，这样我们很方便地操作一个point数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><p><img src=\"http://upload-images.jianshu.io/upload_images/10202334-5a8f25e68cdafcc5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-591d4a6553b22d7c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://upload-images.jianshu.io/upload_images/10202334-2f760a7e8091bc3a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（五）","date":"2019-04-01T02:55:55.000Z","_content":"### 函数的渐近增长\n\n假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852)\n\n当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n>2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。\n\n输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n>N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。**\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944)\n\n当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n>3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325)\n\n当n=1的时候，算法E与算法F结果相同，但当n>1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055)\n\n当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（五）.md","raw":"---\ntitle: 《大话数据结构》读后总结（五）\ndate: 2019-04-01 10:55:55\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 函数的渐近增长\n\n假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852)\n\n当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n>2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。\n\n输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n>N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。**\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944)\n\n当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n>3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325)\n\n当n=1的时候，算法E与算法F结果相同，但当n>1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。\n\n![](https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055)\n\n当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（五）","published":1,"updated":"2019-07-01T09:18:00.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtq001d5ss63fjme443","content":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n&gt;2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。</p>\n<p>输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n&gt;3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1的时候，算法E与算法F结果相同，但当n&gt;1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是n，算法A要做2n+3次操作，你可以理解为先有一个n次的循环，执行完成后，再有一个n次循环，最后有三次赋值或运算，共2n+3次操作。算法B要做3n+1次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d0f708080bc?w=1152&h=314&f=jpeg&s=34852\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1时，算法A效率不如算法B（次数比算法B要多一次）。而当n=2时，两者效率相同；当n&gt;2时，算法A就开始优于算法B了，随着n的增加，算法A比算法B越来越好了（执行的次数比B要少）。于是我们可以得出结论，算法A总体上要好过算法B。</p>\n<p>输入规模n在没有限制的情况下，只要超过一个数值N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n&gt;N，f(n)总是比g(n)大，那么，我们说f(n)的增长渐近快于g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d41cbb77364?w=1152&h=362&f=jpeg&s=42944\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n≤3的时候，算法C要差于算法D（因为算法C次数比较多），但当n&gt;3后，算法C的优势就越来越优于算法D了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与n相乘的常数，这样的结果也没发生改变，算法C′的次数随着n的增长，还是远小于算法D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5231e92bc3?w=1152&h=292&f=jpeg&s=36325\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n=1的时候，算法E与算法F结果相同，但当n&gt;1后，算法E的优势就要开始优于算法F，随着n的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着n的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/29/169c8d5f45685b12?w=1152&h=524&f=jpeg&s=66055\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当n的值越来越大时，你会发现，3n+1已经没法和2n2的结果相比较，最终几乎可以忽略不计。也就是说，随着n值变得非常大以后，算法G其实已经很趋近于算法I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着n的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（八）","date":"2019-04-08T03:47:01.000Z","_content":"### 线性表\n#### 定义\n线性表（List）：零个或多个数据元素的有限序列\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274)\n\n线性表元素的个数n（n≥0）定义为线性表的长度，当n=0时，称为空表。\n#### 抽象数据类型\n```\nADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n##### 定义\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274)\n##### 顺序存储方式\n把第一个数据元素存到数组下标为0的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n```\n/* 存储空间初始分配量 */\n#define MAXSIZE 20             \n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;          \ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];    \n    /* 线性表当前长度 */\n    int length;                \n} SqList;\n```\n##### 数组长度与线性表长度区别\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7b1b3292f464?w=1152&h=333&f=jpeg&s=26703)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。\n```\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7b5d467f2ddc?w=1152&h=274&f=jpeg&s=20502)\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（八）.md","raw":"---\ntitle: 《大话数据结构》读后总结（八）\ndate: 2019-04-08 11:47:01\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 线性表\n#### 定义\n线性表（List）：零个或多个数据元素的有限序列\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274)\n\n线性表元素的个数n（n≥0）定义为线性表的长度，当n=0时，称为空表。\n#### 抽象数据类型\n```\nADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n##### 定义\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274)\n##### 顺序存储方式\n把第一个数据元素存到数组下标为0的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n```\n/* 存储空间初始分配量 */\n#define MAXSIZE 20             \n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;          \ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];    \n    /* 线性表当前长度 */\n    int length;                \n} SqList;\n```\n##### 数组长度与线性表长度区别\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7b1b3292f464?w=1152&h=333&f=jpeg&s=26703)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。\n```\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7b5d467f2ddc?w=1152&h=274&f=jpeg&s=20502)\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（八）","published":1,"updated":"2019-07-01T09:18:03.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtr001f5ss669ffic4w","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数n（n≥0）定义为线性表的长度，当n=0时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为0的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code>/* 存储空间初始分配量 */\n#define MAXSIZE 20             \n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;          \ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];    \n    /* 线性表当前长度 */\n    int length;                \n} SqList;\n</code></pre><h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7b1b3292f464?w=1152&h=333&f=jpeg&s=26703\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。</p>\n<pre><code>LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7b5d467f2ddc?w=1152&h=274&f=jpeg&s=20502\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数n（n≥0）定义为线性表的长度，当n=0时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表(List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为DataType。\n    其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素an外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表L。\n    ListEmpty(L):          若线性表为空，返回true，否则返回false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表L中的第i个位置元素值返回给e。\n    LocateElem(L, e):      在线性表L中查找与给定值e相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7aad4b5c0020?w=1152&h=139&f=jpeg&s=16274\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为0的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code>/* 存储空间初始分配量 */\n#define MAXSIZE 20             \n/* ElemType类型根据实际情况而定，这里假设为int */\ntypedef int ElemType;          \ntypedef struct\n{\n    /* 数组存储数据元素，最大值为MAXSIZE */\n    ElemType data[MAXSIZE];    \n    /* 线性表当前长度 */\n    int length;                \n} SqList;\n</code></pre><h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7b1b3292f464?w=1152&h=333&f=jpeg&s=26703\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是c个存储单元，那么线性表中第i+1个数据元素的存储位置和第i个数据元素的存储位置满足下列关系（LOC表示获得存储位置的函数）。</p>\n<pre><code>LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7b5d467f2ddc?w=1152&h=274&f=jpeg&s=20502\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（六）","date":"2019-04-01T02:56:25.000Z","_content":"### 算法时间复杂度定义\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。\n\n一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。\n\nO(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。\n\n推导大O阶：\n\n1．用常数1取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。\n\n#### 常数阶\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。\n#### 线性阶\n```\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n时间复杂度为O(n)，因为循环体中的代码须要执行n次。\n#### 对数阶\n```\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n由2x=n得到x=log2n,时间复杂度为O(logn)。\n#### 平方阶\n```\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。\n\n```\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（六）.md","raw":"---\ntitle: 《大话数据结构》读后总结（六）\ndate: 2019-04-01 10:56:25\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 算法时间复杂度定义\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。\n\n一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。\n\nO(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。\n\n推导大O阶：\n\n1．用常数1取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。\n\n#### 常数阶\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。\n#### 线性阶\n```\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n时间复杂度为O(n)，因为循环体中的代码须要执行n次。\n#### 对数阶\n```\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n```\n由2x=n得到x=log2n,时间复杂度为O(logn)。\n#### 平方阶\n```\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。\n\n```\nn++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n```\n执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（六）","published":1,"updated":"2019-07-01T09:18:07.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtu001k5ss6vjfokd9g","content":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>\n<p>一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p>\n<p>O(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。</p>\n<p>推导大O阶：</p>\n<p>1．用常数1取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code>int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre><p>运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code>int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre><p>时间复杂度为O(n)，因为循环体中的代码须要执行n次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code>int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre><p>由2x=n得到x=log2n,时间复杂度为O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code>int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre><p>外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。</p>\n<pre><code>n++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre><p>执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>\n<p>一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p>\n<p>O(1)叫常数阶、O(n)叫线性阶、O(n^2)叫平方阶。</p>\n<p>推导大O阶：</p>\n<p>1．用常数1取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code>int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre><p>运行次数函数是f(n)=3,时间复杂度为O(1)。与问题的大小无关（n的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code>int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre><p>时间复杂度为O(n)，因为循环体中的代码须要执行n次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code>int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为O(1)的程序步骤序列 */\n}\n</code></pre><p>由2x=n得到x=log2n,时间复杂度为O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code>int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre><p>外层的循环时间复杂度O(n)，内层时间复杂度为O(n)，所以这段代码的时间复杂度为O(n^2)。</p>\n<pre><code>n++;                       /* 执行次数为1 */\nfunction(n);               /* 执行次数为n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为O(1)的程序步骤序列 */\n    }\n}\n</code></pre><p>执行次数f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十二）","date":"2019-04-08T03:47:36.000Z","_content":"","source":"_posts/《大话数据结构》读后总结（十二）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十二）\ndate: 2019-04-08 11:47:36\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n","slug":"《大话数据结构》读后总结（十二）","published":1,"updated":"2019-07-01T09:18:14.405Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtv001n5ss66933n0ay","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"《大话数据结构》读后总结（十一）","date":"2019-04-08T03:47:28.000Z","_content":"### 单链表的读取\n单链表第i个数据的算法思路：\n\n1.声明一个指针p指向链表第一个结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在；\n\n4.否则查找成功，返回结点p的数据。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L->next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p && j < i)    \n    {\n        p = p->next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p->data;       /* 取第i个结点的数据 */\n    return OK;\n}\n```\n从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。因此最坏情况的时间复杂度是O(n)。\n\n### 单链表的插入与删除\n#### 单链表的插入\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169fb015f19443a3?w=768&h=493&f=jpeg&s=18421)\n\n```\ns->next = p->next; p->next = s;\n```\n单链表第i个数据插入结点的算法思路：\n\n1.声明一指针p指向链表头结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在； \n\n4.否则查找成功，在系统中生成一个空结点s； \n\n5.将数据元素e赋值给s->data；\n\n6.单链表的插入标准语句s->next=p->next;p->next=s；\n\n7.返回成功。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p && j < i)                     \n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j > i)\n        return ERROR;                      \n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));    \n    s->data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s->next = p->next;                    \n    /* 将s赋值给p的后继 */\n    p->next = s;                           \n    return OK;\n}\n```\n#### 单链表的删除\n![](https://user-gold-cdn.xitu.io/2019/4/8/169fb04bac978d25?w=1152&h=411&f=jpeg&s=34231)\n\n```\nq=p->next; p->next=q->next;\n```\n单链表第i个数据删除结点的算法思路：\n\n1.声明一指针p指向链表头结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在；\n\n4.否则查找成功，将欲删除的结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next=q->next；\n\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点；\n\n8.返回成功。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p->next && j < i)    \n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;           \n    q = p->next;\n    /* 将q的后继赋值给p的后继 */\n    p->next = q->next;          \n    /* 将q结点中的数据给e */\n    *e = q->data;               \n    /* 让系统回收此结点，释放内存 */\n    free(q);                    \n    return OK;\n}\n```\n### 总结\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第i个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是O(n)。\n\n如果在我们不知道第i个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第i个位置，插入10个结点，对于顺序存储结构意味着，每一次插入都需要移动n-i个结点，每次都是O(n)。而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（十一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十一）\ndate: 2019-04-08 11:47:28\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 单链表的读取\n单链表第i个数据的算法思路：\n\n1.声明一个指针p指向链表第一个结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在；\n\n4.否则查找成功，返回结点p的数据。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L->next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p && j < i)    \n    {\n        p = p->next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p->data;       /* 取第i个结点的数据 */\n    return OK;\n}\n```\n从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。因此最坏情况的时间复杂度是O(n)。\n\n### 单链表的插入与删除\n#### 单链表的插入\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169fb015f19443a3?w=768&h=493&f=jpeg&s=18421)\n\n```\ns->next = p->next; p->next = s;\n```\n单链表第i个数据插入结点的算法思路：\n\n1.声明一指针p指向链表头结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在； \n\n4.否则查找成功，在系统中生成一个空结点s； \n\n5.将数据元素e赋值给s->data；\n\n6.单链表的插入标准语句s->next=p->next;p->next=s；\n\n7.返回成功。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p && j < i)                     \n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j > i)\n        return ERROR;                      \n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));    \n    s->data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s->next = p->next;                    \n    /* 将s赋值给p的后继 */\n    p->next = s;                           \n    return OK;\n}\n```\n#### 单链表的删除\n![](https://user-gold-cdn.xitu.io/2019/4/8/169fb04bac978d25?w=1152&h=411&f=jpeg&s=34231)\n\n```\nq=p->next; p->next=q->next;\n```\n单链表第i个数据删除结点的算法思路：\n\n1.声明一指针p指向链表头结点，初始化j从1开始；\n\n2.当j<i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；\n\n3.若到链表末尾p为空，则说明第i个结点不存在；\n\n4.否则查找成功，将欲删除的结点p->next赋值给q；\n\n5.单链表的删除标准语句p->next=q->next；\n\n6.将q结点中的数据赋值给e，作为返回；\n\n7.释放q结点；\n\n8.返回成功。\n\n```\n/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p->next && j < i)    \n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;           \n    q = p->next;\n    /* 将q的后继赋值给p的后继 */\n    p->next = q->next;          \n    /* 将q结点中的数据给e */\n    *e = q->data;               \n    /* 让系统回收此结点，释放内存 */\n    free(q);                    \n    return OK;\n}\n```\n### 总结\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第i个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是O(n)。\n\n如果在我们不知道第i个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第i个位置，插入10个结点，对于顺序存储结构意味着，每一次插入都需要移动n-i个结点，每次都是O(n)。而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（十一）","published":1,"updated":"2019-07-01T09:18:11.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtx001r5ss60bbf480g","content":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第i个数据的算法思路：</p>\n<p>1.声明一个指针p指向链表第一个结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在；</p>\n<p>4.否则查找成功，返回结点p的数据。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L-&gt;next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p &amp;&amp; j &lt; i)    \n    {\n        p = p-&gt;next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p-&gt;data;       /* 取第i个结点的数据 */\n    return OK;\n}\n</code></pre><p>从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。因此最坏情况的时间复杂度是O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169fb015f19443a3?w=768&h=493&f=jpeg&s=18421\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre><p>单链表第i个数据插入结点的算法思路：</p>\n<p>1.声明一指针p指向链表头结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在； </p>\n<p>4.否则查找成功，在系统中生成一个空结点s； </p>\n<p>5.将数据元素e赋值给s-&gt;data；</p>\n<p>6.单链表的插入标准语句s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n<p>7.返回成功。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p &amp;&amp; j &lt; i)                     \n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;                      \n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));    \n    s-&gt;data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s-&gt;next = p-&gt;next;                    \n    /* 将s赋值给p的后继 */\n    p-&gt;next = s;                           \n    return OK;\n}\n</code></pre><h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169fb04bac978d25?w=1152&h=411&f=jpeg&s=34231\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre><p>单链表第i个数据删除结点的算法思路：</p>\n<p>1.声明一指针p指向链表头结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在；</p>\n<p>4.否则查找成功，将欲删除的结点p-&gt;next赋值给q；</p>\n<p>5.单链表的删除标准语句p-&gt;next=q-&gt;next；</p>\n<p>6.将q结点中的数据赋值给e，作为返回；</p>\n<p>7.释放q结点；</p>\n<p>8.返回成功。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)    \n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;           \n    q = p-&gt;next;\n    /* 将q的后继赋值给p的后继 */\n    p-&gt;next = q-&gt;next;          \n    /* 将q结点中的数据给e */\n    *e = q-&gt;data;               \n    /* 让系统回收此结点，释放内存 */\n    free(q);                    \n    return OK;\n}\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第i个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是O(n)。</p>\n<p>如果在我们不知道第i个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第i个位置，插入10个结点，对于顺序存储结构意味着，每一次插入都需要移动n-i个结点，每次都是O(n)。而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第i个数据的算法思路：</p>\n<p>1.声明一个指针p指向链表第一个结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在；</p>\n<p>4.否则查找成功，返回结点p的数据。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */\n/* 操作结果：用e返回L中第i个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针p */\n    p = L-&gt;next;        /* 让p指向链表L的第个结点 */\n    j = 1;                 /* j为计数器 */\n    /* p不为空且计数器j还没有等于i时，循环继续 */\n    while (p &amp;&amp; j &lt; i)    \n    {\n        p = p-&gt;next;    /* 让p指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第i个结点不存在 */\n    *e = p-&gt;data;       /* 取第i个结点的数据 */\n    return OK;\n}\n</code></pre><p>从头开始找，直到第i个结点为止。由于这个算法的时间复杂度取决于i的位置，当i=1时，则不需遍历，第一个就取出数据了，而当i=n时则遍历n-1次才可以。因此最坏情况的时间复杂度是O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169fb015f19443a3?w=768&h=493&f=jpeg&s=18421\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre><p>单链表第i个数据插入结点的算法思路：</p>\n<p>1.声明一指针p指向链表头结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在； </p>\n<p>4.否则查找成功，在系统中生成一个空结点s； </p>\n<p>5.将数据元素e赋值给s-&gt;data；</p>\n<p>6.单链表的插入标准语句s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n<p>7.返回成功。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在L中第i个结点位置之前插入新的数\n   据元素e，L的长度加1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第i-1个结点 */\n    while (p &amp;&amp; j &lt; i)                     \n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;                      \n    /* 生成新结点（C标准函数） */\n    s = (LinkList)malloc(sizeof(Node));    \n    s-&gt;data = e;\n    /* 将p的后继结点赋值给s的后继 */\n    s-&gt;next = p-&gt;next;                    \n    /* 将s赋值给p的后继 */\n    p-&gt;next = s;                           \n    return OK;\n}\n</code></pre><h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169fb04bac978d25?w=1152&h=411&f=jpeg&s=34231\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code>q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre><p>单链表第i个数据删除结点的算法思路：</p>\n<p>1.声明一指针p指向链表头结点，初始化j从1开始；</p>\n<p>2.当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下一个结点，j累加1；</p>\n<p>3.若到链表末尾p为空，则说明第i个结点不存在；</p>\n<p>4.否则查找成功，将欲删除的结点p-&gt;next赋值给q；</p>\n<p>5.单链表的删除标准语句p-&gt;next=q-&gt;next；</p>\n<p>6.将q结点中的数据赋值给e，作为返回；</p>\n<p>7.释放q结点；</p>\n<p>8.返回成功。</p>\n<pre><code>/* 初始条件：顺序线性表L已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除L的第i个结点，并用e返回其\n   值，L的长度减1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第i-1个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)    \n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第i个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;           \n    q = p-&gt;next;\n    /* 将q的后继赋值给p的后继 */\n    p-&gt;next = q-&gt;next;          \n    /* 将q结点中的数据给e */\n    *e = q-&gt;data;               \n    /* 让系统回收此结点，释放内存 */\n    free(q);                    \n    return OK;\n}\n</code></pre><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第i个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是O(n)。</p>\n<p>如果在我们不知道第i个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第i个位置，插入10个结点，对于顺序存储结构意味着，每一次插入都需要移动n-i个结点，每次都是O(n)。而单链表，我们只需要在第一次时，找到第i个位置的指针，此时为O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十）","date":"2019-04-08T03:47:21.000Z","_content":"### 线性表\n#### 线性表的链式存储结构\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点（Node）。\n\nn个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c2f01747fd3?w=1152&h=378&f=jpeg&s=29605)\n\n线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c6d3459fd5b?w=1152&h=271&f=jpeg&s=33300)\n\n#### 头指针与头结点的异同\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c7754029c75?w=1152&h=703&f=jpeg&s=80160)\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169faf7168f5d76a?w=1152&h=349&f=jpeg&s=28690)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p->data来表示，p->data的值是一个数据元素，结点ai的指针域可以用p->next来表示，p->next的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169faf8b69e718b9?w=768&h=317&f=jpeg&s=18343)\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/《大话数据结构》读后总结（十）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十）\ndate: 2019-04-08 11:47:21\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 线性表\n#### 线性表的链式存储结构\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点（Node）。\n\nn个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c2f01747fd3?w=1152&h=378&f=jpeg&s=29605)\n\n线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c6d3459fd5b?w=1152&h=271&f=jpeg&s=33300)\n\n#### 头指针与头结点的异同\n\n![](https://user-gold-cdn.xitu.io/2019/4/4/169e7c7754029c75?w=1152&h=703&f=jpeg&s=80160)\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169faf7168f5d76a?w=1152&h=349&f=jpeg&s=28690)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p->data来表示，p->data的值是一个数据元素，结点ai的指针域可以用p->next来表示，p->next的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](https://user-gold-cdn.xitu.io/2019/4/8/169faf8b69e718b9?w=768&h=317&f=jpeg&s=18343)\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"《大话数据结构》读后总结（十）","published":1,"updated":"2019-07-01T09:17:32.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agtz001t5ss610093dzw","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点（Node）。</p>\n<p>n个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c2f01747fd3?w=1152&h=378&f=jpeg&s=29605\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c6d3459fd5b?w=1152&h=271&f=jpeg&s=33300\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c7754029c75?w=1152&h=703&f=jpeg&s=80160\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169faf7168f5d76a?w=1152&h=349&f=jpeg&s=28690\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p-&gt;data来表示，p-&gt;data的值是一个数据元素，结点ai的指针域可以用p-&gt;next来表示，p-&gt;next的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169faf8b69e718b9?w=768&h=317&f=jpeg&s=18343\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素ai的存储映像，称为结点（Node）。</p>\n<p>n个结点（ai的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c2f01747fd3?w=1152&h=378&f=jpeg&s=29605\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用NULL或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c6d3459fd5b?w=1152&h=271&f=jpeg&s=33300\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/4/169e7c7754029c75?w=1152&h=703&f=jpeg&s=80160\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169faf7168f5d76a?w=1152&h=349&f=jpeg&s=28690\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们可以用p-&gt;data来表示，p-&gt;data的值是一个数据元素，结点ai的指针域可以用p-&gt;next来表示，p-&gt;next的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/4/8/169faf8b69e718b9?w=768&h=317&f=jpeg&s=18343\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（四）","date":"2019-03-29T06:57:52.000Z","_content":"### 一、算法\n#### 1、算法效率的度量方法\n##### 1.1 事后统计方法\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1.必须依据算法事先编制好程序，花费时间和人力\n  \n  2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n  \n  3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n##### 1.2 事后统计方法\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： \n\n  1.算法采用的策略、方法。 \n  \n  2.编译产生的代码质量。 \n  \n  3.问题的输入规模。 \n  \n  4.机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n```\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n第二种\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n- 第一种算法，执行了1+(n+1)+n+1次=2n+3次；\n- 第二种算法，是1+1+1=3次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。\n第三种\n```\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+...+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是n，求和算法的第一种，求1+2+...+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![image](https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80)\n\n随着n值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n\n","source":"_posts/《大话数据结构》读后总结（四）.md","raw":"---\ntitle: 《大话数据结构》读后总结（四）\ndate: 2019-03-29 14:57:52\ntags: [数据结构,算法]\ncategories: \"大话数据结构\"\n---\n### 一、算法\n#### 1、算法效率的度量方法\n##### 1.1 事后统计方法\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1.必须依据算法事先编制好程序，花费时间和人力\n  \n  2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n  \n  3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n##### 1.2 事后统计方法\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： \n\n  1.算法采用的策略、方法。 \n  \n  2.编译产生的代码质量。 \n  \n  3.问题的输入规模。 \n  \n  4.机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n```\nint i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i <= n; i++)    /* 执行了n+1次 */\n{\n    sum = sum + i;          /* 执行n次 */\n}\nprintf(\"%d\", sum);          /* 执行1次 */\n```\n第二种\n```\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n- 第一种算法，执行了1+(n+1)+n+1次=2n+3次；\n- 第二种算法，是1+1+1=3次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。\n第三种\n```\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行n×n次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+...+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是n，求和算法的第一种，求1+2+...+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![image](https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80)\n\n随着n值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n![image](https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n\n","slug":"《大话数据结构》读后总结（四）","published":1,"updated":"2019-07-01T09:18:17.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxk6agu0001w5ss69h6nrce9","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<p>1.必须依据算法事先编制好程序，花费时间和人力</p>\n<p>2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n<p>3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5></li>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： </p>\n<p>1.算法采用的策略、方法。 </p>\n<p>2.编译产生的代码质量。 </p>\n<p>3.问题的输入规模。 </p>\n<p>4.机器执行指令的速度。</p>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种<pre><code>int i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */\n{\n  sum = sum + i;          /* 执行n次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行1次 */\n</code></pre>第二种<pre><code>int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre></li>\n<li>第一种算法，执行了1+(n+1)+n+1次=2n+3次；</li>\n<li>第二种算法，是1+1+1=3次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。<br>第三种<pre><code>int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n  for (j = 1; j &lt;= n; j++)\n  {\n      x++;    /* 执行n×n次 */\n      sum = sum + x;\n  }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+…+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。</li>\n</ul>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是n，求和算法的第一种，求1+2+…+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>随着n值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<p>1.必须依据算法事先编制好程序，花费时间和人力</p>\n<p>2.时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n<p>3.算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5></li>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素： </p>\n<p>1.算法采用的策略、方法。 </p>\n<p>2.编译产生的代码质量。 </p>\n<p>3.问题的输入规模。 </p>\n<p>4.机器执行指令的速度。</p>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种<pre><code>int i, sum = 0,n = 100;     /* 执行1次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了n+1次 */\n{\n  sum = sum + i;          /* 执行n次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行1次 */\n</code></pre>第二种<pre><code>int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre></li>\n<li>第一种算法，执行了1+(n+1)+n+1次=2n+3次；</li>\n<li>第二种算法，是1+1+1=3次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是n次与1次的差距。<br>第三种<pre><code>int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n  for (j = 1; j &lt;= n; j++)\n  {\n      x++;    /* 执行n×n次 */\n      sum = sum + x;\n  }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>这个例子中，i从1到100，每次都要让j循环100次，而当中的x++和sum=sum+x；其实就是1+2+3+…+10000，也就是100^2次，所以这个算法当中，循环部分的代码整体需要执行n^2次。</li>\n</ul>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是n，求和算法的第一种，求1+2+…+n需要一段代码运行n次。那么这个问题的输入规模使得操作数量是f(n)=n，显然运行100次的同一段代码规模是运算10次的10倍。而第二种，无论n为多少，运行次数都为1，即f(n)=1；第三种，运算100次是运算10次的1000倍。因为它是f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/22/169a3d70bc925b80\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure></p>\n<p>随着n值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/21/1699eba93eba8faa?w=258&h=258&f=jpeg&s=16510\" alt=\"image\" title>\n                </div>\n                <div class=\"image-caption\">image</div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"layout":"vscode","title":"无法安装golang.org安装包的问题","date":"2019-03-28T08:44:37.000Z","_content":"### 一、问题\n今天在安装vscode时，报错\n``` \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/无法安装golang-org安装包的问题.md","raw":"---\nlayout: vscode\ntitle: 无法安装golang.org安装包的问题\ndate: 2019-03-28 16:44:37\ntags: [vscode,golang]\ncategories: \"golang\"\n---\n### 一、问题\n今天在安装vscode时，报错\n``` \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"无法安装golang-org安装包的问题","published":1,"updated":"2019-07-01T09:28:04.495Z","_id":"cjxk6agu1001z5ss6fkdqp7h6","comments":1,"photos":[],"link":"","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code>github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre><p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code>github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre><p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://user-gold-cdn.xitu.io/2019/3/17/1698b447d75fb9bb?w=258&h=258&f=jpeg&s=28010\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxk6agto00175ss6nzse4zno","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agts001g5ss609jmbhr1"},{"post_id":"cjxk6agtl00115ss6pxo9pj6x","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agtu001l5ss6fte02a4z"},{"post_id":"cjxk6agtp001a5ss6nwud6uy1","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agtw001o5ss6l47uep5z"},{"post_id":"cjxk6agtq001d5ss63fjme443","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agtx001s5ss6h14lsl85"},{"post_id":"cjxk6agtm00125ss6t9vczm27","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agtz001u5ss6bveqfsy4"},{"post_id":"cjxk6agtr001f5ss669ffic4w","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu0001x5ss6o48jjo9m"},{"post_id":"cjxk6agtu001k5ss6vjfokd9g","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu100205ss6mc6pcv5f"},{"post_id":"cjxk6agtn00155ss6vejn9ybq","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu200225ss61nylg7m4"},{"post_id":"cjxk6agtv001n5ss66933n0ay","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu200245ss6h5d5tjia"},{"post_id":"cjxk6agtx001r5ss60bbf480g","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu300265ss609jqi3f0"},{"post_id":"cjxk6agtz001t5ss610093dzw","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu300285ss69hv9gh75"},{"post_id":"cjxk6agu0001w5ss69h6nrce9","category_id":"cjxk6agtn00145ss6ig0t3p00","_id":"cjxk6agu300295ss67z5ltfqg"},{"post_id":"cjxk6agt400085ss6bfu479ni","category_id":"cjxk6gwvf00010cs6rwsueowo","_id":"cjxk6gwvf00020cs61eh4adti"},{"post_id":"cjxk6agte000p5ss6tcz9m59g","category_id":"cjxk6gwvf00010cs6rwsueowo","_id":"cjxk6h0s800030cs6k3in5rv0"},{"post_id":"cjxk6agtc000j5ss6i89lffrz","category_id":"cjxk6gwvf00010cs6rwsueowo","_id":"cjxk6h48n00040cs667u3nf77"},{"post_id":"cjxk6agtb000h5ss6izeaudr7","category_id":"cjxk6hj4u00060cs6qszoltcz","_id":"cjxk6hj4u00070cs6k7fhmwl2"},{"post_id":"cjxk6agtc000k5ss67qjh1qdw","category_id":"cjxk6hwig00090cs60h211de6","_id":"cjxk6hwig000a0cs6dou11n8h"},{"post_id":"cjxk6agtd000n5ss6yz8i6cjq","category_id":"cjxk6hwig00090cs60h211de6","_id":"cjxk6id4i000c0cs6xb2mllco"},{"post_id":"cjxk6agt6000a5ss6bcp8vlgw","category_id":"cjxk6hwig00090cs60h211de6","_id":"cjxk6iiae000d0cs6w0dsguvk"},{"post_id":"cjxk6agtf000r5ss6fzu3y31t","category_id":"cjxk6io56000f0cs6zg7fhyvj","_id":"cjxk6io56000g0cs6k8un5vu6"},{"post_id":"cjxk6agth000w5ss6ikx5nteq","category_id":"cjxk6hwig00090cs60h211de6","_id":"cjxk6jxe3000l0cs6i8yshzkc"},{"post_id":"cjxk6agu1001z5ss6fkdqp7h6","category_id":"cjxk6kbrk000o0cs6do9t38d7","_id":"cjxk6kbrl000p0cs6lug5t5b1"},{"post_id":"cjxk6agtg000u5ss665lp7b4y","category_id":"cjxk6j4ir000i0cs6l26argcr","_id":"cjxk6kgg500013ws6n8ep26dz"},{"post_id":"cjxk6agtj000z5ss69k7qrgs2","category_id":"cjxk6hwig00090cs60h211de6","_id":"cjxk6kgg700043ws6t9m81myg"}],"PostTag":[{"post_id":"cjxk6agsz00035ss6oc2jx0l3","tag_id":"cjxk6agt200075ss683gwpqte","_id":"cjxk6agt8000c5ss6eoal75uw"},{"post_id":"cjxk6agtc000j5ss6i89lffrz","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6agtd000l5ss6d77ajgal"},{"post_id":"cjxk6agt400085ss6bfu479ni","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6agte000o5ss61u7utqy9"},{"post_id":"cjxk6agt400085ss6bfu479ni","tag_id":"cjxk6agt9000f5ss6hi7c5wqj","_id":"cjxk6agtf000q5ss69kdnd01b"},{"post_id":"cjxk6agt400085ss6bfu479ni","tag_id":"cjxk6agtb000i5ss6zjtrnjve","_id":"cjxk6agtg000t5ss62gw4ij1p"},{"post_id":"cjxk6agte000p5ss6tcz9m59g","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6agth000v5ss6eyevlmcp"},{"post_id":"cjxk6agt6000a5ss6bcp8vlgw","tag_id":"cjxk6agtd000m5ss6y1ootlff","_id":"cjxk6agto00165ss6udxpeq91"},{"post_id":"cjxk6agt6000a5ss6bcp8vlgw","tag_id":"cjxk6agtg000s5ss6is9x0qp7","_id":"cjxk6agtp00185ss6xk7rvbte"},{"post_id":"cjxk6agt6000a5ss6bcp8vlgw","tag_id":"cjxk6agti000x5ss6tsfabaac","_id":"cjxk6agtq001c5ss681da77n3"},{"post_id":"cjxk6agt6000a5ss6bcp8vlgw","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6agtr001e5ss6xl113t16"},{"post_id":"cjxk6agt9000e5ss667sbyj5v","tag_id":"cjxk6agtm00135ss6dyadrgo2","_id":"cjxk6agtu001j5ss6hzutwdow"},{"post_id":"cjxk6agt9000e5ss667sbyj5v","tag_id":"cjxk6agtp00195ss6q90a51aa","_id":"cjxk6agtv001m5ss67cxlrq4u"},{"post_id":"cjxk6agtc000k5ss67qjh1qdw","tag_id":"cjxk6agtd000m5ss6y1ootlff","_id":"cjxk6agtx001q5ss6golzgj2f"},{"post_id":"cjxk6agtf000r5ss6fzu3y31t","tag_id":"cjxk6agtw001p5ss6smejkge9","_id":"cjxk6agu0001y5ss6egpm7vfd"},{"post_id":"cjxk6agth000w5ss6ikx5nteq","tag_id":"cjxk6agtz001v5ss662qa5ocm","_id":"cjxk6agu200235ss6920xpkhu"},{"post_id":"cjxk6agti000y5ss6lel8woan","tag_id":"cjxk6agu200215ss6v2cj5rt7","_id":"cjxk6agu300275ss609hjnm35"},{"post_id":"cjxk6agtl00115ss6pxo9pj6x","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agu5002g5ss6yfkn1v6f"},{"post_id":"cjxk6agtl00115ss6pxo9pj6x","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agu5002h5ss60q2smo2q"},{"post_id":"cjxk6agtm00125ss6t9vczm27","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agu6002k5ss61e39r1sk"},{"post_id":"cjxk6agtm00125ss6t9vczm27","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agu6002l5ss6tj0tz7zl"},{"post_id":"cjxk6agtn00155ss6vejn9ybq","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agu7002o5ss6hrudi0ur"},{"post_id":"cjxk6agtn00155ss6vejn9ybq","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agu8002p5ss6jnu5wmb1"},{"post_id":"cjxk6agto00175ss6nzse4zno","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agua002s5ss6z71tolka"},{"post_id":"cjxk6agto00175ss6nzse4zno","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agub002t5ss6u4a12bxl"},{"post_id":"cjxk6agtp001a5ss6nwud6uy1","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agud002w5ss6p1fvu2f3"},{"post_id":"cjxk6agtp001a5ss6nwud6uy1","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agud002x5ss6l4au8o1p"},{"post_id":"cjxk6agtq001d5ss63fjme443","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6ague00305ss6pw95g4mv"},{"post_id":"cjxk6agtq001d5ss63fjme443","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6ague00315ss6jaf3idl9"},{"post_id":"cjxk6agtr001f5ss669ffic4w","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6aguf00345ss6ntiov5dh"},{"post_id":"cjxk6agtr001f5ss669ffic4w","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6aguf00355ss61364uqps"},{"post_id":"cjxk6agtu001k5ss6vjfokd9g","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6aguf00385ss6b991t20n"},{"post_id":"cjxk6agtu001k5ss6vjfokd9g","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6aguf00395ss6l6ttlpk5"},{"post_id":"cjxk6agtv001n5ss66933n0ay","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agug003c5ss6olqmyj2m"},{"post_id":"cjxk6agtv001n5ss66933n0ay","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agug003d5ss6capilimb"},{"post_id":"cjxk6agtx001r5ss60bbf480g","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6aguh003g5ss6iskoa36a"},{"post_id":"cjxk6agtx001r5ss60bbf480g","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6aguh003h5ss635yq69fr"},{"post_id":"cjxk6agtz001t5ss610093dzw","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6agui003k5ss6jqnx4ih0"},{"post_id":"cjxk6agtz001t5ss610093dzw","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6agui003l5ss6j6dhgu2l"},{"post_id":"cjxk6agu0001w5ss69h6nrce9","tag_id":"cjxk6agu3002a5ss6bbd5omvm","_id":"cjxk6aguj003o5ss6x8gofvz4"},{"post_id":"cjxk6agu0001w5ss69h6nrce9","tag_id":"cjxk6agu4002d5ss62g2wzy4n","_id":"cjxk6aguj003p5ss6r0zicrl1"},{"post_id":"cjxk6agu1001z5ss6fkdqp7h6","tag_id":"cjxk6agu200215ss6v2cj5rt7","_id":"cjxk6aguj003r5ss6horpd3nc"},{"post_id":"cjxk6agu1001z5ss6fkdqp7h6","tag_id":"cjxk6aguj003q5ss6re9fnyt8","_id":"cjxk6aguj003s5ss6djar4kue"},{"post_id":"cjxk6agtd000n5ss6yz8i6cjq","tag_id":"cjxk6agtd000m5ss6y1ootlff","_id":"cjxk6id4h000b0cs6kz952apa"},{"post_id":"cjxk6agtj000z5ss69k7qrgs2","tag_id":"cjxk6agu300255ss6s8rsyb1l","_id":"cjxk6kgg700023ws64f44c5p1"},{"post_id":"cjxk6agtj000z5ss69k7qrgs2","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6kgg700033ws6hto51yzh"},{"post_id":"cjxk6agtj000z5ss69k7qrgs2","tag_id":"cjxk6agtg000s5ss6is9x0qp7","_id":"cjxk6kgg700053ws6va1mnnmz"},{"post_id":"cjxk6agtg000u5ss665lp7b4y","tag_id":"cjxk6kgfv00003ws6kh9e0aj6","_id":"cjxk6kgg700063ws6sb00wvo7"},{"post_id":"cjxk6agtg000u5ss665lp7b4y","tag_id":"cjxk6agt7000b5ss6spj02vu2","_id":"cjxk6kgg700073ws60syyomxs"}],"Tag":[{"name":"tool","_id":"cjxk6agt200075ss683gwpqte"},{"name":"nginx","_id":"cjxk6agt7000b5ss6spj02vu2"},{"name":"https","_id":"cjxk6agt9000f5ss6hi7c5wqj"},{"name":"ssl","_id":"cjxk6agtb000i5ss6zjtrnjve"},{"name":"php","_id":"cjxk6agtd000m5ss6y1ootlff"},{"name":"php-fpm","_id":"cjxk6agtg000s5ss6is9x0qp7"},{"name":"apache","_id":"cjxk6agti000x5ss6tsfabaac"},{"name":"docker","_id":"cjxk6agtm00135ss6dyadrgo2"},{"name":"mysql","_id":"cjxk6agtp00195ss6q90a51aa"},{"name":"python","_id":"cjxk6agtw001p5ss6smejkge9"},{"name":"swoole","_id":"cjxk6agtz001v5ss662qa5ocm"},{"name":"vscode","_id":"cjxk6agu200215ss6v2cj5rt7"},{"name":"wsl","_id":"cjxk6agu300255ss6s8rsyb1l"},{"name":"数据结构","_id":"cjxk6agu3002a5ss6bbd5omvm"},{"name":"算法","_id":"cjxk6agu4002d5ss62g2wzy4n"},{"name":"golang","_id":"cjxk6aguj003q5ss6re9fnyt8"},{"name":"node","_id":"cjxk6kgfv00003ws6kh9e0aj6"}]}}