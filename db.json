{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/cover.jpg","path":"images/cover.jpg","modified":0,"renderable":0},{"_id":"themes/indigoplus/source/img/arrow-right.png","path":"img/arrow-right.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/fong.jpg","path":"img/fong.jpg","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/prism-vim.js","path":"js/prism-vim.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/back_blue.png","path":"img/back_blue.png","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/bayern.ico","path":"img/bayern.ico","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-atom-dark.css","path":"css/prism/prism-atom-dark.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-default.css","path":"css/prism/prism-default.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-solarized-light.css","path":"css/prism/prism-solarized-light.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-coy.css","path":"css/prism/prism-coy.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-okaidia.css","path":"css/prism/prism-okaidia.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/prism/prism-tomorrow-night.css","path":"css/prism/prism-tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/js/Valine.min.js.map","path":"js/Valine.min.js.map","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"98df3e612872f3b923b9fa34fde364f369e4feb4","modified":1561961197240},{"_id":"source/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1561961197240},{"_id":"themes/indigoplus/LICENSE","hash":"9dd0f70bc72c9d575447655526aded395bb93754","modified":1561961658901},{"_id":"themes/indigoplus/README.md","hash":"f7f2c77722635cd660d5286db5dca94636366413","modified":1561961658901},{"_id":"themes/indigoplus/_config.yml","hash":"dcfad668a829b2859dc220bc0a9904cc4b367984","modified":1573177264018},{"_id":"themes/indigoplus/package.json","hash":"3ad9b9ccb1ddaad3136f179a7ebff7d7b1c193f7","modified":1561961658914},{"_id":"source/about/index.md","hash":"e082f20a77f5bc9044edadbdfeba67b1f0fca775","modified":1562138502226},{"_id":"source/categories/index.md","hash":"f35f6c675475950435c1f599493624999d6d3f56","modified":1561972777294},{"_id":"source/_posts/AMDcpu安装ubuntu-deepin.md","hash":"9d3278dfe68aa5a354cf0d9054dd1c85d9542f8d","modified":1573524315264},{"_id":"source/_posts/ARTS第0周.md","hash":"0778ea18baa65ccb06f348555ed0b318dc9c7579","modified":1573524315266},{"_id":"source/_posts/ARTS第1周.md","hash":"16b0051c50c64a699c472922c9b381c836997c80","modified":1573524315239},{"_id":"source/_posts/ARTS第2周.md","hash":"130b0ae9a3f513c248c1145558a78e0b49586f3d","modified":1573524315243},{"_id":"source/_posts/PHP7新特性.md","hash":"fc2bef7fe4525fa06aeff44e74502ae059565047","modified":1573524315279},{"_id":"source/_posts/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","hash":"ee72f288fd83c30e4a102bc1982f880f02868e20","modified":1573524315280},{"_id":"source/_posts/PHP和Go通过jsonrpc通信.md","hash":"a0c60392b1dbbbe8465513b01bb8b019b37d4364","modified":1567818690603},{"_id":"source/_posts/PHP运行模式.md","hash":"419a355cb7dbe3b147c8dc28e10851775b30dab7","modified":1573524315309},{"_id":"source/_posts/docker-mysql主从配置.md","hash":"ce737c15a17953da192da74dfb911819b0e2773b","modified":1573524315268},{"_id":"source/_posts/git入门.md","hash":"44e5eeb7e4ac5050f57b1b77d27a643ad3c64af5","modified":1573524315244},{"_id":"source/_posts/golang封装日志.md","hash":"be79d9bd272f66388729faf83f8b9ec1a286ee44","modified":1573524315244},{"_id":"source/_posts/golang无法安装golang-org安装包的问题.md","hash":"ecbd0053e97e58d075753643aba3ec2d94e87d77","modified":1573524315253},{"_id":"source/_posts/hello-world.md","hash":"25a45bc00d46cbb3ee8fb39589b3915d2e69914e","modified":1564627429442},{"_id":"source/_posts/mysql优化解决方案.md","hash":"ea43d6985d55687cfc2dba863395f00bf3db77c5","modified":1573524315266},{"_id":"source/_posts/mysql架构类问题之MGR架构.md","hash":"29a3847731789ba877fac57e0cbf2b2e528ea21d","modified":1573783173644},{"_id":"source/_posts/mysql架构类问题之MHA架构.md","hash":"e9c21ba27b7973b0a541c7a61bcd733bc4c09771","modified":1573695125534},{"_id":"source/_posts/mysql架构类问题之MMM架构.md","hash":"295b4a9b31a6916ec66c2423e115d5417c72aaf5","modified":1573695119285},{"_id":"source/_posts/mysql索引最左原则问题.md","hash":"9be8e0c8fa3e562ca40187279d68532d27cfd1d1","modified":1573524315270},{"_id":"source/_posts/mysql详解（一）字段类型.md","hash":"43da0aec37853c519d3f0ce3423670f3ae186bbb","modified":1573524315273},{"_id":"source/_posts/mysql详解（三）事务.md","hash":"b4914435efb975e247915a06206110bf70200277","modified":1573803137799},{"_id":"source/_posts/mysql详解（二）存储引擎.md","hash":"8d64e8fda29dd2ac372c1dbcc828873311fdc61b","modified":1573695195435},{"_id":"source/_posts/mysql详解（五）索引.md","hash":"b76a2a8cfa519264c964d6dc862545d1fed53cb9","modified":1573695185385},{"_id":"source/_posts/mysql详解（四）执行计划.md","hash":"255b16f27f14f60d4c1ce6fee1272445c2a24c74","modified":1573695177465},{"_id":"source/_posts/mysql面试（一）版本类问题.md","hash":"7178c55ce886143c3ae72a3bd5b2fddfda2be363","modified":1573542833930},{"_id":"source/_posts/mysql面试（七）备份恢复类问题.md","hash":"dfd048614fdd99657e85c74616e500cea9b981d4","modified":1573525590938},{"_id":"source/_posts/mysql面试（三）服务器配置类问题.md","hash":"2a8e01c2cbb2fd4d64e1a96e205e05bd29d3aa3d","modified":1573525960708},{"_id":"source/_posts/mysql面试（九）异常处理问题.md","hash":"7f8f66533f1c45982dce9de6d22c1ace72425e1a","modified":1573695112587},{"_id":"source/_posts/mysql面试（二）用户管理类问题.md","hash":"7ac94f5b1aced971b2727c042f557a62849503f3","modified":1573525872467},{"_id":"source/_posts/mysql面试（五）存储引擎类问题.md","hash":"6715b36ab7cd484432634801a347143e50faff5c","modified":1573524315277},{"_id":"source/_posts/mysql面试（八）管理及监控类问题.md","hash":"3c4b3faf504614e246968b7fa3982058a9613b25","modified":1573525636734},{"_id":"source/_posts/mysql面试（六）MySQL架构类问题.md","hash":"c5be0a3f06717183e908f45ce29bee42201bb7c0","modified":1573525392384},{"_id":"source/_posts/mysql面试（四）日志类问题.md","hash":"675a6abbe2f748903c16048d6e980fc08c6c743b","modified":1573524315279},{"_id":"source/_posts/nginx负载均衡模式.md","hash":"e76dd249f38a568e48a4366ca04deb907deeb0a3","modified":1573524315304},{"_id":"source/_posts/nginx配置https出现no ssl_certificate.md","hash":"bc65dde2823b3e64843c4619b65c43d04fc03b71","modified":1573524315279},{"_id":"source/_posts/nginx配置socket.io负载均衡.md","hash":"0427d46f0eece7d857f225a043ef5ac874a1f829","modified":1573524315304},{"_id":"source/_posts/nginx配置文件.md","hash":"dc0957bd818fb708d3f92d100728aaaf122e5b41","modified":1573524315304},{"_id":"source/_posts/python在类中实现swith功能.md","hash":"efdfc826a05871dafbf85806933802e42d85aaeb","modified":1573524315282},{"_id":"source/_posts/redis详解（一）特性.md","hash":"79832153909e36aeb95b291366f4d73c2a4001ec","modified":1573721739454},{"_id":"source/_posts/redis详解（七）redis-cluster.md","hash":"6bfef5f3bae2b69961b49461ab0f31b93e2cd99f","modified":1573542122713},{"_id":"source/_posts/redis详解（三）其他功能.md","hash":"27a43dcfc9d9d91a9f85f38820d79534354f85e8","modified":1573875119715},{"_id":"source/_posts/redis详解（九）云平台CacheCloud.md","hash":"a5ef6ba9f959567f69b588ba0967b72d84d23e73","modified":1573542129075},{"_id":"source/_posts/redis详解（二）API.md","hash":"b24d055bd4e0770315b08e5f2d3fd5c7814ef08f","modified":1573797712595},{"_id":"source/_posts/redis详解（五）主从复制.md","hash":"760c1d937f9fef6ee86c964bbdd03a662f0d5356","modified":1573889839253},{"_id":"source/_posts/redis详解（八）缓存设计和优化.md","hash":"4bfb5f957bdc8503187c06b71da6a3475fdf514d","modified":1573542134577},{"_id":"source/_posts/redis详解（六）redis-sentinel.md","hash":"154f69e6d58b08cbd970a71112ae8c3fbbc7f6eb","modified":1573542125922},{"_id":"source/_posts/redis详解（十一）开发规范.md","hash":"b326e8118604b95fc81c75dccd443d66b74a99e7","modified":1573542104106},{"_id":"source/_posts/redis详解（十三）开发运维问题.md","hash":"7affebcb180ce477d4c7e2f5e96dc66eb80c4b80","modified":1573542107339},{"_id":"source/_posts/redis详解（十二）内存管理.md","hash":"ab8a796b401a5236c344bfb8f184033e8b8c9f28","modified":1573542110801},{"_id":"source/_posts/redis详解（十）布隆过滤器.md","hash":"e952972d97eb2fca89fd1fe29d1710cfa285c521","modified":1573542116664},{"_id":"source/_posts/redis详解（四）持久化.md","hash":"ee5c90ef3928815e433931db5e5fd10b6e41f6c5","modified":1573888924904},{"_id":"source/_posts/swoole异步task.md","hash":"9e930dcbbcffa77234ab8ada02a8fc64cf0e28c0","modified":1573524315306},{"_id":"source/_posts/vscode快捷键.md","hash":"546dfb8475b1e8b95a1dbca3198c237ad8ae1b37","modified":1573524315306},{"_id":"source/_posts/wsl搭建php环境请求超时的问题解决方案.md","hash":"a8a59c8d27fb8e79a712b966ff036119163e3b06","modified":1573524315306},{"_id":"source/_posts/《大话数据结构》读后总结（一）.md","hash":"940ee6c4000e4bcdbb8e5de85348954a17cb8d47","modified":1573524315306},{"_id":"source/_posts/《大话数据结构》读后总结（七）.md","hash":"5e0defa6096475d768436b671d9033790b0ce552","modified":1573524315309},{"_id":"source/_posts/《大话数据结构》读后总结（三）.md","hash":"371727d0647d847ede7e1f9c83252aace4ffd924","modified":1573524315308},{"_id":"source/_posts/《大话数据结构》读后总结（九）.md","hash":"3c20baad80387ba96708a41181df5d0793f30461","modified":1573524315309},{"_id":"source/_posts/《大话数据结构》读后总结（二）.md","hash":"27cb5a180fb3cff8dbf784c24d9ce346dabcef26","modified":1573524315309},{"_id":"source/_posts/《大话数据结构》读后总结（五）.md","hash":"7b7ff0531b62d828940c4a198866668e5d5669fc","modified":1573524315311},{"_id":"source/_posts/《大话数据结构》读后总结（八）.md","hash":"25a3df03e9f053f30b8609aeaf2843631dee1dd9","modified":1573524315341},{"_id":"source/_posts/《大话数据结构》读后总结（六）.md","hash":"4d33f1429e6dbb91f4ec64e91469e972302fb57c","modified":1573524315313},{"_id":"source/_posts/《大话数据结构》读后总结（十一）.md","hash":"84022945dedc4807ab3c6c270891614aee00dbab","modified":1573524315368},{"_id":"source/_posts/《大话数据结构》读后总结（十）.md","hash":"f423bd182dbfe48fc8a8228830d98c9b092f183e","modified":1573524315320},{"_id":"source/_posts/《大话数据结构》读后总结（四）.md","hash":"c85942f8e8b13e941b4fc8182bf17be8fc2b11ee","modified":1573524315360},{"_id":"source/_posts/操作系统之基础篇.md","hash":"f2048fad773e52e65331e24f3dcdefad184bff29","modified":1573541031889},{"_id":"source/_posts/操作系统之提升篇.md","hash":"a8d2bf8e5bc29abcca0ae892c7814be6c31d513a","modified":1573541044260},{"_id":"source/_posts/数据结构之AVL树.md","hash":"f8e9aab60cacfb2635acd68d2ce6dc0e60c4eec7","modified":1573524315311},{"_id":"source/_posts/数据结构之二分搜索树.md","hash":"723be8b0d644e2fcbb0af323bfbe135ad3778d0f","modified":1573524315317},{"_id":"source/_posts/数据结构之哈希表.md","hash":"45c17196b3776461767774adf0c3325fe026e1a5","modified":1573524315315},{"_id":"source/_posts/数据结构之堆最大堆.md","hash":"70760fd274f4499e7d258aebc1b3765043b7ea5a","modified":1573524315317},{"_id":"source/_posts/数据结构之字典树.md","hash":"f0f1f1e9b85c8245b1448ea6f4d319578383f813","modified":1573524315315},{"_id":"source/_posts/数据结构之并查集.md","hash":"d50365b73d41e229a499c983f30df5faf4bcbff3","modified":1573524315320},{"_id":"source/_posts/数据结构之数组.md","hash":"d3dbbfa359ce58c7e15074714fdbac16b119be86","modified":1573524315362},{"_id":"source/_posts/数据结构之映射.md","hash":"d58e872a4d677847ceb4cab1da15893cf5051a3e","modified":1573524315342},{"_id":"source/_posts/数据结构之映射AVL树映射.md","hash":"e22f1d7c3413fbd8a8834a4db8d438f62ec72012","modified":1573524315321},{"_id":"source/_posts/数据结构之映射二分搜索树映射.md","hash":"482e46a1c1c8bc6dfda6e7b0e85427afb0ba781d","modified":1573524315320},{"_id":"source/_posts/数据结构之映射链表映射.md","hash":"98886017a580c4680ebec95540096cf18f1ffad0","modified":1573524315368},{"_id":"source/_posts/数据结构之栈.md","hash":"01f3332abce8ec5a48198cce301860ae2be506f2","modified":1573524315367},{"_id":"source/_posts/数据结构之栈数组栈.md","hash":"2a35e9e6b15306cd34dc740a561868f2f64738e4","modified":1573524315363},{"_id":"source/_posts/数据结构之栈链表栈.md","hash":"ef624218cf309c58b3a78c53d0414708b7c76682","modified":1573524315389},{"_id":"source/_posts/数据结构之红黑树.md","hash":"a3383aeb3406c47d8a29686eb249c6c8ab4a3c17","modified":1573524315344},{"_id":"source/_posts/数据结构之线段树.md","hash":"916cf0ea34ff57c66db55a1f4a5422ea5ce649e4","modified":1573524315346},{"_id":"source/_posts/数据结构之链表.md","hash":"53a82b3bab8fdb01405e880e9e1b69e008b1ca56","modified":1573524315395},{"_id":"source/_posts/数据结构之队列.md","hash":"605f3ba04777a8260b499cfc199be1b0515e23ae","modified":1573524315344},{"_id":"source/_posts/数据结构之队列优先队列.md","hash":"2885546e09f933ea1e65e30915d4330123c12c47","modified":1573524315346},{"_id":"source/_posts/数据结构之队列循环队列.md","hash":"b1e933460a01b9616d77745f4f07db7c6116dc70","modified":1573524315362},{"_id":"source/_posts/数据结构之队列数组队列.md","hash":"6b05d8603b4420b291e330d7a44bd595dd2962ca","modified":1573524315391},{"_id":"source/_posts/数据结构之队列链表队列.md","hash":"7432492cefcff33ca53e4b607879246e0f5b0349","modified":1573524315399},{"_id":"source/_posts/数据结构之集合.md","hash":"aaf74138cffee5c2da418832629c42853cd6712c","modified":1573524315363},{"_id":"source/_posts/数据结构之集合AVL树集合.md","hash":"283a639e9673f035e6b95b324000c77d65cce995","modified":1573524315391},{"_id":"source/_posts/数据结构之集合二分搜索树集合.md","hash":"dd4a45f08e88e68631b63b5527d1a2172997cd85","modified":1573524315365},{"_id":"source/_posts/数据结构之集合链表集合.md","hash":"4d1c20cbf08aaaa90595114d8bfd77c322ed1ffc","modified":1573524315397},{"_id":"source/_posts/算法之冒泡排序.md","hash":"e8d26a50d6bcb4d15711c86630e58def468a7940","modified":1573524315367},{"_id":"source/_posts/算法之快速排序.md","hash":"a9fbdac27be5b37545ff7c389bd8fb9c28a7812c","modified":1573524315368},{"_id":"source/_posts/算法之插入排序.md","hash":"ecf2bba5d6f8635d95f2b82aef7bf26a6c2034dd","modified":1573524315391},{"_id":"source/_posts/算法之选择排序.md","hash":"2c0c7aa68907c09cff52bd38e163b3544e03831d","modified":1573524315391},{"_id":"source/_posts/编程书籍推荐.md","hash":"dd421552110fc1be5719f51c4e999f9a43a8df5d","modified":1573540674473},{"_id":"source/_posts/计算机组成原理之概述篇.md","hash":"fac03d7fa0e7cd6490d8396be372791f3cad2f5d","modified":1573541119568},{"_id":"source/_posts/计算机组成原理之组成篇.md","hash":"4c7e6caa5abfe547c94e546742ffb77ed4ae55fe","modified":1573541107493},{"_id":"source/_posts/计算机组成原理之计算篇.md","hash":"88b06ef594131fa2362419a25c253341c738ecea","modified":1573541099635},{"_id":"source/_posts/计算机网络之传输层篇.md","hash":"57753a6337dcd500a696a985cad29877c48db58a","modified":1573541056279},{"_id":"source/_posts/计算机网络之应用层篇.md","hash":"19ad2b5e8acde1558414e174a00127460cce783a","modified":1573541083673},{"_id":"source/_posts/计算机网络之概述计算机分类.md","hash":"234995c25097a98da97e34fcc5ee72982fa5db66","modified":1573550437369},{"_id":"source/_posts/计算机网络之概述计算机发展简史.md","hash":"96903a37c6047768bad36d32313c26c519414428","modified":1573548956936},{"_id":"source/_posts/计算机网络之概述计算机层次与编程语言.md","hash":"5efcf1cd5b190bd16096b25c866d244154db2d8d","modified":1573551067535},{"_id":"source/_posts/计算机网络之网络层篇.md","hash":"6073173b5d61d124aa58dbb1091aba97b109b3f8","modified":1573541076983},{"_id":"source/tags/index.md","hash":"431c6bf762a3627ccb3357c532348ef32e1f3467","modified":1561961197248},{"_id":"source/timeline/index.md","hash":"a38bdd68bfc9d88d5a2e6c2cb9b082a03fc47a68","modified":1573695064885},{"_id":"themes/indigoplus/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1561961658902},{"_id":"themes/indigoplus/languages/zh-CN.yml","hash":"6806e4c305facf19cbe4e37ccc5d6b00cb56e199","modified":1561961658903},{"_id":"themes/indigoplus/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1561961658903},{"_id":"themes/indigoplus/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1561961658911},{"_id":"themes/indigoplus/layout/book.ejs","hash":"8155ceb559d8e1dcf877eca386f4eb041c62ceb8","modified":1561961658912},{"_id":"themes/indigoplus/layout/categories.ejs","hash":"77c8c5c4a97c9b6a83297e7632a515d432964b1e","modified":1561961658912},{"_id":"themes/indigoplus/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1561961658912},{"_id":"themes/indigoplus/layout/game.ejs","hash":"3d294e92cc12f425eb135c659502372d56a82e3f","modified":1561961658912},{"_id":"themes/indigoplus/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1561961658913},{"_id":"themes/indigoplus/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1561961658913},{"_id":"themes/indigoplus/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1561961658913},{"_id":"themes/indigoplus/layout/movie.ejs","hash":"530f94b8ebfdb8b279804ac7a38a8e63b2a23a46","modified":1561961658913},{"_id":"themes/indigoplus/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1561961658913},{"_id":"themes/indigoplus/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1561961658913},{"_id":"themes/indigoplus/layout/tags.ejs","hash":"f37c84501ef57a489ba4c85ae4e89ae0a6eac77b","modified":1561961658914},{"_id":"themes/indigoplus/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1561961658914},{"_id":"source/images/cover.jpg","hash":"2fad1d5eb1c80645aec5060e9b4d76815f74ca0d","modified":1562149499886},{"_id":"themes/indigoplus/layout/_partial/after-footer.ejs","hash":"6ada6d56ef2e885deaf88709c586a8a128bd7659","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/head.ejs","hash":"c5f0de91525704771b88d84dd42898ee85ebd36a","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/header.ejs","hash":"ff284c506427ab4a45f84664a20a4cfdf8d69f9f","modified":1573896149503},{"_id":"themes/indigoplus/layout/_partial/footer.ejs","hash":"70b0b32f4591d1a08c7f434eeb1649049398815a","modified":1561961658903},{"_id":"themes/indigoplus/layout/_partial/index-item.ejs","hash":"91bbe5dd87981a5dd7635f3e9791f05f4d62abcc","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1561961658904},{"_id":"themes/indigoplus/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/menu.ejs","hash":"461a6346294a85191065e86659d33cec120b15d0","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/tags-bar.ejs","hash":"b203f8996c779f81cfcbc8403493a5c2885ceb7e","modified":1573896282281},{"_id":"themes/indigoplus/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1561961658911},{"_id":"themes/indigoplus/layout/_partial/post.ejs","hash":"1c166aff499b7525edd2c2ad280e87f36774165a","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/script.ejs","hash":"dafd5bc19f54a8a54481d5b81ebadedbd3d68b45","modified":1561961658911},{"_id":"themes/indigoplus/source/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1561961658944},{"_id":"themes/indigoplus/source/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1561961658944},{"_id":"themes/indigoplus/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1561961658945},{"_id":"themes/indigoplus/source/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1561961197287},{"_id":"themes/indigoplus/source/css/style.less","hash":"e90aec92915a7268f540a9ca45421f891b08d2a8","modified":1561961658943},{"_id":"themes/indigoplus/source/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1561961658945},{"_id":"themes/indigoplus/source/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1561961658947},{"_id":"themes/indigoplus/source/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1561961658946},{"_id":"themes/indigoplus/source/js/Valine.min.js","hash":"9c5b9f907108ce5ee6f3268d4932a846a2bd9110","modified":1561961658948},{"_id":"themes/indigoplus/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1561961658946},{"_id":"themes/indigoplus/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1561961658947},{"_id":"themes/indigoplus/source/js/main.js","hash":"a537f7b76e163611d782119ef09c8383593f108c","modified":1561961658949},{"_id":"themes/indigoplus/source/js/search.js","hash":"a4d6c9c566ec1ca71ddacfd14c58f7ddaf9db24d","modified":1561961658951},{"_id":"themes/indigoplus/source/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1561961658950},{"_id":"themes/indigoplus/source/js/main.min.js","hash":"8d640ab1b72af2ea63fd77366f2a34b2a0c6e13c","modified":1561961658950},{"_id":"themes/indigoplus/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1561961658951},{"_id":"themes/indigoplus/source/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1561961658944},{"_id":"themes/indigoplus/source/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1561961658945},{"_id":"themes/indigoplus/source/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1561961658946},{"_id":"themes/indigoplus/source/js/prism.js","hash":"86045ad1c86a994d5c56d16239da4e8c6b8078e6","modified":1561961658951},{"_id":"themes/indigoplus/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/changyan.ejs","hash":"ac9cd12965af6c9cdb3622f90e688626febf72ad","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1561961658905},{"_id":"themes/indigoplus/layout/_partial/plugins/gitalk.ejs","hash":"204e592f51b46f14e2a1ae5683ef6813271f2ca7","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/hyper-comments.ejs","hash":"d0e6f1d713e7a1c0cc5fe25f3e574a4b791f938a","modified":1561961658906},{"_id":"themes/indigoplus/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/mathjax.ejs","hash":"55565988a7a6c98046ffb2c56b7d4f977e7c3bfc","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/comment.ejs","hash":"a0d8ae64a1ada7f0ea576afa3981c70e81399802","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/plugins/valine.ejs","hash":"d1980ae291169c81402927cdcdc42d1e7eb14c1e","modified":1561961658907},{"_id":"themes/indigoplus/layout/_partial/post/copyright.ejs","hash":"dd1dcc7776021ab3d68065f8532efead4c2b8051","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1561961658908},{"_id":"themes/indigoplus/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/pin.ejs","hash":"e11b2ee0819ba25223bbd935bec7fe732582dfa7","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/reward.ejs","hash":"b6aadc4819bd692b9091097b441742828a54dd0f","modified":1561961658909},{"_id":"themes/indigoplus/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/toc.ejs","hash":"d534b888d24df7703c632539d4bdd638fa764e98","modified":1561961658910},{"_id":"themes/indigoplus/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1561961658911},{"_id":"themes/indigoplus/source/css/_partial/gotop.less","hash":"d1a9e26e431b8fe20d5ce73b7add3e00d8db3a8a","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1561961658915},{"_id":"themes/indigoplus/source/css/_partial/article.less","hash":"05fd401c4adf19632fdabb5da4cbdfd0eb672b64","modified":1561961658915},{"_id":"themes/indigoplus/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/highlight.less","hash":"ba33616ac592b19255f1f4eb5f22a604e51cd302","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1573895852229},{"_id":"themes/indigoplus/source/css/_partial/layout.less","hash":"0dd8bb9f029e260f599859e902e59595170ebe2c","modified":1561961658916},{"_id":"themes/indigoplus/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1561961658917},{"_id":"themes/indigoplus/source/css/_partial/reward.less","hash":"c9857599fcd8f2604e78e316bd8ffeac3ed48172","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1561961658918},{"_id":"themes/indigoplus/source/css/_partial/tags.less","hash":"8906bea9c47d7c692b058e5bb17135b7e8e98c73","modified":1573896513001},{"_id":"themes/indigoplus/source/css/_partial/variable.less","hash":"85c2b3191ad552ae018123b10ed96aabcda9baf8","modified":1561961658919},{"_id":"themes/indigoplus/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1561961658919},{"_id":"themes/indigoplus/source/css/prism/prism-atom-dark.css","hash":"eb3028ab798e86e0fc74df0f08861718a892ad1d","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-default.css","hash":"8d928a084679be8fd43437394b2b64ed16788e5a","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-solarized-light.css","hash":"0dcef4ec85a626bfae208bec651891cb7d3479b0","modified":1561961658943},{"_id":"themes/indigoplus/source/css/prism/prism-coy.css","hash":"0abf3c5b72b3a99839cb5ce1a6979d387c4db53e","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-okaidia.css","hash":"e7ed4638f2d9b1066a449157736ae6b87b4e9de3","modified":1561961658942},{"_id":"themes/indigoplus/source/css/prism/prism-tomorrow-night.css","hash":"69a8fcbe45f04ae46193c7b6b886a96d48ca1aec","modified":1561961658943},{"_id":"themes/indigoplus/source/css/_plugin/valine.less","hash":"23b633c252b87cd65c17cd901269b0c332eac77a","modified":1561961658919},{"_id":"themes/indigoplus/source/css/_partial/fontawesome.less","hash":"a3ecbd6ccf5b56ac39df710c34a149b82989a498","modified":1561961658916},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1561961658930},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1561961658932},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1561961658932},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1561961658934},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1561961658935},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1561961658937},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1561961658937},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1561961658939},{"_id":"themes/indigoplus/source/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1561961658949},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561961658929},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561961658929},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1561961658931},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1561961658934},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1561961658941},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1561961658936},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1561961658938},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1561961658940},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1561961658939},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1561961658941},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1561961658921},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561961658923},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1561961658928},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1561961658931},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1561961658933},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1561961658938},{"_id":"themes/indigoplus/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1561961658936},{"_id":"themes/indigoplus/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1561961658926},{"_id":"public/sitemap.xml","hash":"799d7fbe19c225b3df48d33053852d456c430e7f","modified":1573895497845},{"_id":"public/baidusitemap.xml","hash":"5445101a29512d4abbd691046d689f2f72fed645","modified":1573895497846},{"_id":"public/content.json","hash":"17f24ed479a137c5203d0339af07d5f4c07a950b","modified":1573895498594},{"_id":"public/404.html","hash":"6e7716b916847fb840d06485666c9a60ebee17c7","modified":1573896160746},{"_id":"public/about/index.html","hash":"ab240aea955dd3d4627f5d63c1b27707455f530e","modified":1573896160746},{"_id":"public/timeline/index.html","hash":"29093117a570477ec5f4c19c06bbd444e551da16","modified":1573896160746},{"_id":"public/archives/page/11/index.html","hash":"13c790237a1bea6371825ce0aed53e556ea50781","modified":1573896160746},{"_id":"public/archives/2016/page/2/index.html","hash":"7ed603fd18c9e47d4be28c7fd2692dd1ed9a8fb6","modified":1573896160746},{"_id":"public/archives/2016/01/page/2/index.html","hash":"b6346ea7c75eb7e4ad98491dba90ae49e6f4feb9","modified":1573896160746},{"_id":"public/archives/2016/11/index.html","hash":"56179fa5f49a7035b721a9034446565b7ea5e9ce","modified":1573896160746},{"_id":"public/archives/2018/page/2/index.html","hash":"7aaf23fba69d2cc34e9aa0ad60a0505ea6fb9bbb","modified":1573896160747},{"_id":"public/archives/2018/03/page/2/index.html","hash":"cb4b68b035049d2d3e1ca6cb7f4212e719e8e413","modified":1573896160747},{"_id":"public/archives/2019/01/index.html","hash":"027722ebcdccf07d296fce5886fbc1ff47aaa870","modified":1573896160747},{"_id":"public/archives/2019/page/9/index.html","hash":"ebc06ca15df8d6ea2f3ed943e145aa725140b902","modified":1573896160747},{"_id":"public/archives/2019/04/index.html","hash":"efed01c700de50e53c01593755c31fd440b55de2","modified":1573896160747},{"_id":"public/archives/2019/05/index.html","hash":"f8ea641b7d2f1e838635ab2fd992c0735178aeea","modified":1573896160747},{"_id":"public/archives/2019/06/page/3/index.html","hash":"a8c506e2734f31567d93f4b107540bf470a70d36","modified":1573896160747},{"_id":"public/categories/index.html","hash":"b35a7c08a6cbec1c49beab6e3a12528af07e8a2a","modified":1573896291831},{"_id":"public/tags/index.html","hash":"fd4f5d7bc4e73413efdd9d2c42694aa68a224d0d","modified":1573896291831},{"_id":"public/2019/11/07/mysql优化解决方案/index.html","hash":"11ba55a6439c88954f1f60c7bc7a6737a91ce7bc","modified":1573896160748},{"_id":"public/2019/09/20/mysql架构类问题之MMM架构/index.html","hash":"68ee4a4853c148741ba5ad0309082eb6e97dc601","modified":1573896160748},{"_id":"public/2019/09/21/mysql架构类问题之MHA架构/index.html","hash":"d7277d85b71f1e6c6ad02203cd6ef5e0eb3df3a4","modified":1573896160748},{"_id":"public/2019/09/22/mysql架构类问题之MGR架构/index.html","hash":"db25a9de3bf6d7b18d5cf5f0b337eceda11876e6","modified":1573896160748},{"_id":"public/2019/09/19/mysql面试（九）异常处理问题/index.html","hash":"e7bcdf2e30f88827f7a1f2769a6256b801db42c7","modified":1573896160748},{"_id":"public/2019/09/18/mysql面试（八）管理及监控类问题/index.html","hash":"f8bf51a7af0ae04deda43a9e48dda5760c37b577","modified":1573896160748},{"_id":"public/2019/09/18/mysql面试（七）备份恢复类问题/index.html","hash":"353ddc35c10a55f87680dba9daa200d4a87fe546","modified":1573896160749},{"_id":"public/2019/09/17/mysql面试（六）MySQL架构类问题/index.html","hash":"2d6588a109865680b9ef5ba172da4deb0ceadeb9","modified":1573896160749},{"_id":"public/2019/09/15/mysql面试（五）存储引擎类问题/index.html","hash":"28e67d0a393db34419b098ba36332a200d79f0eb","modified":1573896160749},{"_id":"public/2019/09/10/mysql面试（二）用户管理类问题/index.html","hash":"2756ba1007caca5da3d727381b4c4b6d39129078","modified":1573896160749},{"_id":"public/2019/09/14/mysql面试（四）日志类问题/index.html","hash":"82259f46fd8ea41dbee486190d678e6493467940","modified":1573896160749},{"_id":"public/2019/08/17/mysql详解（五）索引/index.html","hash":"8911249425540314205cba3241090ea295cc2227","modified":1573896160749},{"_id":"public/2019/09/02/mysql面试（一）版本类问题/index.html","hash":"250ef412f53498a75c4eef4b2a6b077d93831a27","modified":1573896160749},{"_id":"public/2019/09/12/mysql面试（三）服务器配置类问题/index.html","hash":"18f6073033f0fca187e6f3e3cc77eca9adb60c8f","modified":1573896160749},{"_id":"public/2019/08/16/mysql详解（四）执行计划/index.html","hash":"d133136c21277faf4f9a630fa92a1c7cf2ba39f2","modified":1573896160749},{"_id":"public/2019/08/12/mysql详解（三）事务/index.html","hash":"4225a0ecb95209aeb31c4ec62ae067c4fae7794c","modified":1573896160749},{"_id":"public/2019/08/11/mysql详解（二）存储引擎/index.html","hash":"923fb25f460cd2aa012dc59f72744f7a697f1ae1","modified":1573896160749},{"_id":"public/2019/07/03/golang封装日志/index.html","hash":"05be0d55507feeeb5592d462510b7b1d5dde4c3c","modified":1573896160749},{"_id":"public/2019/08/10/mysql详解（一）字段类型/index.html","hash":"ec0095736508e0953d528fc59359b9547e43ee0b","modified":1573896160749},{"_id":"public/2019/07/01/hello-world/index.html","hash":"b9db3bd246078b5516033a9310049d2579e6e482","modified":1573896160749},{"_id":"public/2019/08/01/PHP和Go通过jsonrpc通信/index.html","hash":"ef3e18dc8d38995a78bfbb929d1b76a0742af709","modified":1573896160749},{"_id":"public/2019/06/25/数据结构之红黑树/index.html","hash":"a2b6ba7b1ccb83256e5ca13f2fabd7c47945b9c6","modified":1573896160749},{"_id":"public/2019/06/24/数据结构之堆最大堆/index.html","hash":"2ac764bb04bee2017994daab8a779ec1d7a12aff","modified":1573896160749},{"_id":"public/2019/06/23/数据结构之AVL树/index.html","hash":"c0589fd57924e46b595aa25f930601dab05c94b0","modified":1573896160749},{"_id":"public/2019/06/21/数据结构之栈数组栈/index.html","hash":"715737c4f14fe543fb5ac373aa75a205d64e47ca","modified":1573896160749},{"_id":"public/2019/06/22/数据结构之字典树/index.html","hash":"52ba9d53eb35172a3530467c91e58a9b0a886d3b","modified":1573896160749},{"_id":"public/2019/06/20/数据结构之栈链表栈/index.html","hash":"32914b35cd9a6081eefd6bae78731b304147f25c","modified":1573896160749},{"_id":"public/2019/06/19/数据结构之栈/index.html","hash":"d82a5d3d9b0404f0d626de680cbdb001e8b85961","modified":1573896160749},{"_id":"public/2019/06/18/数据结构之映射AVL树映射/index.html","hash":"98ea460c79ecdae44aa627220fa9f94baab22353","modified":1573896160749},{"_id":"public/2019/06/17/数据结构之映射链表映射/index.html","hash":"7eb8c784cc0f87a6781e849ed35d2c771026a5d8","modified":1573896160749},{"_id":"public/2019/06/14/数据结构之线段树/index.html","hash":"18b792e32866e48e757f83bb41957bb83a2130d6","modified":1573896160750},{"_id":"public/2019/06/15/数据结构之映射/index.html","hash":"b81bf2797c9f4ff40190363106aea8316427efd9","modified":1573896160750},{"_id":"public/2019/06/16/数据结构之映射二分搜索树映射/index.html","hash":"846c773528e7080075410c20c6dee4974af4fbea","modified":1573896160750},{"_id":"public/2019/06/12/数据结构之哈希表/index.html","hash":"32982e1081b4f596e67c46fa9008ac003afc736e","modified":1573896160750},{"_id":"public/2019/06/13/数据结构之集合链表集合/index.html","hash":"b70b010e8bb8297782a91cabae8929c0e9fe5e50","modified":1573896160750},{"_id":"public/2019/06/10/数据结构之二分搜索树/index.html","hash":"47f493cca29e5765afa0d103e5a1dcb4bc1b2372","modified":1573896160750},{"_id":"public/2019/06/11/数据结构之集合二分搜索树集合/index.html","hash":"3b0f6bce3012c143eaa0d80de2d6d9bef978e558","modified":1573896160750},{"_id":"public/2019/06/09/数据结构之队列优先队列/index.html","hash":"cbe36f09a606ed492c4596a57cbca7669a384cad","modified":1573896160750},{"_id":"public/2019/06/08/数据结构之队列循环队列/index.html","hash":"2852bcf7c2949034315a647894157065f842ac1a","modified":1573896160750},{"_id":"public/2019/06/08/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied/index.html","hash":"3aeeab67b07c3b38c9ac843438d26235e921f35b","modified":1573896160750},{"_id":"public/2019/06/07/数据结构之队列数组队列/index.html","hash":"acf8ad99b3d52d7acba4d2b7cdfc68178ca8ed80","modified":1573896160750},{"_id":"public/2019/06/06/数据结构之集合AVL树集合/index.html","hash":"1ec7005feda057e35410eda24cecf5015258bb0c","modified":1573896160750},{"_id":"public/2019/06/06/数据结构之队列链表队列/index.html","hash":"3cfc52054235cea9f98d700a43a4eaf06bb5a43d","modified":1573896160750},{"_id":"public/2019/06/05/数据结构之队列/index.html","hash":"b99c22873e3d959d853e97f5cf7611dcdc8b32f6","modified":1573896160750},{"_id":"public/2019/06/04/数据结构之并查集/index.html","hash":"a8e120d3618c3bfc83aea94a18f4d48c1aedec0a","modified":1573896160750},{"_id":"public/2019/06/02/数据结构之链表/index.html","hash":"081f1fd2c21faa12f66f9e6bbfcd03b07803010d","modified":1573896160750},{"_id":"public/2019/06/03/数据结构之集合/index.html","hash":"7d83add2a2989670b9bdae72abe0efc42a17d2d8","modified":1573896160750},{"_id":"public/2019/05/09/算法之插入排序/index.html","hash":"0a7525e4ffe3ca262f59819c6f52f3aa4fa98a4a","modified":1573896160750},{"_id":"public/2019/06/01/数据结构之数组/index.html","hash":"c9bc298b6bc47a7b072b25e84105117b4ed0e7cc","modified":1573896160750},{"_id":"public/2019/05/07/nginx配置socket.io负载均衡/index.html","hash":"b5f274f72d3ad4cf2605d43031d779f0b5f6a14e","modified":1573896160750},{"_id":"public/2019/04/20/git入门/index.html","hash":"5820fdb1bf100c97eb72d65b6ba26d7ca8722f6a","modified":1573896160750},{"_id":"public/2019/05/07/mysql索引最左原则问题/index.html","hash":"f946267438699d3e6d3ad65912d97595cdb518fa","modified":1573896160750},{"_id":"public/2019/04/20/AMDcpu安装ubuntu-deepin/index.html","hash":"b30ae8bebcf85f65e9795401320f7f3f68634248","modified":1573896160750},{"_id":"public/2019/04/17/ARTS第2周/index.html","hash":"b5b0886de020a5757d28c88e4a074d6f4a0741a9","modified":1573896160750},{"_id":"public/2019/04/17/ARTS第0周/index.html","hash":"b76de66747429db950be69bf59ffbc2ff890c46d","modified":1573896160751},{"_id":"public/2019/04/09/算法之冒泡排序/index.html","hash":"d2f58f468831daa9ed991ce5e9686232ec14c928","modified":1573896160751},{"_id":"public/2019/04/03/vscode快捷键/index.html","hash":"faffc918f35ef63216ad53d052473f95f2d567ae","modified":1573896160751},{"_id":"public/2019/04/17/ARTS第1周/index.html","hash":"02531acc80df869d4fe6d9f4c788c593f3ef93af","modified":1573896160751},{"_id":"public/2019/04/03/nginx配置文件/index.html","hash":"155e9346d720e59c97fe03c23f1a82d9c89e87a7","modified":1573896160751},{"_id":"public/2019/03/29/PHP运行模式/index.html","hash":"275a8b8da5069ec13320b3d84236adf905a215fc","modified":1573896160751},{"_id":"public/2019/04/03/PHP7新特性/index.html","hash":"72380e73749df0ba42b14829938895a84614114e","modified":1573896160751},{"_id":"public/2019/03/29/nginx负载均衡模式/index.html","hash":"ebd4c31b177ed0ce6ac6655cac9a26e602c8c294","modified":1573896160751},{"_id":"public/2019/03/28/golang无法安装golang-org安装包的问题/index.html","hash":"0b70790a62032932139e919151675bc8148d76da","modified":1573896160751},{"_id":"public/2019/03/29/python在类中实现swith功能/index.html","hash":"c4a11361591cf94a5186de47f82600182efdb0b9","modified":1573896160751},{"_id":"public/2019/03/28/nginx配置https出现no ssl_certificate/index.html","hash":"d8e7d219382861148fe95992bad2e6445ec0c6f8","modified":1573896160751},{"_id":"public/2019/03/29/swoole异步task/index.html","hash":"f4869c207a3416aab1adc5b4e7a665f1a2c84342","modified":1573896160751},{"_id":"public/2019/03/28/wsl搭建php环境请求超时的问题解决方案/index.html","hash":"c3d252f1ab45ea8561505e5a9964a306be4cc47a","modified":1573896160751},{"_id":"public/2019/03/28/docker-mysql主从配置/index.html","hash":"71b33b0a8f092b2546f4ee652a91ed0726440e71","modified":1573896160751},{"_id":"public/2019/03/09/算法之快速排序/index.html","hash":"135685e283e6c8d132b05a76c15657aba382509c","modified":1573896160751},{"_id":"public/2019/02/25/《大话数据结构》读后总结（十一）/index.html","hash":"a30aaf246024da1d85f1e61a787c34037b9d0e87","modified":1573896160751},{"_id":"public/2019/02/15/《大话数据结构》读后总结（九）/index.html","hash":"3a0939913f6fffe03f5bab811c9d36d4b0ea69d4","modified":1573896160751},{"_id":"public/2019/02/20/《大话数据结构》读后总结（十）/index.html","hash":"681f1eadd0b3598f013988a37a0b4c38da73a157","modified":1573896160751},{"_id":"public/2019/02/13/《大话数据结构》读后总结（八）/index.html","hash":"cd0fe4ec060bfd11bcfe5d02af46ef5a699ea889","modified":1573896160751},{"_id":"public/2019/02/11/《大话数据结构》读后总结（七）/index.html","hash":"9c65a8caddfd3be4b8597d78f84ec86108bedfd1","modified":1573896160751},{"_id":"public/2019/02/07/《大话数据结构》读后总结（六）/index.html","hash":"26f1e5c25f78769ce592fb7ce340da7726ee14a4","modified":1573896160751},{"_id":"public/2019/02/05/《大话数据结构》读后总结（五）/index.html","hash":"1b76b029875f99c0fcd3c412614f56a3bf7b7ec1","modified":1573896160751},{"_id":"public/2019/01/30/《大话数据结构》读后总结（二）/index.html","hash":"e71d9bdfb33975e2a79431232ed7e555d6d49d91","modified":1573896160752},{"_id":"public/2019/01/29/《大话数据结构》读后总结（一）/index.html","hash":"3f6fbf89c01e8c4ad5cee44518bf50776ab6f3b1","modified":1573896160752},{"_id":"public/2019/02/04/《大话数据结构》读后总结（四）/index.html","hash":"ff3df86e87a885130942535480b5e1231846f14e","modified":1573896160751},{"_id":"public/2019/02/02/《大话数据结构》读后总结（三）/index.html","hash":"e744df9dc7cbce4c46b4a59430714029c020b829","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（二）API/index.html","hash":"a5dc90fe5b4eb5ec07d3fab0765bca6a18b9f183","modified":1573896160752},{"_id":"public/2019/01/09/算法之选择排序/index.html","hash":"c1cfab77300e4b726708ea4b2e17f219fce3dbba","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（十二）内存管理/index.html","hash":"6d798337a2fb950ccf3601f7df2b1186dc4a74fd","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（十）布隆过滤器/index.html","hash":"abbe4c29edf60d06c0123c25a2f808694ff84e84","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（十一）开发规范/index.html","hash":"9f742af187d6c7ecca9ed23cfcba61cc7f2f7576","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（十三）开发运维问题/index.html","hash":"e2b7e950fb1dbe08636f597f8a0d2f7f58c9d94c","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（六）redis-sentinel/index.html","hash":"ea5af18ad591f87318c150aeb88a6ce08ac922f5","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（八）缓存设计和优化/index.html","hash":"9179a592ceb6cd38d7b49777fe3b8418b79e2904","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（五）主从复制/index.html","hash":"82aca69c86a5ac8260124ea772864bdc708b3b2e","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（四）持久化/index.html","hash":"8d952f0594a0367587656a568161d38a52853844","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（三）其他功能/index.html","hash":"a425b4af5c37f5c07353ba80c0b8730616ca17a3","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（九）云平台CacheCloud/index.html","hash":"e58d96cbc223b776cfa98ba5fd1d28a761643ee5","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（七）redis-cluster/index.html","hash":"59619f57240c31baf4b2dd5749399bc9807760b4","modified":1573896160752},{"_id":"public/2018/03/12/redis详解（一）特性/index.html","hash":"ecd4e7094018dfc8b2f0cacd77f7d053e67783e1","modified":1573896160752},{"_id":"public/2016/11/12/操作系统之基础篇/index.html","hash":"f08e1ffbf85e8632b08a032d66de4b91dfca7405","modified":1573896160752},{"_id":"public/2016/01/30/计算机组成原理之概述篇/index.html","hash":"d023c881a1bb6fbda68b20ed09a796bee66d7b41","modified":1573896160752},{"_id":"public/2016/01/20/计算机组成原理之计算篇/index.html","hash":"b2f66af11e9ae57fc0b83a1ab9711dc98b4600be","modified":1573896160752},{"_id":"public/2016/01/16/计算机网络之传输层篇/index.html","hash":"8f8754e577cb5f51572ff290ae4560fa296b4e90","modified":1573896160753},{"_id":"public/2016/01/21/计算机组成原理之组成篇/index.html","hash":"45d3c86a480801639543c56f73078acc781f62e7","modified":1573896160752},{"_id":"public/2016/01/15/操作系统之提升篇/index.html","hash":"cec93523be3ae31a697ef23b938f41da05ceb732","modified":1573896160753},{"_id":"public/2016/01/13/计算机网络之概述计算机分类/index.html","hash":"4d79912fcf82f297cc195d0acf11466ef7f8bf67","modified":1573896160753},{"_id":"public/2016/01/12/计算机网络之应用层篇/index.html","hash":"3d2a01a94696ee2c4d8ed10d8c838b255c53cc5b","modified":1573896160753},{"_id":"public/2016/01/12/编程书籍推荐/index.html","hash":"96c3716a89ba7037725c943a30587bfc0bc3b940","modified":1573896160753},{"_id":"public/archives/index.html","hash":"7380240b5a68d60b75cd782145925d2b4e9fa7ff","modified":1573896160753},{"_id":"public/2016/01/12/计算机网络之概述计算机发展简史/index.html","hash":"18a51a599690484bb5a381d2ff2fbb3a3ed98f2c","modified":1573896160753},{"_id":"public/2016/01/10/计算机网络之网络层篇/index.html","hash":"d7fee44f0c64cafb1e3cf71226723132e2eb90c8","modified":1573896160753},{"_id":"public/2016/01/01/计算机网络之概述计算机层次与编程语言/index.html","hash":"dd27cd7cf85d67cdc5ad87d4e838ad5c73e1db37","modified":1573896160753},{"_id":"public/archives/page/2/index.html","hash":"a417d76ee1a5ce379a4d26975cb96c9279325ac5","modified":1573896160753},{"_id":"public/archives/page/3/index.html","hash":"c07ee21923632a645e44f0e063447a974a25436d","modified":1573896160753},{"_id":"public/archives/page/6/index.html","hash":"710402cd712a4fd09ac2037082231a3daa6db94c","modified":1573896160753},{"_id":"public/archives/page/4/index.html","hash":"7be0d6c10174ec995e7a479f0bf850711e743629","modified":1573896160753},{"_id":"public/archives/page/5/index.html","hash":"93a69b95938ac3e74757175e1dadab31306891ea","modified":1573896160753},{"_id":"public/archives/page/7/index.html","hash":"e27b151691f3d66ed5c334c5115793792e217726","modified":1573896160754},{"_id":"public/archives/page/8/index.html","hash":"72f0287dab570cd1c8d4013bf2a5a89b708e723d","modified":1573896160754},{"_id":"public/archives/page/9/index.html","hash":"20dcc6eb76825990ecd9fba781ba8354b8246f11","modified":1573896160754},{"_id":"public/archives/2016/index.html","hash":"dab16969ca1ae328e8b5e12f1f742df8632c97d1","modified":1573896160754},{"_id":"public/archives/page/10/index.html","hash":"f8a808f3c4e9fe6a20fd25fdbcbf05df10da9a00","modified":1573896160754},{"_id":"public/archives/2018/index.html","hash":"9c984bd9fcff406ffccd6967a96290c7a418dc86","modified":1573896160754},{"_id":"public/archives/2016/01/index.html","hash":"354137472f7f0e2b46ac1bbf6c7612aa6901d57f","modified":1573896160754},{"_id":"public/archives/2019/index.html","hash":"1305c09201ce4d7dde734683ee14a583cc7e20f2","modified":1573896160754},{"_id":"public/archives/2018/03/index.html","hash":"a6311d044e7ddc08b11d7519410379aa9b8ef8a0","modified":1573896160754},{"_id":"public/archives/2019/page/2/index.html","hash":"75b650e99d4edbbfe85e94457ddcfca715fcd439","modified":1573896160754},{"_id":"public/archives/2019/page/3/index.html","hash":"ff2c2e5f9d3ff56b275d36e0b063f3ec07c37fa4","modified":1573896160754},{"_id":"public/archives/2019/page/4/index.html","hash":"e3fa2b328e14b5f5982b1befbc5bcaa32d092958","modified":1573896160754},{"_id":"public/archives/2019/page/5/index.html","hash":"374366ffeff9c46e60a698205da82b2391a2bacd","modified":1573896160754},{"_id":"public/archives/2019/page/6/index.html","hash":"c31d778067236ac24cc7eebc84852a2da2db9f5c","modified":1573896160754},{"_id":"public/archives/2019/page/7/index.html","hash":"386b0c58c4a452da3739daa20dd45c03aa6b6031","modified":1573896160754},{"_id":"public/archives/2019/page/8/index.html","hash":"370043d7cbe278bb500c2f9510b81c95362428ed","modified":1573896160754},{"_id":"public/archives/2019/02/index.html","hash":"859ed0caac9f774caa4bdf60204c4d3842da7b7a","modified":1573896160754},{"_id":"public/archives/2019/03/index.html","hash":"05cdbd0c386cc6bb5fb9450628522e9ba7877e94","modified":1573896160754},{"_id":"public/archives/2019/06/index.html","hash":"0cd19ccc63b093c6cfc16aaf61364d4a83f292d1","modified":1573896160754},{"_id":"public/archives/2019/06/page/2/index.html","hash":"9a7c3e65ee2ff62b3325f18b8e10b6b40040111a","modified":1573896160754},{"_id":"public/archives/2019/07/index.html","hash":"7574a10dae3c79eb755a8424f534ee812d2a229d","modified":1573896160747},{"_id":"public/archives/2019/08/index.html","hash":"105b2c547b88b62e94af28995ae60776d97aacef","modified":1573896160748},{"_id":"public/archives/2019/09/page/2/index.html","hash":"337661ec282aadd2c896742c99c37289736fcab8","modified":1573896160748},{"_id":"public/archives/2019/11/index.html","hash":"1438c2a98876211dcef0d9f21dfa6f6f6d26fb99","modified":1573896160748},{"_id":"public/categories/golang/index.html","hash":"9fc4532be7ef5871dbb78f22f23a0095383a104e","modified":1573896291830},{"_id":"public/categories/nginx/index.html","hash":"f42ce6c934c749cf02713a7f321239289d8177c0","modified":1573896291830},{"_id":"public/categories/node/index.html","hash":"3f5e3764247a9fafa689ebc4dfe8f58d7b662b3a","modified":1573896291831},{"_id":"public/categories/python/index.html","hash":"6b0608bdc9afb7981435c2f1d517e821a4ac3958","modified":1573896291831},{"_id":"public/categories/书籍/index.html","hash":"977ed781717d885234339640c2e84fb65613159c","modified":1573896291831},{"_id":"public/archives/2019/09/index.html","hash":"480522ee2dacef08900d8022edea4638d0c51535","modified":1573896160754},{"_id":"public/categories/php/index.html","hash":"06993cd82826840027aaea58c6de30abe48b178d","modified":1573896291831},{"_id":"public/categories/mysql/index.html","hash":"d626077bae812168faaa574ec4dfeaf0fcb6d44a","modified":1573896291831},{"_id":"public/categories/mysql/page/2/index.html","hash":"e098dbf63094af15492dbe3340aeff2f0280448f","modified":1573896291831},{"_id":"public/categories/redis/page/2/index.html","hash":"773289681454f589ac86c900b747a42c3d8228dc","modified":1573896291831},{"_id":"public/categories/redis/index.html","hash":"eb40d05dadd6513a2d0c8d89c5b9f2fb301a0e4a","modified":1573896291832},{"_id":"public/categories/大话数据结构/index.html","hash":"5bb200938678987cdc539fab1e8b20d40b4288bc","modified":1573896291832},{"_id":"public/categories/数据结构/index.html","hash":"5d08feaffdf6aeb2a137c6f8ab97eb49dea38510","modified":1573896291832},{"_id":"public/categories/数据结构/page/3/index.html","hash":"4f859aae2eff5ed3fb48621c055f85361ad46a12","modified":1573896291832},{"_id":"public/categories/数据结构/page/2/index.html","hash":"b31393f39dce65c521b0d6858e17b84fc05b92b3","modified":1573896291832},{"_id":"public/categories/编程基础/index.html","hash":"aa73c88b5a65f930a822f5e172e72ffc6415b6b6","modified":1573896291832},{"_id":"public/index.html","hash":"625839e2f71e539a74699392e1f015da093bd16e","modified":1573896160754},{"_id":"public/categories/算法/index.html","hash":"c93e989aea87bbda278aae98b9320ea378016864","modified":1573896291832},{"_id":"public/page/2/index.html","hash":"4bbf5998b5a0881c3454efcde84aaadce6b6c95a","modified":1573896160754},{"_id":"public/page/5/index.html","hash":"1766fbfea4b640b3a74e84c6b04574a4882a39f7","modified":1573896160755},{"_id":"public/page/4/index.html","hash":"0e5e7b661ee55fb5c7003ae94b977af71c1074f0","modified":1573896160755},{"_id":"public/tags/tool/index.html","hash":"0ebec01242e773a4755674f2f45c827018b7c33a","modified":1573896291831},{"_id":"public/page/3/index.html","hash":"abb79a11ac43baa4d33527bb6eea3a2ac9d2b1da","modified":1573896160755},{"_id":"public/page/6/index.html","hash":"1bfd9cafa88e965e972471a40014d145f9e0b128","modified":1573896160755},{"_id":"public/tags/golang/index.html","hash":"6cf3f19f9eac990daec9d1d78f8a45cc99b793fc","modified":1573896291832},{"_id":"public/tags/php/index.html","hash":"cccd2d04fb4e672d2bae2b0c17b10abf4524ba1a","modified":1573896291832},{"_id":"public/tags/PHP/index.html","hash":"b2173439a42da1adad433165c550771fee7ae016","modified":1573896291831},{"_id":"public/tags/php-fpm/index.html","hash":"bfae819da60b10cef68fc4e3bd5cdb8b120f9ece","modified":1573896291832},{"_id":"public/tags/nginx/index.html","hash":"1e356c1e18f26c5941e9bc286170082180b3417f","modified":1573896291832},{"_id":"public/tags/apache/index.html","hash":"d7a0e8250734a816548997b31e7053fbd630b90c","modified":1573896291832},{"_id":"public/tags/mysql/index.html","hash":"4f21293f881e16c2ef495e45f639cca945c3a9a2","modified":1573896291832},{"_id":"public/tags/docker/index.html","hash":"9fec0a20f1a7c0b87bfd3dc80315a3f057a69657","modified":1573896291831},{"_id":"public/tags/mysql/page/2/index.html","hash":"8655544444cec44185a9e434729b5f7bbea3d611","modified":1573896291832},{"_id":"public/tags/vscode/index.html","hash":"6c7f054a7f916cd876c1fbc92ba57836e86b27ef","modified":1573896291832},{"_id":"public/tags/https/index.html","hash":"dd038179d17ff969f32c0ee2bc07b697ee8c8459","modified":1573896291832},{"_id":"public/tags/ssl/index.html","hash":"f79c0c8d7291bfb2f096af7715ffa34289c77c8f","modified":1573896291832},{"_id":"public/tags/node/index.html","hash":"5d04594dc6ade98d047606a21c0cb01e8db1ddac","modified":1573896291832},{"_id":"public/tags/python/index.html","hash":"55962bf85d052bf2d53da09653c9cf8a664f1b8a","modified":1573896291832},{"_id":"public/tags/redis/index.html","hash":"04261bf20e75d8f2a93b9929e2cc7ab8dc53b3dc","modified":1573896291832},{"_id":"public/tags/redis/page/2/index.html","hash":"0e82dfb9f0ff5a7bbe7eba0bc48686c863ab1a97","modified":1573896291833},{"_id":"public/tags/NoSQL/index.html","hash":"f86e85f79db187e0da39446ad8f98720fb79bb31","modified":1573896291833},{"_id":"public/tags/NoSQL/page/2/index.html","hash":"135af3f442bf47c6ec0e41e8cec9a38afc8daae5","modified":1573896291833},{"_id":"public/tags/swoole/index.html","hash":"3e8114bf9217422ca752eec2e54c9dc4974aa24d","modified":1573896291833},{"_id":"public/tags/wsl/index.html","hash":"19b04ef3ed5e99d101902b02db0d05020bc8b4e6","modified":1573896291833},{"_id":"public/tags/数据结构/index.html","hash":"2a4f1f1ea79aa1a2f3764ba2e225b3207bcc71b0","modified":1573896291833},{"_id":"public/tags/数据结构/page/3/index.html","hash":"dad9869a7c0b042f848968a0a9df02855af13346","modified":1573896291833},{"_id":"public/tags/数据结构/page/2/index.html","hash":"b5a82d81acf1dff3182b63edf126955c4a898043","modified":1573896291833},{"_id":"public/tags/编程基础/index.html","hash":"97b052b3b6abf214697156c9a3468ea709fb42db","modified":1573896291833},{"_id":"public/tags/数据结构/page/4/index.html","hash":"f4d9a791d3b27404022d0f554f6e8823d1bd628d","modified":1573896291833},{"_id":"public/tags/操作系统/index.html","hash":"d5c33344bacf3e1fea660ac1c36d15cb220ac4f2","modified":1573896291833},{"_id":"public/tags/算法/index.html","hash":"f3ff1649d74737f9b2e6d67a949dc43666958733","modified":1573896291833},{"_id":"public/tags/计算机原理/index.html","hash":"66467018f4deedf59ce465bedfaf6adcfc98b6dd","modified":1573896291833},{"_id":"public/tags/书籍/index.html","hash":"1d4192304c7c267753226dfa7efd3f42edec7720","modified":1573896291833},{"_id":"public/tags/计算机网络/index.html","hash":"abe121e8cb60120b74dd202a23dc3619cce36a7b","modified":1573896291833},{"_id":"public/CNAME","hash":"29ad8f6d749d827c0b313eccf066a3a513d7a86a","modified":1573895499580},{"_id":"public/img/arrow-right.png","hash":"2ff47f796f3438bf5e4767d2221fc410162b0c18","modified":1573895499580},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1573895499580},{"_id":"public/img/alipay.jpg","hash":"9a6546bf3d21dd56b93d19cfffcdbc06fd8a0188","modified":1573895499580},{"_id":"public/img/avatar.jpg","hash":"b8426f183eefcb457da0126213629f49217b7f89","modified":1573895499580},{"_id":"public/img/wechat.png","hash":"d2e9a494d8a7ba683a06f239d4e1c1e7795e5696","modified":1573895499580},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1573895499580},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1573895499580},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1573895499580},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1573895499580},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1573895499580},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1573895499581},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1573895499581},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1573895499581},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1573895499581},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1573895499581},{"_id":"public/images/cover.jpg","hash":"2fad1d5eb1c80645aec5060e9b4d76815f74ca0d","modified":1573895499603},{"_id":"public/img/brand.jpg","hash":"eb4991933e242ae7b3f5648e23c9f94032910fa1","modified":1573895499603},{"_id":"public/img/fong.jpg","hash":"ca51f1008ecd3ca370df674a828a71e97c466e87","modified":1573895499603},{"_id":"public/img/back_blue.png","hash":"3f5b3736fdf4ed155055c3fc29937ec3fc271217","modified":1573895499603},{"_id":"public/img/bayern.ico","hash":"ca047e20582144a9854056f08e09d0a9314c1d07","modified":1573895499603},{"_id":"public/img/favicon.ico","hash":"d92c32511490d6df214da15d8e1b372328ada7a7","modified":1573895499603},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1573895499604},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573895499604},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1573895499604},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1573895499604},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573895499604},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1573895499604},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1573895499604},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1573895499605},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1573895499605},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1573895499605},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1573895499605},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1573895499648},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1573895499648},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1573895499649},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1573895499649},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1573895499649},{"_id":"public/js/main.min.js","hash":"ad83e2fd040c166ca99c3a2ea855c895056697b0","modified":1573895499668},{"_id":"public/js/prism-vim.js","hash":"c9159b0479d942147eeee88db8d11bb8adc4092e","modified":1573895499668},{"_id":"public/css/prism/prism-atom-dark.css","hash":"61b9747215709f1e10fe67138afc400dc93c5da2","modified":1573895499668},{"_id":"public/css/prism/prism-default.css","hash":"533461a46dba7ea010965f57e78ae05b3ab77a6e","modified":1573895499668},{"_id":"public/css/prism/prism-coy.css","hash":"a431ebe8a3f87ff88004d100938faa411a84aa96","modified":1573895499668},{"_id":"public/css/prism/prism-solarized-light.css","hash":"f1f9693fc8f6056f6866510d58e90d58e6c99fe9","modified":1573895499668},{"_id":"public/css/prism/prism-okaidia.css","hash":"ad237637eedf7360505553b0cd09721c40c27cca","modified":1573895499668},{"_id":"public/css/prism/prism-tomorrow-night.css","hash":"8a5880145ed5c00d10469b22f8f05fe311dbd30e","modified":1573895499668},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1573895499668},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1573895499668},{"_id":"public/js/main.js","hash":"6fedca400451a2389740251b5c5b61847ca19baf","modified":1573895499680},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573895499680},{"_id":"public/js/Valine.min.js.map","hash":"a92c3703b20fe6f4e38dc7fd07f9714e796dba9e","modified":1573895499733},{"_id":"public/js/Valine.min.js","hash":"4429596ffe0aa32c9a1c8b17621aa20c8025d4b3","modified":1573895499744},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1573895499747},{"_id":"public/js/prism.js","hash":"53fb3f2f4dccf00033a9b3fe2c81269e848e23bb","modified":1573895499748},{"_id":"public/css/style.css","hash":"e93840114982cef5d8f48eb1103cc70e2363b9d8","modified":1573895499928}],"Category":[{"name":"php","_id":"ck31cqok4000byos65ha30e3f"},{"name":"golang","_id":"ck31cqoke000tyos6c5x9exjg"},{"name":"mysql","_id":"ck31cqokh0010yos673ds60r5"},{"name":"nginx","_id":"ck31cqol4002qyos61lczz67a"},{"name":"node","_id":"ck31cqol7002zyos6q21im4gi"},{"name":"python","_id":"ck31cqolb003fyos6xommxxkb"},{"name":"redis","_id":"ck31cqole003nyos62y0rzvap"},{"name":"大话数据结构","_id":"ck31cqolv004wyos6p3dm3okh"},{"name":"数据结构","_id":"ck31cqom3005kyos666qvz6lk"},{"name":"编程基础","_id":"ck31cqom7005xyos6vymdm8c6"},{"name":"算法","_id":"ck31cqon3008byos6g0wqwkdr"},{"name":"书籍","_id":"ck31cqonc008xyos66e8htfw0"}],"Data":[],"Page":[{"_content":"\n\n<h1>404</h1>\n\n\n","source":"404.html","raw":"\n\n<h1>404</h1>\n\n\n","date":"2019-07-13T03:30:41.441Z","updated":"2019-07-01T06:06:37.240Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck31cqoim0000yos6der13zg2","content":"\n\n<h1>404</h1>\n\n\n","site":{"data":{}},"excerpt":"","more":"\n\n<h1>404</h1>\n\n\n"},{"title":"关于我","date":"2019-03-28T04:15:38.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2019-03-28 12:15:38\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-07-03T07:21:42.226Z","path":"about/index.html","comments":1,"_id":"ck31cqojq0001yos6ufe4bzj6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-08-02T09:09:23.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-08-02 17:09:23\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2019-07-01T09:19:37.294Z","path":"categories/index.html","_id":"ck31cqojv0003yos6oapa0fx5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-03-28T09:25:32.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-28 17:25:32\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-07-01T06:06:37.248Z","path":"tags/index.html","_id":"ck31cqojy0006yos63u9x0a6s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"时间轴","date":"2019-03-28T09:25:32.000Z","type":"timeline","comments":0,"_content":"\n@timeline{\n\n##### 2019\n\n@item{\n###### 11月7日\n焦虑也好，抱怨也罢，解决不了任何问题，唯有努力而已\n\n}\n\n@item{\n###### 7月3日\n单枪匹马面对生活的兵荒马乱\n\n}\n\n##### 2018\n@item{\n###### 2月23日\n结婚\n\n}\n##### 2016\n@item{\n###### 11月16日\n领证\n\n}\n\n}","source":"timeline/index.md","raw":"---\ntitle: 时间轴\ndate: 2019-03-28 17:25:32\ntype: \"timeline\"\ncomments: false\n---\n\n@timeline{\n\n##### 2019\n\n@item{\n###### 11月7日\n焦虑也好，抱怨也罢，解决不了任何问题，唯有努力而已\n\n}\n\n@item{\n###### 7月3日\n单枪匹马面对生活的兵荒马乱\n\n}\n\n##### 2018\n@item{\n###### 2月23日\n结婚\n\n}\n##### 2016\n@item{\n###### 11月16日\n领证\n\n}\n\n}","updated":"2019-11-14T01:31:04.885Z","path":"timeline/index.html","layout":"page","_id":"ck31cqok00008yos6v1vnnrou","content":"<p>@timeline{</p>\n<h5 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h5><p>@item{</p>\n<h6 id=\"11月7日\"><a href=\"#11月7日\" class=\"headerlink\" title=\"11月7日\"></a>11月7日</h6><p>焦虑也好，抱怨也罢，解决不了任何问题，唯有努力而已</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h6><p>单枪匹马面对生活的兵荒马乱</p>\n<p>}</p>\n<h5 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h5><p>@item{</p>\n<h6 id=\"2月23日\"><a href=\"#2月23日\" class=\"headerlink\" title=\"2月23日\"></a>2月23日</h6><p>结婚</p>\n<p>}</p>\n<h5 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h5><p>@item{</p>\n<h6 id=\"11月16日\"><a href=\"#11月16日\" class=\"headerlink\" title=\"11月16日\"></a>11月16日</h6><p>领证</p>\n<p>}</p>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>@timeline{</p>\n<h5 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h5><p>@item{</p>\n<h6 id=\"11月7日\"><a href=\"#11月7日\" class=\"headerlink\" title=\"11月7日\"></a>11月7日</h6><p>焦虑也好，抱怨也罢，解决不了任何问题，唯有努力而已</p>\n<p>}</p>\n<p>@item{</p>\n<h6 id=\"7月3日\"><a href=\"#7月3日\" class=\"headerlink\" title=\"7月3日\"></a>7月3日</h6><p>单枪匹马面对生活的兵荒马乱</p>\n<p>}</p>\n<h5 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h5><p>@item{</p>\n<h6 id=\"2月23日\"><a href=\"#2月23日\" class=\"headerlink\" title=\"2月23日\"></a>2月23日</h6><p>结婚</p>\n<p>}</p>\n<h5 id=\"2016\"><a href=\"#2016\" class=\"headerlink\" title=\"2016\"></a>2016</h5><p>@item{</p>\n<h6 id=\"11月16日\"><a href=\"#11月16日\" class=\"headerlink\" title=\"11月16日\"></a>11月16日</h6><p>领证</p>\n<p>}</p>\n<p>}</p>\n"}],"Post":[{"title":"AMDcpu 安装 ubuntu/deepin","date":"2019-04-20T01:45:35.000Z","top":0,"_content":"\n### 1、问题\n\n电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏\n\n### 2、安装\n\n开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在 linux 行的末尾加上这三个参数：\n\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x 就可以直接启动了\n\n### 3、开机启动\n\n按 E 编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub 文件\n在 GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得 update-grub 来更新下 grub 的菜单以生效\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/AMDcpu安装ubuntu-deepin.md","raw":"---\ntitle: AMDcpu 安装 ubuntu/deepin\ndate: 2019-04-20 09:45:35\ntags: [tool]\ntop: 0\n---\n\n### 1、问题\n\n电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏\n\n### 2、安装\n\n开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg)\n\n选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg)\n\n在 linux 行的末尾加上这三个参数：\n\n```bash\nivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg)\n\nctrl+x 就可以直接启动了\n\n### 3、开机启动\n\n按 E 编辑输入上面的参数\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg)\n\n修改 /etc/default/grub 文件\n在 GRUB_CMDLINE_LINUX_DEFAULT=\"在这里加内容\" 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了\n记得 update-grub 来更新下 grub 的菜单以生效\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"AMDcpu安装ubuntu-deepin","published":1,"updated":"2019-11-12T02:05:15.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqojr0002yos6zf6xvh0m","content":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 linux 行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x 就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按 E 编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub 文件<br>在 GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得 update-grub 来更新下 grub 的菜单以生效</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h3><p>电脑是 thinkpad e485，cpu 锐龙 2500u，安装 ubuntu 系统黑屏</p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>开机狂按 F1，进 BIOS，记得在 security 的选项里找到 secure boot，关掉。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hxxj2asj20g40c3t9h.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>选择 u 盘启动，需要按 E 编辑一下（目前 E485（包括 A485）的 BIOS 中 ivrs 还没有配置好），如果没有指定参数就会无法启动<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24hz7s6t5j20g40c3aa9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>在 linux 行的末尾加上这三个参数：</p>\n<pre><code class=\"lang-bash\">ivrs_ioapic[32]=00:14.0 spec_store_bypass_disable=prctl iommu=soft\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i6l52vwj20g40c3q36.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>ctrl+x 就可以直接启动了</p>\n<h3 id=\"3、开机启动\"><a href=\"#3、开机启动\" class=\"headerlink\" title=\"3、开机启动\"></a>3、开机启动</h3><p>按 E 编辑输入上面的参数</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g24i95d0e2j20g40c3mxf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>修改 /etc/default/grub 文件<br>在 GRUB_CMDLINE_LINUX_DEFAULT=”在这里加内容” 里面添加上刚才的三个参数，这样每次开机直接按回车启动就可以了<br>记得 update-grub 来更新下 grub 的菜单以生效</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 0 周","date":"2019-04-17T02:08:26.000Z","top":0,"_content":"\n### Algorithm\n\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n\n### Review\n\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n\n### Tip\n\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n\n### Share\n\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第0周.md","raw":"---\ntitle: ARTS 第 0 周\ndate: 2019-04-17 10:08:26\ntags:\ntop: 0\n---\n\n### Algorithm\n\n主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。\n\n### Review\n\n主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。\n\n### Tip\n\n主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。\n\n### Share\n\n主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第0周","published":1,"updated":"2019-11-12T02:05:15.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqojv0004yos63pjio86t","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p>主要是为了编程训练和学习。每周至少做一个 leetcode 的算法题（先从 Easy 开始，然后再 Medium，最后才 Hard）。进行编程训练，如果不训练你看再多的算法书，你依然不会做算法题，看完书后，你需要训练。</p>\n<h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><p>主要是为了学习英文，如果你的英文不行，你基本上无缘技术高手。所以，需要你阅读并点评至少一篇英文技术文章。</p>\n<h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p>主要是为了总结和归纳你在是常工作中所遇到的知识点。学习至少一个技术技巧。你在工作中遇到的问题，踩过的坑，学习的点滴知识。</p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><p>主要是为了建立你的影响力，能够输出价值观。分享一篇有观点和思考的技术文章。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 2 周","date":"2019-04-17T02:25:24.000Z","top":0,"_content":"\n### Algorithm\n\n\n[整数反转](https://leetcode-cn.com/problems/reverse-integer/ \"整数反转\")\n\n\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n\n```\n\n```\n\n### Review\n\n### Tip\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第2周.md","raw":"---\ntitle: ARTS 第 2 周\ndate: 2019-04-17 10:25:24\ntags:\ntop: 0\n---\n\n### Algorithm\n\n\n[整数反转](https://leetcode-cn.com/problems/reverse-integer/ \"整数反转\")\n\n\n\n给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n\n```\n\n```\n\n### Review\n\n### Tip\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第2周","published":1,"updated":"2019-11-12T02:05:15.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqojz0007yos6yw4jue80","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" title=\"整数反转\" target=\"_blank\" rel=\"noopener\">整数反转</a></p>\n<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/reverse-integer/\" title=\"整数反转\" target=\"_blank\" rel=\"noopener\">整数反转</a></p>\n<p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>\n<pre><code>\n\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP7 新特性","date":"2019-04-03T01:03:42.000Z","top":0,"_content":"\n#### 1. 太空船运算符\n\n```php\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n\n#### 2. 类型声明\n\n```php\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n\n#### 3.null 合并操作符\n\n```php\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n\n#### 4. 常量数组\n\n```php\ndefine('ANIMALS',['dog','cat']);\n```\n\n#### 5.namespace 批量导入\n\n```php\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n\n#### 6.intdiv 函数\n\n```php\nintdiv(10,3);\n```\n\n#### 7.list 方括号\n\n```php\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP7新特性.md","raw":"---\ntitle: PHP7 新特性\ndate: 2019-04-03 09:03:42\ntags: [php]\ncategories: \"php\"\ntop: 0\n---\n\n#### 1. 太空船运算符\n\n```php\necho 1<=>1; //0\necho 2<=>1; //1\necho 1<=>2; //-1\n```\n\n#### 2. 类型声明\n\n```php\ndeclare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n```\n\n#### 3.null 合并操作符\n\n```php\n$page = isset($_GET['page']) ? $_GET['page'] : 0;\n$page = $_GET['page'] ?? 0;\n```\n\n#### 4. 常量数组\n\n```php\ndefine('ANIMALS',['dog','cat']);\n```\n\n#### 5.namespace 批量导入\n\n```php\nuse Space\\{ClassA,ClassB as B,ClassC}\n```\n\n#### 6.intdiv 函数\n\n```php\nintdiv(10,3);\n```\n\n#### 7.list 方括号\n\n```php\n$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP7新特性","published":1,"updated":"2019-11-12T02:05:15.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok00009yos6kubjoyz8","content":"<h4 id=\"1-太空船运算符\"><a href=\"#1-太空船运算符\" class=\"headerlink\" title=\"1. 太空船运算符\"></a>1. 太空船运算符</h4><pre><code class=\"lang-php\">echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre>\n<h4 id=\"2-类型声明\"><a href=\"#2-类型声明\" class=\"headerlink\" title=\"2. 类型声明\"></a>2. 类型声明</h4><pre><code class=\"lang-php\">declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre>\n<h4 id=\"3-null-合并操作符\"><a href=\"#3-null-合并操作符\" class=\"headerlink\" title=\"3.null 合并操作符\"></a>3.null 合并操作符</h4><pre><code class=\"lang-php\">$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre>\n<h4 id=\"4-常量数组\"><a href=\"#4-常量数组\" class=\"headerlink\" title=\"4. 常量数组\"></a>4. 常量数组</h4><pre><code class=\"lang-php\">define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre>\n<h4 id=\"5-namespace-批量导入\"><a href=\"#5-namespace-批量导入\" class=\"headerlink\" title=\"5.namespace 批量导入\"></a>5.namespace 批量导入</h4><pre><code class=\"lang-php\">use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre>\n<h4 id=\"6-intdiv-函数\"><a href=\"#6-intdiv-函数\" class=\"headerlink\" title=\"6.intdiv 函数\"></a>6.intdiv 函数</h4><pre><code class=\"lang-php\">intdiv(10,3);\n</code></pre>\n<h4 id=\"7-list-方括号\"><a href=\"#7-list-方括号\" class=\"headerlink\" title=\"7.list 方括号\"></a>7.list 方括号</h4><pre><code class=\"lang-php\">$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-太空船运算符\"><a href=\"#1-太空船运算符\" class=\"headerlink\" title=\"1. 太空船运算符\"></a>1. 太空船运算符</h4><pre><code class=\"lang-php\">echo 1&lt;=&gt;1; //0\necho 2&lt;=&gt;1; //1\necho 1&lt;=&gt;2; //-1\n</code></pre>\n<h4 id=\"2-类型声明\"><a href=\"#2-类型声明\" class=\"headerlink\" title=\"2. 类型声明\"></a>2. 类型声明</h4><pre><code class=\"lang-php\">declare(strict_type=1)//strict_type=1表示开启严格模式\nfunction sumOfInts(int ...$ints):int{\n    return array_sum($ints);\n}\n</code></pre>\n<h4 id=\"3-null-合并操作符\"><a href=\"#3-null-合并操作符\" class=\"headerlink\" title=\"3.null 合并操作符\"></a>3.null 合并操作符</h4><pre><code class=\"lang-php\">$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 0;\n$page = $_GET[&#39;page&#39;] ?? 0;\n</code></pre>\n<h4 id=\"4-常量数组\"><a href=\"#4-常量数组\" class=\"headerlink\" title=\"4. 常量数组\"></a>4. 常量数组</h4><pre><code class=\"lang-php\">define(&#39;ANIMALS&#39;,[&#39;dog&#39;,&#39;cat&#39;]);\n</code></pre>\n<h4 id=\"5-namespace-批量导入\"><a href=\"#5-namespace-批量导入\" class=\"headerlink\" title=\"5.namespace 批量导入\"></a>5.namespace 批量导入</h4><pre><code class=\"lang-php\">use Space\\{ClassA,ClassB as B,ClassC}\n</code></pre>\n<h4 id=\"6-intdiv-函数\"><a href=\"#6-intdiv-函数\" class=\"headerlink\" title=\"6.intdiv 函数\"></a>6.intdiv 函数</h4><pre><code class=\"lang-php\">intdiv(10,3);\n</code></pre>\n<h4 id=\"7-list-方括号\"><a href=\"#7-list-方括号\" class=\"headerlink\" title=\"7.list 方括号\"></a>7.list 方括号</h4><pre><code class=\"lang-php\">$arr = [1,2,3];\nlist($a,$b,$c) = $arr;\n\n$arr = [1,2,3];\n[$a,$b,$c] = $arr;\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP 写入文件权限失败 file_put_contents: failed to open stream: Permission denied","date":"2019-06-08T10:16:44.000Z","top":0,"_content":"\n### 问题\n\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n\n### 解决过程\n\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中\n\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n\n如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。\n在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：\n\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\n\nlinux 系统中默认的 umask 为 022，与我们的 777& 运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。\n\n### 最后解决方案\n\n先创建目录，再使用 chmod 将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied.md","raw":"---\ntitle: 'PHP 写入文件权限失败 file_put_contents: failed to open stream: Permission denied'\ndate: 2019-06-08 18:16:44\ntags: [php]\ncategories: \"php\"\ntop: 0\n---\n\n### 问题\n\n写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示\n\n```php\nfile_put_contents: failed to open stream: Permission denied\n```\n\n### 解决过程\n\n检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中\n\n```php\n  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n```\n\n如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。\n在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：\n\n```shell\nif [ $UID -gt 99 ] && [ \"`id -gn`\" = \"`id -un`\" ]; then\n        umask 002\nelse\n        umask 022\nfi\n```\n\nlinux 系统中默认的 umask 为 022，与我们的 777& 运算之后，就变成了 755，这就是原因所在了。\n这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。\n\n### 最后解决方案\n\n先创建目录，再使用 chmod 将权限修改为 777\n\n```php\nmkdir('test', 0777);\nchmod('test', 0777);\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP写入文件权限失败-file-put-contents-failed-to-open-stream-Permission-denied","published":1,"updated":"2019-11-12T02:05:15.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok2000ayos6u3vkuerg","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。<br>在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux 系统中默认的 umask 为 022，与我们的 777&amp; 运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用 chmod 将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>写日志的方法中用到 file_put_contents 这个方法，今天在执行回调方法的写日志的时候提示没有写入文件权限，报错提示</p>\n<pre><code class=\"lang-php\">file_put_contents: failed to open stream: Permission denied\n</code></pre>\n<h3 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h3><p>检查日志文件夹权限，因为是按天生成的，有个定时任务定时执行，执行用户是 root，所以生成文件夹用户和用户组都是 root，而回调方法中执行用户是 www，写入日志方法中</p>\n<pre><code class=\"lang-php\">  if(!is_dir($dir)){\n        mkdir($dir,0777,true);\n    }\n</code></pre>\n<p>如果目录不存在，创建目录，但是在 php 的 mkdir 函数创建文件夹设置 777 权限，实际上创建的文件还是 755 的权限。<br>在 linux 系统中在创建文件 / 文件夹时有一个默认权限，此权限受 umask 设置影响，在 /etc/bashrc 配置文件中我们可以找到如下配置：</p>\n<pre><code class=\"lang-shell\">if [ $UID -gt 99 ] &amp;&amp; [ &quot;`id -gn`&quot; = &quot;`id -un`&quot; ]; then\n        umask 002\nelse\n        umask 022\nfi\n</code></pre>\n<p>linux 系统中默认的 umask 为 022，与我们的 777&amp; 运算之后，就变成了 755，这就是原因所在了。<br>这里的设置直接影响到 linux 系统的默认权限设置，不仅仅是 PHP 的问题。所以不建议直接进行修改把 022 改为 000 。</p>\n<h3 id=\"最后解决方案\"><a href=\"#最后解决方案\" class=\"headerlink\" title=\"最后解决方案\"></a>最后解决方案</h3><p>先创建目录，再使用 chmod 将权限修改为 777</p>\n<pre><code class=\"lang-php\">mkdir(&#39;test&#39;, 0777);\nchmod(&#39;test&#39;, 0777);\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"ARTS 第 1 周","date":"2019-04-17T02:08:33.000Z","top":0,"_content":"\n### Algorithm\n\n\n\n[两数之和](https://leetcode-cn.com/problems/two-sum/ \"两数之和\")\n\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n\n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n\n### Review\n\n### Tip\n\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/ARTS第1周.md","raw":"---\ntitle: ARTS 第 1 周\ndate: 2019-04-17 10:08:33\ntags:\ntop: 0\n---\n\n### Algorithm\n\n\n\n[两数之和](https://leetcode-cn.com/problems/two-sum/ \"两数之和\")\n\n\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n\n```\nfunction twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=>$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n```\n\n### Review\n\n### Tip\n\n[AMDcpu安装ubuntu/deepin](https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/ \"AMDcpu安装ubuntu-deepin\")\n\n### Share\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"ARTS第1周","published":1,"updated":"2019-11-12T02:05:15.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok5000eyos6y4ok5hat","content":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" title=\"两数之和\" target=\"_blank\" rel=\"noopener\">两数之和</a></p>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h3><p><a href=\"https://leetcode-cn.com/problems/two-sum/\" title=\"两数之和\" target=\"_blank\" rel=\"noopener\">两数之和</a></p>\n<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>\n<pre><code>function twoSum( $target,$nums) {\n    $arr = [];\n    foreach($nums as $k=&gt;$v){\n        $num = $target-$v;\n      if(isset($arr[$num])){\n        return [$arr[$num],$k];\n      };\n      $arr[$v] = $k;\n    }\n    return;\n}\n</code></pre><h3 id=\"Review\"><a href=\"#Review\" class=\"headerlink\" title=\"Review\"></a>Review</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><p><a href=\"https://www.phpst.cn/2019/04/20/AMDcpu安装ubuntu-deepin/\" title=\"AMDcpu安装ubuntu-deepin\">AMDcpu安装ubuntu/deepin</a></p>\n<h3 id=\"Share\"><a href=\"#Share\" class=\"headerlink\" title=\"Share\"></a>Share</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP和Go通过jsonrpc通信","top":1,"date":"2019-08-01T08:19:27.000Z","_content":"### 说明\nPHP和GO通过jsonrpc通信\n### 代码\n``` go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n\tA int\n\tB int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n\tPro int // 乘积\n\tQuo int // 商\n\tRem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n\tres.Pro = req.A * req.B\n\treturn nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n\tif req.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\tres.Quo = req.A / req.B\n\tres.Rem = req.A % req.B\n\treturn nil\n}\n\nfunc main() {\n\trpc.Register(new(Arith)) // 注册rpc服务\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:8096\")\n\tif err != nil {\n\t\tlog.Fatalln(\"fatal error: \", err)\n\t}\n\tfmt.Fprintf(os.Stdout, \"%s\", \"wait connection\")\n\tfor {\n\t\tconn, err := lis.Accept() // 接收客户端连接请求\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tgo func(conn net.Conn) { // 并发处理客户端请求\n\t\t\tfmt.Fprintf(os.Stdout, \"%s\", \"\\n new client in coming\\n\")\n\t\t\tjsonrpc.ServeConn(conn)\n\t\t}(conn)\n\t}\n}\n\n```\n```php\nclass JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this->conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this->conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this->conn) {\n            return false;\n        }\n        $err = fwrite($this->conn, json_encode(array(\n                'method' => $method,\n                'params' => array($params),\n                'id'     => 0,\n            )).\"\\n\");\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this->conn, 0, 3000);\n        $line = fgets($this->conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(\"127.0.0.1\", 8096);\n$args = array('A'=>9, 'B'=>2);\n$r = $client->Call(\"Arith.Multiply\", $args);\nprintf(\"%d * %d = %d\\n\", $args['A'], $args['B'], $r['result']['Pro']);\n$r = $client->Call(\"Arith.Divide\", $args);\nprintf(\"%d / %d, Quo is %d, Rem is %d\\n\", $args['A'], $args['B'], $r['result']['Quo'], $r['result']['Rem']);\n```","source":"_posts/PHP和Go通过jsonrpc通信.md","raw":"---\ntitle: PHP和Go通过jsonrpc通信\ntop: 1\ndate: 2019-08-01 16:19:27\ntags: [golang,PHP]\ncategories:\n---\n### 说明\nPHP和GO通过jsonrpc通信\n### 代码\n``` go\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/rpc\"\n\t\"net/rpc/jsonrpc\"\n\t\"os\"\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n\tA int\n\tB int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n\tPro int // 乘积\n\tQuo int // 商\n\tRem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n\tres.Pro = req.A * req.B\n\treturn nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n\tif req.B == 0 {\n\t\treturn errors.New(\"divide by zero\")\n\t}\n\tres.Quo = req.A / req.B\n\tres.Rem = req.A % req.B\n\treturn nil\n}\n\nfunc main() {\n\trpc.Register(new(Arith)) // 注册rpc服务\n\tlis, err := net.Listen(\"tcp\", \"127.0.0.1:8096\")\n\tif err != nil {\n\t\tlog.Fatalln(\"fatal error: \", err)\n\t}\n\tfmt.Fprintf(os.Stdout, \"%s\", \"wait connection\")\n\tfor {\n\t\tconn, err := lis.Accept() // 接收客户端连接请求\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tgo func(conn net.Conn) { // 并发处理客户端请求\n\t\t\tfmt.Fprintf(os.Stdout, \"%s\", \"\\n new client in coming\\n\")\n\t\t\tjsonrpc.ServeConn(conn)\n\t\t}(conn)\n\t}\n}\n\n```\n```php\nclass JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this->conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this->conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this->conn) {\n            return false;\n        }\n        $err = fwrite($this->conn, json_encode(array(\n                'method' => $method,\n                'params' => array($params),\n                'id'     => 0,\n            )).\"\\n\");\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this->conn, 0, 3000);\n        $line = fgets($this->conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(\"127.0.0.1\", 8096);\n$args = array('A'=>9, 'B'=>2);\n$r = $client->Call(\"Arith.Multiply\", $args);\nprintf(\"%d * %d = %d\\n\", $args['A'], $args['B'], $r['result']['Pro']);\n$r = $client->Call(\"Arith.Divide\", $args);\nprintf(\"%d / %d, Quo is %d, Rem is %d\\n\", $args['A'], $args['B'], $r['result']['Quo'], $r['result']['Rem']);\n```","slug":"PHP和Go通过jsonrpc通信","published":1,"updated":"2019-09-07T01:11:30.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok6000fyos6tmwfitby","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>PHP和GO通过jsonrpc通信</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"lang-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n    &quot;log&quot;\n    &quot;net&quot;\n    &quot;net/rpc&quot;\n    &quot;net/rpc/jsonrpc&quot;\n    &quot;os&quot;\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n    A int\n    B int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n    Pro int // 乘积\n    Quo int // 商\n    Rem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n    res.Pro = req.A * req.B\n    return nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n    if req.B == 0 {\n        return errors.New(&quot;divide by zero&quot;)\n    }\n    res.Quo = req.A / req.B\n    res.Rem = req.A % req.B\n    return nil\n}\n\nfunc main() {\n    rpc.Register(new(Arith)) // 注册rpc服务\n    lis, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8096&quot;)\n    if err != nil {\n        log.Fatalln(&quot;fatal error: &quot;, err)\n    }\n    fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;wait connection&quot;)\n    for {\n        conn, err := lis.Accept() // 接收客户端连接请求\n        if err != nil {\n            continue\n        }\n\n        go func(conn net.Conn) { // 并发处理客户端请求\n            fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;\\n new client in coming\\n&quot;)\n            jsonrpc.ServeConn(conn)\n        }(conn)\n    }\n}\n</code></pre>\n<pre><code class=\"lang-php\">class JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this-&gt;conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this-&gt;conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this-&gt;conn) {\n            return false;\n        }\n        $err = fwrite($this-&gt;conn, json_encode(array(\n                &#39;method&#39; =&gt; $method,\n                &#39;params&#39; =&gt; array($params),\n                &#39;id&#39;     =&gt; 0,\n            )).&quot;\\n&quot;);\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this-&gt;conn, 0, 3000);\n        $line = fgets($this-&gt;conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(&quot;127.0.0.1&quot;, 8096);\n$args = array(&#39;A&#39;=&gt;9, &#39;B&#39;=&gt;2);\n$r = $client-&gt;Call(&quot;Arith.Multiply&quot;, $args);\nprintf(&quot;%d * %d = %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Pro&#39;]);\n$r = $client-&gt;Call(&quot;Arith.Divide&quot;, $args);\nprintf(&quot;%d / %d, Quo is %d, Rem is %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Quo&#39;], $r[&#39;result&#39;][&#39;Rem&#39;]);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>PHP和GO通过jsonrpc通信</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"lang-go\">package main\n\nimport (\n    &quot;errors&quot;\n    &quot;fmt&quot;\n    &quot;log&quot;\n    &quot;net&quot;\n    &quot;net/rpc&quot;\n    &quot;net/rpc/jsonrpc&quot;\n    &quot;os&quot;\n)\n\n// 算数运算结构体\ntype Arith struct {\n}\n\n// 算数运算请求结构体\ntype ArithRequest struct {\n    A int\n    B int\n}\n\n// 算数运算响应结构体\ntype ArithResponse struct {\n    Pro int // 乘积\n    Quo int // 商\n    Rem int // 余数\n}\n\n// 乘法运算方法\nfunc (this *Arith) Multiply(req ArithRequest, res *ArithResponse) error {\n    res.Pro = req.A * req.B\n    return nil\n}\n\n// 除法运算方法\nfunc (this *Arith) Divide(req ArithRequest, res *ArithResponse) error {\n    if req.B == 0 {\n        return errors.New(&quot;divide by zero&quot;)\n    }\n    res.Quo = req.A / req.B\n    res.Rem = req.A % req.B\n    return nil\n}\n\nfunc main() {\n    rpc.Register(new(Arith)) // 注册rpc服务\n    lis, err := net.Listen(&quot;tcp&quot;, &quot;127.0.0.1:8096&quot;)\n    if err != nil {\n        log.Fatalln(&quot;fatal error: &quot;, err)\n    }\n    fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;wait connection&quot;)\n    for {\n        conn, err := lis.Accept() // 接收客户端连接请求\n        if err != nil {\n            continue\n        }\n\n        go func(conn net.Conn) { // 并发处理客户端请求\n            fmt.Fprintf(os.Stdout, &quot;%s&quot;, &quot;\\n new client in coming\\n&quot;)\n            jsonrpc.ServeConn(conn)\n        }(conn)\n    }\n}\n</code></pre>\n<pre><code class=\"lang-php\">class JsonRPC {\n\n    private $conn;\n\n    function __construct($host, $port) {\n        $this-&gt;conn = fsockopen($host, $port, $errno, $errstr, 3);\n        if (!$this-&gt;conn) {\n            return false;\n        }\n    }\n\n    public function Call($method, $params) {\n        if (!$this-&gt;conn) {\n            return false;\n        }\n        $err = fwrite($this-&gt;conn, json_encode(array(\n                &#39;method&#39; =&gt; $method,\n                &#39;params&#39; =&gt; array($params),\n                &#39;id&#39;     =&gt; 0,\n            )).&quot;\\n&quot;);\n        if ($err === false) {\n            return false;\n        }\n        stream_set_timeout($this-&gt;conn, 0, 3000);\n        $line = fgets($this-&gt;conn);\n        if ($line === false) {\n            return NULL;\n        }\n        return json_decode($line,true);\n    }\n}\n\n$client = new JsonRPC(&quot;127.0.0.1&quot;, 8096);\n$args = array(&#39;A&#39;=&gt;9, &#39;B&#39;=&gt;2);\n$r = $client-&gt;Call(&quot;Arith.Multiply&quot;, $args);\nprintf(&quot;%d * %d = %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Pro&#39;]);\n$r = $client-&gt;Call(&quot;Arith.Divide&quot;, $args);\nprintf(&quot;%d / %d, Quo is %d, Rem is %d\\n&quot;, $args[&#39;A&#39;], $args[&#39;B&#39;], $r[&#39;result&#39;][&#39;Quo&#39;], $r[&#39;result&#39;][&#39;Rem&#39;]);\n</code></pre>\n"},{"title":"git 入门","date":"2019-04-20T02:25:48.000Z","top":0,"_content":"\n### 安装\n\n- Windows\n\n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n\n```bash\nyum install git / apt-get install git\n```\n\n安装后执行，正常显示则安装正常\n\n```bash\ngit --version\n```\n\n### 使用\n\n#### 生成 ssh\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\"\n```\n\n\"xxx@xxxxx.com\" 是 git 的账号，完成三次回车，即可生成 ssh key。\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n把 ssh key 绑定到 git 平台，绑定后输入命令验证\n\n```bash\nssh -T git@github.com\n```\n\n#### 关联 git 仓库\n\n- 在工作目录中初始化新仓库\n\n  ```bash\n  git init\n  ```\n\n  绑定远程仓库\n\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n\n- 从现有仓库克隆\n\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/git入门.md","raw":"---\ntitle: git 入门\ndate: 2019-04-20 10:25:48\ntags:\ntop: 0\n---\n\n### 安装\n\n- Windows\n\n  [下载安装地址](https://git-scm.com/downloads)\n\n- Linux\n\n```bash\nyum install git / apt-get install git\n```\n\n安装后执行，正常显示则安装正常\n\n```bash\ngit --version\n```\n\n### 使用\n\n#### 生成 ssh\n\n```bash\ngit config --global user.name \"xxx\"\ngit config --global user.email \"xx@xx.com\"\nssh-keygen -t rsa -C \"xxx@xxxxx.com\"\n```\n\n\"xxx@xxxxx.com\" 是 git 的账号，完成三次回车，即可生成 ssh key。\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n把 ssh key 绑定到 git 平台，绑定后输入命令验证\n\n```bash\nssh -T git@github.com\n```\n\n#### 关联 git 仓库\n\n- 在工作目录中初始化新仓库\n\n  ```bash\n  git init\n  ```\n\n  绑定远程仓库\n\n  ```bash\n  git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\n  git pull origin master\n  ```\n\n- 从现有仓库克隆\n\n  ```bash\n  git clone git@github.com:xushuhui/lin-cms-lumen.git\n  ```\n\n#### 提交本地文件到远程仓库\n\n  ```bash\n  git add .\n  git commit -m 'initial project version'\n  git push origin master\n  ```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"git入门","published":1,"updated":"2019-11-12T02:05:15.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok6000gyos68oyvv1iz","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n</li>\n</ul>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是 git 的账号，完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把 ssh key 绑定到 git 平台，绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联-git-仓库\"><a href=\"#关联-git-仓库\" class=\"headerlink\" title=\"关联 git 仓库\"></a>关联 git 仓库</h4><ul>\n<li><p>在工作目录中初始化新仓库</p>\n<pre><code class=\"lang-bash\">git init\n</code></pre>\n<p>绑定远程仓库</p>\n<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n<li><p>从现有仓库克隆</p>\n<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li><p>Windows</p>\n<p><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">下载安装地址</a></p>\n</li>\n<li><p>Linux</p>\n</li>\n</ul>\n<pre><code class=\"lang-bash\">yum install git / apt-get install git\n</code></pre>\n<p>安装后执行，正常显示则安装正常</p>\n<pre><code class=\"lang-bash\">git --version\n</code></pre>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"生成-ssh\"><a href=\"#生成-ssh\" class=\"headerlink\" title=\"生成 ssh\"></a>生成 ssh</h4><pre><code class=\"lang-bash\">git config --global user.name &quot;xxx&quot;\ngit config --global user.email &quot;xx@xx.com&quot;\nssh-keygen -t rsa -C &quot;xxx@xxxxx.com&quot;\n</code></pre>\n<p>“xxx@xxxxx.com” 是 git 的账号，完成三次回车，即可生成 ssh key。</p>\n<pre><code class=\"lang-bash\">cat ~/.ssh/id_rsa.pub\n</code></pre>\n<p>把 ssh key 绑定到 git 平台，绑定后输入命令验证</p>\n<pre><code class=\"lang-bash\">ssh -T git@github.com\n</code></pre>\n<h4 id=\"关联-git-仓库\"><a href=\"#关联-git-仓库\" class=\"headerlink\" title=\"关联 git 仓库\"></a>关联 git 仓库</h4><ul>\n<li><p>在工作目录中初始化新仓库</p>\n<pre><code class=\"lang-bash\">git init\n</code></pre>\n<p>绑定远程仓库</p>\n<pre><code class=\"lang-bash\">git remote add origin git@github.com:xushuhui/lin-cms-lumen.git\ngit pull origin master\n</code></pre>\n</li>\n<li><p>从现有仓库克隆</p>\n<pre><code class=\"lang-bash\">git clone git@github.com:xushuhui/lin-cms-lumen.git\n</code></pre>\n</li>\n</ul>\n<h4 id=\"提交本地文件到远程仓库\"><a href=\"#提交本地文件到远程仓库\" class=\"headerlink\" title=\"提交本地文件到远程仓库\"></a>提交本地文件到远程仓库</h4><pre><code class=\"lang-bash\">  git add .\n  git commit -m &#39;initial project version&#39;\n  git push origin master\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"PHP 运行模式","date":"2019-03-29T06:52:24.000Z","top":0,"_content":"\n### 运行模式\n\nphp 分为五大运行模式\n- cgi（通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi 升级版本）\n- cli（命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）\n- apache2handler（将 php 作为 apache 的模块）\n- 其他 (continuity,embed,litespeed,milter 等）\n\n本地查看运行模式的方法\n\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI 模式\n\n- Command Line Interface 的简称，支持 windows 和 Linux 平台\n- 直接在命令行运行，不需要 http server, 例如 php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用 PHP-CLI 和 GTK 包\n\n### CGI 模式\n\n- Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台\n- 执行过程\n    - http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行\n    - 生成一个 php-cgi 进程，并执行 php 程序\n    - 执行结果返回给 http 服务器\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）\n    - 逐渐少见\n\n### FastCGI 模式\n\n- 快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)\n    - FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接\n    - 当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi\n    - FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n\n- 模块模式指把 PHP 作为 web 服务器的一个模块运行\n- IIS 的 ISAPI 和 Apache 的 apache2handler\n\napache2handler\n- apache 监听一个用户请求 index.php\n- apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP\n- 在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook\n- php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。\n- php 执行完成后数据通过。so 或 dll 返回给 apache\n- apache 将数据返回到客户端\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/PHP运行模式.md","raw":"---\ntitle: PHP 运行模式\ndate: 2019-03-29 14:52:24\ntags: [php,php-fpm,apache,nginx]\ncategories: \"php\"\ntop: 0\n---\n\n### 运行模式\n\nphp 分为五大运行模式\n- cgi（通用网关接口 Common Gateway Interface)\n- fast-cgi(cgi 升级版本）\n- cli（命令行模式 Command Line Interface)\n- isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）\n- apache2handler（将 php 作为 apache 的模块）\n- 其他 (continuity,embed,litespeed,milter 等）\n\n本地查看运行模式的方法\n\n```php\nphpinfo()\nphp -r \"echo php_sapi_name()\"\n```\n\n选择运行模式前提\n- 了解运行模式优缺点和应用场景\n- 根据业务本身结合上一条\n\n### CLI 模式\n\n- Command Line Interface 的简称，支持 windows 和 Linux 平台\n- 直接在命令行运行，不需要 http server, 例如 php test.php\n- 应用场景\n    - 定时任务\n    - 开发桌面应用使用 PHP-CLI 和 GTK 包\n\n### CGI 模式\n\n- Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台\n- 执行过程\n    - http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行\n    - 生成一个 php-cgi 进程，并执行 php 程序\n    - 执行结果返回给 http 服务器\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）\n    - 逐渐少见\n\n### FastCGI 模式\n\n- 快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求\n- 执行过程\n    - web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)\n    - FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接\n    - 当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi\n    - FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 跨平台，几乎能在任何操作系统实现\n    - web 和 server 是独立的，结构清晰，可控性强\n    - 支持大并发\n    - 多进程，消耗较多内存\n\n### 模块模式\n\n- 模块模式指把 PHP 作为 web 服务器的一个模块运行\n- IIS 的 ISAPI 和 Apache 的 apache2handler\n\napache2handler\n- apache 监听一个用户请求 index.php\n- apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP\n- 在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook\n- php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。\n- php 执行完成后数据通过。so 或 dll 返回给 apache\n- apache 将数据返回到客户端\n- 应用场景\n    - 提供 http 服务\n- 优缺点\n    - 安装配置方便，不需要安装代码解析程序\n    - 支持多线程，占用资源少\n    - 支持大并发\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"PHP运行模式","published":1,"updated":"2019-11-12T02:05:15.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqok9000kyos6c0swnwly","content":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>php 分为五大运行模式</p>\n<ul>\n<li>cgi（通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi 升级版本）</li>\n<li>cli（命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）</li>\n<li>apache2handler（将 php 作为 apache 的模块）</li>\n<li>其他 (continuity,embed,litespeed,milter 等）</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI-模式\"><a href=\"#CLI-模式\" class=\"headerlink\" title=\"CLI 模式\"></a>CLI 模式</h3><ul>\n<li>Command Line Interface 的简称，支持 windows 和 Linux 平台</li>\n<li>直接在命令行运行，不需要 http server, 例如 php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用 PHP-CLI 和 GTK 包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI-模式\"><a href=\"#CGI-模式\" class=\"headerlink\" title=\"CGI 模式\"></a>CGI 模式</h3><ul>\n<li>Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行</li>\n<li>生成一个 php-cgi 进程，并执行 php 程序</li>\n<li>执行结果返回给 http 服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI-模式\"><a href=\"#FastCGI-模式\" class=\"headerlink\" title=\"FastCGI 模式\"></a>FastCGI 模式</h3><ul>\n<li>快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)</li>\n<li>FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接</li>\n<li>当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把 PHP 作为 web 服务器的一个模块运行</li>\n<li>IIS 的 ISAPI 和 Apache 的 apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache 监听一个用户请求 index.php</li>\n<li>apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP</li>\n<li>在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook</li>\n<li>php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。</li>\n<li>php 执行完成后数据通过。so 或 dll 返回给 apache</li>\n<li>apache 将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"运行模式\"><a href=\"#运行模式\" class=\"headerlink\" title=\"运行模式\"></a>运行模式</h3><p>php 分为五大运行模式</p>\n<ul>\n<li>cgi（通用网关接口 Common Gateway Interface)</li>\n<li>fast-cgi(cgi 升级版本）</li>\n<li>cli（命令行模式 Command Line Interface)</li>\n<li>isapi(Internet Server Application Program Interface, 是微软提供的一套面向 Internet 服务的 API 接口）</li>\n<li>apache2handler（将 php 作为 apache 的模块）</li>\n<li>其他 (continuity,embed,litespeed,milter 等）</li>\n</ul>\n<p>本地查看运行模式的方法</p>\n<pre><code class=\"lang-php\">phpinfo()\nphp -r &quot;echo php_sapi_name()&quot;\n</code></pre>\n<p>选择运行模式前提</p>\n<ul>\n<li>了解运行模式优缺点和应用场景</li>\n<li>根据业务本身结合上一条</li>\n</ul>\n<h3 id=\"CLI-模式\"><a href=\"#CLI-模式\" class=\"headerlink\" title=\"CLI 模式\"></a>CLI 模式</h3><ul>\n<li>Command Line Interface 的简称，支持 windows 和 Linux 平台</li>\n<li>直接在命令行运行，不需要 http server, 例如 php test.php</li>\n<li>应用场景<ul>\n<li>定时任务</li>\n<li>开发桌面应用使用 PHP-CLI 和 GTK 包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"CGI-模式\"><a href=\"#CGI-模式\" class=\"headerlink\" title=\"CGI 模式\"></a>CGI 模式</h3><ul>\n<li>Common Gateway Interface 的简称，连接网页和 web 服务器执行程序，把 http 服务器接受指令传给执行程序，把执行程序的结果返回给 http 服务器，支持跨平台</li>\n<li>执行过程<ul>\n<li>http 服务器接收到用户请求，如 index.php，会通过它配置的 cgi 服务执行</li>\n<li>生成一个 php-cgi 进程，并执行 php 程序</li>\n<li>执行结果返回给 http 服务器</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>性能比较差，每一个请求 fork 一个进程，消耗资源比较多 (fork-and-execute 模式）</li>\n<li>逐渐少见</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FastCGI-模式\"><a href=\"#FastCGI-模式\" class=\"headerlink\" title=\"FastCGI 模式\"></a>FastCGI 模式</h3><ul>\n<li>快速通用网关接口 (Fast Common Gateway Interface) 是 CGI 的增强版本，是一种让交互程序和 web 服务器通信的协议，致力于减少 web 服务器和 CGI 程序之间互动开销，使服务器可以同时处理更多的网页请求</li>\n<li>执行过程<ul>\n<li>web 服务器启动时载入 Fast CGI 进程管理器 (php-fpm)</li>\n<li>FastCGI 进程管理器会启动多个 CGI 进程等待 web 服务器的连接</li>\n<li>当客户端请求到达 web 服务器时，FastCGI 进程管理器选择并连接到一个 CGI 解释器。web 服务器把环境变量和标准输入发送到 FastCGI 子进程 php-cgi</li>\n<li>FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回 web 服务器。当 FastCGI 子进程关闭连接时，请求报告处理完成。FastCGI 子进程接着等待并处理来自 FastCGI 进程管理器的下一个连接。在 CGI 模式中，php-cgi 在此便退出了</li>\n</ul>\n</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>跨平台，几乎能在任何操作系统实现</li>\n<li>web 和 server 是独立的，结构清晰，可控性强</li>\n<li>支持大并发</li>\n<li>多进程，消耗较多内存</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模块模式\"><a href=\"#模块模式\" class=\"headerlink\" title=\"模块模式\"></a>模块模式</h3><ul>\n<li>模块模式指把 PHP 作为 web 服务器的一个模块运行</li>\n<li>IIS 的 ISAPI 和 Apache 的 apache2handler</li>\n</ul>\n<p>apache2handler</p>\n<ul>\n<li>apache 监听一个用户请求 index.php</li>\n<li>apache 根据 conf 文件配置的 LoadModule php_module modules/mod_php5.so(windows 下面是 php5apache2_2.dll) 调用 PHP</li>\n<li>在 mod_php5.so 注册一个 php 的钩子 php_ap2_register_hook</li>\n<li>php_ap2_register_hook 钩子函数中包括 4 个挂钩以及对应的函数 ap_hook_pre_config，ap_hook_post_config，ap_hook_handler，ap_hook_child_init。其中 pre_config，post_config，child_init 是启动挂钩，在服务器启动时调用。handler 时请求挂钩，在服务器处理请求时调用。其中 post_config 挂钩中启动 php。</li>\n<li>php 执行完成后数据通过。so 或 dll 返回给 apache</li>\n<li>apache 将数据返回到客户端</li>\n<li>应用场景<ul>\n<li>提供 http 服务</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>安装配置方便，不需要安装代码解析程序</li>\n<li>支持多线程，占用资源少</li>\n<li>支持大并发</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"docker+mysql 主从配置","date":"2019-03-28T08:15:38.000Z","top":0,"_content":"\n### 1. 安装启动 docker\n\n```bash\nyum install docker\nsystemctl start docker\n```\n\n### 2. 启动 docker 容器\n\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n\n### 3. 修改 mysql 配置文件\n\n这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入\n\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n\n重启从库容器\n\n### 4. 配置 mysql 主从\n\n远程连接主库和从库\n\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n\n### 5. 测试接口\n\n主库中添加表，查看从库是否同步\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/docker-mysql主从配置.md","raw":"---\ntitle: docker+mysql 主从配置\ndate: 2019-03-28 16:15:38\ntags: [docker, mysql]\ntop: 0\n---\n\n### 1. 安装启动 docker\n\n```bash\nyum install docker\nsystemctl start docker\n```\n\n### 2. 启动 docker 容器\n\n```bash\ngit clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n```\n\n### 3. 修改 mysql 配置文件\n\n这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入\n\n```sql\n[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n```\n\n重启从库容器\n\n### 4. 配置 mysql 主从\n\n远程连接主库和从库\n\n```sql\n主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to 'backup'@'%' identified by 'backup';\nshow grants for 'backup'@'%';\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST='主库ip',\nMASTER_PORT=主库端口,\nMASTER_USER='backup',\nMASTER_PASSWORD='backup';\n\nSTART SLAVE;\nshow slave status;\n```\n\n### 5. 测试接口\n\n主库中添加表，查看从库是否同步\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"docker-mysql主从配置","published":1,"updated":"2019-11-12T02:05:15.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoka000lyos639jrx3wk","content":"<h3 id=\"1-安装启动-docker\"><a href=\"#1-安装启动-docker\" class=\"headerlink\" title=\"1. 安装启动 docker\"></a>1. 安装启动 docker</h3><pre><code class=\"lang-bash\">yum install docker\nsystemctl start docker\n</code></pre>\n<h3 id=\"2-启动-docker-容器\"><a href=\"#2-启动-docker-容器\" class=\"headerlink\" title=\"2. 启动 docker 容器\"></a>2. 启动 docker 容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改-mysql-配置文件\"><a href=\"#3-修改-mysql-配置文件\" class=\"headerlink\" title=\"3. 修改 mysql 配置文件\"></a>3. 修改 mysql 配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置-mysql-主从\"><a href=\"#4-配置-mysql-主从\" class=\"headerlink\" title=\"4. 配置 mysql 主从\"></a>4. 配置 mysql 主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5. 测试接口\"></a>5. 测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-安装启动-docker\"><a href=\"#1-安装启动-docker\" class=\"headerlink\" title=\"1. 安装启动 docker\"></a>1. 安装启动 docker</h3><pre><code class=\"lang-bash\">yum install docker\nsystemctl start docker\n</code></pre>\n<h3 id=\"2-启动-docker-容器\"><a href=\"#2-启动-docker-容器\" class=\"headerlink\" title=\"2. 启动 docker 容器\"></a>2. 启动 docker 容器</h3><pre><code class=\"lang-bash\">git clone https://github.com/xushuhui/docker-server.git\ncd docker-server/mysql/compose\ndocker-compose up -d\n</code></pre>\n<h3 id=\"3-修改-mysql-配置文件\"><a href=\"#3-修改-mysql-配置文件\" class=\"headerlink\" title=\"3. 修改 mysql 配置文件\"></a>3. 修改 mysql 配置文件</h3><p>这时已经可以看到容器中有一个主数据库和两个从数据库，在从库的配置文件中写入</p>\n<pre><code class=\"lang-sql\">[mysqld]\nlog-bin=mysql-bin\nserver-id=2 #不能重复\nbinlog_format = mixed\nreplicate-ignore-db= mysql,information_schema,performance_schema #[必须]不需要同步的数据库。\n</code></pre>\n<p>重启从库容器</p>\n<h3 id=\"4-配置-mysql-主从\"><a href=\"#4-配置-mysql-主从\" class=\"headerlink\" title=\"4. 配置 mysql 主从\"></a>4. 配置 mysql 主从</h3><p>远程连接主库和从库</p>\n<pre><code class=\"lang-sql\">主库中执行，创建同步用户\nshow master status\nGRANT REPLICATION SLAVE ON *.* to &#39;backup&#39;@&#39;%&#39; identified by &#39;backup&#39;;\nshow grants for &#39;backup&#39;@&#39;%&#39;;\n\n从库中执行\nCHANGE MASTER TO MASTER_HOST=&#39;主库ip&#39;,\nMASTER_PORT=主库端口,\nMASTER_USER=&#39;backup&#39;,\nMASTER_PASSWORD=&#39;backup&#39;;\n\nSTART SLAVE;\nshow slave status;\n</code></pre>\n<h3 id=\"5-测试接口\"><a href=\"#5-测试接口\" class=\"headerlink\" title=\"5. 测试接口\"></a>5. 测试接口</h3><p>主库中添加表，查看从库是否同步</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"layout":"vscode","title":"golang无法安装golang.org安装包的问题","date":"2019-03-28T08:44:37.000Z","top":0,"_content":"### 一、问题\n今天在安装vscode时，报错\n```bash \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/golang无法安装golang-org安装包的问题.md","raw":"---\nlayout: vscode\ntitle: golang无法安装golang.org安装包的问题\ndate: 2019-03-28 16:44:37\ntags: [vscode,golang]\ncategories: \"golang\"\ntop: 0\n---\n### 一、问题\n今天在安装vscode时，报错\n```bash \ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n```\ngolang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。\n### 二、解决方式\n在[github](https://github.com/golang/lint/issues/288)中找到解决方法，\n\n``` bash\nmkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n```\n然后可以安装了\n``` go\ngo get -v -u github.com/ramya-rao-a/go-outline\n```\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"golang无法安装golang-org安装包的问题","published":1,"updated":"2019-11-12T02:05:15.253Z","comments":1,"photos":[],"link":"","_id":"ck31cqokb000pyos63ngzfrep","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code class=\"lang-bash\">github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在安装vscode时，报错</p>\n<pre><code class=\"lang-bash\">github.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: connect: connection refused\n</code></pre>\n<p>golang.org在国内被墙了，根本无法下载golang.org的安装包和源码包，以及类库。</p>\n<h3 id=\"二、解决方式\"><a href=\"#二、解决方式\" class=\"headerlink\" title=\"二、解决方式\"></a>二、解决方式</h3><p>在<a href=\"https://github.com/golang/lint/issues/288\" target=\"_blank\" rel=\"noopener\">github</a>中找到解决方法，</p>\n<pre><code class=\"lang-bash\">mkdir -p $GOPATH/src/golang.org/x/  \ncd $GOPATH/src/golang.org/x/\ngit clone https://github.com/golang/tools.git\n</code></pre>\n<p>然后可以安装了</p>\n<pre><code class=\"lang-go\">go get -v -u github.com/ramya-rao-a/go-outline\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"golang 封装日志","top":1,"date":"2019-07-03T09:54:20.000Z","_content":"\n### 问题\n\ngolang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能\n- 按天记录日志\n- 日志按不同级别分开\n- 日志放到统一的文件夹\n\n### 解决方案\n\n```go\nvar (\n\tInfo    *log.Logger\n\tWarning *log.Logger\n\tError   *log.Logger\n\tDebug   *log.Logger\n)\n\nfunc init() {\n\tInfo = log.New(newLogFile(\"info\"), \"\\nInfo:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tDebug = log.New(newLogFile(\"debug\"), \"\\nDebug:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tWarning = log.New(newLogFile(\"warning\"), \"\\nWarning:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tError = log.New(newLogFile(\"error\"), \"\\nError:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n\ttoday := time.Now().Format(\"2006-01-02\")\n\treturn \"./logs/\" + level + today + \".log\"\n}\nfunc newLogFile(level string) *os.File {\n\tfilename := todayFileName(level)\n\tf, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n\tif err != nil {\n\t\tlog.Fatalln(\"打开日志文件失败：\", err)\n\t}\n\treturn f\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/golang封装日志.md","raw":"---\ntitle: golang 封装日志\ntop: 1\ndate: 2019-07-03 17:54:20\ntags: [\"golang\"]\n---\n\n### 问题\n\ngolang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能\n- 按天记录日志\n- 日志按不同级别分开\n- 日志放到统一的文件夹\n\n### 解决方案\n\n```go\nvar (\n\tInfo    *log.Logger\n\tWarning *log.Logger\n\tError   *log.Logger\n\tDebug   *log.Logger\n)\n\nfunc init() {\n\tInfo = log.New(newLogFile(\"info\"), \"\\nInfo:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tDebug = log.New(newLogFile(\"debug\"), \"\\nDebug:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tWarning = log.New(newLogFile(\"warning\"), \"\\nWarning:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n\tError = log.New(newLogFile(\"error\"), \"\\nError:\\n\", log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n\ttoday := time.Now().Format(\"2006-01-02\")\n\treturn \"./logs/\" + level + today + \".log\"\n}\nfunc newLogFile(level string) *os.File {\n\tfilename := todayFileName(level)\n\tf, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n\tif err != nil {\n\t\tlog.Fatalln(\"打开日志文件失败：\", err)\n\t}\n\treturn f\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"golang封装日志","published":1,"updated":"2019-11-12T02:05:15.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokd000qyos6rxno8pt3","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>golang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能</p>\n<ul>\n<li>按天记录日志</li>\n<li>日志按不同级别分开</li>\n<li>日志放到统一的文件夹</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre><code class=\"lang-go\">var (\n    Info    *log.Logger\n    Warning *log.Logger\n    Error   *log.Logger\n    Debug   *log.Logger\n)\n\nfunc init() {\n    Info = log.New(newLogFile(&quot;info&quot;), &quot;\\nInfo:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Debug = log.New(newLogFile(&quot;debug&quot;), &quot;\\nDebug:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Warning = log.New(newLogFile(&quot;warning&quot;), &quot;\\nWarning:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Error = log.New(newLogFile(&quot;error&quot;), &quot;\\nError:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n    today := time.Now().Format(&quot;2006-01-02&quot;)\n    return &quot;./logs/&quot; + level + today + &quot;.log&quot;\n}\nfunc newLogFile(level string) *os.File {\n    filename := todayFileName(level)\n    f, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n    if err != nil {\n        log.Fatalln(&quot;打开日志文件失败：&quot;, err)\n    }\n    return f\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>golang 自带的日志 log 无法满足框架层的日志记录需求，需要单独实现几项功能</p>\n<ul>\n<li>按天记录日志</li>\n<li>日志按不同级别分开</li>\n<li>日志放到统一的文件夹</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><pre><code class=\"lang-go\">var (\n    Info    *log.Logger\n    Warning *log.Logger\n    Error   *log.Logger\n    Debug   *log.Logger\n)\n\nfunc init() {\n    Info = log.New(newLogFile(&quot;info&quot;), &quot;\\nInfo:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Debug = log.New(newLogFile(&quot;debug&quot;), &quot;\\nDebug:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Warning = log.New(newLogFile(&quot;warning&quot;), &quot;\\nWarning:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n    Error = log.New(newLogFile(&quot;error&quot;), &quot;\\nError:\\n&quot;, log.Ldate|log.Ltime|log.Llongfile)\n}\nfunc todayFileName(level string) string {\n    today := time.Now().Format(&quot;2006-01-02&quot;)\n    return &quot;./logs/&quot; + level + today + &quot;.log&quot;\n}\nfunc newLogFile(level string) *os.File {\n    filename := todayFileName(level)\n    f, err := os.OpenFile(filename, os.O_CREATE|os.O_RDONLY|os.O_APPEND, 0777)\n    if err != nil {\n        log.Fatalln(&quot;打开日志文件失败：&quot;, err)\n    }\n    return f\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 优化解决方案","top":1,"date":"2019-11-07T05:57:48.000Z","_content":"\n### 查询优化\n- SQL 改写\n- 索引优化\n\n### schema 优化\n- 范式化设计\n- 反范式化设计\n- 分库分表\n\n### 服务器硬件\n- cpu（计算频率高）\n- 磁盘 IO（FIO > SSD > 机器磁盘）\n- 内存\n\n### 操作系统配置\n- 配置内核参数（/etc/sysctl.conf）\n- 修改系统限制（/etc/security/limits.conf）\n\n### MySQL 配置\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql优化解决方案.md","raw":"---\ntitle: mysql 优化解决方案\ntop: 1\ndate: 2019-11-07 13:57:48\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 查询优化\n- SQL 改写\n- 索引优化\n\n### schema 优化\n- 范式化设计\n- 反范式化设计\n- 分库分表\n\n### 服务器硬件\n- cpu（计算频率高）\n- 磁盘 IO（FIO > SSD > 机器磁盘）\n- 内存\n\n### 操作系统配置\n- 配置内核参数（/etc/sysctl.conf）\n- 修改系统限制（/etc/security/limits.conf）\n\n### MySQL 配置\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql优化解决方案","published":1,"updated":"2019-11-12T02:05:15.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoke000uyos6yq7wplsu","content":"<h3 id=\"查询优化\"><a href=\"#查询优化\" class=\"headerlink\" title=\"查询优化\"></a>查询优化</h3><ul>\n<li>SQL 改写</li>\n<li>索引优化</li>\n</ul>\n<h3 id=\"schema-优化\"><a href=\"#schema-优化\" class=\"headerlink\" title=\"schema 优化\"></a>schema 优化</h3><ul>\n<li>范式化设计</li>\n<li>反范式化设计</li>\n<li>分库分表</li>\n</ul>\n<h3 id=\"服务器硬件\"><a href=\"#服务器硬件\" class=\"headerlink\" title=\"服务器硬件\"></a>服务器硬件</h3><ul>\n<li>cpu（计算频率高）</li>\n<li>磁盘 IO（FIO &gt; SSD &gt; 机器磁盘）</li>\n<li>内存</li>\n</ul>\n<h3 id=\"操作系统配置\"><a href=\"#操作系统配置\" class=\"headerlink\" title=\"操作系统配置\"></a>操作系统配置</h3><ul>\n<li>配置内核参数（/etc/sysctl.conf）</li>\n<li>修改系统限制（/etc/security/limits.conf）</li>\n</ul>\n<h3 id=\"MySQL-配置\"><a href=\"#MySQL-配置\" class=\"headerlink\" title=\"MySQL 配置\"></a>MySQL 配置</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"查询优化\"><a href=\"#查询优化\" class=\"headerlink\" title=\"查询优化\"></a>查询优化</h3><ul>\n<li>SQL 改写</li>\n<li>索引优化</li>\n</ul>\n<h3 id=\"schema-优化\"><a href=\"#schema-优化\" class=\"headerlink\" title=\"schema 优化\"></a>schema 优化</h3><ul>\n<li>范式化设计</li>\n<li>反范式化设计</li>\n<li>分库分表</li>\n</ul>\n<h3 id=\"服务器硬件\"><a href=\"#服务器硬件\" class=\"headerlink\" title=\"服务器硬件\"></a>服务器硬件</h3><ul>\n<li>cpu（计算频率高）</li>\n<li>磁盘 IO（FIO &gt; SSD &gt; 机器磁盘）</li>\n<li>内存</li>\n</ul>\n<h3 id=\"操作系统配置\"><a href=\"#操作系统配置\" class=\"headerlink\" title=\"操作系统配置\"></a>操作系统配置</h3><ul>\n<li>配置内核参数（/etc/sysctl.conf）</li>\n<li>修改系统限制（/etc/security/limits.conf）</li>\n</ul>\n<h3 id=\"MySQL-配置\"><a href=\"#MySQL-配置\" class=\"headerlink\" title=\"MySQL 配置\"></a>MySQL 配置</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"Hello World","top":0,"_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntop: 0\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-07-01T06:06:37.242Z","updated":"2019-08-01T02:43:49.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokf000xyos6muftzciz","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"lang-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"lang-bash\">$ hexo server\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"lang-bash\">$ hexo generate\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"lang-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"mysql 架构类问题之 MGR 架构","top":1,"date":"2019-09-22T09:15:04.000Z","_content":"### MGR 复制\n#### 定义\n- MGR（MySQL Group Repliacation）\n- 官方退出的一种基于 paxos 协议的复制\n- 是一种不同于异步复制的多 master 复制集群\n\n#### 两种模式\n##### 单主模式\n     app \n    / | \\\n 主 1 主 2 主 3\n（读写)（读）（读）\n- group_replication_single_primary_mode=ON\n\n##### 多主模式\n     app \n    / | \\\n 主 1 主 2 主 3\n（读写)（读写）（读写）\n- group_replication_single_primary_mode=OFF\n\n#### 架构需要的资源\n|集群大小| 投票数|允许宕机数量|\n|-|-|-|\n|3|2|1|\n|4|3|1|\n|5|3|2|\n|6|4|2|\n|7|4|3|\n|8|5|3|\n|9|5|4|\n\n#### 架构配置步骤\n- 安装 group_replication 插件\n- 在第一个实例上建立复制用户\n- 配置第一个组实例\n- 把其他实例加到组\n\n#### 架构优点\n- group replication 组内成员间基本无延迟\n- 可以支持多写操作，读写服务高可用\n- 数据强一致，可以保证不丢失事务\n\n#### 架构缺点\n- 只支持 InnoDB 存储引擎的表，并且每个表必须有一个主键\n- 单主模式下很难确认下一个主键\n- 只能用在 GTID 模式的复制形式下，且日志格式必须是 row\n\n#### 架构适用场景\n- 对主从延迟十分敏感的应用场景\n- 希望可以对读写提供高可用的场景\n- 希望可以保证数据强一致的场景\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql架构类问题之MGR架构.md","raw":"---\ntitle: mysql 架构类问题之 MGR 架构\ntop: 1\ndate: 2019-09-22 17:15:04\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### MGR 复制\n#### 定义\n- MGR（MySQL Group Repliacation）\n- 官方退出的一种基于 paxos 协议的复制\n- 是一种不同于异步复制的多 master 复制集群\n\n#### 两种模式\n##### 单主模式\n     app \n    / | \\\n 主 1 主 2 主 3\n（读写)（读）（读）\n- group_replication_single_primary_mode=ON\n\n##### 多主模式\n     app \n    / | \\\n 主 1 主 2 主 3\n（读写)（读写）（读写）\n- group_replication_single_primary_mode=OFF\n\n#### 架构需要的资源\n|集群大小| 投票数|允许宕机数量|\n|-|-|-|\n|3|2|1|\n|4|3|1|\n|5|3|2|\n|6|4|2|\n|7|4|3|\n|8|5|3|\n|9|5|4|\n\n#### 架构配置步骤\n- 安装 group_replication 插件\n- 在第一个实例上建立复制用户\n- 配置第一个组实例\n- 把其他实例加到组\n\n#### 架构优点\n- group replication 组内成员间基本无延迟\n- 可以支持多写操作，读写服务高可用\n- 数据强一致，可以保证不丢失事务\n\n#### 架构缺点\n- 只支持 InnoDB 存储引擎的表，并且每个表必须有一个主键\n- 单主模式下很难确认下一个主键\n- 只能用在 GTID 模式的复制形式下，且日志格式必须是 row\n\n#### 架构适用场景\n- 对主从延迟十分敏感的应用场景\n- 希望可以对读写提供高可用的场景\n- 希望可以保证数据强一致的场景\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql架构类问题之MGR架构","published":1,"updated":"2019-11-15T01:59:33.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokg000zyos6nvso3k6f","content":"<h3 id=\"MGR-复制\"><a href=\"#MGR-复制\" class=\"headerlink\" title=\"MGR 复制\"></a>MGR 复制</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>MGR（MySQL Group Repliacation）</li>\n<li>官方退出的一种基于 paxos 协议的复制</li>\n<li>是一种不同于异步复制的多 master 复制集群</li>\n</ul>\n<h4 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a>两种模式</h4><h5 id=\"单主模式\"><a href=\"#单主模式\" class=\"headerlink\" title=\"单主模式\"></a>单主模式</h5><pre><code> app \n/ | \\\n</code></pre><p> 主 1 主 2 主 3<br>（读写)（读）（读）</p>\n<ul>\n<li>group_replication_single_primary_mode=ON</li>\n</ul>\n<h5 id=\"多主模式\"><a href=\"#多主模式\" class=\"headerlink\" title=\"多主模式\"></a>多主模式</h5><pre><code> app \n/ | \\\n</code></pre><p> 主 1 主 2 主 3<br>（读写)（读写）（读写）</p>\n<ul>\n<li>group_replication_single_primary_mode=OFF</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>集群大小</th>\n<th>投票数</th>\n<th>允许宕机数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>8</td>\n<td>5</td>\n<td>3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>安装 group_replication 插件</li>\n<li>在第一个实例上建立复制用户</li>\n<li>配置第一个组实例</li>\n<li>把其他实例加到组</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>group replication 组内成员间基本无延迟</li>\n<li>可以支持多写操作，读写服务高可用</li>\n<li>数据强一致，可以保证不丢失事务</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>只支持 InnoDB 存储引擎的表，并且每个表必须有一个主键</li>\n<li>单主模式下很难确认下一个主键</li>\n<li>只能用在 GTID 模式的复制形式下，且日志格式必须是 row</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>对主从延迟十分敏感的应用场景</li>\n<li>希望可以对读写提供高可用的场景</li>\n<li>希望可以保证数据强一致的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MGR-复制\"><a href=\"#MGR-复制\" class=\"headerlink\" title=\"MGR 复制\"></a>MGR 复制</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>MGR（MySQL Group Repliacation）</li>\n<li>官方退出的一种基于 paxos 协议的复制</li>\n<li>是一种不同于异步复制的多 master 复制集群</li>\n</ul>\n<h4 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a>两种模式</h4><h5 id=\"单主模式\"><a href=\"#单主模式\" class=\"headerlink\" title=\"单主模式\"></a>单主模式</h5><pre><code> app \n/ | \\\n</code></pre><p> 主 1 主 2 主 3<br>（读写)（读）（读）</p>\n<ul>\n<li>group_replication_single_primary_mode=ON</li>\n</ul>\n<h5 id=\"多主模式\"><a href=\"#多主模式\" class=\"headerlink\" title=\"多主模式\"></a>多主模式</h5><pre><code> app \n/ | \\\n</code></pre><p> 主 1 主 2 主 3<br>（读写)（读写）（读写）</p>\n<ul>\n<li>group_replication_single_primary_mode=OFF</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>集群大小</th>\n<th>投票数</th>\n<th>允许宕机数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>3</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>4</td>\n<td>3</td>\n</tr>\n<tr>\n<td>8</td>\n<td>5</td>\n<td>3</td>\n</tr>\n<tr>\n<td>9</td>\n<td>5</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>安装 group_replication 插件</li>\n<li>在第一个实例上建立复制用户</li>\n<li>配置第一个组实例</li>\n<li>把其他实例加到组</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>group replication 组内成员间基本无延迟</li>\n<li>可以支持多写操作，读写服务高可用</li>\n<li>数据强一致，可以保证不丢失事务</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>只支持 InnoDB 存储引擎的表，并且每个表必须有一个主键</li>\n<li>单主模式下很难确认下一个主键</li>\n<li>只能用在 GTID 模式的复制形式下，且日志格式必须是 row</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>对主从延迟十分敏感的应用场景</li>\n<li>希望可以对读写提供高可用的场景</li>\n<li>希望可以保证数据强一致的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql架构类问题之MHA架构","top":1,"date":"2019-09-21T09:15:04.000Z","_content":"\n### MHA 架构\n#### 适用的主从复制架构\n     主 \n    / | \\\n 从1 从2 从3\n\n#### 故障转移步骤\n- 选举具有最新更新的slave\n- 尝试从宕机的master保存二进制日志\n- 应用差异的中继日志到其他slave\n- 应用从master保存的二进制日志\n- 提升选举的slave为新的master\n- 配置其他slave向新的mater同步\n\n#### 架构需要的资源\n|资源| 数量|说明|\n|-|-|-|\n|主DB|1|用于初始主从复制模式的master服务器|\n|从DB|2-N|可以配置2台或多台从服务器|\n|IP地址|n+2|N为MySQL服务器数量|\n|监控用户|1|用于监控数据库状态的MySQL用户（all privileges）\n|复制用户|1|用于配置MySQL复制的MySQL用户（replication slave）|\n\n#### 架构配置步骤\n- 配置一主多从复制的集群架构\n- 安装centos的YUM扩展包\n- 配置集群内各主机的SSH免认证\n- 在各节点安装mha_node\n- 在管理节点安装mha_manager\n- 配置并启动MHA管理进程\n\n#### 架构优点\n- 支持GTID的复制方式和基于日志点的复制方式\n- 可从多个slave中选举最适合的新master\n- 会尝试从旧master中尽可能多的保存未同步日志\n\n#### 架构缺点\n- 未必能获取到旧master未同步的日志（主备使用5.7以后的半同步复制）\n- 需要自行开发写VIP转移脚本\n- 只监控master而没有对slave实现高可用的办法\n\n\n#### 架构适用场景\n- 使用基于GTID的复制方式\n- 使用一主多从的复制架构\n- 希望更少数据丢失的场景\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql架构类问题之MHA架构.md","raw":"---\ntitle: mysql架构类问题之MHA架构\ntop: 1\ndate: 2019-09-21 17:15:04\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### MHA 架构\n#### 适用的主从复制架构\n     主 \n    / | \\\n 从1 从2 从3\n\n#### 故障转移步骤\n- 选举具有最新更新的slave\n- 尝试从宕机的master保存二进制日志\n- 应用差异的中继日志到其他slave\n- 应用从master保存的二进制日志\n- 提升选举的slave为新的master\n- 配置其他slave向新的mater同步\n\n#### 架构需要的资源\n|资源| 数量|说明|\n|-|-|-|\n|主DB|1|用于初始主从复制模式的master服务器|\n|从DB|2-N|可以配置2台或多台从服务器|\n|IP地址|n+2|N为MySQL服务器数量|\n|监控用户|1|用于监控数据库状态的MySQL用户（all privileges）\n|复制用户|1|用于配置MySQL复制的MySQL用户（replication slave）|\n\n#### 架构配置步骤\n- 配置一主多从复制的集群架构\n- 安装centos的YUM扩展包\n- 配置集群内各主机的SSH免认证\n- 在各节点安装mha_node\n- 在管理节点安装mha_manager\n- 配置并启动MHA管理进程\n\n#### 架构优点\n- 支持GTID的复制方式和基于日志点的复制方式\n- 可从多个slave中选举最适合的新master\n- 会尝试从旧master中尽可能多的保存未同步日志\n\n#### 架构缺点\n- 未必能获取到旧master未同步的日志（主备使用5.7以后的半同步复制）\n- 需要自行开发写VIP转移脚本\n- 只监控master而没有对slave实现高可用的办法\n\n\n#### 架构适用场景\n- 使用基于GTID的复制方式\n- 使用一主多从的复制架构\n- 希望更少数据丢失的场景\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql架构类问题之MHA架构","published":1,"updated":"2019-11-14T01:32:05.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoki0012yos6oq9nh1u8","content":"<h3 id=\"MHA-架构\"><a href=\"#MHA-架构\" class=\"headerlink\" title=\"MHA 架构\"></a>MHA 架构</h3><h4 id=\"适用的主从复制架构\"><a href=\"#适用的主从复制架构\" class=\"headerlink\" title=\"适用的主从复制架构\"></a>适用的主从复制架构</h4><pre><code> 主 \n/ | \\\n</code></pre><p> 从1 从2 从3</p>\n<h4 id=\"故障转移步骤\"><a href=\"#故障转移步骤\" class=\"headerlink\" title=\"故障转移步骤\"></a>故障转移步骤</h4><ul>\n<li>选举具有最新更新的slave</li>\n<li>尝试从宕机的master保存二进制日志</li>\n<li>应用差异的中继日志到其他slave</li>\n<li>应用从master保存的二进制日志</li>\n<li>提升选举的slave为新的master</li>\n<li>配置其他slave向新的mater同步</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主DB</td>\n<td>1</td>\n<td>用于初始主从复制模式的master服务器</td>\n</tr>\n<tr>\n<td>从DB</td>\n<td>2-N</td>\n<td>可以配置2台或多台从服务器</td>\n</tr>\n<tr>\n<td>IP地址</td>\n<td>n+2</td>\n<td>N为MySQL服务器数量</td>\n</tr>\n<tr>\n<td>监控用户</td>\n<td>1</td>\n<td>用于监控数据库状态的MySQL用户（all privileges）</td>\n</tr>\n<tr>\n<td>复制用户</td>\n<td>1</td>\n<td>用于配置MySQL复制的MySQL用户（replication slave）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>配置一主多从复制的集群架构</li>\n<li>安装centos的YUM扩展包</li>\n<li>配置集群内各主机的SSH免认证</li>\n<li>在各节点安装mha_node</li>\n<li>在管理节点安装mha_manager</li>\n<li>配置并启动MHA管理进程</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>支持GTID的复制方式和基于日志点的复制方式</li>\n<li>可从多个slave中选举最适合的新master</li>\n<li>会尝试从旧master中尽可能多的保存未同步日志</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>未必能获取到旧master未同步的日志（主备使用5.7以后的半同步复制）</li>\n<li>需要自行开发写VIP转移脚本</li>\n<li>只监控master而没有对slave实现高可用的办法</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>使用基于GTID的复制方式</li>\n<li>使用一主多从的复制架构</li>\n<li>希望更少数据丢失的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MHA-架构\"><a href=\"#MHA-架构\" class=\"headerlink\" title=\"MHA 架构\"></a>MHA 架构</h3><h4 id=\"适用的主从复制架构\"><a href=\"#适用的主从复制架构\" class=\"headerlink\" title=\"适用的主从复制架构\"></a>适用的主从复制架构</h4><pre><code> 主 \n/ | \\\n</code></pre><p> 从1 从2 从3</p>\n<h4 id=\"故障转移步骤\"><a href=\"#故障转移步骤\" class=\"headerlink\" title=\"故障转移步骤\"></a>故障转移步骤</h4><ul>\n<li>选举具有最新更新的slave</li>\n<li>尝试从宕机的master保存二进制日志</li>\n<li>应用差异的中继日志到其他slave</li>\n<li>应用从master保存的二进制日志</li>\n<li>提升选举的slave为新的master</li>\n<li>配置其他slave向新的mater同步</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主DB</td>\n<td>1</td>\n<td>用于初始主从复制模式的master服务器</td>\n</tr>\n<tr>\n<td>从DB</td>\n<td>2-N</td>\n<td>可以配置2台或多台从服务器</td>\n</tr>\n<tr>\n<td>IP地址</td>\n<td>n+2</td>\n<td>N为MySQL服务器数量</td>\n</tr>\n<tr>\n<td>监控用户</td>\n<td>1</td>\n<td>用于监控数据库状态的MySQL用户（all privileges）</td>\n</tr>\n<tr>\n<td>复制用户</td>\n<td>1</td>\n<td>用于配置MySQL复制的MySQL用户（replication slave）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>配置一主多从复制的集群架构</li>\n<li>安装centos的YUM扩展包</li>\n<li>配置集群内各主机的SSH免认证</li>\n<li>在各节点安装mha_node</li>\n<li>在管理节点安装mha_manager</li>\n<li>配置并启动MHA管理进程</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>支持GTID的复制方式和基于日志点的复制方式</li>\n<li>可从多个slave中选举最适合的新master</li>\n<li>会尝试从旧master中尽可能多的保存未同步日志</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>未必能获取到旧master未同步的日志（主备使用5.7以后的半同步复制）</li>\n<li>需要自行开发写VIP转移脚本</li>\n<li>只监控master而没有对slave实现高可用的办法</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>使用基于GTID的复制方式</li>\n<li>使用一主多从的复制架构</li>\n<li>希望更少数据丢失的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql架构类问题之MMM架构","top":1,"date":"2019-09-20T08:13:52.000Z","_content":"\n### MMM 和 MHA 架构\n#### MMM 和 MHA 架构的作用\n\n* 对主从复制集群的 master 进行监控\n* 当 master 宕机后把写 VIP 迁移到新 master\n* 重新配置集群中其他 slave 对新的 master 同步\n\n\n### MMM 架构\n#### 适用的主从复制架构\n\n     主  --  主备\n    / | \\\n 从1 从2 从3\n \n#### 故障转移步骤\n##### slave 服务器上的操作\n- 完成原 master 上已复制日志的恢复\n- 适用 change master 命令配置新 master\n\n##### 主备服务器上的操作\n- 设置 read_only=off\n- 迁移写 vip 到新 master\n\n#### 架构需要的资源\n|资源| 数量|说明|\n|-|-|-|\n|主DB|2|用于主备模式的主主复制配置|\n|从DB|0-N|可以配置0台或多台从服务器|\n|IP地址|2n+1|N为MySQL服务器数量|\n|监控用户|1|用于监控数据库状态的MySQL用户（replication client）\n|代理用户|1|用于MMM的agent端改变read_only状态（super，replication client，process）|\n|复制用户|1|用于配置数据库状态的MySQL用户（replication slave）|\n\n#### 架构配置步骤\n- 配置主主复制的集群架构\n- 安装centos的YUM扩展包\n- 安装所需的Perl支持包\n- 安装MMM工具包\n- 配置并启用MMM服务\n\n\n#### 架构优点\n- 提供了读写VIP配置，使读写请求都可以达到高可用\n- 工具包相对完善，不需要额外开发脚本\n- 完成故障转移后，可以持续对MySQL集群进行高可用监控\n\n#### 架构缺点\n- 故障切换简单粗暴易丢事务（主备使用5.7以后的半同步复制）\n- 不支持GTID的复制方式（自行修改perl脚本实现）\n- 社区不活跃，很久未更新版本\n\n#### 架构适用场景\n- 使用基于日志点的主从复制方式\n- 使用主主复制架构\n- 需要考虑读高可用的场景\n\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql架构类问题之MMM架构.md","raw":"---\ntitle: mysql架构类问题之MMM架构\ntop: 1\ndate: 2019-09-20 16:13:52\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### MMM 和 MHA 架构\n#### MMM 和 MHA 架构的作用\n\n* 对主从复制集群的 master 进行监控\n* 当 master 宕机后把写 VIP 迁移到新 master\n* 重新配置集群中其他 slave 对新的 master 同步\n\n\n### MMM 架构\n#### 适用的主从复制架构\n\n     主  --  主备\n    / | \\\n 从1 从2 从3\n \n#### 故障转移步骤\n##### slave 服务器上的操作\n- 完成原 master 上已复制日志的恢复\n- 适用 change master 命令配置新 master\n\n##### 主备服务器上的操作\n- 设置 read_only=off\n- 迁移写 vip 到新 master\n\n#### 架构需要的资源\n|资源| 数量|说明|\n|-|-|-|\n|主DB|2|用于主备模式的主主复制配置|\n|从DB|0-N|可以配置0台或多台从服务器|\n|IP地址|2n+1|N为MySQL服务器数量|\n|监控用户|1|用于监控数据库状态的MySQL用户（replication client）\n|代理用户|1|用于MMM的agent端改变read_only状态（super，replication client，process）|\n|复制用户|1|用于配置数据库状态的MySQL用户（replication slave）|\n\n#### 架构配置步骤\n- 配置主主复制的集群架构\n- 安装centos的YUM扩展包\n- 安装所需的Perl支持包\n- 安装MMM工具包\n- 配置并启用MMM服务\n\n\n#### 架构优点\n- 提供了读写VIP配置，使读写请求都可以达到高可用\n- 工具包相对完善，不需要额外开发脚本\n- 完成故障转移后，可以持续对MySQL集群进行高可用监控\n\n#### 架构缺点\n- 故障切换简单粗暴易丢事务（主备使用5.7以后的半同步复制）\n- 不支持GTID的复制方式（自行修改perl脚本实现）\n- 社区不活跃，很久未更新版本\n\n#### 架构适用场景\n- 使用基于日志点的主从复制方式\n- 使用主主复制架构\n- 需要考虑读高可用的场景\n\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql架构类问题之MMM架构","published":1,"updated":"2019-11-14T01:31:59.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokj0015yos6awckd521","content":"<h3 id=\"MMM-和-MHA-架构\"><a href=\"#MMM-和-MHA-架构\" class=\"headerlink\" title=\"MMM 和 MHA 架构\"></a>MMM 和 MHA 架构</h3><h4 id=\"MMM-和-MHA-架构的作用\"><a href=\"#MMM-和-MHA-架构的作用\" class=\"headerlink\" title=\"MMM 和 MHA 架构的作用\"></a>MMM 和 MHA 架构的作用</h4><ul>\n<li>对主从复制集群的 master 进行监控</li>\n<li>当 master 宕机后把写 VIP 迁移到新 master</li>\n<li>重新配置集群中其他 slave 对新的 master 同步</li>\n</ul>\n<h3 id=\"MMM-架构\"><a href=\"#MMM-架构\" class=\"headerlink\" title=\"MMM 架构\"></a>MMM 架构</h3><h4 id=\"适用的主从复制架构\"><a href=\"#适用的主从复制架构\" class=\"headerlink\" title=\"适用的主从复制架构\"></a>适用的主从复制架构</h4><pre><code> 主  --  主备\n/ | \\\n</code></pre><p> 从1 从2 从3</p>\n<h4 id=\"故障转移步骤\"><a href=\"#故障转移步骤\" class=\"headerlink\" title=\"故障转移步骤\"></a>故障转移步骤</h4><h5 id=\"slave-服务器上的操作\"><a href=\"#slave-服务器上的操作\" class=\"headerlink\" title=\"slave 服务器上的操作\"></a>slave 服务器上的操作</h5><ul>\n<li>完成原 master 上已复制日志的恢复</li>\n<li>适用 change master 命令配置新 master</li>\n</ul>\n<h5 id=\"主备服务器上的操作\"><a href=\"#主备服务器上的操作\" class=\"headerlink\" title=\"主备服务器上的操作\"></a>主备服务器上的操作</h5><ul>\n<li>设置 read_only=off</li>\n<li>迁移写 vip 到新 master</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主DB</td>\n<td>2</td>\n<td>用于主备模式的主主复制配置</td>\n</tr>\n<tr>\n<td>从DB</td>\n<td>0-N</td>\n<td>可以配置0台或多台从服务器</td>\n</tr>\n<tr>\n<td>IP地址</td>\n<td>2n+1</td>\n<td>N为MySQL服务器数量</td>\n</tr>\n<tr>\n<td>监控用户</td>\n<td>1</td>\n<td>用于监控数据库状态的MySQL用户（replication client）</td>\n</tr>\n<tr>\n<td>代理用户</td>\n<td>1</td>\n<td>用于MMM的agent端改变read_only状态（super，replication client，process）</td>\n</tr>\n<tr>\n<td>复制用户</td>\n<td>1</td>\n<td>用于配置数据库状态的MySQL用户（replication slave）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>配置主主复制的集群架构</li>\n<li>安装centos的YUM扩展包</li>\n<li>安装所需的Perl支持包</li>\n<li>安装MMM工具包</li>\n<li>配置并启用MMM服务</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>提供了读写VIP配置，使读写请求都可以达到高可用</li>\n<li>工具包相对完善，不需要额外开发脚本</li>\n<li>完成故障转移后，可以持续对MySQL集群进行高可用监控</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>故障切换简单粗暴易丢事务（主备使用5.7以后的半同步复制）</li>\n<li>不支持GTID的复制方式（自行修改perl脚本实现）</li>\n<li>社区不活跃，很久未更新版本</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>使用基于日志点的主从复制方式</li>\n<li>使用主主复制架构</li>\n<li>需要考虑读高可用的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MMM-和-MHA-架构\"><a href=\"#MMM-和-MHA-架构\" class=\"headerlink\" title=\"MMM 和 MHA 架构\"></a>MMM 和 MHA 架构</h3><h4 id=\"MMM-和-MHA-架构的作用\"><a href=\"#MMM-和-MHA-架构的作用\" class=\"headerlink\" title=\"MMM 和 MHA 架构的作用\"></a>MMM 和 MHA 架构的作用</h4><ul>\n<li>对主从复制集群的 master 进行监控</li>\n<li>当 master 宕机后把写 VIP 迁移到新 master</li>\n<li>重新配置集群中其他 slave 对新的 master 同步</li>\n</ul>\n<h3 id=\"MMM-架构\"><a href=\"#MMM-架构\" class=\"headerlink\" title=\"MMM 架构\"></a>MMM 架构</h3><h4 id=\"适用的主从复制架构\"><a href=\"#适用的主从复制架构\" class=\"headerlink\" title=\"适用的主从复制架构\"></a>适用的主从复制架构</h4><pre><code> 主  --  主备\n/ | \\\n</code></pre><p> 从1 从2 从3</p>\n<h4 id=\"故障转移步骤\"><a href=\"#故障转移步骤\" class=\"headerlink\" title=\"故障转移步骤\"></a>故障转移步骤</h4><h5 id=\"slave-服务器上的操作\"><a href=\"#slave-服务器上的操作\" class=\"headerlink\" title=\"slave 服务器上的操作\"></a>slave 服务器上的操作</h5><ul>\n<li>完成原 master 上已复制日志的恢复</li>\n<li>适用 change master 命令配置新 master</li>\n</ul>\n<h5 id=\"主备服务器上的操作\"><a href=\"#主备服务器上的操作\" class=\"headerlink\" title=\"主备服务器上的操作\"></a>主备服务器上的操作</h5><ul>\n<li>设置 read_only=off</li>\n<li>迁移写 vip 到新 master</li>\n</ul>\n<h4 id=\"架构需要的资源\"><a href=\"#架构需要的资源\" class=\"headerlink\" title=\"架构需要的资源\"></a>架构需要的资源</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>资源</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主DB</td>\n<td>2</td>\n<td>用于主备模式的主主复制配置</td>\n</tr>\n<tr>\n<td>从DB</td>\n<td>0-N</td>\n<td>可以配置0台或多台从服务器</td>\n</tr>\n<tr>\n<td>IP地址</td>\n<td>2n+1</td>\n<td>N为MySQL服务器数量</td>\n</tr>\n<tr>\n<td>监控用户</td>\n<td>1</td>\n<td>用于监控数据库状态的MySQL用户（replication client）</td>\n</tr>\n<tr>\n<td>代理用户</td>\n<td>1</td>\n<td>用于MMM的agent端改变read_only状态（super，replication client，process）</td>\n</tr>\n<tr>\n<td>复制用户</td>\n<td>1</td>\n<td>用于配置数据库状态的MySQL用户（replication slave）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"架构配置步骤\"><a href=\"#架构配置步骤\" class=\"headerlink\" title=\"架构配置步骤\"></a>架构配置步骤</h4><ul>\n<li>配置主主复制的集群架构</li>\n<li>安装centos的YUM扩展包</li>\n<li>安装所需的Perl支持包</li>\n<li>安装MMM工具包</li>\n<li>配置并启用MMM服务</li>\n</ul>\n<h4 id=\"架构优点\"><a href=\"#架构优点\" class=\"headerlink\" title=\"架构优点\"></a>架构优点</h4><ul>\n<li>提供了读写VIP配置，使读写请求都可以达到高可用</li>\n<li>工具包相对完善，不需要额外开发脚本</li>\n<li>完成故障转移后，可以持续对MySQL集群进行高可用监控</li>\n</ul>\n<h4 id=\"架构缺点\"><a href=\"#架构缺点\" class=\"headerlink\" title=\"架构缺点\"></a>架构缺点</h4><ul>\n<li>故障切换简单粗暴易丢事务（主备使用5.7以后的半同步复制）</li>\n<li>不支持GTID的复制方式（自行修改perl脚本实现）</li>\n<li>社区不活跃，很久未更新版本</li>\n</ul>\n<h4 id=\"架构适用场景\"><a href=\"#架构适用场景\" class=\"headerlink\" title=\"架构适用场景\"></a>架构适用场景</h4><ul>\n<li>使用基于日志点的主从复制方式</li>\n<li>使用主主复制架构</li>\n<li>需要考虑读高可用的场景</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 索引最左原则","date":"2019-05-06T23:52:59.000Z","top":0,"_content":"\n### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试 sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql索引最左原则问题.md","raw":"---\ntitle: mysql 索引最左原则\ndate: 2019-05-07 07:52:59\ntags:\ncategories: \"mysql\"\ntop: 0\n---\n\n### 建表\n\n```sql\nCREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\n```\n\n### 测试 sql\n\n#### 第一种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第二种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 and name=\"tom\" \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n\n```\n\n第三种\n\n```sql\nmysql> explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n第四种\n\n```sql\nmysql> explain  SELECT * FROM `user` where name=\"tom\" and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n\n```\n\n### 总结\n\n由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。\n\nb+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql索引最左原则问题","published":1,"updated":"2019-11-12T02:05:15.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokk0018yos6snznj292","content":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试-sql\"><a href=\"#测试-sql\" class=\"headerlink\" title=\"测试 sql\"></a>测试 sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre><code class=\"lang-sql\">CREATE TABLE `user` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `name` varchar(10) DEFAULT NULL,\n  `sex` tinyint(1) DEFAULT NULL,\n  `age` tinyint(2) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `Index_user` (`name`,`age`) USING BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n</code></pre>\n<h3 id=\"测试-sql\"><a href=\"#测试-sql\" class=\"headerlink\" title=\"测试 sql\"></a>测试 sql</h3><h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 43\n          ref: const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 and name=&quot;tom&quot; \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n</code></pre>\n<p>第三种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 3\n     filtered: 33.33\n        Extra: Using where\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<p>第四种</p>\n<pre><code class=\"lang-sql\">mysql&gt; explain  SELECT * FROM `user` where name=&quot;tom&quot; and age=18 \\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: user\n   partitions: NULL\n         type: ref\npossible_keys: Index_user\n          key: Index_user\n      key_len: 45\n          ref: const,const\n         rows: 1\n     filtered: 100.00\n        Extra: NULL\n1 row in set, 1 warning (0.00 sec)\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>由此可见，只有 sql 中 where 包含联合索引的首个字段的查询才能命中索引，这个叫索引的最左匹配特性。 联合索引的使用在写 where 条件的顺序无关，mysql 查询分析会进行优化而使用索引。但是减轻查询分析器的压力，最好和索引的从左到右的顺序一致。</p>\n<p>b+ 树的数据项是复合的数据结构，比如 (name,age,sex) 的时候，b+ 树是按照从左到右的顺序来建立搜索树的，比如当（张三，20,F) 这样的数据来检索的时候，b+ 树会优先比较 name 来确定下一步的所搜方向，如果 name 相同再依次比较 age 和 sex，最后得到检索的数据；但当 (20,F) 这样的没有 name 的数据来的时候，b+ 树就不知道第一步该查哪个节点，因为建立搜索树的时候 name 就是第一个比较因子，必须要先根据 name 来搜索才能知道下一步去哪里查询。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 详解（三）事务","top":1,"date":"2019-08-12T03:18:32.000Z","_content":"### 事务\n- 事务是数据库执行操作的最小逻辑单元\n- 事务可以由一个或多个 SQL 组成\n- 组成事务的 SQL 或全部成功或全部失败\n\n### 特性\n\n|特征|说明|\n|----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n### 并发问题\n#### 脏读\n- 一个事务读取了另一个事务未提交的数据\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n|select score from course where id=1 /*score=10*/| |\n||rollback; |\n\n#### 不可重复读\n- 一个事务前后两次读取同一数据不一致\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n| |commit|\n|select score from course where id=1 /*score=10*/| |\n|commit||\n\n#### 幻读\n- 一个事务前后两次读取结果集记录数不一致\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select id,score from course where score>9 and score<10 /*1,9.2 - 2,9.4*/| |\n| |start transation;|\n| |update course set score=9.5 where id=3|\n| |commit|\n|select id,score from course where score>9 and score<10/*1,9.2 - 2,9.4 -3,9.5* /| |\n|commit||\n\n### INNODB 事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|隔离性|并发性|\n|----- |-----|-----|-----|-----|-----|\n|串行化 |N|N|N|最高|最低|\n|可重复读 |N|N|N|||\n|已提交读 |N|Y|Y|||\n|未提交读 |Y|Y|Y|最低|最高|\n\n### INNODB 锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 事务阻塞\n- 由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源\n#### 发现阻塞\n```mysql\nselect waiting_pid as '被阻塞线程', waiting_query as '被阻塞 SQL',blocking_pid as '阻塞线程',\nblocking_query as '阻塞 SQL',wait_age as '阻塞时间',sql_kill_blocking_query as '建议操作' from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))>30\n```\n#### 解决阻塞\n- 终止占用资源的事务\n- 优化占用资源的事务 SQL\n\n### 死锁\n- 并行执行的多个事务互相占用了对方需要的资源\n#### 发现死锁\n```\nset global innodb_print_all_deadlocks=on;\n```\n#### 解决死锁\n- 数据库自行回滚占用资源少的事务\n- 并发事务按相同顺序占用资源\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql详解（三）事务.md","raw":"---\ntitle: mysql 详解（三）事务\ntop: 1\ndate: 2019-08-12 11:18:32\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 事务\n- 事务是数据库执行操作的最小逻辑单元\n- 事务可以由一个或多个 SQL 组成\n- 组成事务的 SQL 或全部成功或全部失败\n\n### 特性\n\n|特征|说明|\n|----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n### 并发问题\n#### 脏读\n- 一个事务读取了另一个事务未提交的数据\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n|select score from course where id=1 /*score=10*/| |\n||rollback; |\n\n#### 不可重复读\n- 一个事务前后两次读取同一数据不一致\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select score from course where id=1 /*score=9.2*/| |\n| |start transation;|\n| |update course set score=10 where id=1|\n| |commit|\n|select score from course where id=1 /*score=10*/| |\n|commit||\n\n#### 幻读\n- 一个事务前后两次读取结果集记录数不一致\n\n|事务 1|事务 2|\n|----- |-----|\n|start transation;| |\n|select id,score from course where score>9 and score<10 /*1,9.2 - 2,9.4*/| |\n| |start transation;|\n| |update course set score=9.5 where id=3|\n| |commit|\n|select id,score from course where score>9 and score<10/*1,9.2 - 2,9.4 -3,9.5* /| |\n|commit||\n\n### INNODB 事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|隔离性|并发性|\n|----- |-----|-----|-----|-----|-----|\n|串行化 |N|N|N|最高|最低|\n|可重复读 |N|N|N|||\n|已提交读 |N|Y|Y|||\n|未提交读 |Y|Y|Y|最低|最高|\n\n### INNODB 锁\n- 查询需要对资源加共享锁（S）\n- 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 事务阻塞\n- 由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源\n#### 发现阻塞\n```mysql\nselect waiting_pid as '被阻塞线程', waiting_query as '被阻塞 SQL',blocking_pid as '阻塞线程',\nblocking_query as '阻塞 SQL',wait_age as '阻塞时间',sql_kill_blocking_query as '建议操作' from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))>30\n```\n#### 解决阻塞\n- 终止占用资源的事务\n- 优化占用资源的事务 SQL\n\n### 死锁\n- 并行执行的多个事务互相占用了对方需要的资源\n#### 发现死锁\n```\nset global innodb_print_all_deadlocks=on;\n```\n#### 解决死锁\n- 数据库自行回滚占用资源少的事务\n- 并发事务按相同顺序占用资源\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql详解（三）事务","published":1,"updated":"2019-11-15T07:32:17.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokl0019yos6nf8h98ss","content":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><ul>\n<li>事务是数据库执行操作的最小逻辑单元</li>\n<li>事务可以由一个或多个 SQL 组成</li>\n<li>组成事务的 SQL 或全部成功或全部失败</li>\n</ul>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td>一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td>隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td>持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><ul>\n<li>一个事务读取了另一个事务未提交的数据</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>rollback;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><ul>\n<li>一个事务前后两次读取同一数据不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><ul>\n<li>一个事务前后两次读取结果集记录数不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10 /<em>1,9.2 - 2,9.4</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=9.5 where id=3</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10/<em>1,9.2 - 2,9.4 -3,9.5</em> /</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-事务隔离级别\"><a href=\"#INNODB-事务隔离级别\" class=\"headerlink\" title=\"INNODB 事务隔离级别\"></a>INNODB 事务隔离级别</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>隔离性</th>\n<th>并发性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>串行化</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>最高</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>未提交读</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>最低</td>\n<td>最高</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-锁\"><a href=\"#INNODB-锁\" class=\"headerlink\" title=\"INNODB 锁\"></a>INNODB 锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"事务阻塞\"><a href=\"#事务阻塞\" class=\"headerlink\" title=\"事务阻塞\"></a>事务阻塞</h3><ul>\n<li>由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源<h4 id=\"发现阻塞\"><a href=\"#发现阻塞\" class=\"headerlink\" title=\"发现阻塞\"></a>发现阻塞</h4><pre><code class=\"lang-mysql\">select waiting_pid as &#39;被阻塞线程&#39;, waiting_query as &#39;被阻塞 SQL&#39;,blocking_pid as &#39;阻塞线程&#39;,\nblocking_query as &#39;阻塞 SQL&#39;,wait_age as &#39;阻塞时间&#39;,sql_kill_blocking_query as &#39;建议操作&#39; from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))&gt;30\n</code></pre>\n<h4 id=\"解决阻塞\"><a href=\"#解决阻塞\" class=\"headerlink\" title=\"解决阻塞\"></a>解决阻塞</h4></li>\n<li>终止占用资源的事务</li>\n<li>优化占用资源的事务 SQL</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li>并行执行的多个事务互相占用了对方需要的资源<h4 id=\"发现死锁\"><a href=\"#发现死锁\" class=\"headerlink\" title=\"发现死锁\"></a>发现死锁</h4><pre><code>set global innodb_print_all_deadlocks=on;\n</code></pre><h4 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h4></li>\n<li>数据库自行回滚占用资源少的事务</li>\n<li>并发事务按相同顺序占用资源</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><ul>\n<li>事务是数据库执行操作的最小逻辑单元</li>\n<li>事务可以由一个或多个 SQL 组成</li>\n<li>组成事务的 SQL 或全部成功或全部失败</li>\n</ul>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td>一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td>隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td>持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"并发问题\"><a href=\"#并发问题\" class=\"headerlink\" title=\"并发问题\"></a>并发问题</h3><h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><ul>\n<li>一个事务读取了另一个事务未提交的数据</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>rollback;</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><ul>\n<li>一个事务前后两次读取同一数据不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=9.2</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=10 where id=1</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select score from course where id=1 /<em>score=10</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><ul>\n<li>一个事务前后两次读取结果集记录数不一致</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务 1</th>\n<th>事务 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start transation;</td>\n<td></td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10 /<em>1,9.2 - 2,9.4</em>/</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>start transation;</td>\n</tr>\n<tr>\n<td></td>\n<td>update course set score=9.5 where id=3</td>\n</tr>\n<tr>\n<td></td>\n<td>commit</td>\n</tr>\n<tr>\n<td>select id,score from course where score&gt;9 and score&lt;10/<em>1,9.2 - 2,9.4 -3,9.5</em> /</td>\n<td></td>\n</tr>\n<tr>\n<td>commit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-事务隔离级别\"><a href=\"#INNODB-事务隔离级别\" class=\"headerlink\" title=\"INNODB 事务隔离级别\"></a>INNODB 事务隔离级别</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n<th>隔离性</th>\n<th>并发性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>串行化</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>最高</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>已提交读</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>未提交读</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>最低</td>\n<td>最高</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-锁\"><a href=\"#INNODB-锁\" class=\"headerlink\" title=\"INNODB 锁\"></a>INNODB 锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"事务阻塞\"><a href=\"#事务阻塞\" class=\"headerlink\" title=\"事务阻塞\"></a>事务阻塞</h3><ul>\n<li>由于不同锁的兼容关系，造成一个事务需要等待另一个事务是否其所占用资源<h4 id=\"发现阻塞\"><a href=\"#发现阻塞\" class=\"headerlink\" title=\"发现阻塞\"></a>发现阻塞</h4><pre><code class=\"lang-mysql\">select waiting_pid as &#39;被阻塞线程&#39;, waiting_query as &#39;被阻塞 SQL&#39;,blocking_pid as &#39;阻塞线程&#39;,\nblocking_query as &#39;阻塞 SQL&#39;,wait_age as &#39;阻塞时间&#39;,sql_kill_blocking_query as &#39;建议操作&#39; from \nsys.innodb_lock_waits where (unix_timestamp()-unix_timestamp(wait_started))&gt;30\n</code></pre>\n<h4 id=\"解决阻塞\"><a href=\"#解决阻塞\" class=\"headerlink\" title=\"解决阻塞\"></a>解决阻塞</h4></li>\n<li>终止占用资源的事务</li>\n<li>优化占用资源的事务 SQL</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li>并行执行的多个事务互相占用了对方需要的资源<h4 id=\"发现死锁\"><a href=\"#发现死锁\" class=\"headerlink\" title=\"发现死锁\"></a>发现死锁</h4><pre><code>set global innodb_print_all_deadlocks=on;\n</code></pre><h4 id=\"解决死锁\"><a href=\"#解决死锁\" class=\"headerlink\" title=\"解决死锁\"></a>解决死锁</h4></li>\n<li>数据库自行回滚占用资源少的事务</li>\n<li>并发事务按相同顺序占用资源</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 详解（二）存储引擎","top":1,"date":"2019-08-11T08:38:43.000Z","_content":"\n### InnoDB\n\n### MyIASM\n\n### Memory\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql详解（二）存储引擎.md","raw":"---\ntitle: mysql 详解（二）存储引擎\ntop: 1\ndate: 2019-08-11 16:38:43\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### InnoDB\n\n### MyIASM\n\n### Memory\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql详解（二）存储引擎","published":1,"updated":"2019-11-14T01:33:15.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokm001cyos6udbii1no","content":"<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h3 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h3><h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h3 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h3><h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 详解（一）字段类型","top":1,"date":"2019-08-10T08:35:38.000Z","_content":"### 字符串类型\n|类型|范围|说明|\n|:-----  |:-----|-----|\n|char(M)|M=1~255 字符|固定长度|\n|varchar(M)|一行中所有 varchar 的列所占用的字节数不能超过 65535 字节|存储可变长度的 M 个字符|\n|tinytext|最大长度 255|可变长度|\n|text|最大长度 65535|可变长度|\n|mediumtext|最大长度 16777215|可变长度|\n|longtext|最大长度 4294967295|可变长度|\n|enum|集合最大数目为 65535|只能插入列表中的值|\n\n### 时间类型\n|类型|存储空间（字节)|格式|取值范围|\n|:-----  |:-----|:-----|-----|\n|date | 3  |YYYY-MM-DD |1000-01-01~9999-12-31|\n|time | 3~6  |HH:MM:SS『微秒值』 |-838:59:59~838:59:59|\n|year | 1  |YYYY |1907~2155|\n|datetime |5~8 |YYYY-MM-DD HH:MM:SS『微秒值』  |1000-01-01 00:00:00~9999-12-31 23:59:59|\n|timestamp | 4~7 |YYYY-MM-DD HH:MM:SS『微秒值』  |1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC|\n\n|微秒|存储空间（字节)|      \n|:-----  |-----|         \n|0 |0|\n|1,2  |1|\n|3,4  |2|\n|5,6  |3|\n\n### 整数类型\n\n|类型|存储空间（字节)|属性|取值范围|\n|:-----  |:-----|:-----|-----|\n|tinyint | 1  |signed/unsigned |-128~127/0~255|\n|smallint | 2  |signed/unsigned |-32768~32767/0~65535|\n|mediumint | 3  |signed/unsigned |-8388608~8388607/0~16777215|\n|int | 4  |signed/unsigned |-2147483648~2147483647/0~4294967295|\n|bigint | 8  |signed/unsigned |-9223372036854775808~9223372036854775807/0~18446744073709551615|\n\n### 浮点类型\n\n|类型|存储空间（字节)|是否精确类型|\n|:-----  |:-----|-----|\n|float | 4  |否 |\n|double | 8  |否 |\n|decimal | 每 4 个字节存 9 个数字，小数点占一个字节  |是 |\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql详解（一）字段类型.md","raw":"---\ntitle: mysql 详解（一）字段类型\ntop: 1\ndate: 2019-08-10 16:35:38\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 字符串类型\n|类型|范围|说明|\n|:-----  |:-----|-----|\n|char(M)|M=1~255 字符|固定长度|\n|varchar(M)|一行中所有 varchar 的列所占用的字节数不能超过 65535 字节|存储可变长度的 M 个字符|\n|tinytext|最大长度 255|可变长度|\n|text|最大长度 65535|可变长度|\n|mediumtext|最大长度 16777215|可变长度|\n|longtext|最大长度 4294967295|可变长度|\n|enum|集合最大数目为 65535|只能插入列表中的值|\n\n### 时间类型\n|类型|存储空间（字节)|格式|取值范围|\n|:-----  |:-----|:-----|-----|\n|date | 3  |YYYY-MM-DD |1000-01-01~9999-12-31|\n|time | 3~6  |HH:MM:SS『微秒值』 |-838:59:59~838:59:59|\n|year | 1  |YYYY |1907~2155|\n|datetime |5~8 |YYYY-MM-DD HH:MM:SS『微秒值』  |1000-01-01 00:00:00~9999-12-31 23:59:59|\n|timestamp | 4~7 |YYYY-MM-DD HH:MM:SS『微秒值』  |1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC|\n\n|微秒|存储空间（字节)|      \n|:-----  |-----|         \n|0 |0|\n|1,2  |1|\n|3,4  |2|\n|5,6  |3|\n\n### 整数类型\n\n|类型|存储空间（字节)|属性|取值范围|\n|:-----  |:-----|:-----|-----|\n|tinyint | 1  |signed/unsigned |-128~127/0~255|\n|smallint | 2  |signed/unsigned |-32768~32767/0~65535|\n|mediumint | 3  |signed/unsigned |-8388608~8388607/0~16777215|\n|int | 4  |signed/unsigned |-2147483648~2147483647/0~4294967295|\n|bigint | 8  |signed/unsigned |-9223372036854775808~9223372036854775807/0~18446744073709551615|\n\n### 浮点类型\n\n|类型|存储空间（字节)|是否精确类型|\n|:-----  |:-----|-----|\n|float | 4  |否 |\n|double | 8  |否 |\n|decimal | 每 4 个字节存 9 个数字，小数点占一个字节  |是 |\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql详解（一）字段类型","published":1,"updated":"2019-11-12T02:05:15.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokn001eyos6m5oxtq1i","content":"<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char(M)</td>\n<td style=\"text-align:left\">M=1~255 字符</td>\n<td>固定长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">varchar(M)</td>\n<td style=\"text-align:left\">一行中所有 varchar 的列所占用的字节数不能超过 65535 字节</td>\n<td>存储可变长度的 M 个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tinytext</td>\n<td style=\"text-align:left\">最大长度 255</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">最大长度 65535</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td style=\"text-align:left\">最大长度 16777215</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td style=\"text-align:left\">最大长度 4294967295</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enum</td>\n<td style=\"text-align:left\">集合最大数目为 65535</td>\n<td>只能插入列表中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th style=\"text-align:left\">格式</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">YYYY-MM-DD</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:left\">3~6</td>\n<td style=\"text-align:left\">HH:MM:SS『微秒值』</td>\n<td>-838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">year</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">YYYY</td>\n<td>1907~2155</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">datetime</td>\n<td style=\"text-align:left\">5~8</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS『微秒值』</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">4~7</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS『微秒值』</td>\n<td>1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">微秒</th>\n<th>存储空间（字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1,2</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3,4</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5,6</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th style=\"text-align:left\">属性</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-128~127/0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">smallint</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-32768~32767/0~65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumint</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-8388608~8388607/0~16777215</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-2147483648~2147483647/0~4294967295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-9223372036854775808~9223372036854775807/0~18446744073709551615</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th>是否精确类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td style=\"text-align:left\">每 4 个字节存 9 个数字，小数点占一个字节</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"字符串类型\"><a href=\"#字符串类型\" class=\"headerlink\" title=\"字符串类型\"></a>字符串类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">char(M)</td>\n<td style=\"text-align:left\">M=1~255 字符</td>\n<td>固定长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">varchar(M)</td>\n<td style=\"text-align:left\">一行中所有 varchar 的列所占用的字节数不能超过 65535 字节</td>\n<td>存储可变长度的 M 个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">tinytext</td>\n<td style=\"text-align:left\">最大长度 255</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td style=\"text-align:left\">最大长度 65535</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td style=\"text-align:left\">最大长度 16777215</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td style=\"text-align:left\">最大长度 4294967295</td>\n<td>可变长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enum</td>\n<td style=\"text-align:left\">集合最大数目为 65535</td>\n<td>只能插入列表中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"时间类型\"><a href=\"#时间类型\" class=\"headerlink\" title=\"时间类型\"></a>时间类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th style=\"text-align:left\">格式</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">date</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">YYYY-MM-DD</td>\n<td>1000-01-01~9999-12-31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">time</td>\n<td style=\"text-align:left\">3~6</td>\n<td style=\"text-align:left\">HH:MM:SS『微秒值』</td>\n<td>-838:59:59~838:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">year</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">YYYY</td>\n<td>1907~2155</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">datetime</td>\n<td style=\"text-align:left\">5~8</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS『微秒值』</td>\n<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">4~7</td>\n<td style=\"text-align:left\">YYYY-MM-DD HH:MM:SS『微秒值』</td>\n<td>1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07 UTC</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">微秒</th>\n<th>存储空间（字节)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td>0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1,2</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3,4</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5,6</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th style=\"text-align:left\">属性</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-128~127/0~255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">smallint</td>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-32768~32767/0~65535</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumint</td>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-8388608~8388607/0~16777215</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-2147483648~2147483647/0~4294967295</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">signed/unsigned</td>\n<td>-9223372036854775808~9223372036854775807/0~18446744073709551615</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">存储空间（字节)</th>\n<th>是否精确类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">4</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">8</td>\n<td>否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td style=\"text-align:left\">每 4 个字节存 9 个数字，小数点占一个字节</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 详解（五）索引","top":1,"date":"2019-08-17T10:01:44.000Z","_content":"\n### InnoDB 支持索引类型\n\n* Btree 索引\n\n - 以 B+ 树的结构存储索引数据\n - 适用于全值匹配的查询（class_name='mysql', class_name in ('mysql', 'postgresql')）\n - 范围查找（study_cnt between 100 and 300, study_cnt >300）\n - 从索引最左侧列开始匹配查找列\n\n* 自适应 HASH 索引\n* 全文索引（elasticseach）\n* 空间索引\n\n### 建索引的列\n\n* where 子句中的列\n* 包含 order by 、group by 、distinct 中的字段\n* 多表 join 的关联列\n\n### 选择复合索引键的顺序\n- 区分度最高的列放在联合索引的最左侧\n- 使用最频繁的列放在联合索引的最左侧\n- 尽量把字段长度小的列放在联合索引的最左侧\n### Btree 索引的限制\n- 只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键\n- not in 和 <>操作无法使用索引\n- 索引列上不能使用表达式或函数\n### 索引使用误区\n- 索引越多越好\n- 使用 in 列表查询不会使用到索引\n- 查询过滤顺序必须同索引键顺序相同才能使用到索引\n\n### sql 改写原则\n- 使用 outer in 代替 not in (5.7 以下)\n- 使用 CTE 代替子查询\n- 拆分复杂的大 sql 为多个简单的小 sql\n- 巧用计算列优化查询\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql详解（五）索引.md","raw":"---\ntitle: mysql 详解（五）索引\ntop: 1\ndate: 2019-08-17 18:01:44\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### InnoDB 支持索引类型\n\n* Btree 索引\n\n - 以 B+ 树的结构存储索引数据\n - 适用于全值匹配的查询（class_name='mysql', class_name in ('mysql', 'postgresql')）\n - 范围查找（study_cnt between 100 and 300, study_cnt >300）\n - 从索引最左侧列开始匹配查找列\n\n* 自适应 HASH 索引\n* 全文索引（elasticseach）\n* 空间索引\n\n### 建索引的列\n\n* where 子句中的列\n* 包含 order by 、group by 、distinct 中的字段\n* 多表 join 的关联列\n\n### 选择复合索引键的顺序\n- 区分度最高的列放在联合索引的最左侧\n- 使用最频繁的列放在联合索引的最左侧\n- 尽量把字段长度小的列放在联合索引的最左侧\n### Btree 索引的限制\n- 只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键\n- not in 和 <>操作无法使用索引\n- 索引列上不能使用表达式或函数\n### 索引使用误区\n- 索引越多越好\n- 使用 in 列表查询不会使用到索引\n- 查询过滤顺序必须同索引键顺序相同才能使用到索引\n\n### sql 改写原则\n- 使用 outer in 代替 not in (5.7 以下)\n- 使用 CTE 代替子查询\n- 拆分复杂的大 sql 为多个简单的小 sql\n- 巧用计算列优化查询\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql详解（五）索引","published":1,"updated":"2019-11-14T01:33:05.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoko001hyos6h032di3v","content":"<h3 id=\"InnoDB-支持索引类型\"><a href=\"#InnoDB-支持索引类型\" class=\"headerlink\" title=\"InnoDB 支持索引类型\"></a>InnoDB 支持索引类型</h3><ul>\n<li><p>Btree 索引</p>\n<ul>\n<li>以 B+ 树的结构存储索引数据</li>\n<li>适用于全值匹配的查询（class_name=’mysql’, class_name in (‘mysql’, ‘postgresql’)）</li>\n<li>范围查找（study_cnt between 100 and 300, study_cnt &gt;300）</li>\n<li>从索引最左侧列开始匹配查找列</li>\n</ul>\n</li>\n<li><p>自适应 HASH 索引</p>\n</li>\n<li>全文索引（elasticseach）</li>\n<li>空间索引</li>\n</ul>\n<h3 id=\"建索引的列\"><a href=\"#建索引的列\" class=\"headerlink\" title=\"建索引的列\"></a>建索引的列</h3><ul>\n<li>where 子句中的列</li>\n<li>包含 order by 、group by 、distinct 中的字段</li>\n<li>多表 join 的关联列</li>\n</ul>\n<h3 id=\"选择复合索引键的顺序\"><a href=\"#选择复合索引键的顺序\" class=\"headerlink\" title=\"选择复合索引键的顺序\"></a>选择复合索引键的顺序</h3><ul>\n<li>区分度最高的列放在联合索引的最左侧</li>\n<li>使用最频繁的列放在联合索引的最左侧</li>\n<li>尽量把字段长度小的列放在联合索引的最左侧<h3 id=\"Btree-索引的限制\"><a href=\"#Btree-索引的限制\" class=\"headerlink\" title=\"Btree 索引的限制\"></a>Btree 索引的限制</h3></li>\n<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>\n<li>not in 和 &lt;&gt;操作无法使用索引</li>\n<li>索引列上不能使用表达式或函数<h3 id=\"索引使用误区\"><a href=\"#索引使用误区\" class=\"headerlink\" title=\"索引使用误区\"></a>索引使用误区</h3></li>\n<li>索引越多越好</li>\n<li>使用 in 列表查询不会使用到索引</li>\n<li>查询过滤顺序必须同索引键顺序相同才能使用到索引</li>\n</ul>\n<h3 id=\"sql-改写原则\"><a href=\"#sql-改写原则\" class=\"headerlink\" title=\"sql 改写原则\"></a>sql 改写原则</h3><ul>\n<li>使用 outer in 代替 not in (5.7 以下)</li>\n<li>使用 CTE 代替子查询</li>\n<li>拆分复杂的大 sql 为多个简单的小 sql</li>\n<li>巧用计算列优化查询</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"InnoDB-支持索引类型\"><a href=\"#InnoDB-支持索引类型\" class=\"headerlink\" title=\"InnoDB 支持索引类型\"></a>InnoDB 支持索引类型</h3><ul>\n<li><p>Btree 索引</p>\n<ul>\n<li>以 B+ 树的结构存储索引数据</li>\n<li>适用于全值匹配的查询（class_name=’mysql’, class_name in (‘mysql’, ‘postgresql’)）</li>\n<li>范围查找（study_cnt between 100 and 300, study_cnt &gt;300）</li>\n<li>从索引最左侧列开始匹配查找列</li>\n</ul>\n</li>\n<li><p>自适应 HASH 索引</p>\n</li>\n<li>全文索引（elasticseach）</li>\n<li>空间索引</li>\n</ul>\n<h3 id=\"建索引的列\"><a href=\"#建索引的列\" class=\"headerlink\" title=\"建索引的列\"></a>建索引的列</h3><ul>\n<li>where 子句中的列</li>\n<li>包含 order by 、group by 、distinct 中的字段</li>\n<li>多表 join 的关联列</li>\n</ul>\n<h3 id=\"选择复合索引键的顺序\"><a href=\"#选择复合索引键的顺序\" class=\"headerlink\" title=\"选择复合索引键的顺序\"></a>选择复合索引键的顺序</h3><ul>\n<li>区分度最高的列放在联合索引的最左侧</li>\n<li>使用最频繁的列放在联合索引的最左侧</li>\n<li>尽量把字段长度小的列放在联合索引的最左侧<h3 id=\"Btree-索引的限制\"><a href=\"#Btree-索引的限制\" class=\"headerlink\" title=\"Btree 索引的限制\"></a>Btree 索引的限制</h3></li>\n<li>只能从最左侧开始按索引键的顺序使用索引，不能跳过索引键</li>\n<li>not in 和 &lt;&gt;操作无法使用索引</li>\n<li>索引列上不能使用表达式或函数<h3 id=\"索引使用误区\"><a href=\"#索引使用误区\" class=\"headerlink\" title=\"索引使用误区\"></a>索引使用误区</h3></li>\n<li>索引越多越好</li>\n<li>使用 in 列表查询不会使用到索引</li>\n<li>查询过滤顺序必须同索引键顺序相同才能使用到索引</li>\n</ul>\n<h3 id=\"sql-改写原则\"><a href=\"#sql-改写原则\" class=\"headerlink\" title=\"sql 改写原则\"></a>sql 改写原则</h3><ul>\n<li>使用 outer in 代替 not in (5.7 以下)</li>\n<li>使用 CTE 代替子查询</li>\n<li>拆分复杂的大 sql 为多个简单的小 sql</li>\n<li>巧用计算列优化查询</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 详解（四）执行计划","top":1,"date":"2019-08-16T03:06:21.000Z","_content":"\n### 配置慢查询日志\n\n``` mysql\nset global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx 秒\nset global log_queries_not_using_indexes= [ON|OFF]\n```\n\n### 分析慢查询日志\n\n``` mysql\nmysqldumpslow [options](logs)\npt-query-digest [options](files)[dsn]\n```\n\n### 实时监控慢查询\n\n``` mysql\nselect id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time >=60;\n```\n\n### 分析执行计划\n\nexplain sql\n\n#### id 列\n\n* id 表示查询执行顺序\n* id 相同时由上到下执行\n* id 不同时由大到小执行\n\n#### select_type 列\n\n|值|说明|\n|:----- |-----|\n|SIMPLE |不包含子查询或是 union 操作的查询|\n|PRIMARY |查询中如果包含任何子查询，那么最外层的查询则是 PRIMARY|\n|SUBQUERY |SELECT 列表中的子查询|\n|DEPENDENT SUBQUERY |依赖外部结果的子查询|\n|UNION  |UNION 操作的第二个或是之后的查询的值为 union|\n|DEPENDENT UNION |当 UNION 作为子查询的时候，第二或者第二个后的查询的 select_type 值|\n|UNION RESULT |UNION 产生的结果集|\n|DERIVED |出现在 from 子句中的子查询|\n\n#### table 列\n\n* 指明从哪个表获取数据\n* <union M, N>由 id 列为 M, N 查询 union 产生的结果集\n* <derived N>/<subquery N> 由 id 列为 N 的查询产生的结果\n\n#### partitions\n\n* 对于分区表，显示查询的分区 id\n* 对于非分区表，显示 null\n\n#### type\n\n性能由高到低\n\n|值|说明|\n|:----- |-----|\n|NULL |MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成|\n|system |cost 连接类型的一个特例，当查询的表只有一行时使用|\n|const |表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式|\n|eq_ref |唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配|\n|ref |非唯一索引查找，返回匹配某个单独值的所有行|\n|ref_or_null |类似与 ref 类型查询，但是附加了对 null 值列的查询|\n|index_merge |使用了索引合并优化|\n|range |索引范围扫描，常见于 between, >, 《这样的查询条件|\n|index |全索引扫描，遍历索引树|\n|all |全表扫描，效率最差|\n\n#### possible_keys\n\n* 查询时可能使用的索引\n\n#### key\n\n* 查询时实际使用的索引\n\n#### key_len\n\n* 实际使用索引的最大长度\n\n#### ref\n\n* 哪些列或产量用于索引查找\n\n#### rows\n\n* 根据统计信息预估扫描行数\n\n#### filtered\n\n* 返回结果行数占读取行数的百分比\n\n#### extra\n\n|值|说明|\n|:----- |-----|\n|Distinct |优化 distinct 操作，在找到第一匹配的元祖后即停止找同样值的动作|\n|Not exists |使用 not exist 优化查询|\n|Using filesort |使用文件来排序，通常会出现在 order by 或 groub by 查询|\n|Using index |使用覆盖索引进行查询|\n|Using temporary|使用临时表进行处理查询，常见于排序，子查询和分组查询|\n|Using where|使用 where 条件过滤数据|\n|select tables optimized away|直接通过索引获取数据，不用访问表|\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql详解（四）执行计划.md","raw":"---\ntitle: mysql 详解（四）执行计划\ntop: 1\ndate: 2019-08-16 11:06:21\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 配置慢查询日志\n\n``` mysql\nset global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx 秒\nset global log_queries_not_using_indexes= [ON|OFF]\n```\n\n### 分析慢查询日志\n\n``` mysql\nmysqldumpslow [options](logs)\npt-query-digest [options](files)[dsn]\n```\n\n### 实时监控慢查询\n\n``` mysql\nselect id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time >=60;\n```\n\n### 分析执行计划\n\nexplain sql\n\n#### id 列\n\n* id 表示查询执行顺序\n* id 相同时由上到下执行\n* id 不同时由大到小执行\n\n#### select_type 列\n\n|值|说明|\n|:----- |-----|\n|SIMPLE |不包含子查询或是 union 操作的查询|\n|PRIMARY |查询中如果包含任何子查询，那么最外层的查询则是 PRIMARY|\n|SUBQUERY |SELECT 列表中的子查询|\n|DEPENDENT SUBQUERY |依赖外部结果的子查询|\n|UNION  |UNION 操作的第二个或是之后的查询的值为 union|\n|DEPENDENT UNION |当 UNION 作为子查询的时候，第二或者第二个后的查询的 select_type 值|\n|UNION RESULT |UNION 产生的结果集|\n|DERIVED |出现在 from 子句中的子查询|\n\n#### table 列\n\n* 指明从哪个表获取数据\n* <union M, N>由 id 列为 M, N 查询 union 产生的结果集\n* <derived N>/<subquery N> 由 id 列为 N 的查询产生的结果\n\n#### partitions\n\n* 对于分区表，显示查询的分区 id\n* 对于非分区表，显示 null\n\n#### type\n\n性能由高到低\n\n|值|说明|\n|:----- |-----|\n|NULL |MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成|\n|system |cost 连接类型的一个特例，当查询的表只有一行时使用|\n|const |表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式|\n|eq_ref |唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配|\n|ref |非唯一索引查找，返回匹配某个单独值的所有行|\n|ref_or_null |类似与 ref 类型查询，但是附加了对 null 值列的查询|\n|index_merge |使用了索引合并优化|\n|range |索引范围扫描，常见于 between, >, 《这样的查询条件|\n|index |全索引扫描，遍历索引树|\n|all |全表扫描，效率最差|\n\n#### possible_keys\n\n* 查询时可能使用的索引\n\n#### key\n\n* 查询时实际使用的索引\n\n#### key_len\n\n* 实际使用索引的最大长度\n\n#### ref\n\n* 哪些列或产量用于索引查找\n\n#### rows\n\n* 根据统计信息预估扫描行数\n\n#### filtered\n\n* 返回结果行数占读取行数的百分比\n\n#### extra\n\n|值|说明|\n|:----- |-----|\n|Distinct |优化 distinct 操作，在找到第一匹配的元祖后即停止找同样值的动作|\n|Not exists |使用 not exist 优化查询|\n|Using filesort |使用文件来排序，通常会出现在 order by 或 groub by 查询|\n|Using index |使用覆盖索引进行查询|\n|Using temporary|使用临时表进行处理查询，常见于排序，子查询和分组查询|\n|Using where|使用 where 条件过滤数据|\n|select tables optimized away|直接通过索引获取数据，不用访问表|\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql详解（四）执行计划","published":1,"updated":"2019-11-14T01:32:57.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokp001kyos6ybbnoagj","content":"<h3 id=\"配置慢查询日志\"><a href=\"#配置慢查询日志\" class=\"headerlink\" title=\"配置慢查询日志\"></a>配置慢查询日志</h3><pre><code class=\"lang-mysql\">set global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx 秒\nset global log_queries_not_using_indexes= [ON|OFF]\n</code></pre>\n<h3 id=\"分析慢查询日志\"><a href=\"#分析慢查询日志\" class=\"headerlink\" title=\"分析慢查询日志\"></a>分析慢查询日志</h3><pre><code class=\"lang-mysql\">mysqldumpslow [options](logs)\npt-query-digest [options](files)[dsn]\n</code></pre>\n<h3 id=\"实时监控慢查询\"><a href=\"#实时监控慢查询\" class=\"headerlink\" title=\"实时监控慢查询\"></a>实时监控慢查询</h3><pre><code class=\"lang-mysql\">select id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time &gt;=60;\n</code></pre>\n<h3 id=\"分析执行计划\"><a href=\"#分析执行计划\" class=\"headerlink\" title=\"分析执行计划\"></a>分析执行计划</h3><p>explain sql</p>\n<h4 id=\"id-列\"><a href=\"#id-列\" class=\"headerlink\" title=\"id 列\"></a>id 列</h4><ul>\n<li>id 表示查询执行顺序</li>\n<li>id 相同时由上到下执行</li>\n<li>id 不同时由大到小执行</li>\n</ul>\n<h4 id=\"select-type-列\"><a href=\"#select-type-列\" class=\"headerlink\" title=\"select_type 列\"></a>select_type 列</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SIMPLE</td>\n<td>不包含子查询或是 union 操作的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PRIMARY</td>\n<td>查询中如果包含任何子查询，那么最外层的查询则是 PRIMARY</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUBQUERY</td>\n<td>SELECT 列表中的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT SUBQUERY</td>\n<td>依赖外部结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION</td>\n<td>UNION 操作的第二个或是之后的查询的值为 union</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT UNION</td>\n<td>当 UNION 作为子查询的时候，第二或者第二个后的查询的 select_type 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION RESULT</td>\n<td>UNION 产生的结果集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DERIVED</td>\n<td>出现在 from 子句中的子查询</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"table-列\"><a href=\"#table-列\" class=\"headerlink\" title=\"table 列\"></a>table 列</h4><ul>\n<li>指明从哪个表获取数据</li>\n<li><union m, n>由 id 列为 M, N 查询 union 产生的结果集</union></li>\n<li><derived n>/<subquery n> 由 id 列为 N 的查询产生的结果</subquery></derived></li>\n</ul>\n<h4 id=\"partitions\"><a href=\"#partitions\" class=\"headerlink\" title=\"partitions\"></a>partitions</h4><ul>\n<li>对于分区表，显示查询的分区 id</li>\n<li>对于非分区表，显示 null</li>\n</ul>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>性能由高到低</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NULL</td>\n<td>MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">system</td>\n<td>cost 连接类型的一个特例，当查询的表只有一行时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td>表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eq_ref</td>\n<td>唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref</td>\n<td>非唯一索引查找，返回匹配某个单独值的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref_or_null</td>\n<td>类似与 ref 类型查询，但是附加了对 null 值列的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index_merge</td>\n<td>使用了索引合并优化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">range</td>\n<td>索引范围扫描，常见于 between, &gt;, 《这样的查询条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td>全索引扫描，遍历索引树</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td>全表扫描，效率最差</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h4><ul>\n<li>查询时可能使用的索引</li>\n</ul>\n<h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><ul>\n<li>查询时实际使用的索引</li>\n</ul>\n<h4 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h4><ul>\n<li>实际使用索引的最大长度</li>\n</ul>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ul>\n<li>哪些列或产量用于索引查找</li>\n</ul>\n<h4 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h4><ul>\n<li>根据统计信息预估扫描行数</li>\n</ul>\n<h4 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h4><ul>\n<li>返回结果行数占读取行数的百分比</li>\n</ul>\n<h4 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Distinct</td>\n<td>优化 distinct 操作，在找到第一匹配的元祖后即停止找同样值的动作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Not exists</td>\n<td>使用 not exist 优化查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using filesort</td>\n<td>使用文件来排序，通常会出现在 order by 或 groub by 查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using index</td>\n<td>使用覆盖索引进行查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using temporary</td>\n<td>使用临时表进行处理查询，常见于排序，子查询和分组查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using where</td>\n<td>使用 where 条件过滤数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">select tables optimized away</td>\n<td>直接通过索引获取数据，不用访问表</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"配置慢查询日志\"><a href=\"#配置慢查询日志\" class=\"headerlink\" title=\"配置慢查询日志\"></a>配置慢查询日志</h3><pre><code class=\"lang-mysql\">set global slow_query_log = [ON|OFF]\nset global slow_query_log_file = /sql_log/slowlog.log\nset global long_query_time= xx.xxx 秒\nset global log_queries_not_using_indexes= [ON|OFF]\n</code></pre>\n<h3 id=\"分析慢查询日志\"><a href=\"#分析慢查询日志\" class=\"headerlink\" title=\"分析慢查询日志\"></a>分析慢查询日志</h3><pre><code class=\"lang-mysql\">mysqldumpslow [options](logs)\npt-query-digest [options](files)[dsn]\n</code></pre>\n<h3 id=\"实时监控慢查询\"><a href=\"#实时监控慢查询\" class=\"headerlink\" title=\"实时监控慢查询\"></a>实时监控慢查询</h3><pre><code class=\"lang-mysql\">select id `user` , `host` ,DB,command, `time` ,state,info from information_schema.PROCESSList where time &gt;=60;\n</code></pre>\n<h3 id=\"分析执行计划\"><a href=\"#分析执行计划\" class=\"headerlink\" title=\"分析执行计划\"></a>分析执行计划</h3><p>explain sql</p>\n<h4 id=\"id-列\"><a href=\"#id-列\" class=\"headerlink\" title=\"id 列\"></a>id 列</h4><ul>\n<li>id 表示查询执行顺序</li>\n<li>id 相同时由上到下执行</li>\n<li>id 不同时由大到小执行</li>\n</ul>\n<h4 id=\"select-type-列\"><a href=\"#select-type-列\" class=\"headerlink\" title=\"select_type 列\"></a>select_type 列</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SIMPLE</td>\n<td>不包含子查询或是 union 操作的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PRIMARY</td>\n<td>查询中如果包含任何子查询，那么最外层的查询则是 PRIMARY</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUBQUERY</td>\n<td>SELECT 列表中的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT SUBQUERY</td>\n<td>依赖外部结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION</td>\n<td>UNION 操作的第二个或是之后的查询的值为 union</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DEPENDENT UNION</td>\n<td>当 UNION 作为子查询的时候，第二或者第二个后的查询的 select_type 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UNION RESULT</td>\n<td>UNION 产生的结果集</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DERIVED</td>\n<td>出现在 from 子句中的子查询</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"table-列\"><a href=\"#table-列\" class=\"headerlink\" title=\"table 列\"></a>table 列</h4><ul>\n<li>指明从哪个表获取数据</li>\n<li><union m, n>由 id 列为 M, N 查询 union 产生的结果集</union></li>\n<li><derived n>/<subquery n> 由 id 列为 N 的查询产生的结果</subquery></derived></li>\n</ul>\n<h4 id=\"partitions\"><a href=\"#partitions\" class=\"headerlink\" title=\"partitions\"></a>partitions</h4><ul>\n<li>对于分区表，显示查询的分区 id</li>\n<li>对于非分区表，显示 null</li>\n</ul>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>性能由高到低</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">NULL</td>\n<td>MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">system</td>\n<td>cost 连接类型的一个特例，当查询的表只有一行时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td>表中有且只有一个匹配的行时使用，如对主键或唯一索引的查询，这是效率最高的联接方式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">eq_ref</td>\n<td>唯一索引或主键查找，对于每个索引键，表中只有一条记录与之匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref</td>\n<td>非唯一索引查找，返回匹配某个单独值的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ref_or_null</td>\n<td>类似与 ref 类型查询，但是附加了对 null 值列的查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index_merge</td>\n<td>使用了索引合并优化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">range</td>\n<td>索引范围扫描，常见于 between, &gt;, 《这样的查询条件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">index</td>\n<td>全索引扫描，遍历索引树</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td>全表扫描，效率最差</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h4><ul>\n<li>查询时可能使用的索引</li>\n</ul>\n<h4 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h4><ul>\n<li>查询时实际使用的索引</li>\n</ul>\n<h4 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h4><ul>\n<li>实际使用索引的最大长度</li>\n</ul>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><ul>\n<li>哪些列或产量用于索引查找</li>\n</ul>\n<h4 id=\"rows\"><a href=\"#rows\" class=\"headerlink\" title=\"rows\"></a>rows</h4><ul>\n<li>根据统计信息预估扫描行数</li>\n</ul>\n<h4 id=\"filtered\"><a href=\"#filtered\" class=\"headerlink\" title=\"filtered\"></a>filtered</h4><ul>\n<li>返回结果行数占读取行数的百分比</li>\n</ul>\n<h4 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Distinct</td>\n<td>优化 distinct 操作，在找到第一匹配的元祖后即停止找同样值的动作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Not exists</td>\n<td>使用 not exist 优化查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using filesort</td>\n<td>使用文件来排序，通常会出现在 order by 或 groub by 查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using index</td>\n<td>使用覆盖索引进行查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using temporary</td>\n<td>使用临时表进行处理查询，常见于排序，子查询和分组查询</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Using where</td>\n<td>使用 where 条件过滤数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">select tables optimized away</td>\n<td>直接通过索引获取数据，不用访问表</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（三）服务器配置类问题","top":1,"date":"2019-09-12T08:39:30.000Z","_content":"\n### SQL_MODE\n\n* 配置 MySQL 处理 SQL 方式\n* set [session/global/persisi] sql_model='xxxx'\n* [mysqld] sql_model=xxx\n\n|SQL_MODE|说明|\n|---|---|\n|ONLY_FULL_GROUP_BY|对于 GROUP BY 聚合操作，如果出现在 SELECT 中的列、HAVING 或者 ORDER BY 子句的非聚合列，没有在 GROUP BY 中出现，那么这个 SQL 语法检查报错|\n|ANSI_QUOTES|禁止使用双引号来引用字符串|\n|REAL_AS_FLOAT|Real 作为 float 的同义词|\n|PIPES_AS_CONCAT|把'||'视为字符串的连接操作符而不是或运算符|\n|STRICT_TRANS_TABLES/STRICT_ALL_TABLES|在事务存储引擎 / 所有存储引擎上启用严格模式，SQL 语法检查报错|\n|ERROR_FOR_DIVISION_BY_ZERO|不允许 0 作为除数|\n|NO_AUTO_CREATE_USER|在用户不存在时不允许 grant 语句自动建立用户|\n|NO_ZERO_IN_DATE/NO_ZERO_DATE|日期数据内 / 日期数据不能含 0|\n|NO_ENGINE_SUBSTITUTION|当指定存储引擎不可用时报错|\n\n### 使用 set 命令配置动态参数\n\n* set[session|@@session.]system_var_name=expr\n* set[global|@@global.]system_var_name=expr\n* set[persist|@@persist.]system_var_name=expr\n\n### 使用 pt-config-diff 工具比较配置文件\n\n* pt-config-diff u=root, p=, h=localhost /etc/my.cnf\n\n### 常用性能参数\n\n||参数|说明|\n|--|---|--|\n|服务器配置参数|max_connections|设置 MySQL 允许访问的最大连接数量|\n||interactive_timeout|设置交互连接的超时时间|\n||wait_timeout|设置非交互连接的超时时间|\n||max_allowed_packet|MySQL 可以接收的数据包大小|\n||sync_binlog|每写多少次缓冲会向磁盘同步一次 binlog|\n||sort_buffer_size|设置每个会话使用的排序缓存区的大小|\n||join_buffer_size|设置每个会话使用的连接缓冲的大小|\n||read_buffer_size|当对一个 MYISAM 进行表扫描时锁分配的读缓存池大小|\n||read_rnd_buffer_size|设置控制索引缓冲区大小|\n||read_rnd_buffer_size|设置每个会话用于缓存未提交事务缓存大小 |\n|存储引擎参数|innodb_flush_log_at_trx_commit|0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次 |\n||innodb_buffer_pool_size|设置 innodb 缓冲池大小，应为系统可用内存的 75%|\n||innodb_buffer_pool_instances|Innodb 缓冲池的实例个数，每个实例大小为总缓冲池大小 / 实例个数|\n||innodb_file_per_table|设置每个表独立使用一个表空间文件|\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（三）服务器配置类问题.md","raw":"---\ntitle: mysql面试（三）服务器配置类问题\ntop: 1\ndate: 2019-09-12 16:39:30\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### SQL_MODE\n\n* 配置 MySQL 处理 SQL 方式\n* set [session/global/persisi] sql_model='xxxx'\n* [mysqld] sql_model=xxx\n\n|SQL_MODE|说明|\n|---|---|\n|ONLY_FULL_GROUP_BY|对于 GROUP BY 聚合操作，如果出现在 SELECT 中的列、HAVING 或者 ORDER BY 子句的非聚合列，没有在 GROUP BY 中出现，那么这个 SQL 语法检查报错|\n|ANSI_QUOTES|禁止使用双引号来引用字符串|\n|REAL_AS_FLOAT|Real 作为 float 的同义词|\n|PIPES_AS_CONCAT|把'||'视为字符串的连接操作符而不是或运算符|\n|STRICT_TRANS_TABLES/STRICT_ALL_TABLES|在事务存储引擎 / 所有存储引擎上启用严格模式，SQL 语法检查报错|\n|ERROR_FOR_DIVISION_BY_ZERO|不允许 0 作为除数|\n|NO_AUTO_CREATE_USER|在用户不存在时不允许 grant 语句自动建立用户|\n|NO_ZERO_IN_DATE/NO_ZERO_DATE|日期数据内 / 日期数据不能含 0|\n|NO_ENGINE_SUBSTITUTION|当指定存储引擎不可用时报错|\n\n### 使用 set 命令配置动态参数\n\n* set[session|@@session.]system_var_name=expr\n* set[global|@@global.]system_var_name=expr\n* set[persist|@@persist.]system_var_name=expr\n\n### 使用 pt-config-diff 工具比较配置文件\n\n* pt-config-diff u=root, p=, h=localhost /etc/my.cnf\n\n### 常用性能参数\n\n||参数|说明|\n|--|---|--|\n|服务器配置参数|max_connections|设置 MySQL 允许访问的最大连接数量|\n||interactive_timeout|设置交互连接的超时时间|\n||wait_timeout|设置非交互连接的超时时间|\n||max_allowed_packet|MySQL 可以接收的数据包大小|\n||sync_binlog|每写多少次缓冲会向磁盘同步一次 binlog|\n||sort_buffer_size|设置每个会话使用的排序缓存区的大小|\n||join_buffer_size|设置每个会话使用的连接缓冲的大小|\n||read_buffer_size|当对一个 MYISAM 进行表扫描时锁分配的读缓存池大小|\n||read_rnd_buffer_size|设置控制索引缓冲区大小|\n||read_rnd_buffer_size|设置每个会话用于缓存未提交事务缓存大小 |\n|存储引擎参数|innodb_flush_log_at_trx_commit|0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次 |\n||innodb_buffer_pool_size|设置 innodb 缓冲池大小，应为系统可用内存的 75%|\n||innodb_buffer_pool_instances|Innodb 缓冲池的实例个数，每个实例大小为总缓冲池大小 / 实例个数|\n||innodb_file_per_table|设置每个表独立使用一个表空间文件|\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（三）服务器配置类问题","published":1,"updated":"2019-11-12T02:32:40.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokr001oyos6pzuykd7a","content":"<h3 id=\"SQL-MODE\"><a href=\"#SQL-MODE\" class=\"headerlink\" title=\"SQL_MODE\"></a>SQL_MODE</h3><ul>\n<li>配置 MySQL 处理 SQL 方式</li>\n<li>set [session/global/persisi] sql_model=’xxxx’</li>\n<li>[mysqld] sql_model=xxx</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL_MODE</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ONLY_FULL_GROUP_BY</td>\n<td>对于 GROUP BY 聚合操作，如果出现在 SELECT 中的列、HAVING 或者 ORDER BY 子句的非聚合列，没有在 GROUP BY 中出现，那么这个 SQL 语法检查报错</td>\n</tr>\n<tr>\n<td>ANSI_QUOTES</td>\n<td>禁止使用双引号来引用字符串</td>\n</tr>\n<tr>\n<td>REAL_AS_FLOAT</td>\n<td>Real 作为 float 的同义词</td>\n</tr>\n<tr>\n<td>PIPES_AS_CONCAT</td>\n<td>把’</td>\n<td></td>\n<td>‘视为字符串的连接操作符而不是或运算符</td>\n</tr>\n<tr>\n<td>STRICT_TRANS_TABLES/STRICT_ALL_TABLES</td>\n<td>在事务存储引擎 / 所有存储引擎上启用严格模式，SQL 语法检查报错</td>\n</tr>\n<tr>\n<td>ERROR_FOR_DIVISION_BY_ZERO</td>\n<td>不允许 0 作为除数</td>\n</tr>\n<tr>\n<td>NO_AUTO_CREATE_USER</td>\n<td>在用户不存在时不允许 grant 语句自动建立用户</td>\n</tr>\n<tr>\n<td>NO_ZERO_IN_DATE/NO_ZERO_DATE</td>\n<td>日期数据内 / 日期数据不能含 0</td>\n</tr>\n<tr>\n<td>NO_ENGINE_SUBSTITUTION</td>\n<td>当指定存储引擎不可用时报错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"使用-set-命令配置动态参数\"><a href=\"#使用-set-命令配置动态参数\" class=\"headerlink\" title=\"使用 set 命令配置动态参数\"></a>使用 set 命令配置动态参数</h3><ul>\n<li>set[session|@@session.]system_var_name=expr</li>\n<li>set[global|@@global.]system_var_name=expr</li>\n<li>set[persist|@@persist.]system_var_name=expr</li>\n</ul>\n<h3 id=\"使用-pt-config-diff-工具比较配置文件\"><a href=\"#使用-pt-config-diff-工具比较配置文件\" class=\"headerlink\" title=\"使用 pt-config-diff 工具比较配置文件\"></a>使用 pt-config-diff 工具比较配置文件</h3><ul>\n<li>pt-config-diff u=root, p=, h=localhost /etc/my.cnf</li>\n</ul>\n<h3 id=\"常用性能参数\"><a href=\"#常用性能参数\" class=\"headerlink\" title=\"常用性能参数\"></a>常用性能参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器配置参数</td>\n<td>max_connections</td>\n<td>设置 MySQL 允许访问的最大连接数量</td>\n</tr>\n<tr>\n<td></td>\n<td>interactive_timeout</td>\n<td>设置交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>wait_timeout</td>\n<td>设置非交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>max_allowed_packet</td>\n<td>MySQL 可以接收的数据包大小</td>\n</tr>\n<tr>\n<td></td>\n<td>sync_binlog</td>\n<td>每写多少次缓冲会向磁盘同步一次 binlog</td>\n</tr>\n<tr>\n<td></td>\n<td>sort_buffer_size</td>\n<td>设置每个会话使用的排序缓存区的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>join_buffer_size</td>\n<td>设置每个会话使用的连接缓冲的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_buffer_size</td>\n<td>当对一个 MYISAM 进行表扫描时锁分配的读缓存池大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置控制索引缓冲区大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置每个会话用于缓存未提交事务缓存大小</td>\n</tr>\n<tr>\n<td>存储引擎参数</td>\n<td>innodb_flush_log_at_trx_commit</td>\n<td>0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_size</td>\n<td>设置 innodb 缓冲池大小，应为系统可用内存的 75%</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_instances</td>\n<td>Innodb 缓冲池的实例个数，每个实例大小为总缓冲池大小 / 实例个数</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_file_per_table</td>\n<td>设置每个表独立使用一个表空间文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SQL-MODE\"><a href=\"#SQL-MODE\" class=\"headerlink\" title=\"SQL_MODE\"></a>SQL_MODE</h3><ul>\n<li>配置 MySQL 处理 SQL 方式</li>\n<li>set [session/global/persisi] sql_model=’xxxx’</li>\n<li>[mysqld] sql_model=xxx</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>SQL_MODE</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ONLY_FULL_GROUP_BY</td>\n<td>对于 GROUP BY 聚合操作，如果出现在 SELECT 中的列、HAVING 或者 ORDER BY 子句的非聚合列，没有在 GROUP BY 中出现，那么这个 SQL 语法检查报错</td>\n</tr>\n<tr>\n<td>ANSI_QUOTES</td>\n<td>禁止使用双引号来引用字符串</td>\n</tr>\n<tr>\n<td>REAL_AS_FLOAT</td>\n<td>Real 作为 float 的同义词</td>\n</tr>\n<tr>\n<td>PIPES_AS_CONCAT</td>\n<td>把’</td>\n<td></td>\n<td>‘视为字符串的连接操作符而不是或运算符</td>\n</tr>\n<tr>\n<td>STRICT_TRANS_TABLES/STRICT_ALL_TABLES</td>\n<td>在事务存储引擎 / 所有存储引擎上启用严格模式，SQL 语法检查报错</td>\n</tr>\n<tr>\n<td>ERROR_FOR_DIVISION_BY_ZERO</td>\n<td>不允许 0 作为除数</td>\n</tr>\n<tr>\n<td>NO_AUTO_CREATE_USER</td>\n<td>在用户不存在时不允许 grant 语句自动建立用户</td>\n</tr>\n<tr>\n<td>NO_ZERO_IN_DATE/NO_ZERO_DATE</td>\n<td>日期数据内 / 日期数据不能含 0</td>\n</tr>\n<tr>\n<td>NO_ENGINE_SUBSTITUTION</td>\n<td>当指定存储引擎不可用时报错</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"使用-set-命令配置动态参数\"><a href=\"#使用-set-命令配置动态参数\" class=\"headerlink\" title=\"使用 set 命令配置动态参数\"></a>使用 set 命令配置动态参数</h3><ul>\n<li>set[session|@@session.]system_var_name=expr</li>\n<li>set[global|@@global.]system_var_name=expr</li>\n<li>set[persist|@@persist.]system_var_name=expr</li>\n</ul>\n<h3 id=\"使用-pt-config-diff-工具比较配置文件\"><a href=\"#使用-pt-config-diff-工具比较配置文件\" class=\"headerlink\" title=\"使用 pt-config-diff 工具比较配置文件\"></a>使用 pt-config-diff 工具比较配置文件</h3><ul>\n<li>pt-config-diff u=root, p=, h=localhost /etc/my.cnf</li>\n</ul>\n<h3 id=\"常用性能参数\"><a href=\"#常用性能参数\" class=\"headerlink\" title=\"常用性能参数\"></a>常用性能参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器配置参数</td>\n<td>max_connections</td>\n<td>设置 MySQL 允许访问的最大连接数量</td>\n</tr>\n<tr>\n<td></td>\n<td>interactive_timeout</td>\n<td>设置交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>wait_timeout</td>\n<td>设置非交互连接的超时时间</td>\n</tr>\n<tr>\n<td></td>\n<td>max_allowed_packet</td>\n<td>MySQL 可以接收的数据包大小</td>\n</tr>\n<tr>\n<td></td>\n<td>sync_binlog</td>\n<td>每写多少次缓冲会向磁盘同步一次 binlog</td>\n</tr>\n<tr>\n<td></td>\n<td>sort_buffer_size</td>\n<td>设置每个会话使用的排序缓存区的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>join_buffer_size</td>\n<td>设置每个会话使用的连接缓冲的大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_buffer_size</td>\n<td>当对一个 MYISAM 进行表扫描时锁分配的读缓存池大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置控制索引缓冲区大小</td>\n</tr>\n<tr>\n<td></td>\n<td>read_rnd_buffer_size</td>\n<td>设置每个会话用于缓存未提交事务缓存大小</td>\n</tr>\n<tr>\n<td>存储引擎参数</td>\n<td>innodb_flush_log_at_trx_commit</td>\n<td>0：每秒一次刷新日志到磁盘，1：每次事务提交都会刷新事务日志到磁盘，2：每次事务提交写入系统缓存，每秒向磁盘刷新一次</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_size</td>\n<td>设置 innodb 缓冲池大小，应为系统可用内存的 75%</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_buffer_pool_instances</td>\n<td>Innodb 缓冲池的实例个数，每个实例大小为总缓冲池大小 / 实例个数</td>\n</tr>\n<tr>\n<td></td>\n<td>innodb_file_per_table</td>\n<td>设置每个表独立使用一个表空间文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（一）版本类问题","top":1,"date":"2019-09-02T06:53:46.000Z","_content":"\n### 各个发行版区别及优缺点\n\n|            | MySQL                                 | Percona MySQL                         | MariaDB                                 |\n| ---------- | ------------------------------------- | ------------------------------------- | --------------------------------------- |\n| 服务器特性 | 开源                                  | 开源                                  | 开源                                    |\n|            | 支持分区表                            | 支持分区表                            | 支持分区表                              |\n|            | InnoDB                                | XtraDB                                | XtraDB                                  |\n|            | 企业版监控工具，社区版不提供          | Percon Monitor                        | Monyog                                  |\n| 高可用特性 | 基于日志点复制                        | 基于日志点复制                        | 基于日志点复制                          |\n|            | 基于 Gtid 复制                        | 基于 Gtid 复制                        | 基于 Gtid 复制，但 Gtid 与 MySQL 不兼容 |\n|            | MGR                                   | MGR & PXC                             | Galera Cluster                          |\n|            | MySQL Router                          | Proxy SQL                             | MaxScale                                |\n| 安全特性   | 企业版防火墙                          | ProxySQL FireWall                     | MaxScale FireWall                       |\n|            | 企业版用户审计                        | 审计日志                              | 审计日志                                |\n|            | 用户密码生命周期                      | 用户密码生命周期                      | -                                       |\n|            | sha256_password caching_sha2_password | sha256_password caching_sha2_password | ed25519 sha256_password                 |\n| 开发及管理 | 窗口函数（8.0）                       | 窗口函数（8.0）                       | 窗口函数（10.2）                        |\n|            | Super read_only                       | Super read_only                       | 支持基于日志回滚，支持修改日志表中记录  |\n\n### MySQL 升级\n\n#### 升级前考虑问题\n\n- 升级给业务带来的益处\n  - 是否解决业务某一方面痛点\n  - 是否解决运维某一方面痛点\n- 升级给业务带来的影响\n  - 对原来业务程序支持是否有影响\n  - 对原来业务程序性能是否有影响\n- 数据库升级方案制定\n  - 评估受影响业务系统\n  - 升级详细步骤\n  - 升级后的数据库环境检查\n  - 升级后业务检查\n- 升级失败回滚方案\n  - 升级失败回滚的步骤\n  - 回滚后的数据库环境检查\n  - 回滚后的业务检查\n\n#### 升级步骤\n\n- 对升级数据库进行备份\n- 升级 slave 服务器版本\n- 手动进行主从切换\n- 升级 master 服务器版本\n- 升级完成后进行业务检查\n\n### MySQL8.0 新特性\n\n- 所有元数据使用 InnoDB 引擎存储，无 frm 文件\n- 系统表采用 InnoDB 存储并采用独立表空间\n- 支持定义资源管理组（目前仅支持 CPU 资源）\n- 支持不可见索引和降序索引，支持直方图优化\n- 支持窗口函数\n- 支持在线修改全局参数持久化\n- 默认使用 caching_sha2_password 认证插件\n- 新增支持定义角色（role）\n- 新增密码历史记录功能，限制重复使用密码\n- InnoDB DDL 语句支持原子操作\n- 支持在线修改 UNDO 表空间\n- 新增管理视图用于监控 InnoDB 表状态\n- 新增 innodb_dedicated_server 配置\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql面试（一）版本类问题.md","raw":"---\ntitle: mysql面试（一）版本类问题\ntop: 1\ndate: 2019-09-02 14:53:46\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 各个发行版区别及优缺点\n\n|            | MySQL                                 | Percona MySQL                         | MariaDB                                 |\n| ---------- | ------------------------------------- | ------------------------------------- | --------------------------------------- |\n| 服务器特性 | 开源                                  | 开源                                  | 开源                                    |\n|            | 支持分区表                            | 支持分区表                            | 支持分区表                              |\n|            | InnoDB                                | XtraDB                                | XtraDB                                  |\n|            | 企业版监控工具，社区版不提供          | Percon Monitor                        | Monyog                                  |\n| 高可用特性 | 基于日志点复制                        | 基于日志点复制                        | 基于日志点复制                          |\n|            | 基于 Gtid 复制                        | 基于 Gtid 复制                        | 基于 Gtid 复制，但 Gtid 与 MySQL 不兼容 |\n|            | MGR                                   | MGR & PXC                             | Galera Cluster                          |\n|            | MySQL Router                          | Proxy SQL                             | MaxScale                                |\n| 安全特性   | 企业版防火墙                          | ProxySQL FireWall                     | MaxScale FireWall                       |\n|            | 企业版用户审计                        | 审计日志                              | 审计日志                                |\n|            | 用户密码生命周期                      | 用户密码生命周期                      | -                                       |\n|            | sha256_password caching_sha2_password | sha256_password caching_sha2_password | ed25519 sha256_password                 |\n| 开发及管理 | 窗口函数（8.0）                       | 窗口函数（8.0）                       | 窗口函数（10.2）                        |\n|            | Super read_only                       | Super read_only                       | 支持基于日志回滚，支持修改日志表中记录  |\n\n### MySQL 升级\n\n#### 升级前考虑问题\n\n- 升级给业务带来的益处\n  - 是否解决业务某一方面痛点\n  - 是否解决运维某一方面痛点\n- 升级给业务带来的影响\n  - 对原来业务程序支持是否有影响\n  - 对原来业务程序性能是否有影响\n- 数据库升级方案制定\n  - 评估受影响业务系统\n  - 升级详细步骤\n  - 升级后的数据库环境检查\n  - 升级后业务检查\n- 升级失败回滚方案\n  - 升级失败回滚的步骤\n  - 回滚后的数据库环境检查\n  - 回滚后的业务检查\n\n#### 升级步骤\n\n- 对升级数据库进行备份\n- 升级 slave 服务器版本\n- 手动进行主从切换\n- 升级 master 服务器版本\n- 升级完成后进行业务检查\n\n### MySQL8.0 新特性\n\n- 所有元数据使用 InnoDB 引擎存储，无 frm 文件\n- 系统表采用 InnoDB 存储并采用独立表空间\n- 支持定义资源管理组（目前仅支持 CPU 资源）\n- 支持不可见索引和降序索引，支持直方图优化\n- 支持窗口函数\n- 支持在线修改全局参数持久化\n- 默认使用 caching_sha2_password 认证插件\n- 新增支持定义角色（role）\n- 新增密码历史记录功能，限制重复使用密码\n- InnoDB DDL 语句支持原子操作\n- 支持在线修改 UNDO 表空间\n- 新增管理视图用于监控 InnoDB 表状态\n- 新增 innodb_dedicated_server 配置\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql面试（一）版本类问题","published":1,"updated":"2019-11-12T07:13:53.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokr001ryos6bcaixhj3","content":"<h3 id=\"各个发行版区别及优缺点\"><a href=\"#各个发行版区别及优缺点\" class=\"headerlink\" title=\"各个发行版区别及优缺点\"></a>各个发行版区别及优缺点</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MySQL</th>\n<th>Percona MySQL</th>\n<th>MariaDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器特性</td>\n<td>开源</td>\n<td>开源</td>\n<td>开源</td>\n</tr>\n<tr>\n<td></td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>XtraDB</td>\n<td>XtraDB</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版监控工具，社区版不提供</td>\n<td>Percon Monitor</td>\n<td>Monyog</td>\n</tr>\n<tr>\n<td>高可用特性</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n</tr>\n<tr>\n<td></td>\n<td>基于 Gtid 复制</td>\n<td>基于 Gtid 复制</td>\n<td>基于 Gtid 复制，但 Gtid 与 MySQL 不兼容</td>\n</tr>\n<tr>\n<td></td>\n<td>MGR</td>\n<td>MGR &amp; PXC</td>\n<td>Galera Cluster</td>\n</tr>\n<tr>\n<td></td>\n<td>MySQL Router</td>\n<td>Proxy SQL</td>\n<td>MaxScale</td>\n</tr>\n<tr>\n<td>安全特性</td>\n<td>企业版防火墙</td>\n<td>ProxySQL FireWall</td>\n<td>MaxScale FireWall</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版用户审计</td>\n<td>审计日志</td>\n<td>审计日志</td>\n</tr>\n<tr>\n<td></td>\n<td>用户密码生命周期</td>\n<td>用户密码生命周期</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>sha256_password caching_sha2_password</td>\n<td>sha256_password caching_sha2_password</td>\n<td>ed25519 sha256_password</td>\n</tr>\n<tr>\n<td>开发及管理</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（10.2）</td>\n</tr>\n<tr>\n<td></td>\n<td>Super read_only</td>\n<td>Super read_only</td>\n<td>支持基于日志回滚，支持修改日志表中记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MySQL-升级\"><a href=\"#MySQL-升级\" class=\"headerlink\" title=\"MySQL 升级\"></a>MySQL 升级</h3><h4 id=\"升级前考虑问题\"><a href=\"#升级前考虑问题\" class=\"headerlink\" title=\"升级前考虑问题\"></a>升级前考虑问题</h4><ul>\n<li>升级给业务带来的益处<ul>\n<li>是否解决业务某一方面痛点</li>\n<li>是否解决运维某一方面痛点</li>\n</ul>\n</li>\n<li>升级给业务带来的影响<ul>\n<li>对原来业务程序支持是否有影响</li>\n<li>对原来业务程序性能是否有影响</li>\n</ul>\n</li>\n<li>数据库升级方案制定<ul>\n<li>评估受影响业务系统</li>\n<li>升级详细步骤</li>\n<li>升级后的数据库环境检查</li>\n<li>升级后业务检查</li>\n</ul>\n</li>\n<li>升级失败回滚方案<ul>\n<li>升级失败回滚的步骤</li>\n<li>回滚后的数据库环境检查</li>\n<li>回滚后的业务检查</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h4><ul>\n<li>对升级数据库进行备份</li>\n<li>升级 slave 服务器版本</li>\n<li>手动进行主从切换</li>\n<li>升级 master 服务器版本</li>\n<li>升级完成后进行业务检查</li>\n</ul>\n<h3 id=\"MySQL8-0-新特性\"><a href=\"#MySQL8-0-新特性\" class=\"headerlink\" title=\"MySQL8.0 新特性\"></a>MySQL8.0 新特性</h3><ul>\n<li>所有元数据使用 InnoDB 引擎存储，无 frm 文件</li>\n<li>系统表采用 InnoDB 存储并采用独立表空间</li>\n<li>支持定义资源管理组（目前仅支持 CPU 资源）</li>\n<li>支持不可见索引和降序索引，支持直方图优化</li>\n<li>支持窗口函数</li>\n<li>支持在线修改全局参数持久化</li>\n<li>默认使用 caching_sha2_password 认证插件</li>\n<li>新增支持定义角色（role）</li>\n<li>新增密码历史记录功能，限制重复使用密码</li>\n<li>InnoDB DDL 语句支持原子操作</li>\n<li>支持在线修改 UNDO 表空间</li>\n<li>新增管理视图用于监控 InnoDB 表状态</li>\n<li>新增 innodb_dedicated_server 配置</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"各个发行版区别及优缺点\"><a href=\"#各个发行版区别及优缺点\" class=\"headerlink\" title=\"各个发行版区别及优缺点\"></a>各个发行版区别及优缺点</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MySQL</th>\n<th>Percona MySQL</th>\n<th>MariaDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>服务器特性</td>\n<td>开源</td>\n<td>开源</td>\n<td>开源</td>\n</tr>\n<tr>\n<td></td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n<td>支持分区表</td>\n</tr>\n<tr>\n<td></td>\n<td>InnoDB</td>\n<td>XtraDB</td>\n<td>XtraDB</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版监控工具，社区版不提供</td>\n<td>Percon Monitor</td>\n<td>Monyog</td>\n</tr>\n<tr>\n<td>高可用特性</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n<td>基于日志点复制</td>\n</tr>\n<tr>\n<td></td>\n<td>基于 Gtid 复制</td>\n<td>基于 Gtid 复制</td>\n<td>基于 Gtid 复制，但 Gtid 与 MySQL 不兼容</td>\n</tr>\n<tr>\n<td></td>\n<td>MGR</td>\n<td>MGR &amp; PXC</td>\n<td>Galera Cluster</td>\n</tr>\n<tr>\n<td></td>\n<td>MySQL Router</td>\n<td>Proxy SQL</td>\n<td>MaxScale</td>\n</tr>\n<tr>\n<td>安全特性</td>\n<td>企业版防火墙</td>\n<td>ProxySQL FireWall</td>\n<td>MaxScale FireWall</td>\n</tr>\n<tr>\n<td></td>\n<td>企业版用户审计</td>\n<td>审计日志</td>\n<td>审计日志</td>\n</tr>\n<tr>\n<td></td>\n<td>用户密码生命周期</td>\n<td>用户密码生命周期</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>sha256_password caching_sha2_password</td>\n<td>sha256_password caching_sha2_password</td>\n<td>ed25519 sha256_password</td>\n</tr>\n<tr>\n<td>开发及管理</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（8.0）</td>\n<td>窗口函数（10.2）</td>\n</tr>\n<tr>\n<td></td>\n<td>Super read_only</td>\n<td>Super read_only</td>\n<td>支持基于日志回滚，支持修改日志表中记录</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MySQL-升级\"><a href=\"#MySQL-升级\" class=\"headerlink\" title=\"MySQL 升级\"></a>MySQL 升级</h3><h4 id=\"升级前考虑问题\"><a href=\"#升级前考虑问题\" class=\"headerlink\" title=\"升级前考虑问题\"></a>升级前考虑问题</h4><ul>\n<li>升级给业务带来的益处<ul>\n<li>是否解决业务某一方面痛点</li>\n<li>是否解决运维某一方面痛点</li>\n</ul>\n</li>\n<li>升级给业务带来的影响<ul>\n<li>对原来业务程序支持是否有影响</li>\n<li>对原来业务程序性能是否有影响</li>\n</ul>\n</li>\n<li>数据库升级方案制定<ul>\n<li>评估受影响业务系统</li>\n<li>升级详细步骤</li>\n<li>升级后的数据库环境检查</li>\n<li>升级后业务检查</li>\n</ul>\n</li>\n<li>升级失败回滚方案<ul>\n<li>升级失败回滚的步骤</li>\n<li>回滚后的数据库环境检查</li>\n<li>回滚后的业务检查</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"升级步骤\"><a href=\"#升级步骤\" class=\"headerlink\" title=\"升级步骤\"></a>升级步骤</h4><ul>\n<li>对升级数据库进行备份</li>\n<li>升级 slave 服务器版本</li>\n<li>手动进行主从切换</li>\n<li>升级 master 服务器版本</li>\n<li>升级完成后进行业务检查</li>\n</ul>\n<h3 id=\"MySQL8-0-新特性\"><a href=\"#MySQL8-0-新特性\" class=\"headerlink\" title=\"MySQL8.0 新特性\"></a>MySQL8.0 新特性</h3><ul>\n<li>所有元数据使用 InnoDB 引擎存储，无 frm 文件</li>\n<li>系统表采用 InnoDB 存储并采用独立表空间</li>\n<li>支持定义资源管理组（目前仅支持 CPU 资源）</li>\n<li>支持不可见索引和降序索引，支持直方图优化</li>\n<li>支持窗口函数</li>\n<li>支持在线修改全局参数持久化</li>\n<li>默认使用 caching_sha2_password 认证插件</li>\n<li>新增支持定义角色（role）</li>\n<li>新增密码历史记录功能，限制重复使用密码</li>\n<li>InnoDB DDL 语句支持原子操作</li>\n<li>支持在线修改 UNDO 表空间</li>\n<li>新增管理视图用于监控 InnoDB 表状态</li>\n<li>新增 innodb_dedicated_server 配置</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 面试（七）备份恢复类问题","top":1,"date":"2019-09-18T05:51:22.000Z","_content":"\n### 备份方式\n\n* 逻辑备份（DB 备份到文件）\n* 物理备份（DB 备份到 DB）\n* 全量备份和增量备份以及差异备份\n\n### 常用备份工具\n\n|名称|特点|\n|-|-|\n|mysqldump|最常用的逻辑备份工具，支持全量备份和条件备份|\n|mysqlpump|多线程逻辑备份工具，mysqldump 增强版本|\n|xtrabackup|InnoDB 在线物理备份工具，支持多线程和增量备份|\n\n### mysqldump\n\n#### 优点\n\n* 备份结果为可读 SQL 文件，可用于跨版本跨平台恢复数据\n* 备份文件尺寸小于物理备份，便于长时间存储\n* MySQL 发行版自带工具，无需安装第三方软件\n\n#### 缺点\n\n* 只能单线程执行备份恢复任务，备份恢复速度较慢\n* 为完成一致性备份需要对备份表加锁，容易造成阻塞\n* 会对 Innodb Buffer Pool 造成污染\n\n### mysqlpump\n\n#### 优点\n\n* 语法同 mysqldump 高度兼容、学习成本低\n* 支持基于库和表的并行备份，可以提高逻辑备份的性能\n* 支持使用 ZLIB 和 Lz4 算法对备份进行压缩\n\n#### 缺点\n\n* 基于表进行并行备份，对大表性能较差\n* 5.7.11 之前版本不支持一致性并行备份\n* 会对 Innodb Buffer Pool 造成污染\n\n### xtrabackup\n\n#### 优点\n\n* 支持 innodb 存储引擎在线热备份，对 innodb 缓存没有影响\n* 支持并行对数据库全量备份和增量备份\n* 备份和恢复效率比逻辑备份高\n\n#### 缺点\n\n* 单表恢复比较复杂\n* 完成的数据文件拷贝，备份文件比逻辑备份大\n* 对跨平台和数据库版本的备份恢复支持度不如逻辑备份\n\n### 备份工具应用\n\n* 逻辑备份 + 二进制日志\n* 使用 xtrabackup 工具\n\n#### xtrabackup 进行增量备份\n\n* 全量备份 innobackupex --user=root --password=pwd /backups\n* 增量备份 innobackupex --user=root --password=pwd --incremental /home/db_backup/ --incremental-basedir=/home/db_backup/back_dir\n\n#### xtrabackup 进行增量恢复\n\n* innobackupex --apply-log --redo-only 全备目录\n* innobackupex --apply-log --redo-only 全备目录 --incremental-dir= 第 1... N 次增量目录\n* innobackupex --apply-log 全备目录\n\n### 备份二进制日志\n\n* cp 命令进行离线备份\n* mysqlbinlog 命令在线实时备份\n  + mysqlbinlog --raw --read-from-remote-server --stop-never --host 备份 ip --port 端口 -u 用户名 -p 密码 启动二进制日志文件名\n\n用户具有 replication slave 权限\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（七）备份恢复类问题.md","raw":"---\ntitle: mysql 面试（七）备份恢复类问题\ntop: 1\ndate: 2019-09-18 13:51:22\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 备份方式\n\n* 逻辑备份（DB 备份到文件）\n* 物理备份（DB 备份到 DB）\n* 全量备份和增量备份以及差异备份\n\n### 常用备份工具\n\n|名称|特点|\n|-|-|\n|mysqldump|最常用的逻辑备份工具，支持全量备份和条件备份|\n|mysqlpump|多线程逻辑备份工具，mysqldump 增强版本|\n|xtrabackup|InnoDB 在线物理备份工具，支持多线程和增量备份|\n\n### mysqldump\n\n#### 优点\n\n* 备份结果为可读 SQL 文件，可用于跨版本跨平台恢复数据\n* 备份文件尺寸小于物理备份，便于长时间存储\n* MySQL 发行版自带工具，无需安装第三方软件\n\n#### 缺点\n\n* 只能单线程执行备份恢复任务，备份恢复速度较慢\n* 为完成一致性备份需要对备份表加锁，容易造成阻塞\n* 会对 Innodb Buffer Pool 造成污染\n\n### mysqlpump\n\n#### 优点\n\n* 语法同 mysqldump 高度兼容、学习成本低\n* 支持基于库和表的并行备份，可以提高逻辑备份的性能\n* 支持使用 ZLIB 和 Lz4 算法对备份进行压缩\n\n#### 缺点\n\n* 基于表进行并行备份，对大表性能较差\n* 5.7.11 之前版本不支持一致性并行备份\n* 会对 Innodb Buffer Pool 造成污染\n\n### xtrabackup\n\n#### 优点\n\n* 支持 innodb 存储引擎在线热备份，对 innodb 缓存没有影响\n* 支持并行对数据库全量备份和增量备份\n* 备份和恢复效率比逻辑备份高\n\n#### 缺点\n\n* 单表恢复比较复杂\n* 完成的数据文件拷贝，备份文件比逻辑备份大\n* 对跨平台和数据库版本的备份恢复支持度不如逻辑备份\n\n### 备份工具应用\n\n* 逻辑备份 + 二进制日志\n* 使用 xtrabackup 工具\n\n#### xtrabackup 进行增量备份\n\n* 全量备份 innobackupex --user=root --password=pwd /backups\n* 增量备份 innobackupex --user=root --password=pwd --incremental /home/db_backup/ --incremental-basedir=/home/db_backup/back_dir\n\n#### xtrabackup 进行增量恢复\n\n* innobackupex --apply-log --redo-only 全备目录\n* innobackupex --apply-log --redo-only 全备目录 --incremental-dir= 第 1... N 次增量目录\n* innobackupex --apply-log 全备目录\n\n### 备份二进制日志\n\n* cp 命令进行离线备份\n* mysqlbinlog 命令在线实时备份\n  + mysqlbinlog --raw --read-from-remote-server --stop-never --host 备份 ip --port 端口 -u 用户名 -p 密码 启动二进制日志文件名\n\n用户具有 replication slave 权限\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（七）备份恢复类问题","published":1,"updated":"2019-11-12T02:26:30.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokt001vyos60womgn17","content":"<h3 id=\"备份方式\"><a href=\"#备份方式\" class=\"headerlink\" title=\"备份方式\"></a>备份方式</h3><ul>\n<li>逻辑备份（DB 备份到文件）</li>\n<li>物理备份（DB 备份到 DB）</li>\n<li>全量备份和增量备份以及差异备份</li>\n</ul>\n<h3 id=\"常用备份工具\"><a href=\"#常用备份工具\" class=\"headerlink\" title=\"常用备份工具\"></a>常用备份工具</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mysqldump</td>\n<td>最常用的逻辑备份工具，支持全量备份和条件备份</td>\n</tr>\n<tr>\n<td>mysqlpump</td>\n<td>多线程逻辑备份工具，mysqldump 增强版本</td>\n</tr>\n<tr>\n<td>xtrabackup</td>\n<td>InnoDB 在线物理备份工具，支持多线程和增量备份</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>备份结果为可读 SQL 文件，可用于跨版本跨平台恢复数据</li>\n<li>备份文件尺寸小于物理备份，便于长时间存储</li>\n<li>MySQL 发行版自带工具，无需安装第三方软件</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>只能单线程执行备份恢复任务，备份恢复速度较慢</li>\n<li>为完成一致性备份需要对备份表加锁，容易造成阻塞</li>\n<li>会对 Innodb Buffer Pool 造成污染</li>\n</ul>\n<h3 id=\"mysqlpump\"><a href=\"#mysqlpump\" class=\"headerlink\" title=\"mysqlpump\"></a>mysqlpump</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>语法同 mysqldump 高度兼容、学习成本低</li>\n<li>支持基于库和表的并行备份，可以提高逻辑备份的性能</li>\n<li>支持使用 ZLIB 和 Lz4 算法对备份进行压缩</li>\n</ul>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>基于表进行并行备份，对大表性能较差</li>\n<li>5.7.11 之前版本不支持一致性并行备份</li>\n<li>会对 Innodb Buffer Pool 造成污染</li>\n</ul>\n<h3 id=\"xtrabackup\"><a href=\"#xtrabackup\" class=\"headerlink\" title=\"xtrabackup\"></a>xtrabackup</h3><h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>支持 innodb 存储引擎在线热备份，对 innodb 缓存没有影响</li>\n<li>支持并行对数据库全量备份和增量备份</li>\n<li>备份和恢复效率比逻辑备份高</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>单表恢复比较复杂</li>\n<li>完成的数据文件拷贝，备份文件比逻辑备份大</li>\n<li>对跨平台和数据库版本的备份恢复支持度不如逻辑备份</li>\n</ul>\n<h3 id=\"备份工具应用\"><a href=\"#备份工具应用\" class=\"headerlink\" title=\"备份工具应用\"></a>备份工具应用</h3><ul>\n<li>逻辑备份 + 二进制日志</li>\n<li>使用 xtrabackup 工具</li>\n</ul>\n<h4 id=\"xtrabackup-进行增量备份\"><a href=\"#xtrabackup-进行增量备份\" class=\"headerlink\" title=\"xtrabackup 进行增量备份\"></a>xtrabackup 进行增量备份</h4><ul>\n<li>全量备份 innobackupex —user=root —password=pwd /backups</li>\n<li>增量备份 innobackupex —user=root —password=pwd —incremental /home/db_backup/ —incremental-basedir=/home/db_backup/back_dir</li>\n</ul>\n<h4 id=\"xtrabackup-进行增量恢复\"><a href=\"#xtrabackup-进行增量恢复\" class=\"headerlink\" title=\"xtrabackup 进行增量恢复\"></a>xtrabackup 进行增量恢复</h4><ul>\n<li>innobackupex —apply-log —redo-only 全备目录</li>\n<li>innobackupex —apply-log —redo-only 全备目录 —incremental-dir= 第 1… N 次增量目录</li>\n<li>innobackupex —apply-log 全备目录</li>\n</ul>\n<h3 id=\"备份二进制日志\"><a href=\"#备份二进制日志\" class=\"headerlink\" title=\"备份二进制日志\"></a>备份二进制日志</h3><ul>\n<li>cp 命令进行离线备份</li>\n<li>mysqlbinlog 命令在线实时备份<ul>\n<li>mysqlbinlog —raw —read-from-remote-server —stop-never —host 备份 ip —port 端口 -u 用户名 -p 密码 启动二进制日志文件名</li>\n</ul>\n</li>\n</ul>\n<p>用户具有 replication slave 权限</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"备份方式\"><a href=\"#备份方式\" class=\"headerlink\" title=\"备份方式\"></a>备份方式</h3><ul>\n<li>逻辑备份（DB 备份到文件）</li>\n<li>物理备份（DB 备份到 DB）</li>\n<li>全量备份和增量备份以及差异备份</li>\n</ul>\n<h3 id=\"常用备份工具\"><a href=\"#常用备份工具\" class=\"headerlink\" title=\"常用备份工具\"></a>常用备份工具</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mysqldump</td>\n<td>最常用的逻辑备份工具，支持全量备份和条件备份</td>\n</tr>\n<tr>\n<td>mysqlpump</td>\n<td>多线程逻辑备份工具，mysqldump 增强版本</td>\n</tr>\n<tr>\n<td>xtrabackup</td>\n<td>InnoDB 在线物理备份工具，支持多线程和增量备份</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"mysqldump\"><a href=\"#mysqldump\" class=\"headerlink\" title=\"mysqldump\"></a>mysqldump</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>备份结果为可读 SQL 文件，可用于跨版本跨平台恢复数据</li>\n<li>备份文件尺寸小于物理备份，便于长时间存储</li>\n<li>MySQL 发行版自带工具，无需安装第三方软件</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>只能单线程执行备份恢复任务，备份恢复速度较慢</li>\n<li>为完成一致性备份需要对备份表加锁，容易造成阻塞</li>\n<li>会对 Innodb Buffer Pool 造成污染</li>\n</ul>\n<h3 id=\"mysqlpump\"><a href=\"#mysqlpump\" class=\"headerlink\" title=\"mysqlpump\"></a>mysqlpump</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>语法同 mysqldump 高度兼容、学习成本低</li>\n<li>支持基于库和表的并行备份，可以提高逻辑备份的性能</li>\n<li>支持使用 ZLIB 和 Lz4 算法对备份进行压缩</li>\n</ul>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>基于表进行并行备份，对大表性能较差</li>\n<li>5.7.11 之前版本不支持一致性并行备份</li>\n<li>会对 Innodb Buffer Pool 造成污染</li>\n</ul>\n<h3 id=\"xtrabackup\"><a href=\"#xtrabackup\" class=\"headerlink\" title=\"xtrabackup\"></a>xtrabackup</h3><h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>支持 innodb 存储引擎在线热备份，对 innodb 缓存没有影响</li>\n<li>支持并行对数据库全量备份和增量备份</li>\n<li>备份和恢复效率比逻辑备份高</li>\n</ul>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>单表恢复比较复杂</li>\n<li>完成的数据文件拷贝，备份文件比逻辑备份大</li>\n<li>对跨平台和数据库版本的备份恢复支持度不如逻辑备份</li>\n</ul>\n<h3 id=\"备份工具应用\"><a href=\"#备份工具应用\" class=\"headerlink\" title=\"备份工具应用\"></a>备份工具应用</h3><ul>\n<li>逻辑备份 + 二进制日志</li>\n<li>使用 xtrabackup 工具</li>\n</ul>\n<h4 id=\"xtrabackup-进行增量备份\"><a href=\"#xtrabackup-进行增量备份\" class=\"headerlink\" title=\"xtrabackup 进行增量备份\"></a>xtrabackup 进行增量备份</h4><ul>\n<li>全量备份 innobackupex —user=root —password=pwd /backups</li>\n<li>增量备份 innobackupex —user=root —password=pwd —incremental /home/db_backup/ —incremental-basedir=/home/db_backup/back_dir</li>\n</ul>\n<h4 id=\"xtrabackup-进行增量恢复\"><a href=\"#xtrabackup-进行增量恢复\" class=\"headerlink\" title=\"xtrabackup 进行增量恢复\"></a>xtrabackup 进行增量恢复</h4><ul>\n<li>innobackupex —apply-log —redo-only 全备目录</li>\n<li>innobackupex —apply-log —redo-only 全备目录 —incremental-dir= 第 1… N 次增量目录</li>\n<li>innobackupex —apply-log 全备目录</li>\n</ul>\n<h3 id=\"备份二进制日志\"><a href=\"#备份二进制日志\" class=\"headerlink\" title=\"备份二进制日志\"></a>备份二进制日志</h3><ul>\n<li>cp 命令进行离线备份</li>\n<li>mysqlbinlog 命令在线实时备份<ul>\n<li>mysqlbinlog —raw —read-from-remote-server —stop-never —host 备份 ip —port 端口 -u 用户名 -p 密码 启动二进制日志文件名</li>\n</ul>\n</li>\n</ul>\n<p>用户具有 replication slave 权限</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（九）异常处理问题","top":1,"date":"2019-09-19T06:01:43.000Z","_content":"\n### 数据库服务器负载过大\n\n#### 原因\n\n* 服务器磁盘 IO 超负荷\n* 存在大量阻塞线程\n* 存在大量并发慢查询\n* 存在其他占用 CPU 的服务\n* 服务器硬件资源原因\n\n#### 解决方案\n\n* 服务器硬件（硬件监控）\n* 其他服务占用（ps, top）\n* IO 超负荷（iostat -dmx 1, lsof）\n* 阻塞线程（show processlist, 阻塞监控）\n* 并发线程 （show processlist, 慢查询日志）\n\n### 慢查询造成的磁盘 IO 爆表\n\n* MySQL 输出大量日志\n* MySQL 正在进行大批量写\n* 慢查询产生大量磁盘临时表\n\n### 主从数据库数据不一致\n\n#### 原因\n\n* 对从服务器进行了写操作\n* 使用 sql_slave_skip_counter 或注入空事务的方式修复错误\n* 使用了 statement 格式的复制\n\n#### 解决方案\n\n* 设置 read_only=ON\n* 设置 super_read_only=ON\n* 使用 row 格式的复制\n* 使用 pt_table_sync 修复数据\n\n### 主服务器连接不上\n\nSlave_IO_Running： Connecting\n\n* 主从服务器间网络是否畅通\n* 是否存在防火墙，过滤了数据库端口\n* 复制链路配置的用户名密码是否正确，是否有相应权限\n\n### 主键冲突问题\n\nSlave_SQL_Running： NO\n\n* 跳过故障数据\n* 检查主从数据一致性\n* 直接删除从库主键冲突数据\n\n### 数据行不存在\n\n* 跳过故障数据\n* 使用 pt-table-sync 修复数据\n\n### relay_log 损坏\n\n* 找到已经正确同步的日志\n* 使用 reset skave 删除 relay_log\n* 在正确同步日志点后重新同步日志\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（九）异常处理问题.md","raw":"---\ntitle: mysql面试（九）异常处理问题\ntop: 1\ndate: 2019-09-19 14:01:43\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 数据库服务器负载过大\n\n#### 原因\n\n* 服务器磁盘 IO 超负荷\n* 存在大量阻塞线程\n* 存在大量并发慢查询\n* 存在其他占用 CPU 的服务\n* 服务器硬件资源原因\n\n#### 解决方案\n\n* 服务器硬件（硬件监控）\n* 其他服务占用（ps, top）\n* IO 超负荷（iostat -dmx 1, lsof）\n* 阻塞线程（show processlist, 阻塞监控）\n* 并发线程 （show processlist, 慢查询日志）\n\n### 慢查询造成的磁盘 IO 爆表\n\n* MySQL 输出大量日志\n* MySQL 正在进行大批量写\n* 慢查询产生大量磁盘临时表\n\n### 主从数据库数据不一致\n\n#### 原因\n\n* 对从服务器进行了写操作\n* 使用 sql_slave_skip_counter 或注入空事务的方式修复错误\n* 使用了 statement 格式的复制\n\n#### 解决方案\n\n* 设置 read_only=ON\n* 设置 super_read_only=ON\n* 使用 row 格式的复制\n* 使用 pt_table_sync 修复数据\n\n### 主服务器连接不上\n\nSlave_IO_Running： Connecting\n\n* 主从服务器间网络是否畅通\n* 是否存在防火墙，过滤了数据库端口\n* 复制链路配置的用户名密码是否正确，是否有相应权限\n\n### 主键冲突问题\n\nSlave_SQL_Running： NO\n\n* 跳过故障数据\n* 检查主从数据一致性\n* 直接删除从库主键冲突数据\n\n### 数据行不存在\n\n* 跳过故障数据\n* 使用 pt-table-sync 修复数据\n\n### relay_log 损坏\n\n* 找到已经正确同步的日志\n* 使用 reset skave 删除 relay_log\n* 在正确同步日志点后重新同步日志\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（九）异常处理问题","published":1,"updated":"2019-11-14T01:31:52.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoku001yyos643ehdc28","content":"<h3 id=\"数据库服务器负载过大\"><a href=\"#数据库服务器负载过大\" class=\"headerlink\" title=\"数据库服务器负载过大\"></a>数据库服务器负载过大</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>服务器磁盘 IO 超负荷</li>\n<li>存在大量阻塞线程</li>\n<li>存在大量并发慢查询</li>\n<li>存在其他占用 CPU 的服务</li>\n<li>服务器硬件资源原因</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>服务器硬件（硬件监控）</li>\n<li>其他服务占用（ps, top）</li>\n<li>IO 超负荷（iostat -dmx 1, lsof）</li>\n<li>阻塞线程（show processlist, 阻塞监控）</li>\n<li>并发线程 （show processlist, 慢查询日志）</li>\n</ul>\n<h3 id=\"慢查询造成的磁盘-IO-爆表\"><a href=\"#慢查询造成的磁盘-IO-爆表\" class=\"headerlink\" title=\"慢查询造成的磁盘 IO 爆表\"></a>慢查询造成的磁盘 IO 爆表</h3><ul>\n<li>MySQL 输出大量日志</li>\n<li>MySQL 正在进行大批量写</li>\n<li>慢查询产生大量磁盘临时表</li>\n</ul>\n<h3 id=\"主从数据库数据不一致\"><a href=\"#主从数据库数据不一致\" class=\"headerlink\" title=\"主从数据库数据不一致\"></a>主从数据库数据不一致</h3><h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>对从服务器进行了写操作</li>\n<li>使用 sql_slave_skip_counter 或注入空事务的方式修复错误</li>\n<li>使用了 statement 格式的复制</li>\n</ul>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>设置 read_only=ON</li>\n<li>设置 super_read_only=ON</li>\n<li>使用 row 格式的复制</li>\n<li>使用 pt_table_sync 修复数据</li>\n</ul>\n<h3 id=\"主服务器连接不上\"><a href=\"#主服务器连接不上\" class=\"headerlink\" title=\"主服务器连接不上\"></a>主服务器连接不上</h3><p>Slave_IO_Running： Connecting</p>\n<ul>\n<li>主从服务器间网络是否畅通</li>\n<li>是否存在防火墙，过滤了数据库端口</li>\n<li>复制链路配置的用户名密码是否正确，是否有相应权限</li>\n</ul>\n<h3 id=\"主键冲突问题\"><a href=\"#主键冲突问题\" class=\"headerlink\" title=\"主键冲突问题\"></a>主键冲突问题</h3><p>Slave_SQL_Running： NO</p>\n<ul>\n<li>跳过故障数据</li>\n<li>检查主从数据一致性</li>\n<li>直接删除从库主键冲突数据</li>\n</ul>\n<h3 id=\"数据行不存在\"><a href=\"#数据行不存在\" class=\"headerlink\" title=\"数据行不存在\"></a>数据行不存在</h3><ul>\n<li>跳过故障数据</li>\n<li>使用 pt-table-sync 修复数据</li>\n</ul>\n<h3 id=\"relay-log-损坏\"><a href=\"#relay-log-损坏\" class=\"headerlink\" title=\"relay_log 损坏\"></a>relay_log 损坏</h3><ul>\n<li>找到已经正确同步的日志</li>\n<li>使用 reset skave 删除 relay_log</li>\n<li>在正确同步日志点后重新同步日志</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据库服务器负载过大\"><a href=\"#数据库服务器负载过大\" class=\"headerlink\" title=\"数据库服务器负载过大\"></a>数据库服务器负载过大</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>服务器磁盘 IO 超负荷</li>\n<li>存在大量阻塞线程</li>\n<li>存在大量并发慢查询</li>\n<li>存在其他占用 CPU 的服务</li>\n<li>服务器硬件资源原因</li>\n</ul>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>服务器硬件（硬件监控）</li>\n<li>其他服务占用（ps, top）</li>\n<li>IO 超负荷（iostat -dmx 1, lsof）</li>\n<li>阻塞线程（show processlist, 阻塞监控）</li>\n<li>并发线程 （show processlist, 慢查询日志）</li>\n</ul>\n<h3 id=\"慢查询造成的磁盘-IO-爆表\"><a href=\"#慢查询造成的磁盘-IO-爆表\" class=\"headerlink\" title=\"慢查询造成的磁盘 IO 爆表\"></a>慢查询造成的磁盘 IO 爆表</h3><ul>\n<li>MySQL 输出大量日志</li>\n<li>MySQL 正在进行大批量写</li>\n<li>慢查询产生大量磁盘临时表</li>\n</ul>\n<h3 id=\"主从数据库数据不一致\"><a href=\"#主从数据库数据不一致\" class=\"headerlink\" title=\"主从数据库数据不一致\"></a>主从数据库数据不一致</h3><h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>对从服务器进行了写操作</li>\n<li>使用 sql_slave_skip_counter 或注入空事务的方式修复错误</li>\n<li>使用了 statement 格式的复制</li>\n</ul>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><ul>\n<li>设置 read_only=ON</li>\n<li>设置 super_read_only=ON</li>\n<li>使用 row 格式的复制</li>\n<li>使用 pt_table_sync 修复数据</li>\n</ul>\n<h3 id=\"主服务器连接不上\"><a href=\"#主服务器连接不上\" class=\"headerlink\" title=\"主服务器连接不上\"></a>主服务器连接不上</h3><p>Slave_IO_Running： Connecting</p>\n<ul>\n<li>主从服务器间网络是否畅通</li>\n<li>是否存在防火墙，过滤了数据库端口</li>\n<li>复制链路配置的用户名密码是否正确，是否有相应权限</li>\n</ul>\n<h3 id=\"主键冲突问题\"><a href=\"#主键冲突问题\" class=\"headerlink\" title=\"主键冲突问题\"></a>主键冲突问题</h3><p>Slave_SQL_Running： NO</p>\n<ul>\n<li>跳过故障数据</li>\n<li>检查主从数据一致性</li>\n<li>直接删除从库主键冲突数据</li>\n</ul>\n<h3 id=\"数据行不存在\"><a href=\"#数据行不存在\" class=\"headerlink\" title=\"数据行不存在\"></a>数据行不存在</h3><ul>\n<li>跳过故障数据</li>\n<li>使用 pt-table-sync 修复数据</li>\n</ul>\n<h3 id=\"relay-log-损坏\"><a href=\"#relay-log-损坏\" class=\"headerlink\" title=\"relay_log 损坏\"></a>relay_log 损坏</h3><ul>\n<li>找到已经正确同步的日志</li>\n<li>使用 reset skave 删除 relay_log</li>\n<li>在正确同步日志点后重新同步日志</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（二）用户管理类问题","top":1,"date":"2019-09-10T08:04:47.000Z","_content":"\n### 如何定义 MySQL 数据库账号\n\n* 用户名 @可访问控制列表\n  + % 可以从所有外部主机访问\n  + 192.168.1.% 可以从 192.168.1 网段访问\n  + localhost 从服务器本地访问\n* 使用 CREATE USER 建立用户\n\n### MySQL 常用用户权限\n\n||语句|说明|\n|----|---- |-----|\n|Admin|Create User|建立新用户\n||Grant option|为其他用户授权\n||Super|管理服务器\n|DDL|Create|新建数据库\n||Alter|修改表结构\n||Drop|删除数据库和表\n||Index|建立和删除索引\n|DML|Select|查询表数据\n||Insert|插入表数据\n||Update|更新表数据\n||Delete|删除表数据\n||Execute|执行存储过程\n\n### 为用户授权\n\n* 遵循最小权限原则\n* 使用 grant 命令授权，revoke 收回权限\n\n``` \ngrant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n```\n\n### 数据库用户管理流程规范\n\n* 最小权限原则\n* 密码强度策略\n* 密码过期原则\n* 限制历史密码重用原则\n\n### 导出用户建立和授权语句\n\n``` \npt-show-grants u=root,p=123456,h=localhost\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（二）用户管理类问题.md","raw":"---\ntitle: mysql面试（二）用户管理类问题\ntop: 1\ndate: 2019-09-10 16:04:47\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### 如何定义 MySQL 数据库账号\n\n* 用户名 @可访问控制列表\n  + % 可以从所有外部主机访问\n  + 192.168.1.% 可以从 192.168.1 网段访问\n  + localhost 从服务器本地访问\n* 使用 CREATE USER 建立用户\n\n### MySQL 常用用户权限\n\n||语句|说明|\n|----|---- |-----|\n|Admin|Create User|建立新用户\n||Grant option|为其他用户授权\n||Super|管理服务器\n|DDL|Create|新建数据库\n||Alter|修改表结构\n||Drop|删除数据库和表\n||Index|建立和删除索引\n|DML|Select|查询表数据\n||Insert|插入表数据\n||Update|更新表数据\n||Delete|删除表数据\n||Execute|执行存储过程\n\n### 为用户授权\n\n* 遵循最小权限原则\n* 使用 grant 命令授权，revoke 收回权限\n\n``` \ngrant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n```\n\n### 数据库用户管理流程规范\n\n* 最小权限原则\n* 密码强度策略\n* 密码过期原则\n* 限制历史密码重用原则\n\n### 导出用户建立和授权语句\n\n``` \npt-show-grants u=root,p=123456,h=localhost\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（二）用户管理类问题","published":1,"updated":"2019-11-12T02:31:12.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokv0021yos6dvnlm4a9","content":"<h3 id=\"如何定义-MySQL-数据库账号\"><a href=\"#如何定义-MySQL-数据库账号\" class=\"headerlink\" title=\"如何定义 MySQL 数据库账号\"></a>如何定义 MySQL 数据库账号</h3><ul>\n<li>用户名 @可访问控制列表<ul>\n<li>% 可以从所有外部主机访问</li>\n<li>192.168.1.% 可以从 192.168.1 网段访问</li>\n<li>localhost 从服务器本地访问</li>\n</ul>\n</li>\n<li>使用 CREATE USER 建立用户</li>\n</ul>\n<h3 id=\"MySQL-常用用户权限\"><a href=\"#MySQL-常用用户权限\" class=\"headerlink\" title=\"MySQL 常用用户权限\"></a>MySQL 常用用户权限</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Admin</td>\n<td>Create User</td>\n<td>建立新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>Grant option</td>\n<td>为其他用户授权</td>\n</tr>\n<tr>\n<td></td>\n<td>Super</td>\n<td>管理服务器</td>\n</tr>\n<tr>\n<td>DDL</td>\n<td>Create</td>\n<td>新建数据库</td>\n</tr>\n<tr>\n<td></td>\n<td>Alter</td>\n<td>修改表结构</td>\n</tr>\n<tr>\n<td></td>\n<td>Drop</td>\n<td>删除数据库和表</td>\n</tr>\n<tr>\n<td></td>\n<td>Index</td>\n<td>建立和删除索引</td>\n</tr>\n<tr>\n<td>DML</td>\n<td>Select</td>\n<td>查询表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Insert</td>\n<td>插入表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Update</td>\n<td>更新表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Delete</td>\n<td>删除表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Execute</td>\n<td>执行存储过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"为用户授权\"><a href=\"#为用户授权\" class=\"headerlink\" title=\"为用户授权\"></a>为用户授权</h3><ul>\n<li>遵循最小权限原则</li>\n<li>使用 grant 命令授权，revoke 收回权限</li>\n</ul>\n<pre><code>grant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n</code></pre><h3 id=\"数据库用户管理流程规范\"><a href=\"#数据库用户管理流程规范\" class=\"headerlink\" title=\"数据库用户管理流程规范\"></a>数据库用户管理流程规范</h3><ul>\n<li>最小权限原则</li>\n<li>密码强度策略</li>\n<li>密码过期原则</li>\n<li>限制历史密码重用原则</li>\n</ul>\n<h3 id=\"导出用户建立和授权语句\"><a href=\"#导出用户建立和授权语句\" class=\"headerlink\" title=\"导出用户建立和授权语句\"></a>导出用户建立和授权语句</h3><pre><code>pt-show-grants u=root,p=123456,h=localhost\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"如何定义-MySQL-数据库账号\"><a href=\"#如何定义-MySQL-数据库账号\" class=\"headerlink\" title=\"如何定义 MySQL 数据库账号\"></a>如何定义 MySQL 数据库账号</h3><ul>\n<li>用户名 @可访问控制列表<ul>\n<li>% 可以从所有外部主机访问</li>\n<li>192.168.1.% 可以从 192.168.1 网段访问</li>\n<li>localhost 从服务器本地访问</li>\n</ul>\n</li>\n<li>使用 CREATE USER 建立用户</li>\n</ul>\n<h3 id=\"MySQL-常用用户权限\"><a href=\"#MySQL-常用用户权限\" class=\"headerlink\" title=\"MySQL 常用用户权限\"></a>MySQL 常用用户权限</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>语句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Admin</td>\n<td>Create User</td>\n<td>建立新用户</td>\n</tr>\n<tr>\n<td></td>\n<td>Grant option</td>\n<td>为其他用户授权</td>\n</tr>\n<tr>\n<td></td>\n<td>Super</td>\n<td>管理服务器</td>\n</tr>\n<tr>\n<td>DDL</td>\n<td>Create</td>\n<td>新建数据库</td>\n</tr>\n<tr>\n<td></td>\n<td>Alter</td>\n<td>修改表结构</td>\n</tr>\n<tr>\n<td></td>\n<td>Drop</td>\n<td>删除数据库和表</td>\n</tr>\n<tr>\n<td></td>\n<td>Index</td>\n<td>建立和删除索引</td>\n</tr>\n<tr>\n<td>DML</td>\n<td>Select</td>\n<td>查询表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Insert</td>\n<td>插入表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Update</td>\n<td>更新表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Delete</td>\n<td>删除表数据</td>\n</tr>\n<tr>\n<td></td>\n<td>Execute</td>\n<td>执行存储过程</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"为用户授权\"><a href=\"#为用户授权\" class=\"headerlink\" title=\"为用户授权\"></a>为用户授权</h3><ul>\n<li>遵循最小权限原则</li>\n<li>使用 grant 命令授权，revoke 收回权限</li>\n</ul>\n<pre><code>grant select,insert,update on db.tb to user@ip\nrevoke delete on db.tb from user@ip\n</code></pre><h3 id=\"数据库用户管理流程规范\"><a href=\"#数据库用户管理流程规范\" class=\"headerlink\" title=\"数据库用户管理流程规范\"></a>数据库用户管理流程规范</h3><ul>\n<li>最小权限原则</li>\n<li>密码强度策略</li>\n<li>密码过期原则</li>\n<li>限制历史密码重用原则</li>\n</ul>\n<h3 id=\"导出用户建立和授权语句\"><a href=\"#导出用户建立和授权语句\" class=\"headerlink\" title=\"导出用户建立和授权语句\"></a>导出用户建立和授权语句</h3><pre><code>pt-show-grants u=root,p=123456,h=localhost\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 面试（五）存储引擎类问题","top":1,"date":"2019-09-15T05:28:16.000Z","_content":"\n### MySQL 常用存储引擎\n\n|引擎名称|事务|说明|\n|-|-|-|\n|MYISAM|N|MySQL5.6 之前的默认引擎，最常用的非事务型存储引擎|\n|CSV|N|以 CSV 格式存储的非事务型存储引擎|\n|Archive|N|只运行查询和新增数据不允许修改的非事务型存储引擎|\n|Memory|N|是一种易失性非事务型存储引擎|\n|InnoDB|Y|最常用事务性存储引擎|\n|NDB|Y|MySQL 集群使用的内存型事务存储引擎|\n\n### MYISAM\n\n#### 特点\n\n* 非事务存储引擎\n* 以堆表方式存储\n* 使用表级锁\n* 支持 BTree 索引，空间索引，全文索引\n\n#### 使用场景\n\n* 读操作远远大于写操作\n* 不需要使用事务\n\n### CSV\n\n#### 特点\n\n* 非事务型存储引擎\n* 数据以 CSV 格式存储\n* 所有列都不能为 NULL\n* 不支持索引\n\n#### 使用场景\n\n* 作为数据交换的中间表使用\n\n### Archive\n\n#### 特点\n\n* 非事务型存储引擎\n* 表数据使用 zlib 压缩\n* 只支持 Insert 和 Select\n* 只允许在自增 ID 上建立索引\n\n#### 使用场景\n\n* 日志和数据采集类应用\n* 数据归档存储\n\n### Memory\n\n#### 特点\n\n* 非事务型存储引擎\n* 数据保存在内存中\n* 所有字段长度固定\n* 支持 Btree 和 Hash 索引\n\n#### 使用场景\n\n* 用于缓存字典映射表\n* 缓存周期性分析数据\n\n### InnoDB\n\n#### 特点\n\n* 事务型存储引擎\n* 数据按主键聚集存储\n* 支持行级锁和 MVCC\n* 支持 Btree 和自适应 Hash 索引\n* 支持全文和空间索引\n\n#### 使用场景\n\n* 大多数 OLTP 场景\n\n### NDB\n\n#### 特点\n\n* 事务型存储引擎\n* 数据保存在内存中\n* 支持行级锁\n* 支持高可用集群\n* 支持 Ttree 索引\n\n#### 使用场景\n\n* 需要数据完全同步的高可用场景\n\n### 什么情况下 InnoDB 无法在线修改表\n\n|操作|语法|\n|-|-|\n|加全文索引|CREATE FULTEXT INDEX name ON table(column)|\n|加空间索引|ALTER TABLE geom ADD SPATIAL INDEX(g)|\n|删除主键|ALTER TABLE tb_name DROP PRIMARY KEY|\n|增加自增列|alert table t add column id int auto_increment not null primary key|\n|修改列类型|alter table t change c1 c1 NEW_TYPE|\n|修改字符集|alter table t character set = charset_name|\n\n#### 在线 DDL 存在的问题\n\n* 有部分语句不支持在线 DDL\n* 长时间 DDL 操作会引起严重主从延迟\n* 无法对 DDL 操作进行资源限制\n\n#### 如何更安全执行 DDL\n\n* pt-online-shema-change [OPTIONS]DSN\n\n### InnoDB 如何实现事务\n\n#### 原理\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n#### 实现方式\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|回滚日志（Undo log）: 用于记录数据修改前的状态|\n|一致性（C）|重作日志（Redo log）: 用于记录数据修改后的状态|\n|隔离性（I）|锁：用于资源隔离，分为共享锁和排他锁|\n|持久性（D）|重作日志（Redo log）+ 回滚日志（Undo log）\n\n### INNODB 锁\n\n* 查询需要对资源加共享锁（S）\n* 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（五）存储引擎类问题.md","raw":"---\ntitle: mysql 面试（五）存储引擎类问题\ntop: 1\ndate: 2019-09-15 13:28:16\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### MySQL 常用存储引擎\n\n|引擎名称|事务|说明|\n|-|-|-|\n|MYISAM|N|MySQL5.6 之前的默认引擎，最常用的非事务型存储引擎|\n|CSV|N|以 CSV 格式存储的非事务型存储引擎|\n|Archive|N|只运行查询和新增数据不允许修改的非事务型存储引擎|\n|Memory|N|是一种易失性非事务型存储引擎|\n|InnoDB|Y|最常用事务性存储引擎|\n|NDB|Y|MySQL 集群使用的内存型事务存储引擎|\n\n### MYISAM\n\n#### 特点\n\n* 非事务存储引擎\n* 以堆表方式存储\n* 使用表级锁\n* 支持 BTree 索引，空间索引，全文索引\n\n#### 使用场景\n\n* 读操作远远大于写操作\n* 不需要使用事务\n\n### CSV\n\n#### 特点\n\n* 非事务型存储引擎\n* 数据以 CSV 格式存储\n* 所有列都不能为 NULL\n* 不支持索引\n\n#### 使用场景\n\n* 作为数据交换的中间表使用\n\n### Archive\n\n#### 特点\n\n* 非事务型存储引擎\n* 表数据使用 zlib 压缩\n* 只支持 Insert 和 Select\n* 只允许在自增 ID 上建立索引\n\n#### 使用场景\n\n* 日志和数据采集类应用\n* 数据归档存储\n\n### Memory\n\n#### 特点\n\n* 非事务型存储引擎\n* 数据保存在内存中\n* 所有字段长度固定\n* 支持 Btree 和 Hash 索引\n\n#### 使用场景\n\n* 用于缓存字典映射表\n* 缓存周期性分析数据\n\n### InnoDB\n\n#### 特点\n\n* 事务型存储引擎\n* 数据按主键聚集存储\n* 支持行级锁和 MVCC\n* 支持 Btree 和自适应 Hash 索引\n* 支持全文和空间索引\n\n#### 使用场景\n\n* 大多数 OLTP 场景\n\n### NDB\n\n#### 特点\n\n* 事务型存储引擎\n* 数据保存在内存中\n* 支持行级锁\n* 支持高可用集群\n* 支持 Ttree 索引\n\n#### 使用场景\n\n* 需要数据完全同步的高可用场景\n\n### 什么情况下 InnoDB 无法在线修改表\n\n|操作|语法|\n|-|-|\n|加全文索引|CREATE FULTEXT INDEX name ON table(column)|\n|加空间索引|ALTER TABLE geom ADD SPATIAL INDEX(g)|\n|删除主键|ALTER TABLE tb_name DROP PRIMARY KEY|\n|增加自增列|alert table t add column id int auto_increment not null primary key|\n|修改列类型|alter table t change c1 c1 NEW_TYPE|\n|修改字符集|alter table t character set = charset_name|\n\n#### 在线 DDL 存在的问题\n\n* 有部分语句不支持在线 DDL\n* 长时间 DDL 操作会引起严重主从延迟\n* 无法对 DDL 操作进行资源限制\n\n#### 如何更安全执行 DDL\n\n* pt-online-shema-change [OPTIONS]DSN\n\n### InnoDB 如何实现事务\n\n#### 原理\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|一个事务的所有操作，或全部成功或全部失败|\n|一致性（C）|事务开始之前和事务结束只会，数据库保持完整性\n|隔离性（I）|每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见\n|持久性（D）|事务一旦提交，结果就是永久性，如果宕机也能恢复\n\n#### 实现方式\n\n|特征|说明|\n|:----- |-----|\n|原子性（A）|回滚日志（Undo log）: 用于记录数据修改前的状态|\n|一致性（C）|重作日志（Redo log）: 用于记录数据修改后的状态|\n|隔离性（I）|锁：用于资源隔离，分为共享锁和排他锁|\n|持久性（D）|重作日志（Redo log）+ 回滚日志（Undo log）\n\n### INNODB 锁\n\n* 查询需要对资源加共享锁（S）\n* 修改需要对资源加排他锁（X）\n\n| |排他锁|共享锁|\n|----- |----- |-----|\n|排他锁 |不兼容 |不兼容|\n|共享锁 |不兼容 |兼容|\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（五）存储引擎类问题","published":1,"updated":"2019-11-12T02:05:15.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokw0025yos6uznye151","content":"<h3 id=\"MySQL-常用存储引擎\"><a href=\"#MySQL-常用存储引擎\" class=\"headerlink\" title=\"MySQL 常用存储引擎\"></a>MySQL 常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎名称</th>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MYISAM</td>\n<td>N</td>\n<td>MySQL5.6 之前的默认引擎，最常用的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>N</td>\n<td>以 CSV 格式存储的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>N</td>\n<td>只运行查询和新增数据不允许修改的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>N</td>\n<td>是一种易失性非事务型存储引擎</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>Y</td>\n<td>最常用事务性存储引擎</td>\n</tr>\n<tr>\n<td>NDB</td>\n<td>Y</td>\n<td>MySQL 集群使用的内存型事务存储引擎</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MYISAM\"><a href=\"#MYISAM\" class=\"headerlink\" title=\"MYISAM\"></a>MYISAM</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务存储引擎</li>\n<li>以堆表方式存储</li>\n<li>使用表级锁</li>\n<li>支持 BTree 索引，空间索引，全文索引</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>读操作远远大于写操作</li>\n<li>不需要使用事务</li>\n</ul>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据以 CSV 格式存储</li>\n<li>所有列都不能为 NULL</li>\n<li>不支持索引</li>\n</ul>\n<h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>作为数据交换的中间表使用</li>\n</ul>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>表数据使用 zlib 压缩</li>\n<li>只支持 Insert 和 Select</li>\n<li>只允许在自增 ID 上建立索引</li>\n</ul>\n<h4 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>日志和数据采集类应用</li>\n<li>数据归档存储</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>所有字段长度固定</li>\n<li>支持 Btree 和 Hash 索引</li>\n</ul>\n<h4 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>用于缓存字典映射表</li>\n<li>缓存周期性分析数据</li>\n</ul>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁和 MVCC</li>\n<li>支持 Btree 和自适应 Hash 索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<h4 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>大多数 OLTP 场景</li>\n</ul>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>支持行级锁</li>\n<li>支持高可用集群</li>\n<li>支持 Ttree 索引</li>\n</ul>\n<h4 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>需要数据完全同步的高可用场景</li>\n</ul>\n<h3 id=\"什么情况下-InnoDB-无法在线修改表\"><a href=\"#什么情况下-InnoDB-无法在线修改表\" class=\"headerlink\" title=\"什么情况下 InnoDB 无法在线修改表\"></a>什么情况下 InnoDB 无法在线修改表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>加全文索引</td>\n<td>CREATE FULTEXT INDEX name ON table(column)</td>\n</tr>\n<tr>\n<td>加空间索引</td>\n<td>ALTER TABLE geom ADD SPATIAL INDEX(g)</td>\n</tr>\n<tr>\n<td>删除主键</td>\n<td>ALTER TABLE tb_name DROP PRIMARY KEY</td>\n</tr>\n<tr>\n<td>增加自增列</td>\n<td>alert table t add column id int auto_increment not null primary key</td>\n</tr>\n<tr>\n<td>修改列类型</td>\n<td>alter table t change c1 c1 NEW_TYPE</td>\n</tr>\n<tr>\n<td>修改字符集</td>\n<td>alter table t character set = charset_name</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"在线-DDL-存在的问题\"><a href=\"#在线-DDL-存在的问题\" class=\"headerlink\" title=\"在线 DDL 存在的问题\"></a>在线 DDL 存在的问题</h4><ul>\n<li>有部分语句不支持在线 DDL</li>\n<li>长时间 DDL 操作会引起严重主从延迟</li>\n<li>无法对 DDL 操作进行资源限制</li>\n</ul>\n<h4 id=\"如何更安全执行-DDL\"><a href=\"#如何更安全执行-DDL\" class=\"headerlink\" title=\"如何更安全执行 DDL\"></a>如何更安全执行 DDL</h4><ul>\n<li>pt-online-shema-change [OPTIONS]DSN</li>\n</ul>\n<h3 id=\"InnoDB-如何实现事务\"><a href=\"#InnoDB-如何实现事务\" class=\"headerlink\" title=\"InnoDB 如何实现事务\"></a>InnoDB 如何实现事务</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>回滚日志（Undo log）: 用于记录数据修改前的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>重作日志（Redo log）: 用于记录数据修改后的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>锁：用于资源隔离，分为共享锁和排他锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>重作日志（Redo log）+ 回滚日志（Undo log）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-锁\"><a href=\"#INNODB-锁\" class=\"headerlink\" title=\"INNODB 锁\"></a>INNODB 锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL-常用存储引擎\"><a href=\"#MySQL-常用存储引擎\" class=\"headerlink\" title=\"MySQL 常用存储引擎\"></a>MySQL 常用存储引擎</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>引擎名称</th>\n<th>事务</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MYISAM</td>\n<td>N</td>\n<td>MySQL5.6 之前的默认引擎，最常用的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td>N</td>\n<td>以 CSV 格式存储的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Archive</td>\n<td>N</td>\n<td>只运行查询和新增数据不允许修改的非事务型存储引擎</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>N</td>\n<td>是一种易失性非事务型存储引擎</td>\n</tr>\n<tr>\n<td>InnoDB</td>\n<td>Y</td>\n<td>最常用事务性存储引擎</td>\n</tr>\n<tr>\n<td>NDB</td>\n<td>Y</td>\n<td>MySQL 集群使用的内存型事务存储引擎</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"MYISAM\"><a href=\"#MYISAM\" class=\"headerlink\" title=\"MYISAM\"></a>MYISAM</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务存储引擎</li>\n<li>以堆表方式存储</li>\n<li>使用表级锁</li>\n<li>支持 BTree 索引，空间索引，全文索引</li>\n</ul>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>读操作远远大于写操作</li>\n<li>不需要使用事务</li>\n</ul>\n<h3 id=\"CSV\"><a href=\"#CSV\" class=\"headerlink\" title=\"CSV\"></a>CSV</h3><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据以 CSV 格式存储</li>\n<li>所有列都不能为 NULL</li>\n<li>不支持索引</li>\n</ul>\n<h4 id=\"使用场景-1\"><a href=\"#使用场景-1\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>作为数据交换的中间表使用</li>\n</ul>\n<h3 id=\"Archive\"><a href=\"#Archive\" class=\"headerlink\" title=\"Archive\"></a>Archive</h3><h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>表数据使用 zlib 压缩</li>\n<li>只支持 Insert 和 Select</li>\n<li>只允许在自增 ID 上建立索引</li>\n</ul>\n<h4 id=\"使用场景-2\"><a href=\"#使用场景-2\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>日志和数据采集类应用</li>\n<li>数据归档存储</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>非事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>所有字段长度固定</li>\n<li>支持 Btree 和 Hash 索引</li>\n</ul>\n<h4 id=\"使用场景-3\"><a href=\"#使用场景-3\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>用于缓存字典映射表</li>\n<li>缓存周期性分析数据</li>\n</ul>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据按主键聚集存储</li>\n<li>支持行级锁和 MVCC</li>\n<li>支持 Btree 和自适应 Hash 索引</li>\n<li>支持全文和空间索引</li>\n</ul>\n<h4 id=\"使用场景-4\"><a href=\"#使用场景-4\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>大多数 OLTP 场景</li>\n</ul>\n<h3 id=\"NDB\"><a href=\"#NDB\" class=\"headerlink\" title=\"NDB\"></a>NDB</h3><h4 id=\"特点-5\"><a href=\"#特点-5\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>事务型存储引擎</li>\n<li>数据保存在内存中</li>\n<li>支持行级锁</li>\n<li>支持高可用集群</li>\n<li>支持 Ttree 索引</li>\n</ul>\n<h4 id=\"使用场景-5\"><a href=\"#使用场景-5\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><ul>\n<li>需要数据完全同步的高可用场景</li>\n</ul>\n<h3 id=\"什么情况下-InnoDB-无法在线修改表\"><a href=\"#什么情况下-InnoDB-无法在线修改表\" class=\"headerlink\" title=\"什么情况下 InnoDB 无法在线修改表\"></a>什么情况下 InnoDB 无法在线修改表</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>加全文索引</td>\n<td>CREATE FULTEXT INDEX name ON table(column)</td>\n</tr>\n<tr>\n<td>加空间索引</td>\n<td>ALTER TABLE geom ADD SPATIAL INDEX(g)</td>\n</tr>\n<tr>\n<td>删除主键</td>\n<td>ALTER TABLE tb_name DROP PRIMARY KEY</td>\n</tr>\n<tr>\n<td>增加自增列</td>\n<td>alert table t add column id int auto_increment not null primary key</td>\n</tr>\n<tr>\n<td>修改列类型</td>\n<td>alter table t change c1 c1 NEW_TYPE</td>\n</tr>\n<tr>\n<td>修改字符集</td>\n<td>alter table t character set = charset_name</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"在线-DDL-存在的问题\"><a href=\"#在线-DDL-存在的问题\" class=\"headerlink\" title=\"在线 DDL 存在的问题\"></a>在线 DDL 存在的问题</h4><ul>\n<li>有部分语句不支持在线 DDL</li>\n<li>长时间 DDL 操作会引起严重主从延迟</li>\n<li>无法对 DDL 操作进行资源限制</li>\n</ul>\n<h4 id=\"如何更安全执行-DDL\"><a href=\"#如何更安全执行-DDL\" class=\"headerlink\" title=\"如何更安全执行 DDL\"></a>如何更安全执行 DDL</h4><ul>\n<li>pt-online-shema-change [OPTIONS]DSN</li>\n</ul>\n<h3 id=\"InnoDB-如何实现事务\"><a href=\"#InnoDB-如何实现事务\" class=\"headerlink\" title=\"InnoDB 如何实现事务\"></a>InnoDB 如何实现事务</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>一个事务的所有操作，或全部成功或全部失败</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>事务开始之前和事务结束只会，数据库保持完整性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>每个读写事务的对象和其他事务的操作对象相互分离，该事务提交前对其他事务都不可见</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>事务一旦提交，结果就是永久性，如果宕机也能恢复</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">特征</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">原子性（A）</td>\n<td>回滚日志（Undo log）: 用于记录数据修改前的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">一致性（C）</td>\n<td>重作日志（Redo log）: 用于记录数据修改后的状态</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">隔离性（I）</td>\n<td>锁：用于资源隔离，分为共享锁和排他锁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持久性（D）</td>\n<td>重作日志（Redo log）+ 回滚日志（Undo log）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"INNODB-锁\"><a href=\"#INNODB-锁\" class=\"headerlink\" title=\"INNODB 锁\"></a>INNODB 锁</h3><ul>\n<li>查询需要对资源加共享锁（S）</li>\n<li>修改需要对资源加排他锁（X）</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>排他锁</th>\n<th>共享锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>排他锁</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>共享锁</td>\n<td>不兼容</td>\n<td>兼容</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql面试（八）管理及监控类问题","top":1,"date":"2019-09-18T05:52:54.000Z","_content":"### 性能类指标\n|名称|说明|\n|-|-|\n|QPS|数据库每秒处理的请求数量|\n|TPS|数据库每秒处理的事务数量|\n|并发数|数据库实例当前并行处理的会话数量|\n|连接数|连接到数据库会话的数量|\n|缓存命中率|Innodb 缓存命中率|\n\n### 功能类指标\n|名称|说明|\n|-|-|\n|可用性|数据库是否可正常对外提供服务|\n|阻塞|当前是否有阻塞的会话|\n|死锁|当前事务是否产生了死锁|\n|慢查询|实时慢查询监控|\n|主从延迟|数据库主从延迟时间|\n|主从状态|数据库主从复制链路是否正常|\n\n### QPS\n- show global status like 'Com%'\n- Sum(Com_XXX)\n- show global status like 'Queries'\n- QOS=(Queries2-Queries1)/ 时间间隔\n\n### TPS\n- show global status where Variable_name in ('com_insert','com_delete','com_update')\n- TC≈com_insert+com_delete+com_update\n- TPS≈(TC2-TC1)/(time2-time1)\n\n### 数据库并发数\n- show global status like 'threads_running'\n\n### 数据库连接数\n- show global status like 'threads_connected'\n- 报警阈值 threads_connected/max_connection>0.8\n\n### Innodb 缓存命中率\n- (Innodb_buffer_pool_read_requests-Innodb_buffer_pool_reads)/Innodb_buffer_pool_read_requests*100%\n- Innodb_buffer_pool_read_requests: 从缓冲池读取的次数\n- Innodb_buffer_pool_reads: 从物理磁盘读取的次数\n\n### 数据库可用性\n- 周期性连接数据库服务器并执行 select @@version;\n- Nysqladmin -uxxx -pxxx -hxxx ping\n\n#### 阻塞\n- < MySQL5.7\nSELECT b.trx_mysql_thread_id AS '被阻塞线程',b.trx_query AS '被阻塞 SQL',c.trx_mysql_thread_id AS '阻塞线程',c.trx_query AS\n'阻塞 SQL',(UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started)) AS '阻塞时间' FROM information_schema.innodb_lock_waits a \nJOIN information_schema.innodb_trx b ON a.requesting_trx_id=b.trx_id\nJOIN information_schema.innodb_trx c ON a.blocking_trx_id=c.trx_id\nWHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started))>30\n\n- > = MySQL5.7\nSELECT waiting_pid AS '被阻塞线程',waiting_query AS '被阻塞 SQL',blocking_pid AS '阻塞线程',blocking_query AS '阻塞 SQL',wait_age AS '阻塞时间',sql_kill_blocking_query AS '建议操作' FROM sys.innodb_lock_waits WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(wait_started))>30\n\n### 死锁\n- show engine innodb status\n\n- pt-deadlock-logger u=xx,p=xxxx,h=127.0.0.1 --create-dest-table --dest u=xx,p=xxx,h=127.0.0.1,D=crn,t=deadlock\n- set global innodb_print_all_deadlocks=on\n\n### 监控慢查询\n- 通过慢查询日志监控\n- 通过 information_schema.`PROCESSLIST`表实时监控\n\n### 监控主从延时\n- show slave status (Seconds_Behind_Master)\n- pt-heartbeat --user=xx --password=xxx -h master --create-table \n--database xxx --update --daemonize --interval=1\n- pt-heartbeat --user=xx --password=xxx -h slave --create-table \n--database crn --monitor  --daemonize --log /tmp/slave_lag.log\n\n### 监控主从状态\n- show slave status (Slave_IO_Running,Slave_SQL_Running,Last_Errno,Last_Error)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/mysql面试（八）管理及监控类问题.md","raw":"---\ntitle: mysql面试（八）管理及监控类问题\ntop: 1\ndate: 2019-09-18 13:52:54\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n### 性能类指标\n|名称|说明|\n|-|-|\n|QPS|数据库每秒处理的请求数量|\n|TPS|数据库每秒处理的事务数量|\n|并发数|数据库实例当前并行处理的会话数量|\n|连接数|连接到数据库会话的数量|\n|缓存命中率|Innodb 缓存命中率|\n\n### 功能类指标\n|名称|说明|\n|-|-|\n|可用性|数据库是否可正常对外提供服务|\n|阻塞|当前是否有阻塞的会话|\n|死锁|当前事务是否产生了死锁|\n|慢查询|实时慢查询监控|\n|主从延迟|数据库主从延迟时间|\n|主从状态|数据库主从复制链路是否正常|\n\n### QPS\n- show global status like 'Com%'\n- Sum(Com_XXX)\n- show global status like 'Queries'\n- QOS=(Queries2-Queries1)/ 时间间隔\n\n### TPS\n- show global status where Variable_name in ('com_insert','com_delete','com_update')\n- TC≈com_insert+com_delete+com_update\n- TPS≈(TC2-TC1)/(time2-time1)\n\n### 数据库并发数\n- show global status like 'threads_running'\n\n### 数据库连接数\n- show global status like 'threads_connected'\n- 报警阈值 threads_connected/max_connection>0.8\n\n### Innodb 缓存命中率\n- (Innodb_buffer_pool_read_requests-Innodb_buffer_pool_reads)/Innodb_buffer_pool_read_requests*100%\n- Innodb_buffer_pool_read_requests: 从缓冲池读取的次数\n- Innodb_buffer_pool_reads: 从物理磁盘读取的次数\n\n### 数据库可用性\n- 周期性连接数据库服务器并执行 select @@version;\n- Nysqladmin -uxxx -pxxx -hxxx ping\n\n#### 阻塞\n- < MySQL5.7\nSELECT b.trx_mysql_thread_id AS '被阻塞线程',b.trx_query AS '被阻塞 SQL',c.trx_mysql_thread_id AS '阻塞线程',c.trx_query AS\n'阻塞 SQL',(UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started)) AS '阻塞时间' FROM information_schema.innodb_lock_waits a \nJOIN information_schema.innodb_trx b ON a.requesting_trx_id=b.trx_id\nJOIN information_schema.innodb_trx c ON a.blocking_trx_id=c.trx_id\nWHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started))>30\n\n- > = MySQL5.7\nSELECT waiting_pid AS '被阻塞线程',waiting_query AS '被阻塞 SQL',blocking_pid AS '阻塞线程',blocking_query AS '阻塞 SQL',wait_age AS '阻塞时间',sql_kill_blocking_query AS '建议操作' FROM sys.innodb_lock_waits WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(wait_started))>30\n\n### 死锁\n- show engine innodb status\n\n- pt-deadlock-logger u=xx,p=xxxx,h=127.0.0.1 --create-dest-table --dest u=xx,p=xxx,h=127.0.0.1,D=crn,t=deadlock\n- set global innodb_print_all_deadlocks=on\n\n### 监控慢查询\n- 通过慢查询日志监控\n- 通过 information_schema.`PROCESSLIST`表实时监控\n\n### 监控主从延时\n- show slave status (Seconds_Behind_Master)\n- pt-heartbeat --user=xx --password=xxx -h master --create-table \n--database xxx --update --daemonize --interval=1\n- pt-heartbeat --user=xx --password=xxx -h slave --create-table \n--database crn --monitor  --daemonize --log /tmp/slave_lag.log\n\n### 监控主从状态\n- show slave status (Slave_IO_Running,Slave_SQL_Running,Last_Errno,Last_Error)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"mysql面试（八）管理及监控类问题","published":1,"updated":"2019-11-12T02:27:16.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqokx0028yos6qoyz85nv","content":"<h3 id=\"性能类指标\"><a href=\"#性能类指标\" class=\"headerlink\" title=\"性能类指标\"></a>性能类指标</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QPS</td>\n<td>数据库每秒处理的请求数量</td>\n</tr>\n<tr>\n<td>TPS</td>\n<td>数据库每秒处理的事务数量</td>\n</tr>\n<tr>\n<td>并发数</td>\n<td>数据库实例当前并行处理的会话数量</td>\n</tr>\n<tr>\n<td>连接数</td>\n<td>连接到数据库会话的数量</td>\n</tr>\n<tr>\n<td>缓存命中率</td>\n<td>Innodb 缓存命中率</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"功能类指标\"><a href=\"#功能类指标\" class=\"headerlink\" title=\"功能类指标\"></a>功能类指标</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>可用性</td>\n<td>数据库是否可正常对外提供服务</td>\n</tr>\n<tr>\n<td>阻塞</td>\n<td>当前是否有阻塞的会话</td>\n</tr>\n<tr>\n<td>死锁</td>\n<td>当前事务是否产生了死锁</td>\n</tr>\n<tr>\n<td>慢查询</td>\n<td>实时慢查询监控</td>\n</tr>\n<tr>\n<td>主从延迟</td>\n<td>数据库主从延迟时间</td>\n</tr>\n<tr>\n<td>主从状态</td>\n<td>数据库主从复制链路是否正常</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h3><ul>\n<li>show global status like ‘Com%’</li>\n<li>Sum(Com_XXX)</li>\n<li>show global status like ‘Queries’</li>\n<li>QOS=(Queries2-Queries1)/ 时间间隔</li>\n</ul>\n<h3 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h3><ul>\n<li>show global status where Variable_name in (‘com_insert’,’com_delete’,’com_update’)</li>\n<li>TC≈com_insert+com_delete+com_update</li>\n<li>TPS≈(TC2-TC1)/(time2-time1)</li>\n</ul>\n<h3 id=\"数据库并发数\"><a href=\"#数据库并发数\" class=\"headerlink\" title=\"数据库并发数\"></a>数据库并发数</h3><ul>\n<li>show global status like ‘threads_running’</li>\n</ul>\n<h3 id=\"数据库连接数\"><a href=\"#数据库连接数\" class=\"headerlink\" title=\"数据库连接数\"></a>数据库连接数</h3><ul>\n<li>show global status like ‘threads_connected’</li>\n<li>报警阈值 threads_connected/max_connection&gt;0.8</li>\n</ul>\n<h3 id=\"Innodb-缓存命中率\"><a href=\"#Innodb-缓存命中率\" class=\"headerlink\" title=\"Innodb 缓存命中率\"></a>Innodb 缓存命中率</h3><ul>\n<li>(Innodb_buffer_pool_read_requests-Innodb_buffer_pool_reads)/Innodb_buffer_pool_read_requests*100%</li>\n<li>Innodb_buffer_pool_read_requests: 从缓冲池读取的次数</li>\n<li>Innodb_buffer_pool_reads: 从物理磁盘读取的次数</li>\n</ul>\n<h3 id=\"数据库可用性\"><a href=\"#数据库可用性\" class=\"headerlink\" title=\"数据库可用性\"></a>数据库可用性</h3><ul>\n<li>周期性连接数据库服务器并执行 select @@version;</li>\n<li>Nysqladmin -uxxx -pxxx -hxxx ping</li>\n</ul>\n<h4 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h4><ul>\n<li><p>&lt; MySQL5.7<br>SELECT b.trx_mysql_thread_id AS ‘被阻塞线程’,b.trx_query AS ‘被阻塞 SQL’,c.trx_mysql_thread_id AS ‘阻塞线程’,c.trx_query AS<br>‘阻塞 SQL’,(UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started)) AS ‘阻塞时间’ FROM information_schema.innodb_lock_waits a<br>JOIN information_schema.innodb_trx b ON a.requesting_trx_id=b.trx_id<br>JOIN information_schema.innodb_trx c ON a.blocking_trx_id=c.trx_id<br>WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started))&gt;30</p>\n</li>\n<li><blockquote>\n<p>= MySQL5.7<br>SELECT waiting_pid AS ‘被阻塞线程’,waiting_query AS ‘被阻塞 SQL’,blocking_pid AS ‘阻塞线程’,blocking_query AS ‘阻塞 SQL’,wait_age AS ‘阻塞时间’,sql_kill_blocking_query AS ‘建议操作’ FROM sys.innodb_lock_waits WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(wait_started))&gt;30</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li><p>show engine innodb status</p>\n</li>\n<li><p>pt-deadlock-logger u=xx,p=xxxx,h=127.0.0.1 —create-dest-table —dest u=xx,p=xxx,h=127.0.0.1,D=crn,t=deadlock</p>\n</li>\n<li>set global innodb_print_all_deadlocks=on</li>\n</ul>\n<h3 id=\"监控慢查询\"><a href=\"#监控慢查询\" class=\"headerlink\" title=\"监控慢查询\"></a>监控慢查询</h3><ul>\n<li>通过慢查询日志监控</li>\n<li>通过 information_schema.<code>PROCESSLIST</code>表实时监控</li>\n</ul>\n<h3 id=\"监控主从延时\"><a href=\"#监控主从延时\" class=\"headerlink\" title=\"监控主从延时\"></a>监控主从延时</h3><ul>\n<li>show slave status (Seconds_Behind_Master)</li>\n<li>pt-heartbeat —user=xx —password=xxx -h master —create-table<br>—database xxx —update —daemonize —interval=1</li>\n<li>pt-heartbeat —user=xx —password=xxx -h slave —create-table<br>—database crn —monitor  —daemonize —log /tmp/slave_lag.log</li>\n</ul>\n<h3 id=\"监控主从状态\"><a href=\"#监控主从状态\" class=\"headerlink\" title=\"监控主从状态\"></a>监控主从状态</h3><ul>\n<li>show slave status (Slave_IO_Running,Slave_SQL_Running,Last_Errno,Last_Error)</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"性能类指标\"><a href=\"#性能类指标\" class=\"headerlink\" title=\"性能类指标\"></a>性能类指标</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>QPS</td>\n<td>数据库每秒处理的请求数量</td>\n</tr>\n<tr>\n<td>TPS</td>\n<td>数据库每秒处理的事务数量</td>\n</tr>\n<tr>\n<td>并发数</td>\n<td>数据库实例当前并行处理的会话数量</td>\n</tr>\n<tr>\n<td>连接数</td>\n<td>连接到数据库会话的数量</td>\n</tr>\n<tr>\n<td>缓存命中率</td>\n<td>Innodb 缓存命中率</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"功能类指标\"><a href=\"#功能类指标\" class=\"headerlink\" title=\"功能类指标\"></a>功能类指标</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>可用性</td>\n<td>数据库是否可正常对外提供服务</td>\n</tr>\n<tr>\n<td>阻塞</td>\n<td>当前是否有阻塞的会话</td>\n</tr>\n<tr>\n<td>死锁</td>\n<td>当前事务是否产生了死锁</td>\n</tr>\n<tr>\n<td>慢查询</td>\n<td>实时慢查询监控</td>\n</tr>\n<tr>\n<td>主从延迟</td>\n<td>数据库主从延迟时间</td>\n</tr>\n<tr>\n<td>主从状态</td>\n<td>数据库主从复制链路是否正常</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"QPS\"><a href=\"#QPS\" class=\"headerlink\" title=\"QPS\"></a>QPS</h3><ul>\n<li>show global status like ‘Com%’</li>\n<li>Sum(Com_XXX)</li>\n<li>show global status like ‘Queries’</li>\n<li>QOS=(Queries2-Queries1)/ 时间间隔</li>\n</ul>\n<h3 id=\"TPS\"><a href=\"#TPS\" class=\"headerlink\" title=\"TPS\"></a>TPS</h3><ul>\n<li>show global status where Variable_name in (‘com_insert’,’com_delete’,’com_update’)</li>\n<li>TC≈com_insert+com_delete+com_update</li>\n<li>TPS≈(TC2-TC1)/(time2-time1)</li>\n</ul>\n<h3 id=\"数据库并发数\"><a href=\"#数据库并发数\" class=\"headerlink\" title=\"数据库并发数\"></a>数据库并发数</h3><ul>\n<li>show global status like ‘threads_running’</li>\n</ul>\n<h3 id=\"数据库连接数\"><a href=\"#数据库连接数\" class=\"headerlink\" title=\"数据库连接数\"></a>数据库连接数</h3><ul>\n<li>show global status like ‘threads_connected’</li>\n<li>报警阈值 threads_connected/max_connection&gt;0.8</li>\n</ul>\n<h3 id=\"Innodb-缓存命中率\"><a href=\"#Innodb-缓存命中率\" class=\"headerlink\" title=\"Innodb 缓存命中率\"></a>Innodb 缓存命中率</h3><ul>\n<li>(Innodb_buffer_pool_read_requests-Innodb_buffer_pool_reads)/Innodb_buffer_pool_read_requests*100%</li>\n<li>Innodb_buffer_pool_read_requests: 从缓冲池读取的次数</li>\n<li>Innodb_buffer_pool_reads: 从物理磁盘读取的次数</li>\n</ul>\n<h3 id=\"数据库可用性\"><a href=\"#数据库可用性\" class=\"headerlink\" title=\"数据库可用性\"></a>数据库可用性</h3><ul>\n<li>周期性连接数据库服务器并执行 select @@version;</li>\n<li>Nysqladmin -uxxx -pxxx -hxxx ping</li>\n</ul>\n<h4 id=\"阻塞\"><a href=\"#阻塞\" class=\"headerlink\" title=\"阻塞\"></a>阻塞</h4><ul>\n<li><p>&lt; MySQL5.7<br>SELECT b.trx_mysql_thread_id AS ‘被阻塞线程’,b.trx_query AS ‘被阻塞 SQL’,c.trx_mysql_thread_id AS ‘阻塞线程’,c.trx_query AS<br>‘阻塞 SQL’,(UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started)) AS ‘阻塞时间’ FROM information_schema.innodb_lock_waits a<br>JOIN information_schema.innodb_trx b ON a.requesting_trx_id=b.trx_id<br>JOIN information_schema.innodb_trx c ON a.blocking_trx_id=c.trx_id<br>WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(c.trx_started))&gt;30</p>\n</li>\n<li><blockquote>\n<p>= MySQL5.7<br>SELECT waiting_pid AS ‘被阻塞线程’,waiting_query AS ‘被阻塞 SQL’,blocking_pid AS ‘阻塞线程’,blocking_query AS ‘阻塞 SQL’,wait_age AS ‘阻塞时间’,sql_kill_blocking_query AS ‘建议操作’ FROM sys.innodb_lock_waits WHERE (UNIX_TIMESTAMP()-UNIX_TIMESTAMP(wait_started))&gt;30</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><ul>\n<li><p>show engine innodb status</p>\n</li>\n<li><p>pt-deadlock-logger u=xx,p=xxxx,h=127.0.0.1 —create-dest-table —dest u=xx,p=xxx,h=127.0.0.1,D=crn,t=deadlock</p>\n</li>\n<li>set global innodb_print_all_deadlocks=on</li>\n</ul>\n<h3 id=\"监控慢查询\"><a href=\"#监控慢查询\" class=\"headerlink\" title=\"监控慢查询\"></a>监控慢查询</h3><ul>\n<li>通过慢查询日志监控</li>\n<li>通过 information_schema.<code>PROCESSLIST</code>表实时监控</li>\n</ul>\n<h3 id=\"监控主从延时\"><a href=\"#监控主从延时\" class=\"headerlink\" title=\"监控主从延时\"></a>监控主从延时</h3><ul>\n<li>show slave status (Seconds_Behind_Master)</li>\n<li>pt-heartbeat —user=xx —password=xxx -h master —create-table<br>—database xxx —update —daemonize —interval=1</li>\n<li>pt-heartbeat —user=xx —password=xxx -h slave —create-table<br>—database crn —monitor  —daemonize —log /tmp/slave_lag.log</li>\n</ul>\n<h3 id=\"监控主从状态\"><a href=\"#监控主从状态\" class=\"headerlink\" title=\"监控主从状态\"></a>监控主从状态</h3><ul>\n<li>show slave status (Slave_IO_Running,Slave_SQL_Running,Last_Errno,Last_Error)</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 面试（六）MySQL 架构类问题","top":1,"date":"2019-09-17T05:28:35.000Z","_content":"\n### MySQL 主从复制实现原理\n\n* 开启二进制日志\n\n* 步骤一：主库 db 的更新事件 (update、insert、delete) 被写到 binlog\n\n* 步骤二：从库发起连接，连接到主库\n\n* 步骤三：此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库\n\n* 步骤四：从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log\n\n* 步骤五：还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db\n\n#### 异步复制\n\n* master 修改后写入 binary_log（execute-binlog-commit）\n* slave 开启 io 线程，读取 master binlog_dump，写入 relaylog\n* slave 的 sql 线程，读取 relaylog，重新执行到从库\n\n#### 半同步复制\n\n* master 修改后写入 binary_log（execute-binlog）\n* slave 开启 io 线程，读取 master binlog_dump，写入 relaylog\n* slave 发送 ACK 到 master，master commit（阻塞) 提交\n* slave 的 sql 线程，读取 relaylog，重新执行到从库\n\n### MySQL 主从复制配置步骤\n\n#### master 服务器操作\n\n1. 开启 binlog（必须) 开启 gtid（可选)\n2. 建立同步所用的数据库账号\n3. 使用 master_data 参数备份数据库\n4. 备份数据传到 slave 服务器\n\n#### slave 服务器操作\n\n1. 开启 binlog（可选) 开启 gtid（可选)\n2. 恢复 master 上的备份数据库\n3. 使用 change master 配置链路\n4. 使用 startslave 启动复制\n\n### 基于日志点的复制\n\n#### 定义\n\n* 传统的主从复制方式\n* slave 请求 master 的增量日志依赖于日志偏移量\n* 配置链路时需要指定 master_log_file 和 master_log_pos 参数\n\n### 基于 GTID 的复制\n\n#### 定义\n\n* GTID=source_id:transaction_id\n* slave 请求 master 的增量日志依赖于其未同步的事务 ID\n* 配置复制链路时，slave 可以根据已经同步的事务 ID 继续自动同步\n\n### 两种复制方式比较\n\n|基于日志点的复制|基于 GTID 的复制|\n|-|-|\n|兼容性好|同老版本的 MySQL 和 MariaDB 不兼容|\n|支持 MMM 和 MHA 架构|仅支持 MHA 架构|\n|主备切换后很难找到新的同步点|基于事务 ID 复制，很方便找到未完成的同步的事务 ID|\n|可以方便地跳过复制错误|只能通过置入空事务的方式跳过错误|\n\n### 两种复制方式选择\n\n|基于日志点的复制|基于 GTID 的复制|\n|-|-|\n|需要兼容老版本 MySQL 和 MariaDB|其他各种情况|\n|需要使用 MMM 架构||\n\n### 主从延迟\n#### 原因\n- 大事务：数万行的数据更新和对大表的DDL操作\n- 网络延迟\n- 由master多线程写入，slave单线程恢复引起的延迟\n#### 解决方法\n- 化大事务为小事务，分批更新数据\n- 使用pt-online-schema-change工具进行DDL操作\n- 减小单次事务处理的数据量以减少产生的日志文件大小\n- 减少master同步的slave数量\n- 使用MySQL5.7以后的多线程复制\n- 使用MGR复制架构\n\n### 读写负载大\n#### 读负载大\n- 为原DB增加slave服务器\n- 进行读写分离，读分担到slave\n- 增加数据库中间层，进行负载均衡\n#### 写负载大\n- 分库分表\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（六）MySQL架构类问题.md","raw":"---\ntitle: mysql 面试（六）MySQL 架构类问题\ntop: 1\ndate: 2019-09-17 13:28:35\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### MySQL 主从复制实现原理\n\n* 开启二进制日志\n\n* 步骤一：主库 db 的更新事件 (update、insert、delete) 被写到 binlog\n\n* 步骤二：从库发起连接，连接到主库\n\n* 步骤三：此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库\n\n* 步骤四：从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log\n\n* 步骤五：还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db\n\n#### 异步复制\n\n* master 修改后写入 binary_log（execute-binlog-commit）\n* slave 开启 io 线程，读取 master binlog_dump，写入 relaylog\n* slave 的 sql 线程，读取 relaylog，重新执行到从库\n\n#### 半同步复制\n\n* master 修改后写入 binary_log（execute-binlog）\n* slave 开启 io 线程，读取 master binlog_dump，写入 relaylog\n* slave 发送 ACK 到 master，master commit（阻塞) 提交\n* slave 的 sql 线程，读取 relaylog，重新执行到从库\n\n### MySQL 主从复制配置步骤\n\n#### master 服务器操作\n\n1. 开启 binlog（必须) 开启 gtid（可选)\n2. 建立同步所用的数据库账号\n3. 使用 master_data 参数备份数据库\n4. 备份数据传到 slave 服务器\n\n#### slave 服务器操作\n\n1. 开启 binlog（可选) 开启 gtid（可选)\n2. 恢复 master 上的备份数据库\n3. 使用 change master 配置链路\n4. 使用 startslave 启动复制\n\n### 基于日志点的复制\n\n#### 定义\n\n* 传统的主从复制方式\n* slave 请求 master 的增量日志依赖于日志偏移量\n* 配置链路时需要指定 master_log_file 和 master_log_pos 参数\n\n### 基于 GTID 的复制\n\n#### 定义\n\n* GTID=source_id:transaction_id\n* slave 请求 master 的增量日志依赖于其未同步的事务 ID\n* 配置复制链路时，slave 可以根据已经同步的事务 ID 继续自动同步\n\n### 两种复制方式比较\n\n|基于日志点的复制|基于 GTID 的复制|\n|-|-|\n|兼容性好|同老版本的 MySQL 和 MariaDB 不兼容|\n|支持 MMM 和 MHA 架构|仅支持 MHA 架构|\n|主备切换后很难找到新的同步点|基于事务 ID 复制，很方便找到未完成的同步的事务 ID|\n|可以方便地跳过复制错误|只能通过置入空事务的方式跳过错误|\n\n### 两种复制方式选择\n\n|基于日志点的复制|基于 GTID 的复制|\n|-|-|\n|需要兼容老版本 MySQL 和 MariaDB|其他各种情况|\n|需要使用 MMM 架构||\n\n### 主从延迟\n#### 原因\n- 大事务：数万行的数据更新和对大表的DDL操作\n- 网络延迟\n- 由master多线程写入，slave单线程恢复引起的延迟\n#### 解决方法\n- 化大事务为小事务，分批更新数据\n- 使用pt-online-schema-change工具进行DDL操作\n- 减小单次事务处理的数据量以减少产生的日志文件大小\n- 减少master同步的slave数量\n- 使用MySQL5.7以后的多线程复制\n- 使用MGR复制架构\n\n### 读写负载大\n#### 读负载大\n- 为原DB增加slave服务器\n- 进行读写分离，读分担到slave\n- 增加数据库中间层，进行负载均衡\n#### 写负载大\n- 分库分表\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（六）MySQL架构类问题","published":1,"updated":"2019-11-12T02:23:12.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoky002cyos6iboqda6k","content":"<h3 id=\"MySQL-主从复制实现原理\"><a href=\"#MySQL-主从复制实现原理\" class=\"headerlink\" title=\"MySQL 主从复制实现原理\"></a>MySQL 主从复制实现原理</h3><ul>\n<li><p>开启二进制日志</p>\n</li>\n<li><p>步骤一：主库 db 的更新事件 (update、insert、delete) 被写到 binlog</p>\n</li>\n<li><p>步骤二：从库发起连接，连接到主库</p>\n</li>\n<li><p>步骤三：此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库</p>\n</li>\n<li><p>步骤四：从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log</p>\n</li>\n<li><p>步骤五：还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db</p>\n</li>\n</ul>\n<h4 id=\"异步复制\"><a href=\"#异步复制\" class=\"headerlink\" title=\"异步复制\"></a>异步复制</h4><ul>\n<li>master 修改后写入 binary_log（execute-binlog-commit）</li>\n<li>slave 开启 io 线程，读取 master binlog_dump，写入 relaylog</li>\n<li>slave 的 sql 线程，读取 relaylog，重新执行到从库</li>\n</ul>\n<h4 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h4><ul>\n<li>master 修改后写入 binary_log（execute-binlog）</li>\n<li>slave 开启 io 线程，读取 master binlog_dump，写入 relaylog</li>\n<li>slave 发送 ACK 到 master，master commit（阻塞) 提交</li>\n<li>slave 的 sql 线程，读取 relaylog，重新执行到从库</li>\n</ul>\n<h3 id=\"MySQL-主从复制配置步骤\"><a href=\"#MySQL-主从复制配置步骤\" class=\"headerlink\" title=\"MySQL 主从复制配置步骤\"></a>MySQL 主从复制配置步骤</h3><h4 id=\"master-服务器操作\"><a href=\"#master-服务器操作\" class=\"headerlink\" title=\"master 服务器操作\"></a>master 服务器操作</h4><ol>\n<li>开启 binlog（必须) 开启 gtid（可选)</li>\n<li>建立同步所用的数据库账号</li>\n<li>使用 master_data 参数备份数据库</li>\n<li>备份数据传到 slave 服务器</li>\n</ol>\n<h4 id=\"slave-服务器操作\"><a href=\"#slave-服务器操作\" class=\"headerlink\" title=\"slave 服务器操作\"></a>slave 服务器操作</h4><ol>\n<li>开启 binlog（可选) 开启 gtid（可选)</li>\n<li>恢复 master 上的备份数据库</li>\n<li>使用 change master 配置链路</li>\n<li>使用 startslave 启动复制</li>\n</ol>\n<h3 id=\"基于日志点的复制\"><a href=\"#基于日志点的复制\" class=\"headerlink\" title=\"基于日志点的复制\"></a>基于日志点的复制</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>传统的主从复制方式</li>\n<li>slave 请求 master 的增量日志依赖于日志偏移量</li>\n<li>配置链路时需要指定 master_log_file 和 master_log_pos 参数</li>\n</ul>\n<h3 id=\"基于-GTID-的复制\"><a href=\"#基于-GTID-的复制\" class=\"headerlink\" title=\"基于 GTID 的复制\"></a>基于 GTID 的复制</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>GTID=source_id:transaction_id</li>\n<li>slave 请求 master 的增量日志依赖于其未同步的事务 ID</li>\n<li>配置复制链路时，slave 可以根据已经同步的事务 ID 继续自动同步</li>\n</ul>\n<h3 id=\"两种复制方式比较\"><a href=\"#两种复制方式比较\" class=\"headerlink\" title=\"两种复制方式比较\"></a>两种复制方式比较</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>基于日志点的复制</th>\n<th>基于 GTID 的复制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>兼容性好</td>\n<td>同老版本的 MySQL 和 MariaDB 不兼容</td>\n</tr>\n<tr>\n<td>支持 MMM 和 MHA 架构</td>\n<td>仅支持 MHA 架构</td>\n</tr>\n<tr>\n<td>主备切换后很难找到新的同步点</td>\n<td>基于事务 ID 复制，很方便找到未完成的同步的事务 ID</td>\n</tr>\n<tr>\n<td>可以方便地跳过复制错误</td>\n<td>只能通过置入空事务的方式跳过错误</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"两种复制方式选择\"><a href=\"#两种复制方式选择\" class=\"headerlink\" title=\"两种复制方式选择\"></a>两种复制方式选择</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>基于日志点的复制</th>\n<th>基于 GTID 的复制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>需要兼容老版本 MySQL 和 MariaDB</td>\n<td>其他各种情况</td>\n</tr>\n<tr>\n<td>需要使用 MMM 架构</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"主从延迟\"><a href=\"#主从延迟\" class=\"headerlink\" title=\"主从延迟\"></a>主从延迟</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>大事务：数万行的数据更新和对大表的DDL操作</li>\n<li>网络延迟</li>\n<li>由master多线程写入，slave单线程恢复引起的延迟<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4></li>\n<li>化大事务为小事务，分批更新数据</li>\n<li>使用pt-online-schema-change工具进行DDL操作</li>\n<li>减小单次事务处理的数据量以减少产生的日志文件大小</li>\n<li>减少master同步的slave数量</li>\n<li>使用MySQL5.7以后的多线程复制</li>\n<li>使用MGR复制架构</li>\n</ul>\n<h3 id=\"读写负载大\"><a href=\"#读写负载大\" class=\"headerlink\" title=\"读写负载大\"></a>读写负载大</h3><h4 id=\"读负载大\"><a href=\"#读负载大\" class=\"headerlink\" title=\"读负载大\"></a>读负载大</h4><ul>\n<li>为原DB增加slave服务器</li>\n<li>进行读写分离，读分担到slave</li>\n<li>增加数据库中间层，进行负载均衡<h4 id=\"写负载大\"><a href=\"#写负载大\" class=\"headerlink\" title=\"写负载大\"></a>写负载大</h4></li>\n<li>分库分表</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL-主从复制实现原理\"><a href=\"#MySQL-主从复制实现原理\" class=\"headerlink\" title=\"MySQL 主从复制实现原理\"></a>MySQL 主从复制实现原理</h3><ul>\n<li><p>开启二进制日志</p>\n</li>\n<li><p>步骤一：主库 db 的更新事件 (update、insert、delete) 被写到 binlog</p>\n</li>\n<li><p>步骤二：从库发起连接，连接到主库</p>\n</li>\n<li><p>步骤三：此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库</p>\n</li>\n<li><p>步骤四：从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log</p>\n</li>\n<li><p>步骤五：还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db</p>\n</li>\n</ul>\n<h4 id=\"异步复制\"><a href=\"#异步复制\" class=\"headerlink\" title=\"异步复制\"></a>异步复制</h4><ul>\n<li>master 修改后写入 binary_log（execute-binlog-commit）</li>\n<li>slave 开启 io 线程，读取 master binlog_dump，写入 relaylog</li>\n<li>slave 的 sql 线程，读取 relaylog，重新执行到从库</li>\n</ul>\n<h4 id=\"半同步复制\"><a href=\"#半同步复制\" class=\"headerlink\" title=\"半同步复制\"></a>半同步复制</h4><ul>\n<li>master 修改后写入 binary_log（execute-binlog）</li>\n<li>slave 开启 io 线程，读取 master binlog_dump，写入 relaylog</li>\n<li>slave 发送 ACK 到 master，master commit（阻塞) 提交</li>\n<li>slave 的 sql 线程，读取 relaylog，重新执行到从库</li>\n</ul>\n<h3 id=\"MySQL-主从复制配置步骤\"><a href=\"#MySQL-主从复制配置步骤\" class=\"headerlink\" title=\"MySQL 主从复制配置步骤\"></a>MySQL 主从复制配置步骤</h3><h4 id=\"master-服务器操作\"><a href=\"#master-服务器操作\" class=\"headerlink\" title=\"master 服务器操作\"></a>master 服务器操作</h4><ol>\n<li>开启 binlog（必须) 开启 gtid（可选)</li>\n<li>建立同步所用的数据库账号</li>\n<li>使用 master_data 参数备份数据库</li>\n<li>备份数据传到 slave 服务器</li>\n</ol>\n<h4 id=\"slave-服务器操作\"><a href=\"#slave-服务器操作\" class=\"headerlink\" title=\"slave 服务器操作\"></a>slave 服务器操作</h4><ol>\n<li>开启 binlog（可选) 开启 gtid（可选)</li>\n<li>恢复 master 上的备份数据库</li>\n<li>使用 change master 配置链路</li>\n<li>使用 startslave 启动复制</li>\n</ol>\n<h3 id=\"基于日志点的复制\"><a href=\"#基于日志点的复制\" class=\"headerlink\" title=\"基于日志点的复制\"></a>基于日志点的复制</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>传统的主从复制方式</li>\n<li>slave 请求 master 的增量日志依赖于日志偏移量</li>\n<li>配置链路时需要指定 master_log_file 和 master_log_pos 参数</li>\n</ul>\n<h3 id=\"基于-GTID-的复制\"><a href=\"#基于-GTID-的复制\" class=\"headerlink\" title=\"基于 GTID 的复制\"></a>基于 GTID 的复制</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>GTID=source_id:transaction_id</li>\n<li>slave 请求 master 的增量日志依赖于其未同步的事务 ID</li>\n<li>配置复制链路时，slave 可以根据已经同步的事务 ID 继续自动同步</li>\n</ul>\n<h3 id=\"两种复制方式比较\"><a href=\"#两种复制方式比较\" class=\"headerlink\" title=\"两种复制方式比较\"></a>两种复制方式比较</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>基于日志点的复制</th>\n<th>基于 GTID 的复制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>兼容性好</td>\n<td>同老版本的 MySQL 和 MariaDB 不兼容</td>\n</tr>\n<tr>\n<td>支持 MMM 和 MHA 架构</td>\n<td>仅支持 MHA 架构</td>\n</tr>\n<tr>\n<td>主备切换后很难找到新的同步点</td>\n<td>基于事务 ID 复制，很方便找到未完成的同步的事务 ID</td>\n</tr>\n<tr>\n<td>可以方便地跳过复制错误</td>\n<td>只能通过置入空事务的方式跳过错误</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"两种复制方式选择\"><a href=\"#两种复制方式选择\" class=\"headerlink\" title=\"两种复制方式选择\"></a>两种复制方式选择</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>基于日志点的复制</th>\n<th>基于 GTID 的复制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>需要兼容老版本 MySQL 和 MariaDB</td>\n<td>其他各种情况</td>\n</tr>\n<tr>\n<td>需要使用 MMM 架构</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"主从延迟\"><a href=\"#主从延迟\" class=\"headerlink\" title=\"主从延迟\"></a>主从延迟</h3><h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><ul>\n<li>大事务：数万行的数据更新和对大表的DDL操作</li>\n<li>网络延迟</li>\n<li>由master多线程写入，slave单线程恢复引起的延迟<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4></li>\n<li>化大事务为小事务，分批更新数据</li>\n<li>使用pt-online-schema-change工具进行DDL操作</li>\n<li>减小单次事务处理的数据量以减少产生的日志文件大小</li>\n<li>减少master同步的slave数量</li>\n<li>使用MySQL5.7以后的多线程复制</li>\n<li>使用MGR复制架构</li>\n</ul>\n<h3 id=\"读写负载大\"><a href=\"#读写负载大\" class=\"headerlink\" title=\"读写负载大\"></a>读写负载大</h3><h4 id=\"读负载大\"><a href=\"#读负载大\" class=\"headerlink\" title=\"读负载大\"></a>读负载大</h4><ul>\n<li>为原DB增加slave服务器</li>\n<li>进行读写分离，读分担到slave</li>\n<li>增加数据库中间层，进行负载均衡<h4 id=\"写负载大\"><a href=\"#写负载大\" class=\"headerlink\" title=\"写负载大\"></a>写负载大</h4></li>\n<li>分库分表</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"mysql 面试（四）日志类问题","top":1,"date":"2019-09-14T02:49:21.000Z","_content":"\n### MySQL 常用日志类型\n\n|日志名称|作用|\n|--|--|\n|错误日志（error_log）|记录 mysql 在启动、运行或停止时候出现的问题|\n|常规日志（general_log）|记录所有发向 MySQL 请求|\n|慢查询日志（slow_query_log）|记录符合条件的查询|\n|二进制日志（binary_log）|记录全部有效的数据修改日志|\n|中继日志（relay_log）|用于主从复制、临时存储从主库同步的二进制日志|\n\n### 错误日志（error_log）\n\n分析排除 MySQL 运行错误\n记录未经授权的访问\n\n* log_error=$mysql/sql_log/mysql-error.log\n* log_error_verbosity=[1, 2, 3]\n\n|verbosity|作用|\n|--|--|\n|1|Error messages|\n|2|Error and warning messages|\n|3|Error , warning and note messages|\n\n* log_error_services=『日志服务组件；日志服务组件』\n\n|组件名称|作用|\n|--|--|\n|log_filter_internal|默认日志过滤组件，依赖 log_error_verbosity|\n|log_sink_internal|默认日志输出组件，依赖 log_error|\n|log_sink_json|将错误日志输出到 json 文件|\n|log_sink_syseventlog|将错误日志输出到系统日志文件|\n\n### 常规日志（general_log）\n\n分析客户端发送到 MySQL 的实际请求\n\n* general_log=[ON|OFF]\n* general_log_file=$mysql/sql_log/general.log\n* log_output=[FILE|TABLE|NONE]\n\n### 慢查询日志（slow_query_log）\n\n* 将执行成功并符合条件的查询记录到日志\n* 找到需要优化的 SQL\n* slow_query_log=[ON|OFF]\n* slow_query_log_file=$mysql/sql_log/slowlog.log\n* long_query_time=xx 秒\n* log_queries_not_using_indexes=[ON|OFF]\n* log_slow_admin_statements=[ON|OFF]\n* log_slow_slave_statements=[ON|OFF]\n\n### 二进制日志（binary_log）\n\n记录所有对数据库的数据修改\n基于时间点的备份和恢复\n主从复制\n\n* log-bin[=base_name]\n* binlog_format=[ROW|STATEMENT|MIXED]\n* binlog_rows_query_log_events=[ON|OFF]\n* log_slave_updates=[ON|OFF]\n* sync_binlog=[1|0]\n* expire_logs_days=days\n* PURGE BINARY LOGS TO 'mysql-bin.010'\n* PURGE BINARY LOGS BEFORE '2008-04-02 22:46:24'\n\n### 中继日志（relay_log）\n\n* relay_log=filename\n* relay_log_purge=[ON|OFF]\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/mysql面试（四）日志类问题.md","raw":"---\ntitle: mysql 面试（四）日志类问题\ntop: 1\ndate: 2019-09-14 10:49:21\ntags: [\"mysql\"]\ncategories: \"mysql\"\n---\n\n### MySQL 常用日志类型\n\n|日志名称|作用|\n|--|--|\n|错误日志（error_log）|记录 mysql 在启动、运行或停止时候出现的问题|\n|常规日志（general_log）|记录所有发向 MySQL 请求|\n|慢查询日志（slow_query_log）|记录符合条件的查询|\n|二进制日志（binary_log）|记录全部有效的数据修改日志|\n|中继日志（relay_log）|用于主从复制、临时存储从主库同步的二进制日志|\n\n### 错误日志（error_log）\n\n分析排除 MySQL 运行错误\n记录未经授权的访问\n\n* log_error=$mysql/sql_log/mysql-error.log\n* log_error_verbosity=[1, 2, 3]\n\n|verbosity|作用|\n|--|--|\n|1|Error messages|\n|2|Error and warning messages|\n|3|Error , warning and note messages|\n\n* log_error_services=『日志服务组件；日志服务组件』\n\n|组件名称|作用|\n|--|--|\n|log_filter_internal|默认日志过滤组件，依赖 log_error_verbosity|\n|log_sink_internal|默认日志输出组件，依赖 log_error|\n|log_sink_json|将错误日志输出到 json 文件|\n|log_sink_syseventlog|将错误日志输出到系统日志文件|\n\n### 常规日志（general_log）\n\n分析客户端发送到 MySQL 的实际请求\n\n* general_log=[ON|OFF]\n* general_log_file=$mysql/sql_log/general.log\n* log_output=[FILE|TABLE|NONE]\n\n### 慢查询日志（slow_query_log）\n\n* 将执行成功并符合条件的查询记录到日志\n* 找到需要优化的 SQL\n* slow_query_log=[ON|OFF]\n* slow_query_log_file=$mysql/sql_log/slowlog.log\n* long_query_time=xx 秒\n* log_queries_not_using_indexes=[ON|OFF]\n* log_slow_admin_statements=[ON|OFF]\n* log_slow_slave_statements=[ON|OFF]\n\n### 二进制日志（binary_log）\n\n记录所有对数据库的数据修改\n基于时间点的备份和恢复\n主从复制\n\n* log-bin[=base_name]\n* binlog_format=[ROW|STATEMENT|MIXED]\n* binlog_rows_query_log_events=[ON|OFF]\n* log_slave_updates=[ON|OFF]\n* sync_binlog=[1|0]\n* expire_logs_days=days\n* PURGE BINARY LOGS TO 'mysql-bin.010'\n* PURGE BINARY LOGS BEFORE '2008-04-02 22:46:24'\n\n### 中继日志（relay_log）\n\n* relay_log=filename\n* relay_log_purge=[ON|OFF]\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"mysql面试（四）日志类问题","published":1,"updated":"2019-11-12T02:05:15.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol0002fyos6zjmewo9e","content":"<h3 id=\"MySQL-常用日志类型\"><a href=\"#MySQL-常用日志类型\" class=\"headerlink\" title=\"MySQL 常用日志类型\"></a>MySQL 常用日志类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>日志名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误日志（error_log）</td>\n<td>记录 mysql 在启动、运行或停止时候出现的问题</td>\n</tr>\n<tr>\n<td>常规日志（general_log）</td>\n<td>记录所有发向 MySQL 请求</td>\n</tr>\n<tr>\n<td>慢查询日志（slow_query_log）</td>\n<td>记录符合条件的查询</td>\n</tr>\n<tr>\n<td>二进制日志（binary_log）</td>\n<td>记录全部有效的数据修改日志</td>\n</tr>\n<tr>\n<td>中继日志（relay_log）</td>\n<td>用于主从复制、临时存储从主库同步的二进制日志</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"错误日志（error-log）\"><a href=\"#错误日志（error-log）\" class=\"headerlink\" title=\"错误日志（error_log）\"></a>错误日志（error_log）</h3><p>分析排除 MySQL 运行错误<br>记录未经授权的访问</p>\n<ul>\n<li>log_error=$mysql/sql_log/mysql-error.log</li>\n<li>log_error_verbosity=[1, 2, 3]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>verbosity</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Error and warning messages</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Error , warning and note messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>log_error_services=『日志服务组件；日志服务组件』</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_filter_internal</td>\n<td>默认日志过滤组件，依赖 log_error_verbosity</td>\n</tr>\n<tr>\n<td>log_sink_internal</td>\n<td>默认日志输出组件，依赖 log_error</td>\n</tr>\n<tr>\n<td>log_sink_json</td>\n<td>将错误日志输出到 json 文件</td>\n</tr>\n<tr>\n<td>log_sink_syseventlog</td>\n<td>将错误日志输出到系统日志文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"常规日志（general-log）\"><a href=\"#常规日志（general-log）\" class=\"headerlink\" title=\"常规日志（general_log）\"></a>常规日志（general_log）</h3><p>分析客户端发送到 MySQL 的实际请求</p>\n<ul>\n<li>general_log=[ON|OFF]</li>\n<li>general_log_file=$mysql/sql_log/general.log</li>\n<li>log_output=[FILE|TABLE|NONE]</li>\n</ul>\n<h3 id=\"慢查询日志（slow-query-log）\"><a href=\"#慢查询日志（slow-query-log）\" class=\"headerlink\" title=\"慢查询日志（slow_query_log）\"></a>慢查询日志（slow_query_log）</h3><ul>\n<li>将执行成功并符合条件的查询记录到日志</li>\n<li>找到需要优化的 SQL</li>\n<li>slow_query_log=[ON|OFF]</li>\n<li>slow_query_log_file=$mysql/sql_log/slowlog.log</li>\n<li>long_query_time=xx 秒</li>\n<li>log_queries_not_using_indexes=[ON|OFF]</li>\n<li>log_slow_admin_statements=[ON|OFF]</li>\n<li>log_slow_slave_statements=[ON|OFF]</li>\n</ul>\n<h3 id=\"二进制日志（binary-log）\"><a href=\"#二进制日志（binary-log）\" class=\"headerlink\" title=\"二进制日志（binary_log）\"></a>二进制日志（binary_log）</h3><p>记录所有对数据库的数据修改<br>基于时间点的备份和恢复<br>主从复制</p>\n<ul>\n<li>log-bin[=base_name]</li>\n<li>binlog_format=[ROW|STATEMENT|MIXED]</li>\n<li>binlog_rows_query_log_events=[ON|OFF]</li>\n<li>log_slave_updates=[ON|OFF]</li>\n<li>sync_binlog=[1|0]</li>\n<li>expire_logs_days=days</li>\n<li>PURGE BINARY LOGS TO ‘mysql-bin.010’</li>\n<li>PURGE BINARY LOGS BEFORE ‘2008-04-02 22:46:24’</li>\n</ul>\n<h3 id=\"中继日志（relay-log）\"><a href=\"#中继日志（relay-log）\" class=\"headerlink\" title=\"中继日志（relay_log）\"></a>中继日志（relay_log）</h3><ul>\n<li>relay_log=filename</li>\n<li>relay_log_purge=[ON|OFF]</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL-常用日志类型\"><a href=\"#MySQL-常用日志类型\" class=\"headerlink\" title=\"MySQL 常用日志类型\"></a>MySQL 常用日志类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>日志名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>错误日志（error_log）</td>\n<td>记录 mysql 在启动、运行或停止时候出现的问题</td>\n</tr>\n<tr>\n<td>常规日志（general_log）</td>\n<td>记录所有发向 MySQL 请求</td>\n</tr>\n<tr>\n<td>慢查询日志（slow_query_log）</td>\n<td>记录符合条件的查询</td>\n</tr>\n<tr>\n<td>二进制日志（binary_log）</td>\n<td>记录全部有效的数据修改日志</td>\n</tr>\n<tr>\n<td>中继日志（relay_log）</td>\n<td>用于主从复制、临时存储从主库同步的二进制日志</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"错误日志（error-log）\"><a href=\"#错误日志（error-log）\" class=\"headerlink\" title=\"错误日志（error_log）\"></a>错误日志（error_log）</h3><p>分析排除 MySQL 运行错误<br>记录未经授权的访问</p>\n<ul>\n<li>log_error=$mysql/sql_log/mysql-error.log</li>\n<li>log_error_verbosity=[1, 2, 3]</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>verbosity</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>Error messages</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Error and warning messages</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Error , warning and note messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>log_error_services=『日志服务组件；日志服务组件』</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_filter_internal</td>\n<td>默认日志过滤组件，依赖 log_error_verbosity</td>\n</tr>\n<tr>\n<td>log_sink_internal</td>\n<td>默认日志输出组件，依赖 log_error</td>\n</tr>\n<tr>\n<td>log_sink_json</td>\n<td>将错误日志输出到 json 文件</td>\n</tr>\n<tr>\n<td>log_sink_syseventlog</td>\n<td>将错误日志输出到系统日志文件</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"常规日志（general-log）\"><a href=\"#常规日志（general-log）\" class=\"headerlink\" title=\"常规日志（general_log）\"></a>常规日志（general_log）</h3><p>分析客户端发送到 MySQL 的实际请求</p>\n<ul>\n<li>general_log=[ON|OFF]</li>\n<li>general_log_file=$mysql/sql_log/general.log</li>\n<li>log_output=[FILE|TABLE|NONE]</li>\n</ul>\n<h3 id=\"慢查询日志（slow-query-log）\"><a href=\"#慢查询日志（slow-query-log）\" class=\"headerlink\" title=\"慢查询日志（slow_query_log）\"></a>慢查询日志（slow_query_log）</h3><ul>\n<li>将执行成功并符合条件的查询记录到日志</li>\n<li>找到需要优化的 SQL</li>\n<li>slow_query_log=[ON|OFF]</li>\n<li>slow_query_log_file=$mysql/sql_log/slowlog.log</li>\n<li>long_query_time=xx 秒</li>\n<li>log_queries_not_using_indexes=[ON|OFF]</li>\n<li>log_slow_admin_statements=[ON|OFF]</li>\n<li>log_slow_slave_statements=[ON|OFF]</li>\n</ul>\n<h3 id=\"二进制日志（binary-log）\"><a href=\"#二进制日志（binary-log）\" class=\"headerlink\" title=\"二进制日志（binary_log）\"></a>二进制日志（binary_log）</h3><p>记录所有对数据库的数据修改<br>基于时间点的备份和恢复<br>主从复制</p>\n<ul>\n<li>log-bin[=base_name]</li>\n<li>binlog_format=[ROW|STATEMENT|MIXED]</li>\n<li>binlog_rows_query_log_events=[ON|OFF]</li>\n<li>log_slave_updates=[ON|OFF]</li>\n<li>sync_binlog=[1|0]</li>\n<li>expire_logs_days=days</li>\n<li>PURGE BINARY LOGS TO ‘mysql-bin.010’</li>\n<li>PURGE BINARY LOGS BEFORE ‘2008-04-02 22:46:24’</li>\n</ul>\n<h3 id=\"中继日志（relay-log）\"><a href=\"#中继日志（relay-log）\" class=\"headerlink\" title=\"中继日志（relay_log）\"></a>中继日志（relay_log）</h3><ul>\n<li>relay_log=filename</li>\n<li>relay_log_purge=[ON|OFF]</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx 配置 https 出现 no\"ssl_certificate\" is defined","date":"2019-03-28T08:43:50.000Z","top":0,"_content":"\n### 一、问题\n\n今天在配置 nginx 的 https 发现报错：\n\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n\n意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。\n\n### 二、解决方案\n\nnginx 的配置文件中 nginx.conf 中加入\n\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置https出现no ssl_certificate.md","raw":"---\ntitle: nginx 配置 https 出现 no\"ssl_certificate\" is defined\ndate: 2019-03-28 16:43:50\ntags: [nginx, https, ssl]\ncategories: \"nginx\"\ntop: 0\n---\n\n### 一、问题\n\n今天在配置 nginx 的 https 发现报错：\n\n```\n2019/01/21 11:21:15 [error] 11593#0: *204154 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no \"ssl_certificate\" is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n```\n\n意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。\n\n### 二、解决方案\n\nnginx 的配置文件中 nginx.conf 中加入\n\n```\nhttp {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置https出现no ssl_certificate","published":1,"updated":"2019-11-12T02:05:15.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol1002jyos6n8brqfd1","content":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置 nginx 的 https 发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx 的配置文件中 nginx.conf 中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h3><p>今天在配置 nginx 的 https 发现报错：</p>\n<pre><code>2019/01/21 11:21:15 [error] 11593#0: *204154 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204155 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n2019/01/21 11:21:15 [error] 11593#0: *204156 no &quot;ssl_certificate&quot; is defined in server listening on SSL port while SSL handshaking, client: 175.9.181.35, server: 0.0.0.0:443\n</code></pre><p>意思是 ssl_certificate 没有配置，可是 ssl_certificate 和 ssl_certificate_key 都已经配置，网上搜索 ssl_certificate 必须在 http 段中先定义， 在 server 段才配置 ssl_certificate 已经来不及了， 检查我的 nginx 配置，ssl_certificate 确实只在 server 段定义，而在 http 段未定义，加到 http 段即可。</p>\n<h3 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h3><p>nginx 的配置文件中 nginx.conf 中加入</p>\n<pre><code>http {\n  ssl_certificate  xxx.pem;\n  ssl_certificate_key xx.key;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx配置socket.io负载均衡","date":"2019-05-06T23:57:34.000Z","top":0,"_content":"nginx 配置\n\n```shell\nupstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\nsocket.io\n\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置socket.io负载均衡.md","raw":"---\ntitle: nginx配置socket.io负载均衡\ndate: 2019-05-07 07:57:34\ntags: [\"node\",\"nginx\"]\ncategories: \"node\"\ntop: 0\n---\nnginx 配置\n\n```shell\nupstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n\t\tproxy_pass http://nodes; #反向代理集群\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_set_header Host $http_host;\n\t\tproxy_set_header X-NginX-Proxy true;\n\t\tproxy_redirect off;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\nsocket.io\n\n```js\nvar express = require('express');\nvar app = express();\nvar path = require('path');\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () => {\n    console.log('Server listening at port %d', port);\n});\n\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置socket.io负载均衡","published":1,"updated":"2019-11-12T02:05:15.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol2002myos6w2qzd25u","content":"<p>nginx 配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>nginx 配置</p>\n<pre><code class=\"lang-shell\">upstream nodes {\n  ip_hash;\n  server 192.168.1.114:3000;\n  server 192.168.1.114:3001;\n  server 192.168.1.114:3002;\n}\nserver {\n    listen 80;\n    server_name ws;\n    index index.html index.htm index.php;\n\n    location /{\n        proxy_pass http://nodes; #反向代理集群\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-NginX-Proxy true;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\n</code></pre>\n<p>socket.io</p>\n<pre><code class=\"lang-js\">var express = require(&#39;express&#39;);\nvar app = express();\nvar path = require(&#39;path&#39;);\nvar server = require(&#39;http&#39;).createServer(app);\nvar io = require(&#39;socket.io&#39;)(server);\nvar port = process.env.PORT || 3000;\nserver.listen(port, () =&gt; {\n    console.log(&#39;Server listening at port %d&#39;, port);\n});\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx 负载均衡模式","date":"2019-03-29T06:48:42.000Z","top":0,"_content":"Nginx 的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight 默认值为 1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的 server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx负载均衡模式.md","raw":"---\ntitle: nginx 负载均衡模式\ndate: 2019-03-29 14:48:42\ntags: [nginx]\ncategories: \"nginx\"\ntop: 0\n---\nNginx 的几种负载均衡模式\n\n### 一、默认轮询\n\n把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。\n\n```shell\n upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n```\n\n### 二、权重\n\nweight 默认值为 1，值越大则代表被访问的几率越大\n\n```\n upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n```\n\n### 三、ip_hash\n\n采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。\n每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。\n\n```\nupstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n```\n\n### 四、least_conn\n\n把请求分配到连接数最少的 server\n\n```\nupstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx负载均衡模式","published":1,"updated":"2019-11-12T02:05:15.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol4002ryos64ucn1we4","content":"<p>Nginx 的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight 默认值为 1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的 server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nginx 的几种负载均衡模式</p>\n<h3 id=\"一、默认轮询\"><a href=\"#一、默认轮询\" class=\"headerlink\" title=\"一、默认轮询\"></a>一、默认轮询</h3><p>把每个请求逐一分配到不同的 server，如果分配到的 server 不可用，则分配到下一个，直到可用。</p>\n<pre><code class=\"lang-shell\"> upstream ng {\n        server 127.0.0.1:83;\n        server 127.0.0.1:82;\n    }\nserver {\n    listen       80;\n    server_name  localhost;\n    charset utf-8;\n    root   /usr/share/nginx/html;\n    index  index.html index.htm;\n    location / {\n       proxy_pass http://ng;\n    }\n}\n</code></pre>\n<h3 id=\"二、权重\"><a href=\"#二、权重\" class=\"headerlink\" title=\"二、权重\"></a>二、权重</h3><p>weight 默认值为 1，值越大则代表被访问的几率越大</p>\n<pre><code> upstream ng {\n        server 127.0.0.1:83 weight=1;\n        server 127.0.0.1:82 weight=2;\n    }\n</code></pre><h3 id=\"三、ip-hash\"><a href=\"#三、ip-hash\" class=\"headerlink\" title=\"三、ip_hash\"></a>三、ip_hash</h3><p>采用 ip_hash 指令能解决一个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。否则，用户在某台服务器上登录了，那么该用户第二次请求的时候，负载均衡系统中每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失。</p>\n<pre><code>upstream ng {\n    ip_hash;\n    server 127.0.0.1:83;\n    server 127.0.0.1:82;\n}\n</code></pre><h3 id=\"四、least-conn\"><a href=\"#四、least-conn\" class=\"headerlink\" title=\"四、least_conn\"></a>四、least_conn</h3><p>把请求分配到连接数最少的 server</p>\n<pre><code>upstream test.cc {\n    least_conn;\n    server 192.168.8.143;\n    server 192.168.8.144;\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"nginx 配置文件","date":"2019-04-03T01:40:29.000Z","top":0,"_content":"\n### nginx 配置文件\n\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/nginx配置文件.md","raw":"---\ntitle: nginx 配置文件\ndate: 2019-04-03 09:40:29\ntags: [nginx]\ncategories: \"nginx\"\ntop: 0\n---\n\n### nginx 配置文件\n\n```\n#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n    '$status $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" $http_x_forwarded_for';\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 \"/\" 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic \"NginxStatus\";\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"nginx配置文件","published":1,"updated":"2019-11-12T02:05:15.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol5002uyos6lqqil3fn","content":"<h3 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"nginx-配置文件\"><a href=\"#nginx-配置文件\" class=\"headerlink\" title=\"nginx 配置文件\"></a>nginx 配置文件</h3><pre><code>#定义Nginx运行的用户和用户组\nuser www www;\n#nginx进程数，建议设置为等于CPU总核心数。\nworker_processes 8;\n\n#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]\nerror_log /var/log/nginx/error.log info;\n\n#进程文件\npid /var/run/nginx.pid;\n\n#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，\n但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。\nworker_rlimit_nofile 65535;\n\n#工作模式与连接数上限\nevents\n{\n    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是\n    Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。\n    use epoll;\n    #单个进程最大连接数（最大连接数=连接数*进程数）\n    worker_connections 65535;\n}\n\n#设定http服务器\nhttp\n{\n    include mime.types; #文件扩展名与文件类型映射表\n    default_type application/octet-stream; #默认文件类型\n    #charset utf-8; #默认编码\n    server_names_hash_bucket_size 128; #服务器名字的hash表大小\n    client_header_buffer_size 32k; #上传文件大小限制\n    large_client_header_buffers 4 64k; #设定请求缓\n    client_max_body_size 8m; #设定请求缓\n    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，\n    对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理\n    速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n    tcp_nopush on; #防止网络阻塞\n    tcp_nodelay on; #防止网络阻塞\n    keepalive_timeout 120; #长连接超时时间，单位是秒\n\n#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n\n#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k; #最小压缩文件大小\n    gzip_buffers 4 16k; #压缩缓冲区\n    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2; #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;\n#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n\n#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n    upstream test.com {\n#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被\n分配到的几率越大。\n        server 192.168.80.121:80 weight=3;\n        server 192.168.80.122:80 weight=2;\n        server 192.168.80.123:80 weight=3;\n}\n\n#虚拟主机的配置\nserver\n{\n    #监听端口\n    listen 80;\n    #域名可以有多个，用空格隔开\n    server_name www.ha97.com ha97.com;\n    index index.html index.htm index.php;\n    root /data/www/ha97;\n    location ~ .*.(php|php5)?$\n    {\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        include fastcgi.conf;\n    }\n    #图片缓存时间设置\n    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$\n    {\n        expires 10d;\n    }\n    #JS和CSS缓存时间设置\n    location ~ .*.(js|css)?$\n    {\n        expires 1h;\n    }\n#日志格式设定\n    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;\n#定义本虚拟主机的访问日志\n    access_log /var/log/nginx/ha97access.log access;\n\n#对 &quot;/&quot; 启用反向代理\n    location / {\n        proxy_pass http://127.0.0.1:88;\n        proxy_redirect off;\n        proxy_set_header X-Real-IP $remote_addr;\n#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n#以下是一些反向代理的配置，可选。\n        proxy_set_header Host $host;\n        client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n        proxy_temp_file_write_size 64k;\n        #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n    }\n\n#设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status on;\n        access_log on;\n        auth_basic &quot;NginxStatus&quot;;\n        auth_basic_user_file conf/htpasswd;\n    #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n    }\n\n#本地动静分离反向代理配置\n#所有jsp的页面均交由tomcat或resin处理\n    location ~ .(jsp|jspx|do)?$ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://127.0.0.1:8080;\n    }\n#所有静态文件由nginx直接读取不经过tomcat或resin\n    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt\n|flv|mid|doc|ppt|pdf|xls|mp3|wma)${\n        expires 15d;\n    }\n    location ~ .*.(js|css)?${\n        expires 1h; }\n    }\n}\n</code></pre><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"python 在类中实现 swith 功能","date":"2019-03-29T06:51:12.000Z","top":0,"_content":"\n### 问题\n\nPython 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码\n\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n\n其中主要用到 getattr 这个函数，用于返回一个对象属性值。\n\n```python\ngetattr(object, name[, default])\n```\n\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/python在类中实现swith功能.md","raw":"---\ntitle: python 在类中实现 swith 功能\ndate: 2019-03-29 14:51:12\ntags: [python]\ncategories: \"python\"\ntop: 0\n---\n\n### 问题\n\nPython 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。\n实现代码\n\n```python\nclass RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(\"get\")\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == '__main__':\n    client = RunMethod()\n    client.main(\"post\")(\"http://www.baidu.com\")\n```\n\n其中主要用到 getattr 这个函数，用于返回一个对象属性值。\n\n```python\ngetattr(object, name[, default])\n```\n\n- object -- 对象。\n- name -- 字符串，对象属性。\n- default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"python在类中实现swith功能","published":1,"updated":"2019-11-12T02:05:15.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol6002yyos6bmx9dklq","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到 getattr 这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>Python 中没有 switch 的语法，但是很多时候需要多重条件判断，又不想写多个 if，那只能手动实现了。<br>实现代码</p>\n<pre><code class=\"lang-python\">class RunMethod:\n    def post(self,url=None,data=None,header=None):\n        print(url)\n    def get(self,url=None,data=None,header=None):\n        print(&quot;get&quot;)\n\n    def main(self,method):\n        method = getattr(self, method)\n        return method\n\nif __name__ == &#39;__main__&#39;:\n    client = RunMethod()\n    client.main(&quot;post&quot;)(&quot;http://www.baidu.com&quot;)\n</code></pre>\n<p>其中主要用到 getattr 这个函数，用于返回一个对象属性值。</p>\n<pre><code class=\"lang-python\">getattr(object, name[, default])\n</code></pre>\n<ul>\n<li>object — 对象。</li>\n<li>name — 字符串，对象属性。</li>\n<li>default — 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（一）特性","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"### redis是什么\n- 开源的基于键值的存储服务系统，支持多种数据结构，高性能、功能丰富\n### redis特性\n#### 速度快（10w OPS）\n- 数据存储内存中\n- C语言编写\n- 单线程模型\n\n#### 持久化\n- redis所有数据保存在内存中，对数据更新将异步保存到磁盘（ADB，ROF）\n\n#### 多种数据结构\n- strings/blobs/bitmaps\n- hash tables\n- linked lists\n- sets\n- sorted sets\n- bitmas 位图\n- hyperloglog 超小内存唯一值计数\n- GEO 地理信息定位\n\n#### 支持多种编程语言\n#### 功能丰富\n- 发布订阅\n- lua脚本\n- 事务\n- pipeline\n#### 使用简单\n- 23000行代码\n- 不依赖外部库\n- 单线程模型\n#### 主从复制\n\n#### 高可用、分布式\n- redis-sentinel(v2.8)支持高可用\n- redis-cluster(v3.0)支持分布式\n\n### redis典型使用场景\n- 缓存系统\n- 计数器\n- 消息队列\n- 排行榜\n- 社交网络\n- 实时系统\n\n### redis安装和启动\n#### 安装\n```shell\nwget http://download.redis.io/redis-stable.tar.gz && tar -xzf redis-stable.tar.gz\nmv redis-stable redis && cd redis/ && make && make install\n```\n#### 目录结构\n- redis-server redis服务器\n- redis-cli redis命令行客户端\n- redis-benchmark redis性能测试工具\n- redis-check-aof aof文件修复工具\n- redis-check-dump rdb文件检查工具\n- redis-sentinel  sentinel服务器（2.8以后）\n#### 启动方法\n- 最简启动\n```shell\nredis-server\n```\n- 配置文件启动\n```shell\nredis-server configPath\n```\n- 动态参数启动\n```shell\nredis-server --port 6380\n```\n##### 启动方法比较\n- 生产环境选择配置启动\n- 单机多实例配置文件可以用端口区分\n\n#### 验证\n```shell\nps -ef | grep redis\nnetstat -antpl | grep redis\nredis-cli -h ip -p port ping\n```\n#### 常用配置\n- daemonize 是否是守护进程（no|yes）\n- port 对外端口号（6379）\n- logfile 系统日志\n- dir 工作目录 \n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（一）特性.md","raw":"---\ntitle: redis详解（一）特性\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n### redis是什么\n- 开源的基于键值的存储服务系统，支持多种数据结构，高性能、功能丰富\n### redis特性\n#### 速度快（10w OPS）\n- 数据存储内存中\n- C语言编写\n- 单线程模型\n\n#### 持久化\n- redis所有数据保存在内存中，对数据更新将异步保存到磁盘（ADB，ROF）\n\n#### 多种数据结构\n- strings/blobs/bitmaps\n- hash tables\n- linked lists\n- sets\n- sorted sets\n- bitmas 位图\n- hyperloglog 超小内存唯一值计数\n- GEO 地理信息定位\n\n#### 支持多种编程语言\n#### 功能丰富\n- 发布订阅\n- lua脚本\n- 事务\n- pipeline\n#### 使用简单\n- 23000行代码\n- 不依赖外部库\n- 单线程模型\n#### 主从复制\n\n#### 高可用、分布式\n- redis-sentinel(v2.8)支持高可用\n- redis-cluster(v3.0)支持分布式\n\n### redis典型使用场景\n- 缓存系统\n- 计数器\n- 消息队列\n- 排行榜\n- 社交网络\n- 实时系统\n\n### redis安装和启动\n#### 安装\n```shell\nwget http://download.redis.io/redis-stable.tar.gz && tar -xzf redis-stable.tar.gz\nmv redis-stable redis && cd redis/ && make && make install\n```\n#### 目录结构\n- redis-server redis服务器\n- redis-cli redis命令行客户端\n- redis-benchmark redis性能测试工具\n- redis-check-aof aof文件修复工具\n- redis-check-dump rdb文件检查工具\n- redis-sentinel  sentinel服务器（2.8以后）\n#### 启动方法\n- 最简启动\n```shell\nredis-server\n```\n- 配置文件启动\n```shell\nredis-server configPath\n```\n- 动态参数启动\n```shell\nredis-server --port 6380\n```\n##### 启动方法比较\n- 生产环境选择配置启动\n- 单机多实例配置文件可以用端口区分\n\n#### 验证\n```shell\nps -ef | grep redis\nnetstat -antpl | grep redis\nredis-cli -h ip -p port ping\n```\n#### 常用配置\n- daemonize 是否是守护进程（no|yes）\n- port 对外端口号（6379）\n- logfile 系统日志\n- dir 工作目录 \n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（一）特性","published":1,"updated":"2019-11-14T08:55:39.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol70032yos6f7s84ki9","content":"<h3 id=\"redis是什么\"><a href=\"#redis是什么\" class=\"headerlink\" title=\"redis是什么\"></a>redis是什么</h3><ul>\n<li>开源的基于键值的存储服务系统，支持多种数据结构，高性能、功能丰富<h3 id=\"redis特性\"><a href=\"#redis特性\" class=\"headerlink\" title=\"redis特性\"></a>redis特性</h3><h4 id=\"速度快（10w-OPS）\"><a href=\"#速度快（10w-OPS）\" class=\"headerlink\" title=\"速度快（10w OPS）\"></a>速度快（10w OPS）</h4></li>\n<li>数据存储内存中</li>\n<li>C语言编写</li>\n<li>单线程模型</li>\n</ul>\n<h4 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h4><ul>\n<li>redis所有数据保存在内存中，对数据更新将异步保存到磁盘（ADB，ROF）</li>\n</ul>\n<h4 id=\"多种数据结构\"><a href=\"#多种数据结构\" class=\"headerlink\" title=\"多种数据结构\"></a>多种数据结构</h4><ul>\n<li>strings/blobs/bitmaps</li>\n<li>hash tables</li>\n<li>linked lists</li>\n<li>sets</li>\n<li>sorted sets</li>\n<li>bitmas 位图</li>\n<li>hyperloglog 超小内存唯一值计数</li>\n<li>GEO 地理信息定位</li>\n</ul>\n<h4 id=\"支持多种编程语言\"><a href=\"#支持多种编程语言\" class=\"headerlink\" title=\"支持多种编程语言\"></a>支持多种编程语言</h4><h4 id=\"功能丰富\"><a href=\"#功能丰富\" class=\"headerlink\" title=\"功能丰富\"></a>功能丰富</h4><ul>\n<li>发布订阅</li>\n<li>lua脚本</li>\n<li>事务</li>\n<li>pipeline<h4 id=\"使用简单\"><a href=\"#使用简单\" class=\"headerlink\" title=\"使用简单\"></a>使用简单</h4></li>\n<li>23000行代码</li>\n<li>不依赖外部库</li>\n<li>单线程模型<h4 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h4></li>\n</ul>\n<h4 id=\"高可用、分布式\"><a href=\"#高可用、分布式\" class=\"headerlink\" title=\"高可用、分布式\"></a>高可用、分布式</h4><ul>\n<li>redis-sentinel(v2.8)支持高可用</li>\n<li>redis-cluster(v3.0)支持分布式</li>\n</ul>\n<h3 id=\"redis典型使用场景\"><a href=\"#redis典型使用场景\" class=\"headerlink\" title=\"redis典型使用场景\"></a>redis典型使用场景</h3><ul>\n<li>缓存系统</li>\n<li>计数器</li>\n<li>消息队列</li>\n<li>排行榜</li>\n<li>社交网络</li>\n<li>实时系统</li>\n</ul>\n<h3 id=\"redis安装和启动\"><a href=\"#redis安装和启动\" class=\"headerlink\" title=\"redis安装和启动\"></a>redis安装和启动</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code class=\"lang-shell\">wget http://download.redis.io/redis-stable.tar.gz &amp;&amp; tar -xzf redis-stable.tar.gz\nmv redis-stable redis &amp;&amp; cd redis/ &amp;&amp; make &amp;&amp; make install\n</code></pre>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><ul>\n<li>redis-server redis服务器</li>\n<li>redis-cli redis命令行客户端</li>\n<li>redis-benchmark redis性能测试工具</li>\n<li>redis-check-aof aof文件修复工具</li>\n<li>redis-check-dump rdb文件检查工具</li>\n<li>redis-sentinel  sentinel服务器（2.8以后）<h4 id=\"启动方法\"><a href=\"#启动方法\" class=\"headerlink\" title=\"启动方法\"></a>启动方法</h4></li>\n<li>最简启动<pre><code class=\"lang-shell\">redis-server\n</code></pre>\n</li>\n<li>配置文件启动<pre><code class=\"lang-shell\">redis-server configPath\n</code></pre>\n</li>\n<li>动态参数启动<pre><code class=\"lang-shell\">redis-server --port 6380\n</code></pre>\n<h5 id=\"启动方法比较\"><a href=\"#启动方法比较\" class=\"headerlink\" title=\"启动方法比较\"></a>启动方法比较</h5></li>\n<li>生产环境选择配置启动</li>\n<li>单机多实例配置文件可以用端口区分</li>\n</ul>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><pre><code class=\"lang-shell\">ps -ef | grep redis\nnetstat -antpl | grep redis\nredis-cli -h ip -p port ping\n</code></pre>\n<h4 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h4><ul>\n<li>daemonize 是否是守护进程（no|yes）</li>\n<li>port 对外端口号（6379）</li>\n<li>logfile 系统日志</li>\n<li>dir 工作目录 </li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"redis是什么\"><a href=\"#redis是什么\" class=\"headerlink\" title=\"redis是什么\"></a>redis是什么</h3><ul>\n<li>开源的基于键值的存储服务系统，支持多种数据结构，高性能、功能丰富<h3 id=\"redis特性\"><a href=\"#redis特性\" class=\"headerlink\" title=\"redis特性\"></a>redis特性</h3><h4 id=\"速度快（10w-OPS）\"><a href=\"#速度快（10w-OPS）\" class=\"headerlink\" title=\"速度快（10w OPS）\"></a>速度快（10w OPS）</h4></li>\n<li>数据存储内存中</li>\n<li>C语言编写</li>\n<li>单线程模型</li>\n</ul>\n<h4 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h4><ul>\n<li>redis所有数据保存在内存中，对数据更新将异步保存到磁盘（ADB，ROF）</li>\n</ul>\n<h4 id=\"多种数据结构\"><a href=\"#多种数据结构\" class=\"headerlink\" title=\"多种数据结构\"></a>多种数据结构</h4><ul>\n<li>strings/blobs/bitmaps</li>\n<li>hash tables</li>\n<li>linked lists</li>\n<li>sets</li>\n<li>sorted sets</li>\n<li>bitmas 位图</li>\n<li>hyperloglog 超小内存唯一值计数</li>\n<li>GEO 地理信息定位</li>\n</ul>\n<h4 id=\"支持多种编程语言\"><a href=\"#支持多种编程语言\" class=\"headerlink\" title=\"支持多种编程语言\"></a>支持多种编程语言</h4><h4 id=\"功能丰富\"><a href=\"#功能丰富\" class=\"headerlink\" title=\"功能丰富\"></a>功能丰富</h4><ul>\n<li>发布订阅</li>\n<li>lua脚本</li>\n<li>事务</li>\n<li>pipeline<h4 id=\"使用简单\"><a href=\"#使用简单\" class=\"headerlink\" title=\"使用简单\"></a>使用简单</h4></li>\n<li>23000行代码</li>\n<li>不依赖外部库</li>\n<li>单线程模型<h4 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h4></li>\n</ul>\n<h4 id=\"高可用、分布式\"><a href=\"#高可用、分布式\" class=\"headerlink\" title=\"高可用、分布式\"></a>高可用、分布式</h4><ul>\n<li>redis-sentinel(v2.8)支持高可用</li>\n<li>redis-cluster(v3.0)支持分布式</li>\n</ul>\n<h3 id=\"redis典型使用场景\"><a href=\"#redis典型使用场景\" class=\"headerlink\" title=\"redis典型使用场景\"></a>redis典型使用场景</h3><ul>\n<li>缓存系统</li>\n<li>计数器</li>\n<li>消息队列</li>\n<li>排行榜</li>\n<li>社交网络</li>\n<li>实时系统</li>\n</ul>\n<h3 id=\"redis安装和启动\"><a href=\"#redis安装和启动\" class=\"headerlink\" title=\"redis安装和启动\"></a>redis安装和启动</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code class=\"lang-shell\">wget http://download.redis.io/redis-stable.tar.gz &amp;&amp; tar -xzf redis-stable.tar.gz\nmv redis-stable redis &amp;&amp; cd redis/ &amp;&amp; make &amp;&amp; make install\n</code></pre>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><ul>\n<li>redis-server redis服务器</li>\n<li>redis-cli redis命令行客户端</li>\n<li>redis-benchmark redis性能测试工具</li>\n<li>redis-check-aof aof文件修复工具</li>\n<li>redis-check-dump rdb文件检查工具</li>\n<li>redis-sentinel  sentinel服务器（2.8以后）<h4 id=\"启动方法\"><a href=\"#启动方法\" class=\"headerlink\" title=\"启动方法\"></a>启动方法</h4></li>\n<li>最简启动<pre><code class=\"lang-shell\">redis-server\n</code></pre>\n</li>\n<li>配置文件启动<pre><code class=\"lang-shell\">redis-server configPath\n</code></pre>\n</li>\n<li>动态参数启动<pre><code class=\"lang-shell\">redis-server --port 6380\n</code></pre>\n<h5 id=\"启动方法比较\"><a href=\"#启动方法比较\" class=\"headerlink\" title=\"启动方法比较\"></a>启动方法比较</h5></li>\n<li>生产环境选择配置启动</li>\n<li>单机多实例配置文件可以用端口区分</li>\n</ul>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h4><pre><code class=\"lang-shell\">ps -ef | grep redis\nnetstat -antpl | grep redis\nredis-cli -h ip -p port ping\n</code></pre>\n<h4 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h4><ul>\n<li>daemonize 是否是守护进程（no|yes）</li>\n<li>port 对外端口号（6379）</li>\n<li>logfile 系统日志</li>\n<li>dir 工作目录 </li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（七）redis cluster","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（七）redis-cluster.md","raw":"---\ntitle: redis详解（七）redis cluster\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（七）redis-cluster","published":1,"updated":"2019-11-12T07:02:02.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqol80035yos616fjy6l2","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（九）云平台CacheCloud","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（九）云平台CacheCloud.md","raw":"---\ntitle: redis详解（九）云平台CacheCloud\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（九）云平台CacheCloud","published":1,"updated":"2019-11-12T07:02:09.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqola0039yos6otv7iuzl","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（三）其他功能","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n### 慢查询\n#### 生命周期\n1.client发送命令到redis\n2.redis排队\n3.redis执行命令（慢查询发生阶段）\n4.redis返回结果到客户端\n\n#### 两个配置\n##### slowlog-max-len\n- 先进先出队列\n- 固定长度\n- 保存在内存中\n- config get slowlog-max-len=128\n##### slowlog-log-slower-than\n- 慢查询阈值（单位：微秒）\n- slowlog-log-slower-than=0，记录所有命令\n- config get slowlog-log-slower-than=10000\n\n#### 三个命令\n- slowlog get [n]:获取慢查询队列\n- slowlog len:获取慢查询队列长度\n- slowlog reset:清空慢查询队列\n\n#### 运维经验\n- slowlog-max-len不用设置过大，默认10ms，通常设置1ms\n- slowlog-log-slower-than不要设置过小，通常设置1000\n- 理解生命周期\n- 定期持久化慢查询\n\n### pipeline\n#### 定义\n- client批量打包命令发给server\n- server处理n次后按顺序返回结果\n\n|命令|N个命令操作|1次pipeline(n个命令)|\n|-|-|-|\n|时间|n次网络+n次命令|1次网络+n次命令|\n|数据量|1条命令|n条命令|\n- redis的命令时间是微妙级别\n- pipeline每次条数要控制（网络时间）\n\n#### 与原生操作对比\n- 非原子命令\n#### 使用建议\n- 注意每次pipeline携带数据量\n- pipeline每次只能作用在一个redis节点\n- M操作和pipeline区别\n\n### 发布订阅\n#### 角色\n- 发布者\n- 订阅者\n- 频道\n\n#### 模型\n发布者发布消息到redis server，server把消息发送到订阅了指定频道的订阅者\n\n#### 命令\n|命令|说明|\n|-|-|\n|publish channel message|发布命令|\n|subscribe [channel]|订阅一个或多个频道|\n|unsubscribe [channel]|取消订阅一个或多个频道|\n|psubscribe [pattern...]|订阅模式|\n|punsubscribe [pattern...]|退订指定的模式|\n|pubsub channels |列出至少有一个订阅者的频道|\n|pubsub numsub[channel...] |列出给定频道的订阅者数量|\n|pubsub numpat |列出被订阅模式数量|\n\n#### 发布订阅与消息队列\n- 发布订阅模式中，订阅了频道的所有订阅者都能收到消息\n- 消息队列模式中，订阅了频道的订阅者中只有一个能收到消息\n\n### Bitmap\n#### 定义\n- 字符串对应ascii的二进制\n\n#### 命令\n|命令|说明|\n|-|-|\n|setbit key offset value|给位图指定索引设置值|\n|getbit key offset |获取位图指定索引值|\n|bitcount key [start end] |获取位图指定范围（start到end,单位是字节，如果不指定就是获取全部）位值为1的个数|\n|bitop op destkey key [key...] |做多个bitmap的交集、并集、非、异或操作并将结果保存在destkey中|\n|bitpos key targetBit[start][end]|计算位图指定范围（start到end,单位是字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置|\n\n#### 应用\n- 独立用户统计，1亿用户，5千万独立\n\n|数据类型|每个userid占用空间|需要存储用户量|全部内存量|\n|-|-|-|-|\n|set|32位|5000 0000|32位*5000 0000=200MB|\n|bitmap|1位|10000 0000|1位*10000 0000=12.5MB|\n\n- 1亿用户，10万个独立用户\n\n|数据类型|每个userid占用空间|需要存储用户量|全部内存量|\n|-|-|-|-|\n|set|32位|100 0000|32位*100 0000=4MB|\n|bitmap|1位|10000 0000|1位*10000 0000=12.5MB|\n\n#### 注意\n- type=string，最大512MB\n- 注意setbit偏移量，可能有较大耗时\n### HyperLogLog\n#### 定义\n- 基于HyperLogLog算法：极小空间完成独立数量统计\n- 本质还是字符串\n\n#### 命令\n|命令|说明|\n|-|-|\n|pfadd key element [element...]|向hyperloglog添加元素|\n|pfcount key [key...]|计算hyperloglog独立总数|\n|pfmerge destkey sourekey [sourcekey...]|合并多个hyperloglog|\n\n#### 注意\n- 错误率0.81%\n- 无法取出单条数据\n\n### GEO\n#### 定义\n- 地理信息定位，存储经纬度，计算两地距离，范围计算等\n\n#### 命令\n|命令|说明|\n|-|-|\n|geoadd key longitude latitude member [longitude latitude member...]|增加地理位置信息|\n|geopos key member[member...]|获取地理位置信息|\n|geodist key member1 member2 [unit]|获取两个地理位置的距离，unit：m,km,mi,ft|\n|georadius key longitude latitude radius m/km/ft/mi [withcoord][withdist][withhash][COUNT count][asc/desc][store key][storedist key]|获取指定位置范围内的地理位置信息集合|\n\n#### 注意\n- 3.2版本后才有该功能\n- type geokey=zset\n- 删除操作 zrem key member\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（三）其他功能.md","raw":"---\ntitle: redis详解（三）其他功能\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n### 慢查询\n#### 生命周期\n1.client发送命令到redis\n2.redis排队\n3.redis执行命令（慢查询发生阶段）\n4.redis返回结果到客户端\n\n#### 两个配置\n##### slowlog-max-len\n- 先进先出队列\n- 固定长度\n- 保存在内存中\n- config get slowlog-max-len=128\n##### slowlog-log-slower-than\n- 慢查询阈值（单位：微秒）\n- slowlog-log-slower-than=0，记录所有命令\n- config get slowlog-log-slower-than=10000\n\n#### 三个命令\n- slowlog get [n]:获取慢查询队列\n- slowlog len:获取慢查询队列长度\n- slowlog reset:清空慢查询队列\n\n#### 运维经验\n- slowlog-max-len不用设置过大，默认10ms，通常设置1ms\n- slowlog-log-slower-than不要设置过小，通常设置1000\n- 理解生命周期\n- 定期持久化慢查询\n\n### pipeline\n#### 定义\n- client批量打包命令发给server\n- server处理n次后按顺序返回结果\n\n|命令|N个命令操作|1次pipeline(n个命令)|\n|-|-|-|\n|时间|n次网络+n次命令|1次网络+n次命令|\n|数据量|1条命令|n条命令|\n- redis的命令时间是微妙级别\n- pipeline每次条数要控制（网络时间）\n\n#### 与原生操作对比\n- 非原子命令\n#### 使用建议\n- 注意每次pipeline携带数据量\n- pipeline每次只能作用在一个redis节点\n- M操作和pipeline区别\n\n### 发布订阅\n#### 角色\n- 发布者\n- 订阅者\n- 频道\n\n#### 模型\n发布者发布消息到redis server，server把消息发送到订阅了指定频道的订阅者\n\n#### 命令\n|命令|说明|\n|-|-|\n|publish channel message|发布命令|\n|subscribe [channel]|订阅一个或多个频道|\n|unsubscribe [channel]|取消订阅一个或多个频道|\n|psubscribe [pattern...]|订阅模式|\n|punsubscribe [pattern...]|退订指定的模式|\n|pubsub channels |列出至少有一个订阅者的频道|\n|pubsub numsub[channel...] |列出给定频道的订阅者数量|\n|pubsub numpat |列出被订阅模式数量|\n\n#### 发布订阅与消息队列\n- 发布订阅模式中，订阅了频道的所有订阅者都能收到消息\n- 消息队列模式中，订阅了频道的订阅者中只有一个能收到消息\n\n### Bitmap\n#### 定义\n- 字符串对应ascii的二进制\n\n#### 命令\n|命令|说明|\n|-|-|\n|setbit key offset value|给位图指定索引设置值|\n|getbit key offset |获取位图指定索引值|\n|bitcount key [start end] |获取位图指定范围（start到end,单位是字节，如果不指定就是获取全部）位值为1的个数|\n|bitop op destkey key [key...] |做多个bitmap的交集、并集、非、异或操作并将结果保存在destkey中|\n|bitpos key targetBit[start][end]|计算位图指定范围（start到end,单位是字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置|\n\n#### 应用\n- 独立用户统计，1亿用户，5千万独立\n\n|数据类型|每个userid占用空间|需要存储用户量|全部内存量|\n|-|-|-|-|\n|set|32位|5000 0000|32位*5000 0000=200MB|\n|bitmap|1位|10000 0000|1位*10000 0000=12.5MB|\n\n- 1亿用户，10万个独立用户\n\n|数据类型|每个userid占用空间|需要存储用户量|全部内存量|\n|-|-|-|-|\n|set|32位|100 0000|32位*100 0000=4MB|\n|bitmap|1位|10000 0000|1位*10000 0000=12.5MB|\n\n#### 注意\n- type=string，最大512MB\n- 注意setbit偏移量，可能有较大耗时\n### HyperLogLog\n#### 定义\n- 基于HyperLogLog算法：极小空间完成独立数量统计\n- 本质还是字符串\n\n#### 命令\n|命令|说明|\n|-|-|\n|pfadd key element [element...]|向hyperloglog添加元素|\n|pfcount key [key...]|计算hyperloglog独立总数|\n|pfmerge destkey sourekey [sourcekey...]|合并多个hyperloglog|\n\n#### 注意\n- 错误率0.81%\n- 无法取出单条数据\n\n### GEO\n#### 定义\n- 地理信息定位，存储经纬度，计算两地距离，范围计算等\n\n#### 命令\n|命令|说明|\n|-|-|\n|geoadd key longitude latitude member [longitude latitude member...]|增加地理位置信息|\n|geopos key member[member...]|获取地理位置信息|\n|geodist key member1 member2 [unit]|获取两个地理位置的距离，unit：m,km,mi,ft|\n|georadius key longitude latitude radius m/km/ft/mi [withcoord][withdist][withhash][COUNT count][asc/desc][store key][storedist key]|获取指定位置范围内的地理位置信息集合|\n\n#### 注意\n- 3.2版本后才有该功能\n- type geokey=zset\n- 删除操作 zrem key member\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（三）其他功能","published":1,"updated":"2019-11-16T03:31:59.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolb003dyos6uepijkxs","content":"<h3 id=\"慢查询\"><a href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"></a>慢查询</h3><h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>1.client发送命令到redis<br>2.redis排队<br>3.redis执行命令（慢查询发生阶段）<br>4.redis返回结果到客户端</p>\n<h4 id=\"两个配置\"><a href=\"#两个配置\" class=\"headerlink\" title=\"两个配置\"></a>两个配置</h4><h5 id=\"slowlog-max-len\"><a href=\"#slowlog-max-len\" class=\"headerlink\" title=\"slowlog-max-len\"></a>slowlog-max-len</h5><ul>\n<li>先进先出队列</li>\n<li>固定长度</li>\n<li>保存在内存中</li>\n<li>config get slowlog-max-len=128<h5 id=\"slowlog-log-slower-than\"><a href=\"#slowlog-log-slower-than\" class=\"headerlink\" title=\"slowlog-log-slower-than\"></a>slowlog-log-slower-than</h5></li>\n<li>慢查询阈值（单位：微秒）</li>\n<li>slowlog-log-slower-than=0，记录所有命令</li>\n<li>config get slowlog-log-slower-than=10000</li>\n</ul>\n<h4 id=\"三个命令\"><a href=\"#三个命令\" class=\"headerlink\" title=\"三个命令\"></a>三个命令</h4><ul>\n<li>slowlog get [n]:获取慢查询队列</li>\n<li>slowlog len:获取慢查询队列长度</li>\n<li>slowlog reset:清空慢查询队列</li>\n</ul>\n<h4 id=\"运维经验\"><a href=\"#运维经验\" class=\"headerlink\" title=\"运维经验\"></a>运维经验</h4><ul>\n<li>slowlog-max-len不用设置过大，默认10ms，通常设置1ms</li>\n<li>slowlog-log-slower-than不要设置过小，通常设置1000</li>\n<li>理解生命周期</li>\n<li>定期持久化慢查询</li>\n</ul>\n<h3 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>client批量打包命令发给server</li>\n<li>server处理n次后按顺序返回结果</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>N个命令操作</th>\n<th>1次pipeline(n个命令)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>时间</td>\n<td>n次网络+n次命令</td>\n<td>1次网络+n次命令</td>\n</tr>\n<tr>\n<td>数据量</td>\n<td>1条命令</td>\n<td>n条命令</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>redis的命令时间是微妙级别</li>\n<li>pipeline每次条数要控制（网络时间）</li>\n</ul>\n<h4 id=\"与原生操作对比\"><a href=\"#与原生操作对比\" class=\"headerlink\" title=\"与原生操作对比\"></a>与原生操作对比</h4><ul>\n<li>非原子命令<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4></li>\n<li>注意每次pipeline携带数据量</li>\n<li>pipeline每次只能作用在一个redis节点</li>\n<li>M操作和pipeline区别</li>\n</ul>\n<h3 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h3><h4 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h4><ul>\n<li>发布者</li>\n<li>订阅者</li>\n<li>频道</li>\n</ul>\n<h4 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h4><p>发布者发布消息到redis server，server把消息发送到订阅了指定频道的订阅者</p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>publish channel message</td>\n<td>发布命令</td>\n</tr>\n<tr>\n<td>subscribe [channel]</td>\n<td>订阅一个或多个频道</td>\n</tr>\n<tr>\n<td>unsubscribe [channel]</td>\n<td>取消订阅一个或多个频道</td>\n</tr>\n<tr>\n<td>psubscribe [pattern…]</td>\n<td>订阅模式</td>\n</tr>\n<tr>\n<td>punsubscribe [pattern…]</td>\n<td>退订指定的模式</td>\n</tr>\n<tr>\n<td>pubsub channels</td>\n<td>列出至少有一个订阅者的频道</td>\n</tr>\n<tr>\n<td>pubsub numsub[channel…]</td>\n<td>列出给定频道的订阅者数量</td>\n</tr>\n<tr>\n<td>pubsub numpat</td>\n<td>列出被订阅模式数量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"发布订阅与消息队列\"><a href=\"#发布订阅与消息队列\" class=\"headerlink\" title=\"发布订阅与消息队列\"></a>发布订阅与消息队列</h4><ul>\n<li>发布订阅模式中，订阅了频道的所有订阅者都能收到消息</li>\n<li>消息队列模式中，订阅了频道的订阅者中只有一个能收到消息</li>\n</ul>\n<h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>字符串对应ascii的二进制</li>\n</ul>\n<h4 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setbit key offset value</td>\n<td>给位图指定索引设置值</td>\n</tr>\n<tr>\n<td>getbit key offset</td>\n<td>获取位图指定索引值</td>\n</tr>\n<tr>\n<td>bitcount key [start end]</td>\n<td>获取位图指定范围（start到end,单位是字节，如果不指定就是获取全部）位值为1的个数</td>\n</tr>\n<tr>\n<td>bitop op destkey key [key…]</td>\n<td>做多个bitmap的交集、并集、非、异或操作并将结果保存在destkey中</td>\n</tr>\n<tr>\n<td>bitpos key targetBit[start][end]</td>\n<td>计算位图指定范围（start到end,单位是字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><ul>\n<li>独立用户统计，1亿用户，5千万独立</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>每个userid占用空间</th>\n<th>需要存储用户量</th>\n<th>全部内存量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>32位</td>\n<td>5000 0000</td>\n<td>32位*5000 0000=200MB</td>\n</tr>\n<tr>\n<td>bitmap</td>\n<td>1位</td>\n<td>10000 0000</td>\n<td>1位*10000 0000=12.5MB</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>1亿用户，10万个独立用户</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>每个userid占用空间</th>\n<th>需要存储用户量</th>\n<th>全部内存量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>32位</td>\n<td>100 0000</td>\n<td>32位*100 0000=4MB</td>\n</tr>\n<tr>\n<td>bitmap</td>\n<td>1位</td>\n<td>10000 0000</td>\n<td>1位*10000 0000=12.5MB</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>type=string，最大512MB</li>\n<li>注意setbit偏移量，可能有较大耗时<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4></li>\n<li>基于HyperLogLog算法：极小空间完成独立数量统计</li>\n<li>本质还是字符串</li>\n</ul>\n<h4 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pfadd key element [element…]</td>\n<td>向hyperloglog添加元素</td>\n</tr>\n<tr>\n<td>pfcount key [key…]</td>\n<td>计算hyperloglog独立总数</td>\n</tr>\n<tr>\n<td>pfmerge destkey sourekey [sourcekey…]</td>\n<td>合并多个hyperloglog</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>错误率0.81%</li>\n<li>无法取出单条数据</li>\n</ul>\n<h3 id=\"GEO\"><a href=\"#GEO\" class=\"headerlink\" title=\"GEO\"></a>GEO</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>地理信息定位，存储经纬度，计算两地距离，范围计算等</li>\n</ul>\n<h4 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>geoadd key longitude latitude member [longitude latitude member…]</td>\n<td>增加地理位置信息</td>\n</tr>\n<tr>\n<td>geopos key member[member…]</td>\n<td>获取地理位置信息</td>\n</tr>\n<tr>\n<td>geodist key member1 member2 [unit]</td>\n<td>获取两个地理位置的距离，unit：m,km,mi,ft</td>\n</tr>\n<tr>\n<td>georadius key longitude latitude radius m/km/ft/mi [withcoord][withdist][withhash][COUNT count][asc/desc][store key][storedist key]</td>\n<td>获取指定位置范围内的地理位置信息集合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>3.2版本后才有该功能</li>\n<li>type geokey=zset</li>\n<li>删除操作 zrem key member<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"慢查询\"><a href=\"#慢查询\" class=\"headerlink\" title=\"慢查询\"></a>慢查询</h3><h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>1.client发送命令到redis<br>2.redis排队<br>3.redis执行命令（慢查询发生阶段）<br>4.redis返回结果到客户端</p>\n<h4 id=\"两个配置\"><a href=\"#两个配置\" class=\"headerlink\" title=\"两个配置\"></a>两个配置</h4><h5 id=\"slowlog-max-len\"><a href=\"#slowlog-max-len\" class=\"headerlink\" title=\"slowlog-max-len\"></a>slowlog-max-len</h5><ul>\n<li>先进先出队列</li>\n<li>固定长度</li>\n<li>保存在内存中</li>\n<li>config get slowlog-max-len=128<h5 id=\"slowlog-log-slower-than\"><a href=\"#slowlog-log-slower-than\" class=\"headerlink\" title=\"slowlog-log-slower-than\"></a>slowlog-log-slower-than</h5></li>\n<li>慢查询阈值（单位：微秒）</li>\n<li>slowlog-log-slower-than=0，记录所有命令</li>\n<li>config get slowlog-log-slower-than=10000</li>\n</ul>\n<h4 id=\"三个命令\"><a href=\"#三个命令\" class=\"headerlink\" title=\"三个命令\"></a>三个命令</h4><ul>\n<li>slowlog get [n]:获取慢查询队列</li>\n<li>slowlog len:获取慢查询队列长度</li>\n<li>slowlog reset:清空慢查询队列</li>\n</ul>\n<h4 id=\"运维经验\"><a href=\"#运维经验\" class=\"headerlink\" title=\"运维经验\"></a>运维经验</h4><ul>\n<li>slowlog-max-len不用设置过大，默认10ms，通常设置1ms</li>\n<li>slowlog-log-slower-than不要设置过小，通常设置1000</li>\n<li>理解生命周期</li>\n<li>定期持久化慢查询</li>\n</ul>\n<h3 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>client批量打包命令发给server</li>\n<li>server处理n次后按顺序返回结果</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>N个命令操作</th>\n<th>1次pipeline(n个命令)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>时间</td>\n<td>n次网络+n次命令</td>\n<td>1次网络+n次命令</td>\n</tr>\n<tr>\n<td>数据量</td>\n<td>1条命令</td>\n<td>n条命令</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>redis的命令时间是微妙级别</li>\n<li>pipeline每次条数要控制（网络时间）</li>\n</ul>\n<h4 id=\"与原生操作对比\"><a href=\"#与原生操作对比\" class=\"headerlink\" title=\"与原生操作对比\"></a>与原生操作对比</h4><ul>\n<li>非原子命令<h4 id=\"使用建议\"><a href=\"#使用建议\" class=\"headerlink\" title=\"使用建议\"></a>使用建议</h4></li>\n<li>注意每次pipeline携带数据量</li>\n<li>pipeline每次只能作用在一个redis节点</li>\n<li>M操作和pipeline区别</li>\n</ul>\n<h3 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h3><h4 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h4><ul>\n<li>发布者</li>\n<li>订阅者</li>\n<li>频道</li>\n</ul>\n<h4 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h4><p>发布者发布消息到redis server，server把消息发送到订阅了指定频道的订阅者</p>\n<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>publish channel message</td>\n<td>发布命令</td>\n</tr>\n<tr>\n<td>subscribe [channel]</td>\n<td>订阅一个或多个频道</td>\n</tr>\n<tr>\n<td>unsubscribe [channel]</td>\n<td>取消订阅一个或多个频道</td>\n</tr>\n<tr>\n<td>psubscribe [pattern…]</td>\n<td>订阅模式</td>\n</tr>\n<tr>\n<td>punsubscribe [pattern…]</td>\n<td>退订指定的模式</td>\n</tr>\n<tr>\n<td>pubsub channels</td>\n<td>列出至少有一个订阅者的频道</td>\n</tr>\n<tr>\n<td>pubsub numsub[channel…]</td>\n<td>列出给定频道的订阅者数量</td>\n</tr>\n<tr>\n<td>pubsub numpat</td>\n<td>列出被订阅模式数量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"发布订阅与消息队列\"><a href=\"#发布订阅与消息队列\" class=\"headerlink\" title=\"发布订阅与消息队列\"></a>发布订阅与消息队列</h4><ul>\n<li>发布订阅模式中，订阅了频道的所有订阅者都能收到消息</li>\n<li>消息队列模式中，订阅了频道的订阅者中只有一个能收到消息</li>\n</ul>\n<h3 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>字符串对应ascii的二进制</li>\n</ul>\n<h4 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setbit key offset value</td>\n<td>给位图指定索引设置值</td>\n</tr>\n<tr>\n<td>getbit key offset</td>\n<td>获取位图指定索引值</td>\n</tr>\n<tr>\n<td>bitcount key [start end]</td>\n<td>获取位图指定范围（start到end,单位是字节，如果不指定就是获取全部）位值为1的个数</td>\n</tr>\n<tr>\n<td>bitop op destkey key [key…]</td>\n<td>做多个bitmap的交集、并集、非、异或操作并将结果保存在destkey中</td>\n</tr>\n<tr>\n<td>bitpos key targetBit[start][end]</td>\n<td>计算位图指定范围（start到end,单位是字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><ul>\n<li>独立用户统计，1亿用户，5千万独立</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>每个userid占用空间</th>\n<th>需要存储用户量</th>\n<th>全部内存量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>32位</td>\n<td>5000 0000</td>\n<td>32位*5000 0000=200MB</td>\n</tr>\n<tr>\n<td>bitmap</td>\n<td>1位</td>\n<td>10000 0000</td>\n<td>1位*10000 0000=12.5MB</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>1亿用户，10万个独立用户</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>每个userid占用空间</th>\n<th>需要存储用户量</th>\n<th>全部内存量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>set</td>\n<td>32位</td>\n<td>100 0000</td>\n<td>32位*100 0000=4MB</td>\n</tr>\n<tr>\n<td>bitmap</td>\n<td>1位</td>\n<td>10000 0000</td>\n<td>1位*10000 0000=12.5MB</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>type=string，最大512MB</li>\n<li>注意setbit偏移量，可能有较大耗时<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4></li>\n<li>基于HyperLogLog算法：极小空间完成独立数量统计</li>\n<li>本质还是字符串</li>\n</ul>\n<h4 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>pfadd key element [element…]</td>\n<td>向hyperloglog添加元素</td>\n</tr>\n<tr>\n<td>pfcount key [key…]</td>\n<td>计算hyperloglog独立总数</td>\n</tr>\n<tr>\n<td>pfmerge destkey sourekey [sourcekey…]</td>\n<td>合并多个hyperloglog</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>错误率0.81%</li>\n<li>无法取出单条数据</li>\n</ul>\n<h3 id=\"GEO\"><a href=\"#GEO\" class=\"headerlink\" title=\"GEO\"></a>GEO</h3><h4 id=\"定义-3\"><a href=\"#定义-3\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>地理信息定位，存储经纬度，计算两地距离，范围计算等</li>\n</ul>\n<h4 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>geoadd key longitude latitude member [longitude latitude member…]</td>\n<td>增加地理位置信息</td>\n</tr>\n<tr>\n<td>geopos key member[member…]</td>\n<td>获取地理位置信息</td>\n</tr>\n<tr>\n<td>geodist key member1 member2 [unit]</td>\n<td>获取两个地理位置的距离，unit：m,km,mi,ft</td>\n</tr>\n<tr>\n<td>georadius key longitude latitude radius m/km/ft/mi [withcoord][withdist][withhash][COUNT count][asc/desc][store key][storedist key]</td>\n<td>获取指定位置范围内的地理位置信息集合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>3.2版本后才有该功能</li>\n<li>type geokey=zset</li>\n<li>删除操作 zrem key member<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis 详解（二）API","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n### 通用命令\n#### 通用命令\n\n|命令|说明|时间复杂度|\n|-|-|-|\n|keys [pattern]|遍历所有 key|O(n)|\n|dbsize|计算 key 的总数|O(1)|\n|del key [key...]|删除指定 key-value|O(1)|\n|exist key|检查 key 是否存在|O(1)|\n|expire key seconds|key 在 seconds 秒后过期|O(1)|\n|type key|返回 key 的类型|O(1)|\n|ttl key|查看 key 剩余的过期时间|O(1)|\n|persist key|去掉 key 的过期时间（永不过期）|O(1)|\n\n#### 数据结构和内部编码\n##### redis object\n- 数据类型（type）\nstring hash list set sorted set\n- 编码方式（encoding）\nraw int ziplist linkedlist hashmap intset\n- 数据指针（ptr）\n- 虚拟内存（vm）\n#### 单线程架构\n##### 单线程为什么快\n- 纯内存\n- 非阻塞 IO\n- 避免线程切换和竞态切换\n##### 注意\n- 一次只运行一条命令 \n- 拒绝长（慢）命令\nkeys,flushall,flushdb,slow lua script,muti/exec,operate big value(colletion)\n- 实际上不是真正的单线程\nfysnc file descriptor\nclose file descriptor\n### 字符串\n#### 结构\n|key| value|\n|-|-|\n|ke|val|\n|count|1|\n|bits|1011101|\n\n- 最大限制 512M\n#### 场景\n- 缓存\n- 计数器\n- 分布式锁\n- 分布式id生成器\n#### 命令\n\n|命令|说明|时间复杂度|\n|-|-|-|\n|get key |获取 key 对应的 value|O(1)|\n|set key value |不管key是否存在，设置 key-value|O(1)|\n|setnx key value |key不存在，才设置|O(1)|\n|set key value xx |key存在才设置|O(1)|\n|del key |删除 key-value|O(1)|\n|incr key |key自增1，如果key不存在，自增后get(key)=1|O(1)|\n|decr key |key自减1，如果key不存在，自减后get(key)=-1|O(1)|\n|incrby key k |key自增k，如果key不存在，自增后get(key)=k|O(1)|\n|decrby key k |key自减k，如果key不存在，自减后get(key)=-k|O(1)|\n|mget key1 key2 key3... |批量获取key的value，原子操作|O(n)|\n|mset key1 value1 key2 value2 .. |批量设置key-value|O(n)|\n|getset key newvalue |set key newvalue并返回旧value|O(1)|\n|append key value |将value追加到旧value|O(1)|\n|strlen key |返回字符串长度|O(1)|\n|incrbyfloat key float |增加key对应的值float|O(1)|\n|getrange key start end|获取字符串指定下标所有值|O(1)|\n|setrange key index value|设置指定下标所有对应的值|O(1)|\n\n\n### 哈希\n#### 结构\n|key|field| value|\n|-|-|-|\n|user:1|name|tom|\n||age|20|\n||sex|male|\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|hget key field|获取hash key对应field的value|O(1)|\n|hset key field value|设置hash key对应field的value|O(1)|\n|hdel key field|删除hash key对应field的value|O(1)|\n|hexists key field|判断hash key是否有field|O(1)|\n|hlen key|获取hash key field数量|O(1)|\n|hmget key field1 field2...|批量获取hash key对应一批field的value|O(n)|\n|hmset key field1 value1 field2 value2...|批量设置hash key对应一批field的value|O(n)|\n|hgetall key|返回hash key对应所有的field和value|O(n)|\n|hvals key|返回hash key对应所有field的value|O(n)|\n|hkeys key|返回hash key对应所有field|O(n)|\n|hmset key field1 value1 field2 value2...|批量设置hash key对应一批field的value|O(n)|\n|hsetnx key field value|设置hash key对应的field的value(如field已经存在，则失败)|O(1)|\n|hincrby key field intcounter|hash key对应的field的value自增intcounter|O(1)|\n|hincrbyfloat key field floatcounter|hincrby浮点数版本|O(1)|\n\n#### 方案比较\nstring v1\n- user:1=> {\"name\":tom,\"age\":20}\n\nstring v2\n- user:1:name=>tom\n- user:1:age=>20\n\nhash\n- user:1=>name=>tom\n- user:1=>age=>20\n\n|命令|优点| 缺点|\n|-|-|-|\n|string v1|编程简单，节约内存|序列化操作开销大，设置属性要操作整个数据|\n|string v2|直观，可以部分更新|内存占用较大，key较分散|\n|hash|直观，节省空间，可以部分更新|编程稍微复杂，ttl不好控制|\n\n### 列表\n#### 结构\n|key| elements|\n|-|-|\n|user:1:msg|a,b,c,d|\n#### 特点\n- 有序\n- 可以重复\n- 左右两边插入弹出\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|rpush key value1 value2...|从列表右端插入值（1-N个）|O(1-n)|\n|lpush key value1 value2...|从列表左端插入值（1-N个）|O(1-n)|\n|lpop key|从列表左侧弹出一个value|O(1)|\n|rpop key|从列表右侧弹出一个value|O(1)|\n|linsert key before/afer value newValue|在list指定的值前/后插入newValue|O(n)|\n|lrem key count value|根据count值，从列表删除所有value相等的项|O(n)|\n|ltrim key start end|按照索引范围修剪列表|O(n)|\n|lrange key start end|获取列表指定索引范围所有value|O(n)|\n|lindex key index |获取列表指定索引的value|O(n)|\n|llen key|获取列表长度|O(1)|\n|lset key index newValue|设置列表指定索引值为newValue|O(n)|\n|blpop key timeout|lpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|\n|brpop key timeout|rpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|\n\nlrem key count value\n- count>0，从左到右删除最多count个value相等的项\n- count<0，从右到左删除最多math.abs(count)个value相等的项\n- count=0，删除所有value相等的项\n#### 应用场景\n- lpush+lpop=stack\n- lpush+rpop=queue\n- lpush+ltrim=capped collection\n- lpush+brpop=message queue\n### 集合\n#### 结构\n|key| elements|\n|-|-|\n|user:1:follow|music,sport,read|\n\n#### 特点\n- 无序\n- 无重复\n- 集合间操作\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|sadd key element|向集合key添加element(如果已存在，添加失败)|O(1)|\n|srem key element|删除集合key中的element|O(1)|\n|scard key|计算集合大小||\n|sismember key element|判断element是否在集合中||\n|srandmember key count|从集合中随机挑count个元素，不会破坏家伙||\n|spop key |从集合中随机弹出一个元素，元素从集合移除||\n|smembers key |获取集合所有元素||\n|sdiff key1 key2 |差集||\n|sinter key1 key2 |交集||\n|sunion key1 key2 |并集||\n|sdiff/sinter/sunion + store destkey|将差集、交集、并集结果报错在destkey中||\n\n#### 应用场景\nsadd=tagging\nspop/srandmember=randon item\nsadd+sinter=social graph\n\n### 有序集合\n#### 结构\n|key| score|value|\n|-|-|-|\n|user:rank|1|tom|\n|user:rank|5|peter|\n\n#### 比较\n|有序集合|集合|\n|-|-|\n|无重复元素|无重复元素|\n|有序|无序|\n|element+score|element|\n\n|有序集合|列表|\n|-|-|\n|无重复元素|有重复元素|\n|有序|有序|\n|element+score|element|\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|zadd key score element|添加score和element（可以多对）|O(logN)|\n|zrem key element|删除元素（可以多个）|O(1)|\n|zscore key element|返回元素分数|O(1)|\n|zincrby key increScore element|增加或减少元素分数|O(1)|\n|zcard key|返回元素总个数|O(1)|\n|zrange key start end [WITHSCORES]|返回指定索引范围内的升序元素[分值]|O(logN+m)|\n|zrangebyscore key minScore maxScore[WITHSCORES]|返回指定分数范围内的升序元素[分值]|O(logN+m)|\n|zcount key minScore maxScore|返回有序集合内在指定分数范围内的个数|O(logN+m)|\n|zremrangebyrank key start end|删除指定排名内的升序元素|O(logN+m)|\n|zremrangebyscore key minScore maxScore|删除指定分数内的升序元素|O(logN+m)|\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（二）API.md","raw":"---\ntitle: redis 详解（二）API\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n### 通用命令\n#### 通用命令\n\n|命令|说明|时间复杂度|\n|-|-|-|\n|keys [pattern]|遍历所有 key|O(n)|\n|dbsize|计算 key 的总数|O(1)|\n|del key [key...]|删除指定 key-value|O(1)|\n|exist key|检查 key 是否存在|O(1)|\n|expire key seconds|key 在 seconds 秒后过期|O(1)|\n|type key|返回 key 的类型|O(1)|\n|ttl key|查看 key 剩余的过期时间|O(1)|\n|persist key|去掉 key 的过期时间（永不过期）|O(1)|\n\n#### 数据结构和内部编码\n##### redis object\n- 数据类型（type）\nstring hash list set sorted set\n- 编码方式（encoding）\nraw int ziplist linkedlist hashmap intset\n- 数据指针（ptr）\n- 虚拟内存（vm）\n#### 单线程架构\n##### 单线程为什么快\n- 纯内存\n- 非阻塞 IO\n- 避免线程切换和竞态切换\n##### 注意\n- 一次只运行一条命令 \n- 拒绝长（慢）命令\nkeys,flushall,flushdb,slow lua script,muti/exec,operate big value(colletion)\n- 实际上不是真正的单线程\nfysnc file descriptor\nclose file descriptor\n### 字符串\n#### 结构\n|key| value|\n|-|-|\n|ke|val|\n|count|1|\n|bits|1011101|\n\n- 最大限制 512M\n#### 场景\n- 缓存\n- 计数器\n- 分布式锁\n- 分布式id生成器\n#### 命令\n\n|命令|说明|时间复杂度|\n|-|-|-|\n|get key |获取 key 对应的 value|O(1)|\n|set key value |不管key是否存在，设置 key-value|O(1)|\n|setnx key value |key不存在，才设置|O(1)|\n|set key value xx |key存在才设置|O(1)|\n|del key |删除 key-value|O(1)|\n|incr key |key自增1，如果key不存在，自增后get(key)=1|O(1)|\n|decr key |key自减1，如果key不存在，自减后get(key)=-1|O(1)|\n|incrby key k |key自增k，如果key不存在，自增后get(key)=k|O(1)|\n|decrby key k |key自减k，如果key不存在，自减后get(key)=-k|O(1)|\n|mget key1 key2 key3... |批量获取key的value，原子操作|O(n)|\n|mset key1 value1 key2 value2 .. |批量设置key-value|O(n)|\n|getset key newvalue |set key newvalue并返回旧value|O(1)|\n|append key value |将value追加到旧value|O(1)|\n|strlen key |返回字符串长度|O(1)|\n|incrbyfloat key float |增加key对应的值float|O(1)|\n|getrange key start end|获取字符串指定下标所有值|O(1)|\n|setrange key index value|设置指定下标所有对应的值|O(1)|\n\n\n### 哈希\n#### 结构\n|key|field| value|\n|-|-|-|\n|user:1|name|tom|\n||age|20|\n||sex|male|\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|hget key field|获取hash key对应field的value|O(1)|\n|hset key field value|设置hash key对应field的value|O(1)|\n|hdel key field|删除hash key对应field的value|O(1)|\n|hexists key field|判断hash key是否有field|O(1)|\n|hlen key|获取hash key field数量|O(1)|\n|hmget key field1 field2...|批量获取hash key对应一批field的value|O(n)|\n|hmset key field1 value1 field2 value2...|批量设置hash key对应一批field的value|O(n)|\n|hgetall key|返回hash key对应所有的field和value|O(n)|\n|hvals key|返回hash key对应所有field的value|O(n)|\n|hkeys key|返回hash key对应所有field|O(n)|\n|hmset key field1 value1 field2 value2...|批量设置hash key对应一批field的value|O(n)|\n|hsetnx key field value|设置hash key对应的field的value(如field已经存在，则失败)|O(1)|\n|hincrby key field intcounter|hash key对应的field的value自增intcounter|O(1)|\n|hincrbyfloat key field floatcounter|hincrby浮点数版本|O(1)|\n\n#### 方案比较\nstring v1\n- user:1=> {\"name\":tom,\"age\":20}\n\nstring v2\n- user:1:name=>tom\n- user:1:age=>20\n\nhash\n- user:1=>name=>tom\n- user:1=>age=>20\n\n|命令|优点| 缺点|\n|-|-|-|\n|string v1|编程简单，节约内存|序列化操作开销大，设置属性要操作整个数据|\n|string v2|直观，可以部分更新|内存占用较大，key较分散|\n|hash|直观，节省空间，可以部分更新|编程稍微复杂，ttl不好控制|\n\n### 列表\n#### 结构\n|key| elements|\n|-|-|\n|user:1:msg|a,b,c,d|\n#### 特点\n- 有序\n- 可以重复\n- 左右两边插入弹出\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|rpush key value1 value2...|从列表右端插入值（1-N个）|O(1-n)|\n|lpush key value1 value2...|从列表左端插入值（1-N个）|O(1-n)|\n|lpop key|从列表左侧弹出一个value|O(1)|\n|rpop key|从列表右侧弹出一个value|O(1)|\n|linsert key before/afer value newValue|在list指定的值前/后插入newValue|O(n)|\n|lrem key count value|根据count值，从列表删除所有value相等的项|O(n)|\n|ltrim key start end|按照索引范围修剪列表|O(n)|\n|lrange key start end|获取列表指定索引范围所有value|O(n)|\n|lindex key index |获取列表指定索引的value|O(n)|\n|llen key|获取列表长度|O(1)|\n|lset key index newValue|设置列表指定索引值为newValue|O(n)|\n|blpop key timeout|lpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|\n|brpop key timeout|rpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|\n\nlrem key count value\n- count>0，从左到右删除最多count个value相等的项\n- count<0，从右到左删除最多math.abs(count)个value相等的项\n- count=0，删除所有value相等的项\n#### 应用场景\n- lpush+lpop=stack\n- lpush+rpop=queue\n- lpush+ltrim=capped collection\n- lpush+brpop=message queue\n### 集合\n#### 结构\n|key| elements|\n|-|-|\n|user:1:follow|music,sport,read|\n\n#### 特点\n- 无序\n- 无重复\n- 集合间操作\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|sadd key element|向集合key添加element(如果已存在，添加失败)|O(1)|\n|srem key element|删除集合key中的element|O(1)|\n|scard key|计算集合大小||\n|sismember key element|判断element是否在集合中||\n|srandmember key count|从集合中随机挑count个元素，不会破坏家伙||\n|spop key |从集合中随机弹出一个元素，元素从集合移除||\n|smembers key |获取集合所有元素||\n|sdiff key1 key2 |差集||\n|sinter key1 key2 |交集||\n|sunion key1 key2 |并集||\n|sdiff/sinter/sunion + store destkey|将差集、交集、并集结果报错在destkey中||\n\n#### 应用场景\nsadd=tagging\nspop/srandmember=randon item\nsadd+sinter=social graph\n\n### 有序集合\n#### 结构\n|key| score|value|\n|-|-|-|\n|user:rank|1|tom|\n|user:rank|5|peter|\n\n#### 比较\n|有序集合|集合|\n|-|-|\n|无重复元素|无重复元素|\n|有序|无序|\n|element+score|element|\n\n|有序集合|列表|\n|-|-|\n|无重复元素|有重复元素|\n|有序|有序|\n|element+score|element|\n\n#### 命令\n|命令|说明|时间复杂度|\n|-|-|-|\n|zadd key score element|添加score和element（可以多对）|O(logN)|\n|zrem key element|删除元素（可以多个）|O(1)|\n|zscore key element|返回元素分数|O(1)|\n|zincrby key increScore element|增加或减少元素分数|O(1)|\n|zcard key|返回元素总个数|O(1)|\n|zrange key start end [WITHSCORES]|返回指定索引范围内的升序元素[分值]|O(logN+m)|\n|zrangebyscore key minScore maxScore[WITHSCORES]|返回指定分数范围内的升序元素[分值]|O(logN+m)|\n|zcount key minScore maxScore|返回有序集合内在指定分数范围内的个数|O(logN+m)|\n|zremrangebyrank key start end|删除指定排名内的升序元素|O(logN+m)|\n|zremrangebyscore key minScore maxScore|删除指定分数内的升序元素|O(logN+m)|\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（二）API","published":1,"updated":"2019-11-15T06:01:52.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolc003hyos6k9mnq657","content":"<h3 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h3><h4 id=\"通用命令-1\"><a href=\"#通用命令-1\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keys [pattern]</td>\n<td>遍历所有 key</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>计算 key 的总数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>del key [key…]</td>\n<td>删除指定 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>exist key</td>\n<td>检查 key 是否存在</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>expire key seconds</td>\n<td>key 在 seconds 秒后过期</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>type key</td>\n<td>返回 key 的类型</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看 key 剩余的过期时间</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>persist key</td>\n<td>去掉 key 的过期时间（永不过期）</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"数据结构和内部编码\"><a href=\"#数据结构和内部编码\" class=\"headerlink\" title=\"数据结构和内部编码\"></a>数据结构和内部编码</h4><h5 id=\"redis-object\"><a href=\"#redis-object\" class=\"headerlink\" title=\"redis object\"></a>redis object</h5><ul>\n<li>数据类型（type）<br>string hash list set sorted set</li>\n<li>编码方式（encoding）<br>raw int ziplist linkedlist hashmap intset</li>\n<li>数据指针（ptr）</li>\n<li>虚拟内存（vm）<h4 id=\"单线程架构\"><a href=\"#单线程架构\" class=\"headerlink\" title=\"单线程架构\"></a>单线程架构</h4><h5 id=\"单线程为什么快\"><a href=\"#单线程为什么快\" class=\"headerlink\" title=\"单线程为什么快\"></a>单线程为什么快</h5></li>\n<li>纯内存</li>\n<li>非阻塞 IO</li>\n<li>避免线程切换和竞态切换<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5></li>\n<li>一次只运行一条命令 </li>\n<li>拒绝长（慢）命令<br>keys,flushall,flushdb,slow lua script,muti/exec,operate big value(colletion)</li>\n<li><p>实际上不是真正的单线程<br>fysnc file descriptor<br>close file descriptor</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>|key| value|<br>|-|-|<br>|ke|val|<br>|count|1|<br>|bits|1011101|</p>\n</li>\n<li><p>最大限制 512M</p>\n<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4></li>\n<li>缓存</li>\n<li>计数器</li>\n<li>分布式锁</li>\n<li>分布式id生成器<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get key</td>\n<td>获取 key 对应的 value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>set key value</td>\n<td>不管key是否存在，设置 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>setnx key value</td>\n<td>key不存在，才设置</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>set key value xx</td>\n<td>key存在才设置</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>删除 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incr key</td>\n<td>key自增1，如果key不存在，自增后get(key)=1</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>decr key</td>\n<td>key自减1，如果key不存在，自减后get(key)=-1</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incrby key k</td>\n<td>key自增k，如果key不存在，自增后get(key)=k</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>decrby key k</td>\n<td>key自减k，如果key不存在，自减后get(key)=-k</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>mget key1 key2 key3…</td>\n<td>批量获取key的value，原子操作</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>mset key1 value1 key2 value2 ..</td>\n<td>批量设置key-value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>getset key newvalue</td>\n<td>set key newvalue并返回旧value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>append key value</td>\n<td>将value追加到旧value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>strlen key</td>\n<td>返回字符串长度</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incrbyfloat key float</td>\n<td>增加key对应的值float</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>getrange key start end</td>\n<td>获取字符串指定下标所有值</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>setrange key index value</td>\n<td>设置指定下标所有对应的值</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h3><h4 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>field</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:1</td>\n<td>name</td>\n<td>tom</td>\n</tr>\n<tr>\n<td></td>\n<td>age</td>\n<td>20</td>\n</tr>\n<tr>\n<td></td>\n<td>sex</td>\n<td>male</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hget key field</td>\n<td>获取hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hset key field value</td>\n<td>设置hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hdel key field</td>\n<td>删除hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hexists key field</td>\n<td>判断hash key是否有field</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hlen key</td>\n<td>获取hash key field数量</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hmget key field1 field2…</td>\n<td>批量获取hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hmset key field1 value1 field2 value2…</td>\n<td>批量设置hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hgetall key</td>\n<td>返回hash key对应所有的field和value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hvals key</td>\n<td>返回hash key对应所有field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hkeys key</td>\n<td>返回hash key对应所有field</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hmset key field1 value1 field2 value2…</td>\n<td>批量设置hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hsetnx key field value</td>\n<td>设置hash key对应的field的value(如field已经存在，则失败)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hincrby key field intcounter</td>\n<td>hash key对应的field的value自增intcounter</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hincrbyfloat key field floatcounter</td>\n<td>hincrby浮点数版本</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"方案比较\"><a href=\"#方案比较\" class=\"headerlink\" title=\"方案比较\"></a>方案比较</h4><p>string v1</p>\n<ul>\n<li>user:1=&gt; {“name”:tom,”age”:20}</li>\n</ul>\n<p>string v2</p>\n<ul>\n<li>user:1:name=&gt;tom</li>\n<li>user:1:age=&gt;20</li>\n</ul>\n<p>hash</p>\n<ul>\n<li>user:1=&gt;name=&gt;tom</li>\n<li>user:1=&gt;age=&gt;20</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string v1</td>\n<td>编程简单，节约内存</td>\n<td>序列化操作开销大，设置属性要操作整个数据</td>\n</tr>\n<tr>\n<td>string v2</td>\n<td>直观，可以部分更新</td>\n<td>内存占用较大，key较分散</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>直观，节省空间，可以部分更新</td>\n<td>编程稍微复杂，ttl不好控制</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"结构-2\"><a href=\"#结构-2\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>elements</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:1:msg</td>\n<td>a,b,c,d</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>有序</li>\n<li>可以重复</li>\n<li>左右两边插入弹出<h4 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h4>|命令|说明|时间复杂度|<br>|-|-|-|<br>|rpush key value1 value2…|从列表右端插入值（1-N个）|O(1-n)|<br>|lpush key value1 value2…|从列表左端插入值（1-N个）|O(1-n)|<br>|lpop key|从列表左侧弹出一个value|O(1)|<br>|rpop key|从列表右侧弹出一个value|O(1)|<br>|linsert key before/afer value newValue|在list指定的值前/后插入newValue|O(n)|<br>|lrem key count value|根据count值，从列表删除所有value相等的项|O(n)|<br>|ltrim key start end|按照索引范围修剪列表|O(n)|<br>|lrange key start end|获取列表指定索引范围所有value|O(n)|<br>|lindex key index |获取列表指定索引的value|O(n)|<br>|llen key|获取列表长度|O(1)|<br>|lset key index newValue|设置列表指定索引值为newValue|O(n)|<br>|blpop key timeout|lpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|<br>|brpop key timeout|rpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|</li>\n</ul>\n<p>lrem key count value</p>\n<ul>\n<li>count&gt;0，从左到右删除最多count个value相等的项</li>\n<li>count&lt;0，从右到左删除最多math.abs(count)个value相等的项</li>\n<li>count=0，删除所有value相等的项<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4></li>\n<li>lpush+lpop=stack</li>\n<li>lpush+rpop=queue</li>\n<li>lpush+ltrim=capped collection</li>\n<li>lpush+brpop=message queue<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h4 id=\"结构-3\"><a href=\"#结构-3\" class=\"headerlink\" title=\"结构\"></a>结构</h4>|key| elements|<br>|-|-|<br>|user:1:follow|music,sport,read|</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>无序</li>\n<li>无重复</li>\n<li>集合间操作</li>\n</ul>\n<h4 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sadd key element</td>\n<td>向集合key添加element(如果已存在，添加失败)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>srem key element</td>\n<td>删除集合key中的element</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>scard key</td>\n<td>计算集合大小</td>\n<td></td>\n</tr>\n<tr>\n<td>sismember key element</td>\n<td>判断element是否在集合中</td>\n<td></td>\n</tr>\n<tr>\n<td>srandmember key count</td>\n<td>从集合中随机挑count个元素，不会破坏家伙</td>\n<td></td>\n</tr>\n<tr>\n<td>spop key</td>\n<td>从集合中随机弹出一个元素，元素从集合移除</td>\n<td></td>\n</tr>\n<tr>\n<td>smembers key</td>\n<td>获取集合所有元素</td>\n<td></td>\n</tr>\n<tr>\n<td>sdiff key1 key2</td>\n<td>差集</td>\n<td></td>\n</tr>\n<tr>\n<td>sinter key1 key2</td>\n<td>交集</td>\n<td></td>\n</tr>\n<tr>\n<td>sunion key1 key2</td>\n<td>并集</td>\n<td></td>\n</tr>\n<tr>\n<td>sdiff/sinter/sunion + store destkey</td>\n<td>将差集、交集、并集结果报错在destkey中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>sadd=tagging<br>spop/srandmember=randon item<br>sadd+sinter=social graph</p>\n<h3 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h3><h4 id=\"结构-4\"><a href=\"#结构-4\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>score</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:rank</td>\n<td>1</td>\n<td>tom</td>\n</tr>\n<tr>\n<td>user:rank</td>\n<td>5</td>\n<td>peter</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>有序集合</th>\n<th>集合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无重复元素</td>\n<td>无重复元素</td>\n</tr>\n<tr>\n<td>有序</td>\n<td>无序</td>\n</tr>\n<tr>\n<td>element+score</td>\n<td>element</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>有序集合</th>\n<th>列表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无重复元素</td>\n<td>有重复元素</td>\n</tr>\n<tr>\n<td>有序</td>\n<td>有序</td>\n</tr>\n<tr>\n<td>element+score</td>\n<td>element</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"命令-4\"><a href=\"#命令-4\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zadd key score element</td>\n<td>添加score和element（可以多对）</td>\n<td>O(logN)</td>\n</tr>\n<tr>\n<td>zrem key element</td>\n<td>删除元素（可以多个）</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zscore key element</td>\n<td>返回元素分数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zincrby key increScore element</td>\n<td>增加或减少元素分数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zcard key</td>\n<td>返回元素总个数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zrange key start end [WITHSCORES]</td>\n<td>返回指定索引范围内的升序元素[分值]</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zrangebyscore key minScore maxScore[WITHSCORES]</td>\n<td>返回指定分数范围内的升序元素[分值]</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zcount key minScore maxScore</td>\n<td>返回有序集合内在指定分数范围内的个数</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zremrangebyrank key start end</td>\n<td>删除指定排名内的升序元素</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zremrangebyscore key minScore maxScore</td>\n<td>删除指定分数内的升序元素</td>\n<td>O(logN+m)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"通用命令\"><a href=\"#通用命令\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h3><h4 id=\"通用命令-1\"><a href=\"#通用命令-1\" class=\"headerlink\" title=\"通用命令\"></a>通用命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keys [pattern]</td>\n<td>遍历所有 key</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>dbsize</td>\n<td>计算 key 的总数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>del key [key…]</td>\n<td>删除指定 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>exist key</td>\n<td>检查 key 是否存在</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>expire key seconds</td>\n<td>key 在 seconds 秒后过期</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>type key</td>\n<td>返回 key 的类型</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>ttl key</td>\n<td>查看 key 剩余的过期时间</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>persist key</td>\n<td>去掉 key 的过期时间（永不过期）</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"数据结构和内部编码\"><a href=\"#数据结构和内部编码\" class=\"headerlink\" title=\"数据结构和内部编码\"></a>数据结构和内部编码</h4><h5 id=\"redis-object\"><a href=\"#redis-object\" class=\"headerlink\" title=\"redis object\"></a>redis object</h5><ul>\n<li>数据类型（type）<br>string hash list set sorted set</li>\n<li>编码方式（encoding）<br>raw int ziplist linkedlist hashmap intset</li>\n<li>数据指针（ptr）</li>\n<li>虚拟内存（vm）<h4 id=\"单线程架构\"><a href=\"#单线程架构\" class=\"headerlink\" title=\"单线程架构\"></a>单线程架构</h4><h5 id=\"单线程为什么快\"><a href=\"#单线程为什么快\" class=\"headerlink\" title=\"单线程为什么快\"></a>单线程为什么快</h5></li>\n<li>纯内存</li>\n<li>非阻塞 IO</li>\n<li>避免线程切换和竞态切换<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5></li>\n<li>一次只运行一条命令 </li>\n<li>拒绝长（慢）命令<br>keys,flushall,flushdb,slow lua script,muti/exec,operate big value(colletion)</li>\n<li><p>实际上不是真正的单线程<br>fysnc file descriptor<br>close file descriptor</p>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>|key| value|<br>|-|-|<br>|ke|val|<br>|count|1|<br>|bits|1011101|</p>\n</li>\n<li><p>最大限制 512M</p>\n<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4></li>\n<li>缓存</li>\n<li>计数器</li>\n<li>分布式锁</li>\n<li>分布式id生成器<h4 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h4></li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get key</td>\n<td>获取 key 对应的 value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>set key value</td>\n<td>不管key是否存在，设置 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>setnx key value</td>\n<td>key不存在，才设置</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>set key value xx</td>\n<td>key存在才设置</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>del key</td>\n<td>删除 key-value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incr key</td>\n<td>key自增1，如果key不存在，自增后get(key)=1</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>decr key</td>\n<td>key自减1，如果key不存在，自减后get(key)=-1</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incrby key k</td>\n<td>key自增k，如果key不存在，自增后get(key)=k</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>decrby key k</td>\n<td>key自减k，如果key不存在，自减后get(key)=-k</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>mget key1 key2 key3…</td>\n<td>批量获取key的value，原子操作</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>mset key1 value1 key2 value2 ..</td>\n<td>批量设置key-value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>getset key newvalue</td>\n<td>set key newvalue并返回旧value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>append key value</td>\n<td>将value追加到旧value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>strlen key</td>\n<td>返回字符串长度</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>incrbyfloat key float</td>\n<td>增加key对应的值float</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>getrange key start end</td>\n<td>获取字符串指定下标所有值</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>setrange key index value</td>\n<td>设置指定下标所有对应的值</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h3><h4 id=\"结构-1\"><a href=\"#结构-1\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>field</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:1</td>\n<td>name</td>\n<td>tom</td>\n</tr>\n<tr>\n<td></td>\n<td>age</td>\n<td>20</td>\n</tr>\n<tr>\n<td></td>\n<td>sex</td>\n<td>male</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hget key field</td>\n<td>获取hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hset key field value</td>\n<td>设置hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hdel key field</td>\n<td>删除hash key对应field的value</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hexists key field</td>\n<td>判断hash key是否有field</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hlen key</td>\n<td>获取hash key field数量</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hmget key field1 field2…</td>\n<td>批量获取hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hmset key field1 value1 field2 value2…</td>\n<td>批量设置hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hgetall key</td>\n<td>返回hash key对应所有的field和value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hvals key</td>\n<td>返回hash key对应所有field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hkeys key</td>\n<td>返回hash key对应所有field</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hmset key field1 value1 field2 value2…</td>\n<td>批量设置hash key对应一批field的value</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>hsetnx key field value</td>\n<td>设置hash key对应的field的value(如field已经存在，则失败)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hincrby key field intcounter</td>\n<td>hash key对应的field的value自增intcounter</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>hincrbyfloat key field floatcounter</td>\n<td>hincrby浮点数版本</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"方案比较\"><a href=\"#方案比较\" class=\"headerlink\" title=\"方案比较\"></a>方案比较</h4><p>string v1</p>\n<ul>\n<li>user:1=&gt; {“name”:tom,”age”:20}</li>\n</ul>\n<p>string v2</p>\n<ul>\n<li>user:1:name=&gt;tom</li>\n<li>user:1:age=&gt;20</li>\n</ul>\n<p>hash</p>\n<ul>\n<li>user:1=&gt;name=&gt;tom</li>\n<li>user:1=&gt;age=&gt;20</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string v1</td>\n<td>编程简单，节约内存</td>\n<td>序列化操作开销大，设置属性要操作整个数据</td>\n</tr>\n<tr>\n<td>string v2</td>\n<td>直观，可以部分更新</td>\n<td>内存占用较大，key较分散</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>直观，节省空间，可以部分更新</td>\n<td>编程稍微复杂，ttl不好控制</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><h4 id=\"结构-2\"><a href=\"#结构-2\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>elements</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:1:msg</td>\n<td>a,b,c,d</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>有序</li>\n<li>可以重复</li>\n<li>左右两边插入弹出<h4 id=\"命令-2\"><a href=\"#命令-2\" class=\"headerlink\" title=\"命令\"></a>命令</h4>|命令|说明|时间复杂度|<br>|-|-|-|<br>|rpush key value1 value2…|从列表右端插入值（1-N个）|O(1-n)|<br>|lpush key value1 value2…|从列表左端插入值（1-N个）|O(1-n)|<br>|lpop key|从列表左侧弹出一个value|O(1)|<br>|rpop key|从列表右侧弹出一个value|O(1)|<br>|linsert key before/afer value newValue|在list指定的值前/后插入newValue|O(n)|<br>|lrem key count value|根据count值，从列表删除所有value相等的项|O(n)|<br>|ltrim key start end|按照索引范围修剪列表|O(n)|<br>|lrange key start end|获取列表指定索引范围所有value|O(n)|<br>|lindex key index |获取列表指定索引的value|O(n)|<br>|llen key|获取列表长度|O(1)|<br>|lset key index newValue|设置列表指定索引值为newValue|O(n)|<br>|blpop key timeout|lpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|<br>|brpop key timeout|rpop阻塞版本，timeout是阻塞超时时间，timeout=0为永不阻塞|O(1)|</li>\n</ul>\n<p>lrem key count value</p>\n<ul>\n<li>count&gt;0，从左到右删除最多count个value相等的项</li>\n<li>count&lt;0，从右到左删除最多math.abs(count)个value相等的项</li>\n<li>count=0，删除所有value相等的项<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4></li>\n<li>lpush+lpop=stack</li>\n<li>lpush+rpop=queue</li>\n<li>lpush+ltrim=capped collection</li>\n<li>lpush+brpop=message queue<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><h4 id=\"结构-3\"><a href=\"#结构-3\" class=\"headerlink\" title=\"结构\"></a>结构</h4>|key| elements|<br>|-|-|<br>|user:1:follow|music,sport,read|</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>无序</li>\n<li>无重复</li>\n<li>集合间操作</li>\n</ul>\n<h4 id=\"命令-3\"><a href=\"#命令-3\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sadd key element</td>\n<td>向集合key添加element(如果已存在，添加失败)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>srem key element</td>\n<td>删除集合key中的element</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>scard key</td>\n<td>计算集合大小</td>\n<td></td>\n</tr>\n<tr>\n<td>sismember key element</td>\n<td>判断element是否在集合中</td>\n<td></td>\n</tr>\n<tr>\n<td>srandmember key count</td>\n<td>从集合中随机挑count个元素，不会破坏家伙</td>\n<td></td>\n</tr>\n<tr>\n<td>spop key</td>\n<td>从集合中随机弹出一个元素，元素从集合移除</td>\n<td></td>\n</tr>\n<tr>\n<td>smembers key</td>\n<td>获取集合所有元素</td>\n<td></td>\n</tr>\n<tr>\n<td>sdiff key1 key2</td>\n<td>差集</td>\n<td></td>\n</tr>\n<tr>\n<td>sinter key1 key2</td>\n<td>交集</td>\n<td></td>\n</tr>\n<tr>\n<td>sunion key1 key2</td>\n<td>并集</td>\n<td></td>\n</tr>\n<tr>\n<td>sdiff/sinter/sunion + store destkey</td>\n<td>将差集、交集、并集结果报错在destkey中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>sadd=tagging<br>spop/srandmember=randon item<br>sadd+sinter=social graph</p>\n<h3 id=\"有序集合\"><a href=\"#有序集合\" class=\"headerlink\" title=\"有序集合\"></a>有序集合</h3><h4 id=\"结构-4\"><a href=\"#结构-4\" class=\"headerlink\" title=\"结构\"></a>结构</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>score</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>user:rank</td>\n<td>1</td>\n<td>tom</td>\n</tr>\n<tr>\n<td>user:rank</td>\n<td>5</td>\n<td>peter</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>有序集合</th>\n<th>集合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无重复元素</td>\n<td>无重复元素</td>\n</tr>\n<tr>\n<td>有序</td>\n<td>无序</td>\n</tr>\n<tr>\n<td>element+score</td>\n<td>element</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>有序集合</th>\n<th>列表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无重复元素</td>\n<td>有重复元素</td>\n</tr>\n<tr>\n<td>有序</td>\n<td>有序</td>\n</tr>\n<tr>\n<td>element+score</td>\n<td>element</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"命令-4\"><a href=\"#命令-4\" class=\"headerlink\" title=\"命令\"></a>命令</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>zadd key score element</td>\n<td>添加score和element（可以多对）</td>\n<td>O(logN)</td>\n</tr>\n<tr>\n<td>zrem key element</td>\n<td>删除元素（可以多个）</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zscore key element</td>\n<td>返回元素分数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zincrby key increScore element</td>\n<td>增加或减少元素分数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zcard key</td>\n<td>返回元素总个数</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>zrange key start end [WITHSCORES]</td>\n<td>返回指定索引范围内的升序元素[分值]</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zrangebyscore key minScore maxScore[WITHSCORES]</td>\n<td>返回指定分数范围内的升序元素[分值]</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zcount key minScore maxScore</td>\n<td>返回有序集合内在指定分数范围内的个数</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zremrangebyrank key start end</td>\n<td>删除指定排名内的升序元素</td>\n<td>O(logN+m)</td>\n</tr>\n<tr>\n<td>zremrangebyscore key minScore maxScore</td>\n<td>删除指定分数内的升序元素</td>\n<td>O(logN+m)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（五）主从复制","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n### 主从复制定义\n- 数据备份\n- 扩展读性能，读写分离\n- 一个master可以有多个slave\n- 一个slave只能有一个master\n- 数据流向是单向的，master到slave\n\n### 主从复制配置\n#### 实现方式\n- slaveof/slaveof no one绑定主节点/取消绑定\n- 配置\n  slaveof ip port\n  slave-read-only yes\n\n### 全量复制和部分复制\n\n### 故障处理\n\n### 开发运维问题\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（五）主从复制.md","raw":"---\ntitle: redis详解（五）主从复制\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n### 主从复制定义\n- 数据备份\n- 扩展读性能，读写分离\n- 一个master可以有多个slave\n- 一个slave只能有一个master\n- 数据流向是单向的，master到slave\n\n### 主从复制配置\n#### 实现方式\n- slaveof/slaveof no one绑定主节点/取消绑定\n- 配置\n  slaveof ip port\n  slave-read-only yes\n\n### 全量复制和部分复制\n\n### 故障处理\n\n### 开发运维问题\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（五）主从复制","published":1,"updated":"2019-11-16T07:37:19.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqold003kyos6zg3pn85y","content":"<h3 id=\"主从复制定义\"><a href=\"#主从复制定义\" class=\"headerlink\" title=\"主从复制定义\"></a>主从复制定义</h3><ul>\n<li>数据备份</li>\n<li>扩展读性能，读写分离</li>\n<li>一个master可以有多个slave</li>\n<li>一个slave只能有一个master</li>\n<li>数据流向是单向的，master到slave</li>\n</ul>\n<h3 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h3><h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><ul>\n<li>slaveof/slaveof no one绑定主节点/取消绑定</li>\n<li>配置<br>slaveof ip port<br>slave-read-only yes</li>\n</ul>\n<h3 id=\"全量复制和部分复制\"><a href=\"#全量复制和部分复制\" class=\"headerlink\" title=\"全量复制和部分复制\"></a>全量复制和部分复制</h3><h3 id=\"故障处理\"><a href=\"#故障处理\" class=\"headerlink\" title=\"故障处理\"></a>故障处理</h3><h3 id=\"开发运维问题\"><a href=\"#开发运维问题\" class=\"headerlink\" title=\"开发运维问题\"></a>开发运维问题</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"主从复制定义\"><a href=\"#主从复制定义\" class=\"headerlink\" title=\"主从复制定义\"></a>主从复制定义</h3><ul>\n<li>数据备份</li>\n<li>扩展读性能，读写分离</li>\n<li>一个master可以有多个slave</li>\n<li>一个slave只能有一个master</li>\n<li>数据流向是单向的，master到slave</li>\n</ul>\n<h3 id=\"主从复制配置\"><a href=\"#主从复制配置\" class=\"headerlink\" title=\"主从复制配置\"></a>主从复制配置</h3><h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><ul>\n<li>slaveof/slaveof no one绑定主节点/取消绑定</li>\n<li>配置<br>slaveof ip port<br>slave-read-only yes</li>\n</ul>\n<h3 id=\"全量复制和部分复制\"><a href=\"#全量复制和部分复制\" class=\"headerlink\" title=\"全量复制和部分复制\"></a>全量复制和部分复制</h3><h3 id=\"故障处理\"><a href=\"#故障处理\" class=\"headerlink\" title=\"故障处理\"></a>故障处理</h3><h3 id=\"开发运维问题\"><a href=\"#开发运维问题\" class=\"headerlink\" title=\"开发运维问题\"></a>开发运维问题</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（八）缓存设计和优化","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（八）缓存设计和优化.md","raw":"---\ntitle: redis详解（八）缓存设计和优化\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（八）缓存设计和优化","published":1,"updated":"2019-11-12T07:02:14.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqole003oyos6hr50it46","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（六）redis sentinel","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（六）redis-sentinel.md","raw":"---\ntitle: redis详解（六）redis sentinel\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（六）redis-sentinel","published":1,"updated":"2019-11-12T07:02:05.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolf003ryos6ds64kulg","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（十一）开发规范","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（十一）开发规范.md","raw":"---\ntitle: redis详解（十一）开发规范\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（十一）开发规范","published":1,"updated":"2019-11-12T07:01:44.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolh003vyos62x242eyo","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（十三）开发运维问题","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（十三）开发运维问题.md","raw":"---\ntitle: redis详解（十三）开发运维问题\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（十三）开发运维问题","published":1,"updated":"2019-11-12T07:01:47.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoli003yyos6lr5co12m","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（十二）内存管理","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（十二）内存管理.md","raw":"---\ntitle: redis详解（十二）内存管理\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（十二）内存管理","published":1,"updated":"2019-11-12T07:01:50.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolk0042yos6gym9xcb7","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis详解（十）布隆过滤器","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（十）布隆过滤器.md","raw":"---\ntitle: redis详解（十）布隆过滤器\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（十）布隆过滤器","published":1,"updated":"2019-11-12T07:01:56.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoll0046yos673qyguh3","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"redis 详解（四）持久化","top":1,"date":"2018-03-12T06:51:29.000Z","_content":"\n### 定义\nredis 所有数据保存在内存中，对数据更新将异步保存到磁盘\n\n### 持久化的作用\n\n|方式|说明|\n|-|-|\n|快照|mysql dump,redis RDB|\n|日志|mysql binlog,redis AOF,hbase Hlog|\n\n### RDB\n#### 定义\n- redis 创建二进制的 RDB 文件\n- redis 启动载入已经存在的 RDB 文件\n\n#### 三种主要方式触发\n\n##### save（同步）\n- client 发送 save 命令到 server，server 创建 RDB 文件，会阻塞主进程\n- 如果存在老文件，新文件会替换老文件\n- 时间复杂度 O(n)\n\n##### bgsave（异步）\n- client 发送 bgsave 命令到 server，server fork 一个子进程创建 RDB 文件\n- server 返回给 client 成功信息\n\n|命令|save|bgsave|\n|-|-|-|\n|IO 类型|同步|异步|\n|是否阻塞|是|是，阻塞发送在 fork|\n|时间复杂度|O(n)|O(n)|\n|优点|不会消耗额外内存|不阻塞客户端命令|\n|缺点|阻塞客户端命令|需要 fork，消耗内存|\n\n##### 自动配置\n\n|配置|seconds|changes|\n|-|-|-|\n|save|900|1|\n|save|300|10|\n|save|60|10000|\n\n#### 其他方式触发\n- 全量复制\n- debug reload\n- shutdown\n\n#### 总结\n- RDB 是 redis 内存到硬盘的快照，用于持久化\n- save 通常会阻塞 redis\n- bgsave 不会阻塞 redis，但是会 fork 新进程\n- save 自动配置满足任一就会被执行\n\n### AOF\n#### RDB 现存问题\n- 耗时耗性能\n- 不可控，丢失数据\n\n#### 定义\n- 日志文件\n\n#### 三种策略\n##### always\n- redis 写命令刷新到缓冲区，每条命令 fsync 到硬盘\n##### everysec\n- redis 写命令刷新到缓冲区，每秒把缓冲区 fsync 到硬盘\n##### no\n- redis 写命令刷新到缓冲区，操作系统决定什么时间 fsync 到硬盘\n\n|命令|always|everysec|no|\n|-|-|-|-|\n|优点|不丢失数据|每秒一次 fsync|不用管理|\n|缺点|IO 开销大|丢一秒数据|不可控|\n\n#### 重写\n##### 优势\n- 减少磁盘占用量\n- 加快恢复速度\n##### 实现方式\n- bgrewriteaof 命令\nclient 发送 bgrewriteaof 命令到 server，server fork 一个子进程执行 AOF 重写，创建 AOF 文件\n- aof 重写配置\n\n|配置名|说明|\n|-|-|\n|auto-aof-rewrite-min-size|aof 文件重写需要的大小|\n|auto-aof-rewrite-percentage|aof 文件增长率|\n\n|统计名|说明|\n|-|-|\n|aof_current_size|aof 当前大小（单位：字节）|\n|aof_base_size|aof 上次启动和重写的大小（单位：字节）|\n\n##### 自动触发时机\n- aof_current_size > auto-aof-rewrite-min-size\n- aof_current_size - aof_base_size/aof_base_size > auto-aof-rewrite-percentage\n\n### RDB 和 AOF 的选择\n#### RDB 和 AOF 比较\n|命令|RDB|AOF|\n|-|-|-|\n|启动优先级|低|高|\n|体积|小|大|\n|恢复速度|快|慢|\n|数据安全性|丢数据|根据策略决定|\n|轻重|重|轻|\n\n#### RDB 最佳策略\n- 关掉\n- 集中管理\n- 主从，从开\n\n#### AOF 最佳策略\n- 开（缓存情况下关掉）\n- aof 重写集中管理\n- everysec\n\n#### 最佳策略\n- 小分片\n- 监控（硬盘，内存，负载，网络）\n- 足够内存\n- 缓存或存储\n\n### fork 操作\n#### fork 操作\n- 同步操作\n- 和内存量相关，内存越大，耗时越长，与机器类型有关\n- info:latest_fork_usec\n#### 优化 fork\n- 优先使用物理机或者高效支持 fork 操作的虚拟化技术\n- 控制 redis 实例最大可用内存：maxmemory\n- 合理配置 Linux 内存分配策略：vm.overcommit_memory=1\n- 降低fork频率，例如放开aof重写机制自动触发时机，不必要的全量复制\n\n### 进程外开销\n#### 子进程开销和优化\n\n|选项|开销|优化|\n|-|-|-|\n|CPU|rdb和aof文件生成，属于CPU密集型|不做CPU绑定，不和CPU密集型部署|\n|内存|fork内存开销，copy-on-write|echo never > /sys/kernel/mm/transparent_hugepage/enabled|\n|硬盘|aof和rdb文件写入，可以结合iostat,iotop分析|不要和高硬盘负载服务部署一起：存储服务，消息队列等；no-appendfsync-on-rewrite=yes,根据写入量决定磁盘类型；单机多实例持久化文件目录可以分盘|\n\n### AOF 追加阻塞\n#### 阻塞定位\n- redis日志\n- info persistence命令\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/redis详解（四）持久化.md","raw":"---\ntitle: redis 详解（四）持久化\ntop: 1\ndate: 2018-03-12 14:51:29\ntags: [\"redis\",\"NoSQL\"]\ncategories: \"redis\"\n---\n\n### 定义\nredis 所有数据保存在内存中，对数据更新将异步保存到磁盘\n\n### 持久化的作用\n\n|方式|说明|\n|-|-|\n|快照|mysql dump,redis RDB|\n|日志|mysql binlog,redis AOF,hbase Hlog|\n\n### RDB\n#### 定义\n- redis 创建二进制的 RDB 文件\n- redis 启动载入已经存在的 RDB 文件\n\n#### 三种主要方式触发\n\n##### save（同步）\n- client 发送 save 命令到 server，server 创建 RDB 文件，会阻塞主进程\n- 如果存在老文件，新文件会替换老文件\n- 时间复杂度 O(n)\n\n##### bgsave（异步）\n- client 发送 bgsave 命令到 server，server fork 一个子进程创建 RDB 文件\n- server 返回给 client 成功信息\n\n|命令|save|bgsave|\n|-|-|-|\n|IO 类型|同步|异步|\n|是否阻塞|是|是，阻塞发送在 fork|\n|时间复杂度|O(n)|O(n)|\n|优点|不会消耗额外内存|不阻塞客户端命令|\n|缺点|阻塞客户端命令|需要 fork，消耗内存|\n\n##### 自动配置\n\n|配置|seconds|changes|\n|-|-|-|\n|save|900|1|\n|save|300|10|\n|save|60|10000|\n\n#### 其他方式触发\n- 全量复制\n- debug reload\n- shutdown\n\n#### 总结\n- RDB 是 redis 内存到硬盘的快照，用于持久化\n- save 通常会阻塞 redis\n- bgsave 不会阻塞 redis，但是会 fork 新进程\n- save 自动配置满足任一就会被执行\n\n### AOF\n#### RDB 现存问题\n- 耗时耗性能\n- 不可控，丢失数据\n\n#### 定义\n- 日志文件\n\n#### 三种策略\n##### always\n- redis 写命令刷新到缓冲区，每条命令 fsync 到硬盘\n##### everysec\n- redis 写命令刷新到缓冲区，每秒把缓冲区 fsync 到硬盘\n##### no\n- redis 写命令刷新到缓冲区，操作系统决定什么时间 fsync 到硬盘\n\n|命令|always|everysec|no|\n|-|-|-|-|\n|优点|不丢失数据|每秒一次 fsync|不用管理|\n|缺点|IO 开销大|丢一秒数据|不可控|\n\n#### 重写\n##### 优势\n- 减少磁盘占用量\n- 加快恢复速度\n##### 实现方式\n- bgrewriteaof 命令\nclient 发送 bgrewriteaof 命令到 server，server fork 一个子进程执行 AOF 重写，创建 AOF 文件\n- aof 重写配置\n\n|配置名|说明|\n|-|-|\n|auto-aof-rewrite-min-size|aof 文件重写需要的大小|\n|auto-aof-rewrite-percentage|aof 文件增长率|\n\n|统计名|说明|\n|-|-|\n|aof_current_size|aof 当前大小（单位：字节）|\n|aof_base_size|aof 上次启动和重写的大小（单位：字节）|\n\n##### 自动触发时机\n- aof_current_size > auto-aof-rewrite-min-size\n- aof_current_size - aof_base_size/aof_base_size > auto-aof-rewrite-percentage\n\n### RDB 和 AOF 的选择\n#### RDB 和 AOF 比较\n|命令|RDB|AOF|\n|-|-|-|\n|启动优先级|低|高|\n|体积|小|大|\n|恢复速度|快|慢|\n|数据安全性|丢数据|根据策略决定|\n|轻重|重|轻|\n\n#### RDB 最佳策略\n- 关掉\n- 集中管理\n- 主从，从开\n\n#### AOF 最佳策略\n- 开（缓存情况下关掉）\n- aof 重写集中管理\n- everysec\n\n#### 最佳策略\n- 小分片\n- 监控（硬盘，内存，负载，网络）\n- 足够内存\n- 缓存或存储\n\n### fork 操作\n#### fork 操作\n- 同步操作\n- 和内存量相关，内存越大，耗时越长，与机器类型有关\n- info:latest_fork_usec\n#### 优化 fork\n- 优先使用物理机或者高效支持 fork 操作的虚拟化技术\n- 控制 redis 实例最大可用内存：maxmemory\n- 合理配置 Linux 内存分配策略：vm.overcommit_memory=1\n- 降低fork频率，例如放开aof重写机制自动触发时机，不必要的全量复制\n\n### 进程外开销\n#### 子进程开销和优化\n\n|选项|开销|优化|\n|-|-|-|\n|CPU|rdb和aof文件生成，属于CPU密集型|不做CPU绑定，不和CPU密集型部署|\n|内存|fork内存开销，copy-on-write|echo never > /sys/kernel/mm/transparent_hugepage/enabled|\n|硬盘|aof和rdb文件写入，可以结合iostat,iotop分析|不要和高硬盘负载服务部署一起：存储服务，消息队列等；no-appendfsync-on-rewrite=yes,根据写入量决定磁盘类型；单机多实例持久化文件目录可以分盘|\n\n### AOF 追加阻塞\n#### 阻塞定位\n- redis日志\n- info persistence命令\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"redis详解（四）持久化","published":1,"updated":"2019-11-16T07:22:04.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolm004ayos6ohfdma1j","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>redis 所有数据保存在内存中，对数据更新将异步保存到磁盘</p>\n<h3 id=\"持久化的作用\"><a href=\"#持久化的作用\" class=\"headerlink\" title=\"持久化的作用\"></a>持久化的作用</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>快照</td>\n<td>mysql dump,redis RDB</td>\n</tr>\n<tr>\n<td>日志</td>\n<td>mysql binlog,redis AOF,hbase Hlog</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>redis 创建二进制的 RDB 文件</li>\n<li>redis 启动载入已经存在的 RDB 文件</li>\n</ul>\n<h4 id=\"三种主要方式触发\"><a href=\"#三种主要方式触发\" class=\"headerlink\" title=\"三种主要方式触发\"></a>三种主要方式触发</h4><h5 id=\"save（同步）\"><a href=\"#save（同步）\" class=\"headerlink\" title=\"save（同步）\"></a>save（同步）</h5><ul>\n<li>client 发送 save 命令到 server，server 创建 RDB 文件，会阻塞主进程</li>\n<li>如果存在老文件，新文件会替换老文件</li>\n<li>时间复杂度 O(n)</li>\n</ul>\n<h5 id=\"bgsave（异步）\"><a href=\"#bgsave（异步）\" class=\"headerlink\" title=\"bgsave（异步）\"></a>bgsave（异步）</h5><ul>\n<li>client 发送 bgsave 命令到 server，server fork 一个子进程创建 RDB 文件</li>\n<li>server 返回给 client 成功信息</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>save</th>\n<th>bgsave</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IO 类型</td>\n<td>同步</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>是否阻塞</td>\n<td>是</td>\n<td>是，阻塞发送在 fork</td>\n</tr>\n<tr>\n<td>时间复杂度</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>不会消耗额外内存</td>\n<td>不阻塞客户端命令</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>阻塞客户端命令</td>\n<td>需要 fork，消耗内存</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"自动配置\"><a href=\"#自动配置\" class=\"headerlink\" title=\"自动配置\"></a>自动配置</h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>seconds</th>\n<th>changes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>save</td>\n<td>900</td>\n<td>1</td>\n</tr>\n<tr>\n<td>save</td>\n<td>300</td>\n<td>10</td>\n</tr>\n<tr>\n<td>save</td>\n<td>60</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"其他方式触发\"><a href=\"#其他方式触发\" class=\"headerlink\" title=\"其他方式触发\"></a>其他方式触发</h4><ul>\n<li>全量复制</li>\n<li>debug reload</li>\n<li>shutdown</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>RDB 是 redis 内存到硬盘的快照，用于持久化</li>\n<li>save 通常会阻塞 redis</li>\n<li>bgsave 不会阻塞 redis，但是会 fork 新进程</li>\n<li>save 自动配置满足任一就会被执行</li>\n</ul>\n<h3 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h3><h4 id=\"RDB-现存问题\"><a href=\"#RDB-现存问题\" class=\"headerlink\" title=\"RDB 现存问题\"></a>RDB 现存问题</h4><ul>\n<li>耗时耗性能</li>\n<li>不可控，丢失数据</li>\n</ul>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>日志文件</li>\n</ul>\n<h4 id=\"三种策略\"><a href=\"#三种策略\" class=\"headerlink\" title=\"三种策略\"></a>三种策略</h4><h5 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a>always</h5><ul>\n<li>redis 写命令刷新到缓冲区，每条命令 fsync 到硬盘<h5 id=\"everysec\"><a href=\"#everysec\" class=\"headerlink\" title=\"everysec\"></a>everysec</h5></li>\n<li>redis 写命令刷新到缓冲区，每秒把缓冲区 fsync 到硬盘<h5 id=\"no\"><a href=\"#no\" class=\"headerlink\" title=\"no\"></a>no</h5></li>\n<li>redis 写命令刷新到缓冲区，操作系统决定什么时间 fsync 到硬盘</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>always</th>\n<th>everysec</th>\n<th>no</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>优点</td>\n<td>不丢失数据</td>\n<td>每秒一次 fsync</td>\n<td>不用管理</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>IO 开销大</td>\n<td>丢一秒数据</td>\n<td>不可控</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h5><ul>\n<li>减少磁盘占用量</li>\n<li>加快恢复速度<h5 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h5></li>\n<li>bgrewriteaof 命令<br>client 发送 bgrewriteaof 命令到 server，server fork 一个子进程执行 AOF 重写，创建 AOF 文件</li>\n<li>aof 重写配置</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto-aof-rewrite-min-size</td>\n<td>aof 文件重写需要的大小</td>\n</tr>\n<tr>\n<td>auto-aof-rewrite-percentage</td>\n<td>aof 文件增长率</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>统计名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aof_current_size</td>\n<td>aof 当前大小（单位：字节）</td>\n</tr>\n<tr>\n<td>aof_base_size</td>\n<td>aof 上次启动和重写的大小（单位：字节）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"自动触发时机\"><a href=\"#自动触发时机\" class=\"headerlink\" title=\"自动触发时机\"></a>自动触发时机</h5><ul>\n<li>aof_current_size &gt; auto-aof-rewrite-min-size</li>\n<li>aof_current_size - aof_base_size/aof_base_size &gt; auto-aof-rewrite-percentage</li>\n</ul>\n<h3 id=\"RDB-和-AOF-的选择\"><a href=\"#RDB-和-AOF-的选择\" class=\"headerlink\" title=\"RDB 和 AOF 的选择\"></a>RDB 和 AOF 的选择</h3><h4 id=\"RDB-和-AOF-比较\"><a href=\"#RDB-和-AOF-比较\" class=\"headerlink\" title=\"RDB 和 AOF 比较\"></a>RDB 和 AOF 比较</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>RDB</th>\n<th>AOF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动优先级</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>体积</td>\n<td>小</td>\n<td>大</td>\n</tr>\n<tr>\n<td>恢复速度</td>\n<td>快</td>\n<td>慢</td>\n</tr>\n<tr>\n<td>数据安全性</td>\n<td>丢数据</td>\n<td>根据策略决定</td>\n</tr>\n<tr>\n<td>轻重</td>\n<td>重</td>\n<td>轻</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"RDB-最佳策略\"><a href=\"#RDB-最佳策略\" class=\"headerlink\" title=\"RDB 最佳策略\"></a>RDB 最佳策略</h4><ul>\n<li>关掉</li>\n<li>集中管理</li>\n<li>主从，从开</li>\n</ul>\n<h4 id=\"AOF-最佳策略\"><a href=\"#AOF-最佳策略\" class=\"headerlink\" title=\"AOF 最佳策略\"></a>AOF 最佳策略</h4><ul>\n<li>开（缓存情况下关掉）</li>\n<li>aof 重写集中管理</li>\n<li>everysec</li>\n</ul>\n<h4 id=\"最佳策略\"><a href=\"#最佳策略\" class=\"headerlink\" title=\"最佳策略\"></a>最佳策略</h4><ul>\n<li>小分片</li>\n<li>监控（硬盘，内存，负载，网络）</li>\n<li>足够内存</li>\n<li>缓存或存储</li>\n</ul>\n<h3 id=\"fork-操作\"><a href=\"#fork-操作\" class=\"headerlink\" title=\"fork 操作\"></a>fork 操作</h3><h4 id=\"fork-操作-1\"><a href=\"#fork-操作-1\" class=\"headerlink\" title=\"fork 操作\"></a>fork 操作</h4><ul>\n<li>同步操作</li>\n<li>和内存量相关，内存越大，耗时越长，与机器类型有关</li>\n<li>info:latest_fork_usec<h4 id=\"优化-fork\"><a href=\"#优化-fork\" class=\"headerlink\" title=\"优化 fork\"></a>优化 fork</h4></li>\n<li>优先使用物理机或者高效支持 fork 操作的虚拟化技术</li>\n<li>控制 redis 实例最大可用内存：maxmemory</li>\n<li>合理配置 Linux 内存分配策略：vm.overcommit_memory=1</li>\n<li>降低fork频率，例如放开aof重写机制自动触发时机，不必要的全量复制</li>\n</ul>\n<h3 id=\"进程外开销\"><a href=\"#进程外开销\" class=\"headerlink\" title=\"进程外开销\"></a>进程外开销</h3><h4 id=\"子进程开销和优化\"><a href=\"#子进程开销和优化\" class=\"headerlink\" title=\"子进程开销和优化\"></a>子进程开销和优化</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>开销</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>rdb和aof文件生成，属于CPU密集型</td>\n<td>不做CPU绑定，不和CPU密集型部署</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>fork内存开销，copy-on-write</td>\n<td>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</td>\n</tr>\n<tr>\n<td>硬盘</td>\n<td>aof和rdb文件写入，可以结合iostat,iotop分析</td>\n<td>不要和高硬盘负载服务部署一起：存储服务，消息队列等；no-appendfsync-on-rewrite=yes,根据写入量决定磁盘类型；单机多实例持久化文件目录可以分盘</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"AOF-追加阻塞\"><a href=\"#AOF-追加阻塞\" class=\"headerlink\" title=\"AOF 追加阻塞\"></a>AOF 追加阻塞</h3><h4 id=\"阻塞定位\"><a href=\"#阻塞定位\" class=\"headerlink\" title=\"阻塞定位\"></a>阻塞定位</h4><ul>\n<li>redis日志</li>\n<li>info persistence命令</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>redis 所有数据保存在内存中，对数据更新将异步保存到磁盘</p>\n<h3 id=\"持久化的作用\"><a href=\"#持久化的作用\" class=\"headerlink\" title=\"持久化的作用\"></a>持久化的作用</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>快照</td>\n<td>mysql dump,redis RDB</td>\n</tr>\n<tr>\n<td>日志</td>\n<td>mysql binlog,redis AOF,hbase Hlog</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"RDB\"><a href=\"#RDB\" class=\"headerlink\" title=\"RDB\"></a>RDB</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>redis 创建二进制的 RDB 文件</li>\n<li>redis 启动载入已经存在的 RDB 文件</li>\n</ul>\n<h4 id=\"三种主要方式触发\"><a href=\"#三种主要方式触发\" class=\"headerlink\" title=\"三种主要方式触发\"></a>三种主要方式触发</h4><h5 id=\"save（同步）\"><a href=\"#save（同步）\" class=\"headerlink\" title=\"save（同步）\"></a>save（同步）</h5><ul>\n<li>client 发送 save 命令到 server，server 创建 RDB 文件，会阻塞主进程</li>\n<li>如果存在老文件，新文件会替换老文件</li>\n<li>时间复杂度 O(n)</li>\n</ul>\n<h5 id=\"bgsave（异步）\"><a href=\"#bgsave（异步）\" class=\"headerlink\" title=\"bgsave（异步）\"></a>bgsave（异步）</h5><ul>\n<li>client 发送 bgsave 命令到 server，server fork 一个子进程创建 RDB 文件</li>\n<li>server 返回给 client 成功信息</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>save</th>\n<th>bgsave</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IO 类型</td>\n<td>同步</td>\n<td>异步</td>\n</tr>\n<tr>\n<td>是否阻塞</td>\n<td>是</td>\n<td>是，阻塞发送在 fork</td>\n</tr>\n<tr>\n<td>时间复杂度</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>优点</td>\n<td>不会消耗额外内存</td>\n<td>不阻塞客户端命令</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>阻塞客户端命令</td>\n<td>需要 fork，消耗内存</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"自动配置\"><a href=\"#自动配置\" class=\"headerlink\" title=\"自动配置\"></a>自动配置</h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置</th>\n<th>seconds</th>\n<th>changes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>save</td>\n<td>900</td>\n<td>1</td>\n</tr>\n<tr>\n<td>save</td>\n<td>300</td>\n<td>10</td>\n</tr>\n<tr>\n<td>save</td>\n<td>60</td>\n<td>10000</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"其他方式触发\"><a href=\"#其他方式触发\" class=\"headerlink\" title=\"其他方式触发\"></a>其他方式触发</h4><ul>\n<li>全量复制</li>\n<li>debug reload</li>\n<li>shutdown</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>RDB 是 redis 内存到硬盘的快照，用于持久化</li>\n<li>save 通常会阻塞 redis</li>\n<li>bgsave 不会阻塞 redis，但是会 fork 新进程</li>\n<li>save 自动配置满足任一就会被执行</li>\n</ul>\n<h3 id=\"AOF\"><a href=\"#AOF\" class=\"headerlink\" title=\"AOF\"></a>AOF</h3><h4 id=\"RDB-现存问题\"><a href=\"#RDB-现存问题\" class=\"headerlink\" title=\"RDB 现存问题\"></a>RDB 现存问题</h4><ul>\n<li>耗时耗性能</li>\n<li>不可控，丢失数据</li>\n</ul>\n<h4 id=\"定义-2\"><a href=\"#定义-2\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>日志文件</li>\n</ul>\n<h4 id=\"三种策略\"><a href=\"#三种策略\" class=\"headerlink\" title=\"三种策略\"></a>三种策略</h4><h5 id=\"always\"><a href=\"#always\" class=\"headerlink\" title=\"always\"></a>always</h5><ul>\n<li>redis 写命令刷新到缓冲区，每条命令 fsync 到硬盘<h5 id=\"everysec\"><a href=\"#everysec\" class=\"headerlink\" title=\"everysec\"></a>everysec</h5></li>\n<li>redis 写命令刷新到缓冲区，每秒把缓冲区 fsync 到硬盘<h5 id=\"no\"><a href=\"#no\" class=\"headerlink\" title=\"no\"></a>no</h5></li>\n<li>redis 写命令刷新到缓冲区，操作系统决定什么时间 fsync 到硬盘</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>always</th>\n<th>everysec</th>\n<th>no</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>优点</td>\n<td>不丢失数据</td>\n<td>每秒一次 fsync</td>\n<td>不用管理</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>IO 开销大</td>\n<td>丢一秒数据</td>\n<td>不可控</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h4><h5 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h5><ul>\n<li>减少磁盘占用量</li>\n<li>加快恢复速度<h5 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h5></li>\n<li>bgrewriteaof 命令<br>client 发送 bgrewriteaof 命令到 server，server fork 一个子进程执行 AOF 重写，创建 AOF 文件</li>\n<li>aof 重写配置</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>配置名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>auto-aof-rewrite-min-size</td>\n<td>aof 文件重写需要的大小</td>\n</tr>\n<tr>\n<td>auto-aof-rewrite-percentage</td>\n<td>aof 文件增长率</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>统计名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>aof_current_size</td>\n<td>aof 当前大小（单位：字节）</td>\n</tr>\n<tr>\n<td>aof_base_size</td>\n<td>aof 上次启动和重写的大小（单位：字节）</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"自动触发时机\"><a href=\"#自动触发时机\" class=\"headerlink\" title=\"自动触发时机\"></a>自动触发时机</h5><ul>\n<li>aof_current_size &gt; auto-aof-rewrite-min-size</li>\n<li>aof_current_size - aof_base_size/aof_base_size &gt; auto-aof-rewrite-percentage</li>\n</ul>\n<h3 id=\"RDB-和-AOF-的选择\"><a href=\"#RDB-和-AOF-的选择\" class=\"headerlink\" title=\"RDB 和 AOF 的选择\"></a>RDB 和 AOF 的选择</h3><h4 id=\"RDB-和-AOF-比较\"><a href=\"#RDB-和-AOF-比较\" class=\"headerlink\" title=\"RDB 和 AOF 比较\"></a>RDB 和 AOF 比较</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>RDB</th>\n<th>AOF</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动优先级</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>体积</td>\n<td>小</td>\n<td>大</td>\n</tr>\n<tr>\n<td>恢复速度</td>\n<td>快</td>\n<td>慢</td>\n</tr>\n<tr>\n<td>数据安全性</td>\n<td>丢数据</td>\n<td>根据策略决定</td>\n</tr>\n<tr>\n<td>轻重</td>\n<td>重</td>\n<td>轻</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"RDB-最佳策略\"><a href=\"#RDB-最佳策略\" class=\"headerlink\" title=\"RDB 最佳策略\"></a>RDB 最佳策略</h4><ul>\n<li>关掉</li>\n<li>集中管理</li>\n<li>主从，从开</li>\n</ul>\n<h4 id=\"AOF-最佳策略\"><a href=\"#AOF-最佳策略\" class=\"headerlink\" title=\"AOF 最佳策略\"></a>AOF 最佳策略</h4><ul>\n<li>开（缓存情况下关掉）</li>\n<li>aof 重写集中管理</li>\n<li>everysec</li>\n</ul>\n<h4 id=\"最佳策略\"><a href=\"#最佳策略\" class=\"headerlink\" title=\"最佳策略\"></a>最佳策略</h4><ul>\n<li>小分片</li>\n<li>监控（硬盘，内存，负载，网络）</li>\n<li>足够内存</li>\n<li>缓存或存储</li>\n</ul>\n<h3 id=\"fork-操作\"><a href=\"#fork-操作\" class=\"headerlink\" title=\"fork 操作\"></a>fork 操作</h3><h4 id=\"fork-操作-1\"><a href=\"#fork-操作-1\" class=\"headerlink\" title=\"fork 操作\"></a>fork 操作</h4><ul>\n<li>同步操作</li>\n<li>和内存量相关，内存越大，耗时越长，与机器类型有关</li>\n<li>info:latest_fork_usec<h4 id=\"优化-fork\"><a href=\"#优化-fork\" class=\"headerlink\" title=\"优化 fork\"></a>优化 fork</h4></li>\n<li>优先使用物理机或者高效支持 fork 操作的虚拟化技术</li>\n<li>控制 redis 实例最大可用内存：maxmemory</li>\n<li>合理配置 Linux 内存分配策略：vm.overcommit_memory=1</li>\n<li>降低fork频率，例如放开aof重写机制自动触发时机，不必要的全量复制</li>\n</ul>\n<h3 id=\"进程外开销\"><a href=\"#进程外开销\" class=\"headerlink\" title=\"进程外开销\"></a>进程外开销</h3><h4 id=\"子进程开销和优化\"><a href=\"#子进程开销和优化\" class=\"headerlink\" title=\"子进程开销和优化\"></a>子进程开销和优化</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>开销</th>\n<th>优化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>rdb和aof文件生成，属于CPU密集型</td>\n<td>不做CPU绑定，不和CPU密集型部署</td>\n</tr>\n<tr>\n<td>内存</td>\n<td>fork内存开销，copy-on-write</td>\n<td>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</td>\n</tr>\n<tr>\n<td>硬盘</td>\n<td>aof和rdb文件写入，可以结合iostat,iotop分析</td>\n<td>不要和高硬盘负载服务部署一起：存储服务，消息队列等；no-appendfsync-on-rewrite=yes,根据写入量决定磁盘类型；单机多实例持久化文件目录可以分盘</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"AOF-追加阻塞\"><a href=\"#AOF-追加阻塞\" class=\"headerlink\" title=\"AOF 追加阻塞\"></a>AOF 追加阻塞</h3><h4 id=\"阻塞定位\"><a href=\"#阻塞定位\" class=\"headerlink\" title=\"阻塞定位\"></a>阻塞定位</h4><ul>\n<li>redis日志</li>\n<li>info persistence命令</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"swoole 异步 task","date":"2019-03-29T06:41:35.000Z","top":0,"_content":"\n### 记录\n\n今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n\n```PHP\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始、n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了、n\";\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo \"finish\";\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n\n客户端\n\n```PHP\nclass Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/swoole异步task.md","raw":"---\ntitle: swoole 异步 task\ndate: 2019-03-29 14:41:35\ntags: [swoole]\ncategories: \"php\"\ntop: 0\n---\n\n### 记录\n\n今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。\n\n服务端\n\n```PHP\nclass Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this->server = new \\swoole_server(\"0.0.0.0\", 9501);\n        $this->server->set([\n            'worker_num'      => 2,\n            'daemonize'       => true,\n            'task_worker_num' => 2  # task 进程数\n        ]);\n        $this->server->on('Start', [$this, 'onStart']);\n        $this->server->on('Connect', [$this, 'onConnect']);\n        $this->server->on('Receive', [$this, 'onReceive']);\n        $this->server->on('Task', [$this, 'onTask']);\n        $this->server->on('Finish', [$this, 'onFinish']);\n        $this->server->on('Close', [$this, 'onClose']);\n        $this->server->start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo \"开始、n\";\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"连接上了、n\";\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server->task($data);\n        // echo \"Dispath AsyncTask: id={$task_id}\\n\";\n        // 将受到的客户端消息再返回给客户端\n        $server->send($fd, \"Message form Server: {$data}, task_id: {$task_id}\");\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo \" \\n {$task_id}, start task \\n\";\n        sleep(5);\n        echo \" \\n {$task_id}, end task  \\n\";\n        $server->finish('t');\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo \"finish\";\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo \"close \\n\";\n    }\n}\n$server = new Server();\n\n```\n\n客户端\n\n```PHP\nclass Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this->client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this->client->connect('127.0.0.1', 9501)) {\n            die('connect failed.');\n        }\n        return $this->client->send(json_encode($data));\n    }\n}\n```\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"swoole异步task","published":1,"updated":"2019-11-12T02:05:15.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolo004dyos69ys9dxdn","content":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">class Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始、n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了、n&quot;;\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo &quot;finish&quot;;\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"记录\"><a href=\"#记录\" class=\"headerlink\" title=\"记录\"></a>记录</h3><p>今天做了项目异常监控，本来是用 nodejs 调用企业微信 sdk, 后来发现发送 http 请求到腾讯接口总是报错，就换成用 swoole 投递异步任务处理项目异常监控，记录一下代码。</p>\n<p>服务端</p>\n<pre><code class=\"lang-PHP\">class Server\n{\n    private $server;\n    public function __construct()\n    {\n        $this-&gt;server = new \\swoole_server(&quot;0.0.0.0&quot;, 9501);\n        $this-&gt;server-&gt;set([\n            &#39;worker_num&#39;      =&gt; 2,\n            &#39;daemonize&#39;       =&gt; true,\n            &#39;task_worker_num&#39; =&gt; 2  # task 进程数\n        ]);\n        $this-&gt;server-&gt;on(&#39;Start&#39;, [$this, &#39;onStart&#39;]);\n        $this-&gt;server-&gt;on(&#39;Connect&#39;, [$this, &#39;onConnect&#39;]);\n        $this-&gt;server-&gt;on(&#39;Receive&#39;, [$this, &#39;onReceive&#39;]);\n        $this-&gt;server-&gt;on(&#39;Task&#39;, [$this, &#39;onTask&#39;]);\n        $this-&gt;server-&gt;on(&#39;Finish&#39;, [$this, &#39;onFinish&#39;]);\n        $this-&gt;server-&gt;on(&#39;Close&#39;, [$this, &#39;onClose&#39;]);\n        $this-&gt;server-&gt;start();\n    }\n    // 主进程启动时回调函数\n    public function onStart(\\swoole_server $server)\n    {\n        echo &quot;开始、n&quot;;\n    }\n    // 建立连接时回调函数\n    public function onConnect(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;连接上了、n&quot;;\n    }\n    public function onReceive(\\swoole_server $server, $fd, $from_id, $data)\n    {\n        // 投递异步任务\n        $task_id = $server-&gt;task($data);\n        // echo &quot;Dispath AsyncTask: id={$task_id}\\n&quot;;\n        // 将受到的客户端消息再返回给客户端\n        $server-&gt;send($fd, &quot;Message form Server: {$data}, task_id: {$task_id}&quot;);\n    }\n\n    // 异步任务处理函数\n    public function onTask(\\swoole_server $server, $task_id, $from_id, $data)\n    {\n        echo &quot; \\n {$task_id}, start task \\n&quot;;\n        sleep(5);\n        echo &quot; \\n {$task_id}, end task  \\n&quot;;\n        $server-&gt;finish(&#39;t&#39;);\n    }\n\n    public function onFinish(\\swoole_server $server, $task_id, $data)\n    {\n        echo &quot;finish&quot;;\n    }\n    // 关闭连时回调函数\n    public function onClose(\\swoole_server $server, $fd, $from_id)\n    {\n        echo &quot;close \\n&quot;;\n    }\n}\n$server = new Server();\n</code></pre>\n<p>客户端</p>\n<pre><code class=\"lang-PHP\">class Client\n{\n\n    private $client;\n    function __construct()\n    {\n        $this-&gt;client = new \\swoole_client(SWOOLE_SOCK_TCP);\n    }\n    public function send($data)\n    {\n        if (!$this-&gt;client-&gt;connect(&#39;127.0.0.1&#39;, 9501)) {\n            die(&#39;connect failed.&#39;);\n        }\n        return $this-&gt;client-&gt;send(json_encode($data));\n    }\n}\n</code></pre>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"vscode 快捷键和扩展","date":"2019-04-03T06:39:39.000Z","top":2,"_content":"\n### 快捷键\n\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首 / 行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行 / 末行    Ctrl + Home/End\n- 选中字符到左边 / 右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式 (Toggle Zen Mode)\n\n### 插件\n\n- Code Runner\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/vscode快捷键.md","raw":"---\ntitle: vscode 快捷键和扩展\ndate: 2019-04-03 14:39:39\ntags: [vscode]\ntop: 2\n---\n\n### 快捷键\n\n- 跳转单词     Ctrl + ← / Ctrl + →\n- 跳转行首 / 行末     Home / End\n- 代码块之间移动    Ctrl + Shift + \\\n- 跳转首行 / 末行    Ctrl + Home/End\n- 选中字符到左边 / 右边   Ctrl + Shift + <- /  Ctrl + Shift + ->\n- 删除字符右边 Ctrl + Delete\n- 删除字符左边 Ctrl + Backspace\n- 删除一行代码 Ctrl + Shift + K\n- 另起下一行 Ctrl + Enter\n- 另起上一行 Ctrl + Shift + Enter\n- 上下移动一行 Alt + ↓ / Alt +  ↑\n- 复制当前行移动 Alt + shift + 上下方向键\n- 单行注释 Ctrl + /\n- 格式化代码 Alt + Shift + F\n- 列出最近文件 Ctrl + Tab\n- 跳转行 Ctrl + g\n- 跳转符号 Cmd + Shift + O\n- 隐藏左侧 Ctrl + b\n- 隐藏面板  Ctrl + J\n- 切换活动栏可见性（Toggle Activity Bar Visibility ）\n- 切换状态栏可见性（Toggle Status Bar Visibility ）\n- 切换禅模式 (Toggle Zen Mode)\n\n### 插件\n\n- Code Runner\n- One Dark Pro\n- GitLens — Git supercharged\n- Markdown Preview Enhanced\n- PHP Intelephense\n- PHP Namespace Resolver\n- PHP Snippets from PHPStorm\n- Python\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"vscode快捷键","published":1,"updated":"2019-11-12T02:05:15.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolp004hyos6qyv7ug5x","content":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首 / 行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行 / 末行    Ctrl + Home/End</li>\n<li>选中字符到左边 / 右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式 (Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li>跳转单词     Ctrl + ← / Ctrl + →</li>\n<li>跳转行首 / 行末     Home / End</li>\n<li>代码块之间移动    Ctrl + Shift + \\</li>\n<li>跳转首行 / 末行    Ctrl + Home/End</li>\n<li>选中字符到左边 / 右边   Ctrl + Shift + &lt;- /  Ctrl + Shift + -&gt;</li>\n<li>删除字符右边 Ctrl + Delete</li>\n<li>删除字符左边 Ctrl + Backspace</li>\n<li>删除一行代码 Ctrl + Shift + K</li>\n<li>另起下一行 Ctrl + Enter</li>\n<li>另起上一行 Ctrl + Shift + Enter</li>\n<li>上下移动一行 Alt + ↓ / Alt +  ↑</li>\n<li>复制当前行移动 Alt + shift + 上下方向键</li>\n<li>单行注释 Ctrl + /</li>\n<li>格式化代码 Alt + Shift + F</li>\n<li>列出最近文件 Ctrl + Tab</li>\n<li>跳转行 Ctrl + g</li>\n<li>跳转符号 Cmd + Shift + O</li>\n<li>隐藏左侧 Ctrl + b</li>\n<li>隐藏面板  Ctrl + J</li>\n<li>切换活动栏可见性（Toggle Activity Bar Visibility ）</li>\n<li>切换状态栏可见性（Toggle Status Bar Visibility ）</li>\n<li>切换禅模式 (Toggle Zen Mode)</li>\n</ul>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><ul>\n<li>Code Runner</li>\n<li>One Dark Pro</li>\n<li>GitLens — Git supercharged</li>\n<li>Markdown Preview Enhanced</li>\n<li>PHP Intelephense</li>\n<li>PHP Namespace Resolver</li>\n<li>PHP Snippets from PHPStorm</li>\n<li>Python</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"wsl 搭建 php 环境请求超时的问题解决方案","date":"2019-03-28T08:42:53.000Z","top":0,"_content":"\n### 一、出现问题\n\n今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示\n\n```bash\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\n\nnginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了\n1.TCP 是使用 TCP 端口连接 127.0.0.1:9000\n\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n\n2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。\n当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。\n\n### 三、解决方案\n\n在 nginx 的配置文件中加入\n\n```bash\n fastcgi_buffering off;\n```\n\n这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/wsl搭建php环境请求超时的问题解决方案.md","raw":"---\ntitle: wsl 搭建 php 环境请求超时的问题解决方案\ndate: 2019-03-28 16:42:53\ntags: [wsl,nginx,php-fpm]\ncategories: \"php\"\ntop: 0\n---\n\n### 一、出现问题\n\n今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示\n\n```bash\n[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: \"POST /pms/login HTTP/1.1\", upstream: \"fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:\", host: \"demo\"\n```\n\nnginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了\n1.TCP 是使用 TCP 端口连接 127.0.0.1:9000\n\n``` bash\n fastcgi_pass 127.0.0.1:9000;\n```\n\n2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock\n\n``` bash\n fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n```\n\n### 二、两种通信方式的分析和总结\n\n从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。\n当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。\n因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。\n\n### 三、解决方案\n\n在 nginx 的配置文件中加入\n\n```bash\n fastcgi_buffering off;\n```\n\n这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"wsl搭建php环境请求超时的问题解决方案","published":1,"updated":"2019-11-12T02:05:15.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolq004lyos66y2kcmo5","content":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示</p>\n<pre><code class=\"lang-bash\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre>\n<p>nginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了<br>1.TCP 是使用 TCP 端口连接 127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。<br>当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在 nginx 的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、出现问题\"><a href=\"#一、出现问题\" class=\"headerlink\" title=\"一、出现问题\"></a>一、出现问题</h3><p>今天在公司电脑安装了 wsl, 在部署 php 环境的时候发现由 nginx 转发到 php-fpm 的请求非常慢，查看 nginx 错误日志显示</p>\n<pre><code class=\"lang-bash\">[error] 3383#3383: *74 upstream timed out (110: Connection timed out) while reading upstream, client: 127.0.0.1, server: demo, request: &quot;POST /pms/login HTTP/1.1&quot;, upstream: &quot;fastcgi://\n    unix:/var/run/php/php7.2-fpm.sock:&quot;, host: &quot;demo&quot;\n</code></pre>\n<p>nginx 和 fastcgi 的通信方式有两种，一种是 TCP socket 的方式，一种是 unix socket 方式，因为 wsl 安装的 php-fpm 默认是 unix socket，我就没改动了<br>1.TCP 是使用 TCP 端口连接 127.0.0.1:9000</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass 127.0.0.1:9000;\n</code></pre>\n<p>2.Socket 是使用 unix domain socket 连接套接字 php-fpm.sock</p>\n<pre><code class=\"lang-bash\"> fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n</code></pre>\n<h3 id=\"二、两种通信方式的分析和总结\"><a href=\"#二、两种通信方式的分析和总结\" class=\"headerlink\" title=\"二、两种通信方式的分析和总结\"></a>二、两种通信方式的分析和总结</h3><p>从原理上来说，unix socket 方式肯定要比 tcp 的方式快而且消耗资源少，因为 socket 之间在 nginx 和 php-fpm 的进程之间通信，而 tcp 需要经过本地回环驱动，还要申请临时端口和 tcp 相关资源。<br>当然还是从原理上来说，unix socket 会显得不是那么稳定，当并发连接数爆发时，会产生大量的长时缓存，在没有面向连接协议支撑的情况下，大数据包很有可能就直接出错并不会返回异常。而 TCP 这样的面向连接的协议，多少可以保证通信的正确性和完整性。<br>因为我是作为开发环境使用，所以直接用 unix socket, 而服务器上用 tcp, 用于负载均衡。</p>\n<h3 id=\"三、解决方案\"><a href=\"#三、解决方案\" class=\"headerlink\" title=\"三、解决方案\"></a>三、解决方案</h3><p>在 nginx 的配置文件中加入</p>\n<pre><code class=\"lang-bash\"> fastcgi_buffering off;\n</code></pre>\n<p>这个配置是否启用读取 fastcgi 服务器消息的缓冲功能。 如果配置为 on，nginx 在接收到 fastcgi 服务器的响应结果时尽快将响应写到缓冲区（由 fastcgi_buffer_size 和 fastcgi_buffering 指令控制）中，如果响应结果超过了缓冲区的大小，nginx 会将超出部分写到临时文件（由 fastcgi_max_temp_file_size 和 fastcgi_temp_file_write_size 指令控制）中。 如果配置为 off，nginx 在接收到 fastcgi 服务器的响应结果时，会将结果同步发送给客户端，不等到所有的响应结果接收完成时，一次性读取响应结果的最大值为 fastcgi_buffer_size 配置的大小</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（一）","date":"2019-01-29T06:55:52.000Z","top":0,"_content":"\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。**\n\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n\n##### 1.1、集合结构\n\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg)\n\n##### 1.2 线性结构\n\n  - 线性结构中的数据元素之间是一对一的关系。\n ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg)\n\n##### 1.3 树形结构\n\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg)\n\n#### 1.4 图形结构\n\n  - 图形结构的数据元素是多对多的关系。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg)\n\n#### 2、物理结构\n\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n\n##### 2.1、顺序存储\n\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg)\n\n##### 2.2、链式存储\n\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（一）\ndate: 2019-01-29 14:55:52\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、数据结构基本概念\n\n#### 1. 数据\n\n- 数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。\n- 数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。\n- 数据就是可以输入到计算机，能被计算机程序处理的符号。\n\n#### 2. 数据元素\n\n- 数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。\n- 鸡、牛等动物是动物的数据元素，人是人类的数据元素。\n\n#### 3. 数据项\n\n- 一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。\n\n#### 4. 数据对象\n\n- 数据对象：是性质相同的数据元素的集合，是数据的子集。\n- 性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。\n\n#### 5. 数据结构\n\n- 在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。\n- 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n\n **ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。**\n\n### 二、逻辑结构和物理结构\n\n#### 1、逻辑结构\n\n- 是指数据对象中数据元素之间的相互关系\n- 逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。\n\n##### 1.1、集合结构\n\n  - 集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n  - 数据结构中的集合关系就类似于数学中的集合。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg)\n\n##### 1.2 线性结构\n\n  - 线性结构中的数据元素之间是一对一的关系。\n ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg)\n\n##### 1.3 树形结构\n\n  - 树形结构中的数据元素之间存在一种一对多的层次关系。\n\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg)\n\n#### 1.4 图形结构\n\n  - 图形结构的数据元素是多对多的关系。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg)\n\n#### 2、物理结构\n\n- 是指数据的逻辑结构在计算机内存中的存储形式。\n- 逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。\n- 数据元素的存储结构形式有两种：顺序存储和链式存储。\n\n##### 2.1、顺序存储\n\n  - 把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。\n  ![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg)\n\n##### 2.2、链式存储\n\n  - 是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n  - 数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（一）","published":1,"updated":"2019-11-12T02:05:15.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolt004pyos64nmz4cli","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。</strong></p>\n</li>\n</ul>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3><h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。</li>\n</ul>\n<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg\" alt></li>\n</ul>\n<h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5><ul>\n<li>线性结构中的数据元素之间是一对一的关系。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5><ul>\n<li><p>树形结构中的数据元素之间存在一种一对多的层次关系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg\" alt></p>\n</li>\n</ul>\n<h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg\" alt></li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。</li>\n</ul>\n<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg\" alt></li>\n</ul>\n<h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5><ul>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据\"><a href=\"#1-数据\" class=\"headerlink\" title=\"1. 数据\"></a>1. 数据</h4><ul>\n<li>数据：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号集合。</li>\n<li>数据不仅仅包括整型、实型等数值类型，还包括字符及声音、图像、视频等非数值类型。</li>\n<li>数据就是可以输入到计算机，能被计算机程序处理的符号。</li>\n</ul>\n<h4 id=\"2-数据元素\"><a href=\"#2-数据元素\" class=\"headerlink\" title=\"2. 数据元素\"></a>2. 数据元素</h4><ul>\n<li>数据元素：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理，也被称为记录。</li>\n<li>鸡、牛等动物是动物的数据元素，人是人类的数据元素。</li>\n</ul>\n<h4 id=\"3-数据项\"><a href=\"#3-数据项\" class=\"headerlink\" title=\"3. 数据项\"></a>3. 数据项</h4><ul>\n<li>一个数据元素可以由若干个数据项组成，是数据不可分割的最小单位。</li>\n</ul>\n<h4 id=\"4-数据对象\"><a href=\"#4-数据对象\" class=\"headerlink\" title=\"4. 数据对象\"></a>4. 数据对象</h4><ul>\n<li>数据对象：是性质相同的数据元素的集合，是数据的子集。</li>\n<li>性质相同是指数据元素具有相同数量和类型的数据项，比如，人都有姓名、生日、性别等相同的数据项。</li>\n</ul>\n<h4 id=\"5-数据结构\"><a href=\"#5-数据结构\" class=\"headerlink\" title=\"5. 数据结构\"></a>5. 数据结构</h4><ul>\n<li>在现实世界中，不同数据元素之间不是独立的，而是存在特定的关系，我们将这些关系称为结构。</li>\n<li><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<p><strong>ps: 数据项相当于数据库的字段的值，数据元素相当于数据表的一条记录，数据对象就相当于数据表。</strong></p>\n</li>\n</ul>\n<h3 id=\"二、逻辑结构和物理结构\"><a href=\"#二、逻辑结构和物理结构\" class=\"headerlink\" title=\"二、逻辑结构和物理结构\"></a>二、逻辑结构和物理结构</h3><h4 id=\"1、逻辑结构\"><a href=\"#1、逻辑结构\" class=\"headerlink\" title=\"1、逻辑结构\"></a>1、逻辑结构</h4><ul>\n<li>是指数据对象中数据元素之间的相互关系</li>\n<li>逻辑结构是针对具体问题的，是为了解决某个问题，在对问题理解的基础上，选择一个合适的数据结构表示数据元素之间的逻辑关系。</li>\n</ul>\n<h5 id=\"1-1、集合结构\"><a href=\"#1-1、集合结构\" class=\"headerlink\" title=\"1.1、集合结构\"></a>1.1、集合结构</h5><ul>\n<li>集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</li>\n<li>数据结构中的集合关系就类似于数学中的集合。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y04dwv1tj20lc0kz74g.jpg\" alt></li>\n</ul>\n<h5 id=\"1-2-线性结构\"><a href=\"#1-2-线性结构\" class=\"headerlink\" title=\"1.2 线性结构\"></a>1.2 线性结构</h5><ul>\n<li>线性结构中的数据元素之间是一对一的关系。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y05xfyw6j20lc0cf74b.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h5 id=\"1-3-树形结构\"><a href=\"#1-3-树形结构\" class=\"headerlink\" title=\"1.3 树形结构\"></a>1.3 树形结构</h5><ul>\n<li><p>树形结构中的数据元素之间存在一种一对多的层次关系。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y06o59wgj20lc0aoq2z.jpg\" alt></p>\n</li>\n</ul>\n<h4 id=\"1-4-图形结构\"><a href=\"#1-4-图形结构\" class=\"headerlink\" title=\"1.4 图形结构\"></a>1.4 图形结构</h4><ul>\n<li>图形结构的数据元素是多对多的关系。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y064j5wbj20lc0hzglq.jpg\" alt></li>\n</ul>\n<h4 id=\"2、物理结构\"><a href=\"#2、物理结构\" class=\"headerlink\" title=\"2、物理结构\"></a>2、物理结构</h4><ul>\n<li>是指数据的逻辑结构在计算机内存中的存储形式。</li>\n<li>逻辑结构是面向问题的，而物理结构就是面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。</li>\n<li>数据元素的存储结构形式有两种：顺序存储和链式存储。</li>\n</ul>\n<h5 id=\"2-1、顺序存储\"><a href=\"#2-1、顺序存储\" class=\"headerlink\" title=\"2.1、顺序存储\"></a>2.1、顺序存储</h5><ul>\n<li>把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。<br><img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y074f02zj20lc039mx4.jpg\" alt></li>\n</ul>\n<h5 id=\"2-2、链式存储\"><a href=\"#2-2、链式存储\" class=\"headerlink\" title=\"2.2、链式存储\"></a>2.2、链式存储</h5><ul>\n<li>是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</li>\n<li>数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置。<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y07a1l9nj20lc0jwq35.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（七）","date":"2019-02-11T03:12:17.000Z","top":0,"_content":"\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语\n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn 阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)\n```\n\n### 最坏情况与平均情况\n\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n\n### 空间复杂度\n\n计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（七）.md","raw":"---\ntitle: 《大话数据结构》读后总结（七）\ndate: 2019-02-11 11:12:17\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 常见的时间复杂度\n\n执行次数 | 函数阶 |  非正式术语\n-|-|-\n12 | O(1) |常数阶|\n2n+3 | O(n) | 线性阶 |\n3n^2+2n+1 |O(n2) | 平方阶 |\n5log2n+20 | O(logn) | 对数阶 |\n2n+3nlog2n+19 | O(nlogn) |nlogn 阶 |\n6n^3+2n^2+3n+4 |O(n3) | 立方阶|\n2^n\t | \tO(2n) | 指数阶 |\n\n常用的时间复杂度所耗费的时间从小到大依次是\n\n```\nO(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)\n```\n\n### 最坏情况与平均情况\n\n对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。\n\n### 空间复杂度\n\n计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（七）","published":1,"updated":"2019-11-12T02:05:15.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolu004syos662oqjisv","content":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn 阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>执行次数</th>\n<th>函数阶</th>\n<th>非正式术语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>O(1)</td>\n<td>常数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3</td>\n<td>O(n)</td>\n<td>线性阶</td>\n<td></td>\n</tr>\n<tr>\n<td>3n^2+2n+1</td>\n<td>O(n2)</td>\n<td>平方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>5log2n+20</td>\n<td>O(logn)</td>\n<td>对数阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2n+3nlog2n+19</td>\n<td>O(nlogn)</td>\n<td>nlogn 阶</td>\n<td></td>\n</tr>\n<tr>\n<td>6n^3+2n^2+3n+4</td>\n<td>O(n3)</td>\n<td>立方阶</td>\n<td></td>\n</tr>\n<tr>\n<td>2^n</td>\n<td>O(2n)</td>\n<td>指数阶</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>常用的时间复杂度所耗费的时间从小到大依次是</p>\n<pre><code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\n</code></pre><h3 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h3><p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>计算公式记作：S(n)=O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（三）","date":"2019-02-02T06:57:45.000Z","top":0,"_content":"\n### 一、算法\n\n#### 1、定义\n\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n\n**ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n\n#### 2、算法与数据结构的关系\n\n- 算法是数据结构的具体运用。\n\n#### 3、算法的特性\n\n##### 3.1 输入输出\n\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n\n##### 3.2 有穷性\n\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n\n##### 3.3 确定性\n\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n\n##### 3.4 可行性\n\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n\n#### 4、算法设计的要求\n\n##### 4.1 正确性\n\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1. 算法程序没有语法错误。\n\n  2. 算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3. 算法程序对于非法的输入数据能够得出满足规格说明的结果。\n\n  4. 算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。\n\n##### 4.2 可读性\n\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n\n##### 4.3 健壮性\n\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n\n##### 4.4 时间效率高和存储量低\n\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（三）.md","raw":"---\ntitle: 《大话数据结构》读后总结（三）\ndate: 2019-02-02 14:57:45\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、算法\n\n#### 1、定义\n\n  - 算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n\n**ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。**\n\n#### 2、算法与数据结构的关系\n\n- 算法是数据结构的具体运用。\n\n#### 3、算法的特性\n\n##### 3.1 输入输出\n\n- 算法具有零个或多个输入，但是一定有输出。\n\n**ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果**\n\n##### 3.2 有穷性\n\n- 算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。\n\n##### 3.3 确定性\n\n- 算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。\n\n##### 3.4 可行性\n\n- 算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。\n\n#### 4、算法设计的要求\n\n##### 4.1 正确性\n\n- 算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。\n\n  1. 算法程序没有语法错误。\n\n  2. 算法程序对于合法的输入数据能够产生满足要求的输出结果。\n\n  3. 算法程序对于非法的输入数据能够得出满足规格说明的结果。\n\n  4. 算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。\n\n- 证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。\n\n##### 4.2 可读性\n\n- 算法设计的另一目的是为了便于阅读、理解和交流。\n\n##### 4.3 健壮性\n\n- 当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。\n\n##### 4.4 时间效率高和存储量低\n\n- 时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。\n- 存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（三）","published":1,"updated":"2019-11-12T02:05:15.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolv004xyos69h9y3093","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。</li>\n</ul>\n<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5><ul>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</li>\n</ul>\n<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5><ul>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。</li>\n</ul>\n<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5><ul>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。</li>\n</ul>\n<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5><ul>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<ol>\n<li><p>算法程序没有语法错误。</p>\n</li>\n<li><p>算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n</li>\n<li><p>算法程序对于非法的输入数据能够得出满足规格说明的结果。</p>\n</li>\n<li><p>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n</ol>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。</p>\n</li>\n</ul>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5><ul>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。</li>\n</ul>\n<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5><ul>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。</li>\n</ul>\n<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5><ul>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h4><ul>\n<li>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</li>\n</ul>\n<p><strong>ps: 算法为了解决某个或某类问题，需要把指令表示成一定的操作序列，操作序列包括一组操作，每一个操作都完成特定的功能。</strong></p>\n<h4 id=\"2、算法与数据结构的关系\"><a href=\"#2、算法与数据结构的关系\" class=\"headerlink\" title=\"2、算法与数据结构的关系\"></a>2、算法与数据结构的关系</h4><ul>\n<li>算法是数据结构的具体运用。</li>\n</ul>\n<h4 id=\"3、算法的特性\"><a href=\"#3、算法的特性\" class=\"headerlink\" title=\"3、算法的特性\"></a>3、算法的特性</h4><h5 id=\"3-1-输入输出\"><a href=\"#3-1-输入输出\" class=\"headerlink\" title=\"3.1 输入输出\"></a>3.1 输入输出</h5><ul>\n<li>算法具有零个或多个输入，但是一定有输出。</li>\n</ul>\n<p><strong>ps: 输入是用户对计算机发出的指令，输出是计算机的反馈结果</strong></p>\n<h5 id=\"3-2-有穷性\"><a href=\"#3-2-有穷性\" class=\"headerlink\" title=\"3.2 有穷性\"></a>3.2 有穷性</h5><ul>\n<li>算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</li>\n</ul>\n<h5 id=\"3-3-确定性\"><a href=\"#3-3-确定性\" class=\"headerlink\" title=\"3.3 确定性\"></a>3.3 确定性</h5><ul>\n<li>算法的每一步骤都具有确定的含义。算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。算法的每个步骤被精确定义而无歧义。</li>\n</ul>\n<h5 id=\"3-4-可行性\"><a href=\"#3-4-可行性\" class=\"headerlink\" title=\"3.4 可行性\"></a>3.4 可行性</h5><ul>\n<li>算法的每一步都必须是可行的，每一步都能够通过执行有限次数完成。算法可以转换为程序上机运行，并得到正确的结果。</li>\n</ul>\n<h4 id=\"4、算法设计的要求\"><a href=\"#4、算法设计的要求\" class=\"headerlink\" title=\"4、算法设计的要求\"></a>4、算法设计的要求</h4><h5 id=\"4-1-正确性\"><a href=\"#4-1-正确性\" class=\"headerlink\" title=\"4.1 正确性\"></a>4.1 正确性</h5><ul>\n<li><p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。</p>\n<ol>\n<li><p>算法程序没有语法错误。</p>\n</li>\n<li><p>算法程序对于合法的输入数据能够产生满足要求的输出结果。</p>\n</li>\n<li><p>算法程序对于非法的输入数据能够得出满足规格说明的结果。</p>\n</li>\n<li><p>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>\n</li>\n</ol>\n</li>\n<li><p>证明一个复杂算法在所有层次上都是正确的，代价非常昂贵。所以一般情况下，我们把层次 3 作为一个算法是否正确的标准。</p>\n</li>\n</ul>\n<h5 id=\"4-2-可读性\"><a href=\"#4-2-可读性\" class=\"headerlink\" title=\"4.2 可读性\"></a>4.2 可读性</h5><ul>\n<li>算法设计的另一目的是为了便于阅读、理解和交流。</li>\n</ul>\n<h5 id=\"4-3-健壮性\"><a href=\"#4-3-健壮性\" class=\"headerlink\" title=\"4.3 健壮性\"></a>4.3 健壮性</h5><ul>\n<li>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。</li>\n</ul>\n<h5 id=\"4-4-时间效率高和存储量低\"><a href=\"#4-4-时间效率高和存储量低\" class=\"headerlink\" title=\"4.4 时间效率高和存储量低\"></a>4.4 时间效率高和存储量低</h5><ul>\n<li>时间效率指的是算法的执行时间，对于同一个问题，如果有多个算法能够解决，执行时间短的算法效率高，执行时间长的效率低。</li>\n<li>存储量需求指的是算法在执行过程中需要的最大存储空间，主要指算法程序运行时所占用的内存或外部硬盘存储空间。</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（九）","date":"2019-02-15T03:47:11.000Z","top":0,"_content":"\n### 线性表\n\n#### 顺序存储结构的插入与删除\n\n##### 获得元素操作\n\n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status 是函数的类型，其值是函数结果状态代\n   码，如 OK 等 */\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 ||\n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n\n##### 插入操作\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个位置之前插入新的数据元\n   素 e，L 的长度加 1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)\n        return ERROR;\n    /* 当 i 不在范围内时 */\n    if (i < 1 || i >L->length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)\n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;\n    L->length++;\n    return OK;\n}\n```\n\n##### 删除操作\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个数据元素，并用 e 返回\n   其值，L 的长度减 1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)\n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)\n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。\n\n##### 线性表顺序存储结构的优缺点\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（九）.md","raw":"---\ntitle: 《大话数据结构》读后总结（九）\ndate: 2019-02-15 11:47:11\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 顺序存储结构的插入与删除\n\n##### 获得元素操作\n\n```c\n#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status 是函数的类型，其值是函数结果状态代\n   码，如 OK 等 */\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i < 1 ||\n        i > L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n```\n\n##### 插入操作\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个位置之前插入新的数据元\n   素 e，L 的长度加 1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L->length == MAXSIZE)\n        return ERROR;\n    /* 当 i 不在范围内时 */\n    if (i < 1 || i >L->length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i <= L->length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L->length - 1; k >= i - 1; k--)\n            L->data[k + 1] = L->data[k];\n    }\n    /* 将新元素插入 */\n    L->data[i - 1] = e;\n    L->length++;\n    return OK;\n}\n```\n\n##### 删除操作\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个数据元素，并用 e 返回\n   其值，L 的长度减 1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L->length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i < 1 || i > L->length)\n        return ERROR;\n    *e = L->data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i < L->length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k < L->length; k++)\n            L->data[k - 1] = L->data[k];\n    }\n    L->length--;\n    return OK;\n}\n```\n\n线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。\n\n##### 线性表顺序存储结构的优缺点\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（九）","published":1,"updated":"2019-11-12T02:05:15.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolw0050yos6cjuo4cfr","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code class=\"lang-c\">#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status 是函数的类型，其值是函数结果状态代\n   码，如 OK 等 */\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 ||\n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre>\n<h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个位置之前插入新的数据元\n   素 e，L 的长度加 1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)\n        return ERROR;\n    /* 当 i 不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)\n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;\n    L-&gt;length++;\n    return OK;\n}\n</code></pre>\n<h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个数据元素，并用 e 返回\n   其值，L 的长度减 1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)\n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)\n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre>\n<p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"顺序存储结构的插入与删除\"><a href=\"#顺序存储结构的插入与删除\" class=\"headerlink\" title=\"顺序存储结构的插入与删除\"></a>顺序存储结构的插入与删除</h4><h5 id=\"获得元素操作\"><a href=\"#获得元素操作\" class=\"headerlink\" title=\"获得元素操作\"></a>获得元素操作</h5><pre><code class=\"lang-c\">#define OK 1\n#define ERROR 0\n#define TRUE 1\n#define FALSE 0\ntypedef int Status;\n/* Status 是函数的类型，其值是函数结果状态代\n   码，如 OK 等 */\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(SqList L, int i, ElemType *e)\n{\n    if (L.length == 0 || i &lt; 1 ||\n        i &gt; L.length)\n        return ERROR;\n    *e = L.data[i - 1];\n    return OK;\n}\n</code></pre>\n<h5 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个位置之前插入新的数据元\n   素 e，L 的长度加 1 */\nStatus ListInsert(SqList *L, int i, ElemType e)\n{\n    int k;\n    /* 顺序线性表已经满 */\n    if (L-&gt;length == MAXSIZE)\n        return ERROR;\n    /* 当 i 不在范围内时 */\n    if (i &lt; 1 || i &gt;L-&gt;length + 1)\n        return ERROR;\n    /* 若插入数据位置不在表尾 */\n    if (i &lt;= L-&gt;length)\n    {\n        /*将要插入位置后数据元素向后移动一位 */\n        for (k = L-&gt;length - 1; k &gt;= i - 1; k--)\n            L-&gt;data[k + 1] = L-&gt;data[k];\n    }\n    /* 将新元素插入 */\n    L-&gt;data[i - 1] = e;\n    L-&gt;length++;\n    return OK;\n}\n</code></pre>\n<h5 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h5><pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个数据元素，并用 e 返回\n   其值，L 的长度减 1 */\nStatus ListDelete(SqList *L, int i, ElemType *e)\n{\n    int k;\n    /* 线性表为空 */\n    if (L-&gt;length == 0)\n           return ERROR;\n    /* 删除位置不正确 */\n    if (i &lt; 1 || i &gt; L-&gt;length)\n        return ERROR;\n    *e = L-&gt;data[i - 1];\n    /* 如果删除不是最后位置 */\n    if (i &lt; L-&gt;length)\n    {\n        /* 将删除位置后继元素前移 */\n        for (k = i; k &lt; L-&gt;length; k++)\n            L-&gt;data[k - 1] = L-&gt;data[k];\n    }\n    L-&gt;length--;\n    return OK;\n}\n</code></pre>\n<p>线性表的顺序存储结构，在存、读数据时，不管是哪个位置，时间复杂度都是 O(1)；而插入或删除时，时间复杂度都是 O(n)。</p>\n<h5 id=\"线性表顺序存储结构的优缺点\"><a href=\"#线性表顺序存储结构的优缺点\" class=\"headerlink\" title=\"线性表顺序存储结构的优缺点\"></a>线性表顺序存储结构的优缺点</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0hmhqpkj20w00g40tf.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（二）","date":"2019-01-30T06:57:38.000Z","top":0,"_content":"\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在 C 语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（二）.md","raw":"---\ntitle: 《大话数据结构》读后总结（二）\ndate: 2019-01-30 14:57:38\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、数据结构基本概念\n\n#### 1. 数据类型\n\n- 数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。\n- 在 C 语言中，按照取值的不同，数据类型可以分为两类：\n  - 原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。\n  - 结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。\n- 比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。\n- 抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。\n\n#### 2. 抽象数据类型\n\n- 抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。\n- 比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。\n- 一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。\n- 抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。\n- 抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。\n\n#### 3. 总结\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg)\n\n**数据结构是相互之间存在一种或多种特定关系的数据元素的集合。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（二）","published":1,"updated":"2019-11-12T02:05:15.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolx0054yos62wu0xpld","content":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在 C 语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、数据结构基本概念\"><a href=\"#一、数据结构基本概念\" class=\"headerlink\" title=\"一、数据结构基本概念\"></a>一、数据结构基本概念</h3><h4 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h4><ul>\n<li>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</li>\n<li>在 C 语言中，按照取值的不同，数据类型可以分为两类：<ul>\n<li>原子类型：是不可以再分解的基本类型，包括整型、实型、字符型等。</li>\n<li>结构类型：由若干个类型组合而成，是可以再分解的。例如，整型数组是由若干整型数据组成的。</li>\n</ul>\n</li>\n<li>比如，在 C 语言中变量声明 int a,b，这就意味着，在给变量 a 和 b 赋值时不能超出 int 的取值范围，变量 a 和 b 之间的运算只能是 int 类型所允许的运算。</li>\n<li>抽象是指抽取出事物具有的普遍性的本质。它是抽出问题的特征而忽略非本质的细节，是对具体事物的一个概括。</li>\n</ul>\n<h4 id=\"2-抽象数据类型\"><a href=\"#2-抽象数据类型\" class=\"headerlink\" title=\"2. 抽象数据类型\"></a>2. 抽象数据类型</h4><ul>\n<li>抽象数据类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</li>\n<li>比如我们编写地图类的软件系统，经常就定义一个叫 point 的抽象数据类型，它有 x、y、z 三个整型变量，这样我们很方便地操作一个 point 数据变量就能知道这一点的坐标了。</li>\n<li>一个抽象数据类型定义了：一个数据对象、数据对象中各数据元素之间的关系及对数据元素的操作。</li>\n<li>抽象数据类型体现了程序设计中问题分解、抽象和信息隐藏的特性。</li>\n<li>抽象数据类型把实际生活中的问题分解为多个规模小且容易处理的问题，然后建立一个计算机能处理的数据模型，并把每个功能模块的实现细节作为一个独立的单元，从而使具体实现过程隐藏起来。</li>\n</ul>\n<h4 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09dhz2ij20w00bu3yw.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p><strong>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y09s8ya2j20w00im3z9.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（五）","date":"2019-02-05T02:55:55.000Z","top":0,"_content":"\n### 函数的渐近增长\n\n假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg)\n\n当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n>2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。\n\n输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n>N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg)\n\n当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n>3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg)\n\n当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n>1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg)\n\n当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（五）.md","raw":"---\ntitle: 《大话数据结构》读后总结（五）\ndate: 2019-02-05 10:55:55\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\ntop: 0\n---\n\n### 函数的渐近增长\n\n假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg)\n\n当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n>2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。\n\n输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。\n\n函数的渐近增长：**给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n>N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。**\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg)\n\n当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n>3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。\n\n而当后面的常数去掉后，其实结果没有发生改变。\n\n去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg)\n\n当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n>1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg)\n\n当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。\n\n如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（五）","published":1,"updated":"2019-11-12T02:05:15.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqolz0057yos6h9tcmvri","content":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n&gt;2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。</p>\n<p>输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n&gt;N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n&gt;3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n&gt;1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h3><p>假设两个算法的输入规模都是 n，算法 A 要做 2n+3 次操作，你可以理解为先有一个 n 次的循环，执行完成后，再有一个 n 次循环，最后有三次赋值或运算，共 2n+3 次操作。算法 B 要做 3n+1 次操作。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0eect3pj20w008q0te.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 时，算法 A 效率不如算法 B（次数比算法 B 要多一次）。而当 n=2 时，两者效率相同；当 n&gt;2 时，算法 A 就开始优于算法 B 了，随着 n 的增加，算法 A 比算法 B 越来越好了（执行的次数比 B 要少）。于是我们可以得出结论，算法 A 总体上要好过算法 B。</p>\n<p>输入规模 n 在没有限制的情况下，只要超过一个数值 N，这个函数就总是大于另一个函数，函数是渐近增长的。</p>\n<p>函数的渐近增长：<strong>给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n&gt;N，f(n) 总是比 g(n) 大，那么，我们说 f(n) 的增长渐近快于 g(n)。</strong></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0elkfk6j20w00a2wfd.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n≤3 的时候，算法 C 要差于算法 D（因为算法 C 次数比较多），但当 n&gt;3 后，算法 C 的优势就越来越优于算法 D 了，到后来更是远远胜过。</p>\n<p>而当后面的常数去掉后，其实结果没有发生改变。</p>\n<p>去掉与 n 相乘的常数，这样的结果也没发生改变，算法 C′的次数随着 n 的增长，还是远小于算法 D′。也就是说，与最高次项相乘的常数并不重要。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0evkavyj20w0084gmb.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n=1 的时候，算法 E 与算法 F 结果相同，但当 n&gt;1 后，算法 E 的优势就要开始优于算法 F，随着 n 的增大，差异非常明显。通过观察发现，最高次项的指数大的，函数随着 n 的增长，结果也会变得增长特别快。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0f2raxcj20w00ekgn4.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当 n 的值越来越大时，你会发现，3n+1 已经没法和 2n2 的结果相比较，最终几乎可以忽略不计。也就是说，随着 n 值变得非常大以后，算法 G 其实已经很趋近于算法 I。于是我们可以得到这样一个结论，判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。</p>\n<p>如果对比这几个算法的关键执行次数函数的渐近增长性，可以分析出：某个算法，随着 n 的增大，它会越来越优于另一算法，或者越来越差于另一算法。这其实就是事前估算方法的理论依据，通过算法时间复杂度来估算算法时间效率。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（八）","date":"2019-02-13T03:47:01.000Z","top":0,"_content":"\n### 线性表\n\n#### 定义\n\n线性表（List）：零个或多个数据元素的有限序列\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg)\n\n线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。\n\n#### 抽象数据类型\n\n```\nADT 线性表 (List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为 DataType。\n    其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表 L。\n    ListEmpty(L):          若线性表为空，返回 true，否则返回 false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表 L 中的第 i 个位置元素值返回给 e。\n    LocateElem(L, e):      在线性表 L 中查找与给定值 e 相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n\n##### 定义\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg)\n\n##### 顺序存储方式\n\n把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n\n```c\n/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType 类型根据实际情况而定，这里假设为 int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为 MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n```\n\n##### 数组长度与线性表长度区别\n\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。\n\n```c\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（八）.md","raw":"---\ntitle: 《大话数据结构》读后总结（八）\ndate: 2019-02-13 11:47:01\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 定义\n\n线性表（List）：零个或多个数据元素的有限序列\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg)\n\n线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。\n\n#### 抽象数据类型\n\n```\nADT 线性表 (List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为 DataType。\n    其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表 L。\n    ListEmpty(L):          若线性表为空，返回 true，否则返回 false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表 L 中的第 i 个位置元素值返回给 e。\n    LocateElem(L, e):      在线性表 L 中查找与给定值 e 相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n```\n\n#### 顺序存储结构\n\n##### 定义\n\n线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg)\n\n##### 顺序存储方式\n\n把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。\n\n```c\n/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType 类型根据实际情况而定，这里假设为 int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为 MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n```\n\n##### 数组长度与线性表长度区别\n\n- 数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。\n- 线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。\n- 在任意时刻，线性表的长度应该小于等于数组的长度。\n\n##### 地址计算方法\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg)\n用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。\n\n假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。\n\n```c\nLOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n```\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（八）","published":1,"updated":"2019-11-12T02:05:15.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom0005ayos61q35e2p5","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表 (List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为 DataType。\n    其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表 L。\n    ListEmpty(L):          若线性表为空，返回 true，否则返回 false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表 L 中的第 i 个位置元素值返回给 e。\n    LocateElem(L, e):      在线性表 L 中查找与给定值 e 相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code class=\"lang-c\">/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType 类型根据实际情况而定，这里假设为 int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为 MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n</code></pre>\n<h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。</p>\n<pre><code class=\"lang-c\">LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>线性表（List）：零个或多个数据元素的有限序列</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0g27lt3j20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性表元素的个数 n（n≥0）定义为线性表的长度，当 n=0 时，称为空表。</p>\n<h4 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h4><pre><code>ADT 线性表 (List)\nData\n    线性表的数据对象集合为{a1, a2, ......, an}，每个元素的类型均为 DataType。\n    其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，\n    除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。\n    数据元素之间的关系是一对一的关系。\nOperation\n    InitList(*L):          初始化操作，建立一个空的线性表 L。\n    ListEmpty(L):          若线性表为空，返回 true，否则返回 false。\n    ClearList(*L):         将线性表清空。\n    GetElem(L, i, *e):     将线性表 L 中的第 i 个位置元素值返回给 e。\n    LocateElem(L, e):      在线性表 L 中查找与给定值 e 相等的元素，\n                           如果查找成功，返回该元素在表中序号表示成功；\n</code></pre><h4 id=\"顺序存储结构\"><a href=\"#顺序存储结构\" class=\"headerlink\" title=\"顺序存储结构\"></a>顺序存储结构</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>线性表的顺序存储结构，指的是用一段地址连续的存储单元依次存储线性表的数据元素。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gcjxgnj20w003vaa1.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<h5 id=\"顺序存储方式\"><a href=\"#顺序存储方式\" class=\"headerlink\" title=\"顺序存储方式\"></a>顺序存储方式</h5><p>把第一个数据元素存到数组下标为 0 的位置中，接着把线性表相邻的元素存储在数组中相邻的位置。</p>\n<pre><code class=\"lang-c\">/* 存储空间初始分配量 */\n#define MAXSIZE 20\n/* ElemType 类型根据实际情况而定，这里假设为 int */\ntypedef int ElemType;\ntypedef struct\n{\n    /* 数组存储数据元素，最大值为 MAXSIZE */\n    ElemType data[MAXSIZE];\n    /* 线性表当前长度 */\n    int length;\n} SqList;\n</code></pre>\n<h5 id=\"数组长度与线性表长度区别\"><a href=\"#数组长度与线性表长度区别\" class=\"headerlink\" title=\"数组长度与线性表长度区别\"></a>数组长度与线性表长度区别</h5><ul>\n<li>数组的长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的。</li>\n<li>线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</li>\n<li>在任意时刻，线性表的长度应该小于等于数组的长度。</li>\n</ul>\n<h5 id=\"地址计算方法\"><a href=\"#地址计算方法\" class=\"headerlink\" title=\"地址计算方法\"></a>地址计算方法</h5><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gptseaj20w0099mx7.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>用数组存储顺序表意味着要分配固定长度的数组空间，由于线性表中可以进行插入和删除操作，因此分配的数组空间要大于等于当前线性表的长度。</p>\n<p>假设占用的是 c 个存储单元，那么线性表中第 i+1 个数据元素的存储位置和第 i 个数据元素的存储位置满足下列关系（LOC 表示获得存储位置的函数）。</p>\n<pre><code class=\"lang-c\">LOC(ai+1)=LOC(ai)+c\nLOC(ai)=LOC(a1)+(i-1)*c\n</code></pre>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0gzv83uj20w007mdfr.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（六）","date":"2019-02-07T02:56:25.000Z","top":0,"_content":"\n### 算法时间复杂度定义\n\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。\n\n一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。\n\nO(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。\n\n推导大 O 阶：\n\n1．用常数 1 取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。\n\n#### 常数阶\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。\n\n#### 线性阶\n\n```c\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n```\n\n时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。\n\n#### 对数阶\n\n```c\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n```\n\n由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。\n\n#### 平方阶\n\n```c\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n```\n\n外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。\n\n```c\nn++;                       /* 执行次数为 1 */\nfunction(n);               /* 执行次数为 n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为 n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为 n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n```\n\n执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（六）.md","raw":"---\ntitle: 《大话数据结构》读后总结（六）\ndate: 2019-02-07 10:56:25\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 算法时间复杂度定义\n\n算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。\n\n一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。\n\nO(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。\n\n推导大 O 阶：\n\n1．用常数 1 取代运行时间中的所有加法常数。\n\n2．在修改后的运行次数函数中，只保留最高阶项。\n\n3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。\n\n#### 常数阶\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。\n\n#### 线性阶\n\n```c\nint i;\nfor (i = 0; i < n; i++)\n{\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n```\n\n时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。\n\n#### 对数阶\n\n```c\nint count = 1;\nwhile (count < n)\n{\n    count = count * 2;\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n```\n\n由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。\n\n#### 平方阶\n\n```c\nint i, j;\nfor (i = 0; i < n; i++)\n{\n    for (j = 0; j < n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n```\n\n外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。\n\n```c\nn++;                       /* 执行次数为 1 */\nfunction(n);               /* 执行次数为 n */\nint i, j;\nfor (i = 0; i < n; i++)    /* 执行次数为 n^2 */\n{\n    function (i);\n}\nfor (i = 0; i < n; i++)    /* 执行次数为 n(n + 1)/2 */\n{\n    for (j = i; j < n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n```\n\n执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（六）","published":1,"updated":"2019-11-12T02:05:15.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom1005eyos61vm9etjx","content":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。</p>\n<p>一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</p>\n<p>O(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。</p>\n<p>推导大 O 阶：</p>\n<p>1．用常数 1 取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<p>运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code class=\"lang-c\">int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n</code></pre>\n<p>时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code class=\"lang-c\">int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n</code></pre>\n<p>由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code class=\"lang-c\">int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。</p>\n<pre><code class=\"lang-c\">n++;                       /* 执行次数为 1 */\nfunction(n);               /* 执行次数为 n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为 n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为 n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"算法时间复杂度定义\"><a href=\"#算法时间复杂度定义\" class=\"headerlink\" title=\"算法时间复杂度定义\"></a>算法时间复杂度定义</h3><p>算法的时间复杂度，也就是算法的时间量度，记作：T(n)=O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。</p>\n<p>一般情况下，随着 n 的增大，T(n) 增长最慢的算法为最优算法。</p>\n<p>O(1) 叫常数阶、O(n) 叫线性阶、O(n^2) 叫平方阶。</p>\n<p>推导大 O 阶：</p>\n<p>1．用常数 1 取代运行时间中的所有加法常数。</p>\n<p>2．在修改后的运行次数函数中，只保留最高阶项。</p>\n<p>3．如果最高阶项存在且不是 1，则去除与这个项相乘的常数。</p>\n<h4 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h4><pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<p>运行次数函数是 f(n)=3, 时间复杂度为 O(1)。与问题的大小无关（n 的多少），执行时间恒定的算法，叫常数阶。</p>\n<h4 id=\"线性阶\"><a href=\"#线性阶\" class=\"headerlink\" title=\"线性阶\"></a>线性阶</h4><pre><code class=\"lang-c\">int i;\nfor (i = 0; i &lt; n; i++)\n{\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n</code></pre>\n<p>时间复杂度为 O(n)，因为循环体中的代码须要执行 n 次。</p>\n<h4 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h4><pre><code class=\"lang-c\">int count = 1;\nwhile (count &lt; n)\n{\n    count = count * 2;\n    /* 时间复杂度为 O(1) 的程序步骤序列 */\n}\n</code></pre>\n<p>由 2x=n 得到 x=log2n, 时间复杂度为 O(logn)。</p>\n<h4 id=\"平方阶\"><a href=\"#平方阶\" class=\"headerlink\" title=\"平方阶\"></a>平方阶</h4><pre><code class=\"lang-c\">int i, j;\nfor (i = 0; i &lt; n; i++)\n{\n    for (j = 0; j &lt; n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>外层的循环时间复杂度 O(n)，内层时间复杂度为 O(n)，所以这段代码的时间复杂度为 O(n^2)。</p>\n<pre><code class=\"lang-c\">n++;                       /* 执行次数为 1 */\nfunction(n);               /* 执行次数为 n */\nint i, j;\nfor (i = 0; i &lt; n; i++)    /* 执行次数为 n^2 */\n{\n    function (i);\n}\nfor (i = 0; i &lt; n; i++)    /* 执行次数为 n(n + 1)/2 */\n{\n    for (j = i; j &lt; n; j++)\n    {\n        /* 时间复杂度为 O(1) 的程序步骤序列 */\n    }\n}\n</code></pre>\n<p>执行次数 f(n)=1+n+n^2+n(n+1)/2=3/2·n^2+3/2·n+1，时间复杂度也是 O(n2)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十一）","date":"2019-02-25T03:47:28.000Z","top":0,"_content":"\n### 单链表的读取\n\n单链表第 i 个数据的算法思路：\n\n1. 声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，返回结点 p 的数据。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针 p */\n    p = L->next;        /* 让 p 指向链表 L 的第个结点 */\n    j = 1;                 /* j 为计数器 */\n    /* p 不为空且计数器 j 还没有等于 i 时，循环继续 */\n    while (p && j < i)\n    {\n        p = p->next;    /* 让 p 指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第 i 个结点不存在 */\n    *e = p->data;       /* 取第 i 个结点的数据 */\n    return OK;\n}\n```\n\n从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。\n\n### 单链表的插入与删除\n\n#### 单链表的插入\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg)\n\n```c\ns->next = p->next; p->next = s;\n```\n\n单链表第 i 个数据插入结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，在系统中生成一个空结点 s；\n\n5. 将数据元素 e 赋值给 s->data；\n\n6. 单链表的插入标准语句 s->next=p->next;p->next=s；\n\n7. 返回成功。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个结点位置之前插入新的数\n   据元素 e，L 的长度加 1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第 i-1 个结点 */\n    while (p && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!p || j > i)\n        return ERROR;\n    /* 生成新结点（C 标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n    /* 将 p 的后继结点赋值给 s 的后继 */\n    s->next = p->next;\n    /* 将 s 赋值给 p 的后继 */\n    p->next = s;\n    return OK;\n}\n```\n\n#### 单链表的删除\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg)\n\n```c\nq=p->next; p->next=q->next;\n```\n\n单链表第 i 个数据删除结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，将欲删除的结点 p->next 赋值给 q；\n\n5. 单链表的删除标准语句 p->next=q->next；\n\n6. 将 q 结点中的数据赋值给 e，作为返回；\n\n7. 释放 q 结点；\n\n8. 返回成功。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个结点，并用 e 返回其\n   值，L 的长度减 1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第 i-1 个结点 */\n    while (p->next && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;\n    q = p->next;\n    /* 将 q 的后继赋值给 p 的后继 */\n    p->next = q->next;\n    /* 将 q 结点中的数据给 e */\n    *e = q->data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n```\n\n### 总结\n\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是 O(n)。\n\n如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（十一）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十一）\ndate: 2019-02-25 11:47:28\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 单链表的读取\n\n单链表第 i 个数据的算法思路：\n\n1. 声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，返回结点 p 的数据。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针 p */\n    p = L->next;        /* 让 p 指向链表 L 的第个结点 */\n    j = 1;                 /* j 为计数器 */\n    /* p 不为空且计数器 j 还没有等于 i 时，循环继续 */\n    while (p && j < i)\n    {\n        p = p->next;    /* 让 p 指向下一个结点 */\n        ++j;\n    }\n    if (!p || j > i)\n        return ERROR;      /* 第 i 个结点不存在 */\n    *e = p->data;       /* 取第 i 个结点的数据 */\n    return OK;\n}\n```\n\n从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。\n\n### 单链表的插入与删除\n\n#### 单链表的插入\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg)\n\n```c\ns->next = p->next; p->next = s;\n```\n\n单链表第 i 个数据插入结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，在系统中生成一个空结点 s；\n\n5. 将数据元素 e 赋值给 s->data；\n\n6. 单链表的插入标准语句 s->next=p->next;p->next=s；\n\n7. 返回成功。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个结点位置之前插入新的数\n   据元素 e，L 的长度加 1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第 i-1 个结点 */\n    while (p && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!p || j > i)\n        return ERROR;\n    /* 生成新结点（C 标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s->data = e;\n    /* 将 p 的后继结点赋值给 s 的后继 */\n    s->next = p->next;\n    /* 将 s 赋值给 p 的后继 */\n    p->next = s;\n    return OK;\n}\n```\n\n#### 单链表的删除\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg)\n\n```c\nq=p->next; p->next=q->next;\n```\n\n单链表第 i 个数据删除结点的算法思路：\n\n1. 声明一指针 p 指向链表头结点，初始化 j 从 1 开始；\n\n2. 当 j<i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；\n\n3. 若到链表末尾 p 为空，则说明第 i 个结点不存在；\n\n4. 否则查找成功，将欲删除的结点 p->next 赋值给 q；\n\n5. 单链表的删除标准语句 p->next=q->next；\n\n6. 将 q 结点中的数据赋值给 e，作为返回；\n\n7. 释放 q 结点；\n\n8. 返回成功。\n\n```c\n/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个结点，并用 e 返回其\n   值，L 的长度减 1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第 i-1 个结点 */\n    while (p->next && j < i)\n    {\n        p = p->next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!(p->next) || j > i)\n        return ERROR;\n    q = p->next;\n    /* 将 q 的后继赋值给 p 的后继 */\n    p->next = q->next;\n    /* 将 q 结点中的数据给 e */\n    *e = q->data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n```\n\n### 总结\n\n单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。\n它们的时间复杂度都是 O(n)。\n\n如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（十一）","published":1,"updated":"2019-11-12T02:05:15.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom2005iyos6359m981w","content":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第 i 个数据的算法思路：</p>\n<ol>\n<li><p>声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，返回结点 p 的数据。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针 p */\n    p = L-&gt;next;        /* 让 p 指向链表 L 的第个结点 */\n    j = 1;                 /* j 为计数器 */\n    /* p 不为空且计数器 j 还没有等于 i 时，循环继续 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;    /* 让 p 指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第 i 个结点不存在 */\n    *e = p-&gt;data;       /* 取第 i 个结点的数据 */\n    return OK;\n}\n</code></pre>\n<p>从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre>\n<p>单链表第 i 个数据插入结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，在系统中生成一个空结点 s；</p>\n</li>\n<li><p>将数据元素 e 赋值给 s-&gt;data；</p>\n</li>\n<li><p>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个结点位置之前插入新的数\n   据元素 e，L 的长度加 1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第 i-1 个结点 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;\n    /* 生成新结点（C 标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s-&gt;data = e;\n    /* 将 p 的后继结点赋值给 s 的后继 */\n    s-&gt;next = p-&gt;next;\n    /* 将 s 赋值给 p 的后继 */\n    p-&gt;next = s;\n    return OK;\n}\n</code></pre>\n<h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre>\n<p>单链表第 i 个数据删除结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，将欲删除的结点 p-&gt;next 赋值给 q；</p>\n</li>\n<li><p>单链表的删除标准语句 p-&gt;next=q-&gt;next；</p>\n</li>\n<li><p>将 q 结点中的数据赋值给 e，作为返回；</p>\n</li>\n<li><p>释放 q 结点；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个结点，并用 e 返回其\n   值，L 的长度减 1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第 i-1 个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;\n    q = p-&gt;next;\n    /* 将 q 的后继赋值给 p 的后继 */\n    p-&gt;next = q-&gt;next;\n    /* 将 q 结点中的数据给 e */\n    *e = q-&gt;data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是 O(n)。</p>\n<p>如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"单链表的读取\"><a href=\"#单链表的读取\" class=\"headerlink\" title=\"单链表的读取\"></a>单链表的读取</h3><p>单链表第 i 个数据的算法思路：</p>\n<ol>\n<li><p>声明一个指针 p 指向链表第一个结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，返回结点 p 的数据。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤ListLength(L) */\n/* 操作结果：用 e 返回 L 中第 i 个数据元素的值 */\nStatus GetElem(LinkList L, int i, ElemType *e)\n{\n    int j;\n    LinkList p;            /* 声明一指针 p */\n    p = L-&gt;next;        /* 让 p 指向链表 L 的第个结点 */\n    j = 1;                 /* j 为计数器 */\n    /* p 不为空且计数器 j 还没有等于 i 时，循环继续 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;    /* 让 p 指向下一个结点 */\n        ++j;\n    }\n    if (!p || j &gt; i)\n        return ERROR;      /* 第 i 个结点不存在 */\n    *e = p-&gt;data;       /* 取第 i 个结点的数据 */\n    return OK;\n}\n</code></pre>\n<p>从头开始找，直到第 i 个结点为止。由于这个算法的时间复杂度取决于 i 的位置，当 i=1 时，则不需遍历，第一个就取出数据了，而当 i=n 时则遍历 n-1 次才可以。因此最坏情况的时间复杂度是 O(n)。</p>\n<h3 id=\"单链表的插入与删除\"><a href=\"#单链表的插入与删除\" class=\"headerlink\" title=\"单链表的插入与删除\"></a>单链表的插入与删除</h3><h4 id=\"单链表的插入\"><a href=\"#单链表的插入\" class=\"headerlink\" title=\"单链表的插入\"></a>单链表的插入</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y027yrq5j20lc0dpwep.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">s-&gt;next = p-&gt;next; p-&gt;next = s;\n</code></pre>\n<p>单链表第 i 个数据插入结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，在系统中生成一个空结点 s；</p>\n</li>\n<li><p>将数据元素 e 赋值给 s-&gt;data；</p>\n</li>\n<li><p>单链表的插入标准语句 s-&gt;next=p-&gt;next;p-&gt;next=s；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L)， */\n/* 操作结果：在 L 中第 i 个结点位置之前插入新的数\n   据元素 e，L 的长度加 1 */\nStatus ListInsert(LinkList *L, int i, ElemType e)\n{\n    int j;\n    LinkList p, s;\n    p = *L;\n    j = 1;\n    /* 寻找第 i-1 个结点 */\n    while (p &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!p || j &gt; i)\n        return ERROR;\n    /* 生成新结点（C 标准函数） */\n    s = (LinkList)malloc(sizeof(Node));\n    s-&gt;data = e;\n    /* 将 p 的后继结点赋值给 s 的后继 */\n    s-&gt;next = p-&gt;next;\n    /* 将 s 赋值给 p 的后继 */\n    p-&gt;next = s;\n    return OK;\n}\n</code></pre>\n<h4 id=\"单链表的删除\"><a href=\"#单链表的删除\" class=\"headerlink\" title=\"单链表的删除\"></a>单链表的删除</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0jza8zaj20w00bfjrj.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<pre><code class=\"lang-c\">q=p-&gt;next; p-&gt;next=q-&gt;next;\n</code></pre>\n<p>单链表第 i 个数据删除结点的算法思路：</p>\n<ol>\n<li><p>声明一指针 p 指向链表头结点，初始化 j 从 1 开始；</p>\n</li>\n<li><p>当 j&lt;i 时，就遍历链表，让 p 的指针向后移动，不断指向下一个结点，j 累加 1；</p>\n</li>\n<li><p>若到链表末尾 p 为空，则说明第 i 个结点不存在；</p>\n</li>\n<li><p>否则查找成功，将欲删除的结点 p-&gt;next 赋值给 q；</p>\n</li>\n<li><p>单链表的删除标准语句 p-&gt;next=q-&gt;next；</p>\n</li>\n<li><p>将 q 结点中的数据赋值给 e，作为返回；</p>\n</li>\n<li><p>释放 q 结点；</p>\n</li>\n<li><p>返回成功。</p>\n</li>\n</ol>\n<pre><code class=\"lang-c\">/* 初始条件：顺序线性表 L 已存在，1≤i≤\n   ListLength(L) */\n/* 操作结果：删除 L 的第 i 个结点，并用 e 返回其\n   值，L 的长度减 1 */\nStatus ListDelete(LinkList *L, int i, ElemType *e)\n{\n    int j;\n    LinkList p, q;\n    p = *L;\n    j = 1;\n    /* 遍历寻找第 i-1 个结点 */\n    while (p-&gt;next &amp;&amp; j &lt; i)\n    {\n        p = p-&gt;next;\n        ++j;\n    }\n    /* 第 i 个结点不存在 */\n    if (!(p-&gt;next) || j &gt; i)\n        return ERROR;\n    q = p-&gt;next;\n    /* 将 q 的后继赋值给 p 的后继 */\n    p-&gt;next = q-&gt;next;\n    /* 将 q 结点中的数据给 e */\n    *e = q-&gt;data;\n    /* 让系统回收此结点，释放内存 */\n    free(q);\n    return OK;\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>单链表插入和删除算法，都是由两部分组成：第一部分就是遍历查找第 i 个结点；第二部分就是插入和删除结点。<br>它们的时间复杂度都是 O(n)。</p>\n<p>如果在我们不知道第 i 个结点的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。但如果，我们希望从第 i 个位置，插入 10 个结点，对于顺序存储结构意味着，每一次插入都需要移动 n-i 个结点，每次都是 O(n)。而单链表，我们只需要在第一次时，找到第 i 个位置的指针，此时为 O(n)，接下来只是简单地通过赋值移动指针而已，时间复杂度都是 O(1)。显然，对于插入或删除数据越频繁的操作，单链表的效率优势就越是明显。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（十）","date":"2019-02-20T03:47:21.000Z","top":0,"_content":"\n### 线性表\n\n#### 线性表的链式存储结构\n\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。\n\nn 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg)\n\n线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg)\n\n#### 头指针与头结点的异同\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg)\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p->data 来表示，p->data 的值是一个数据元素，结点 ai 的指针域可以用 p->next 来表示，p->next 的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（十）.md","raw":"---\ntitle: 《大话数据结构》读后总结（十）\ndate: 2019-02-20 11:47:21\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 线性表\n\n#### 线性表的链式存储结构\n\n链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。\n存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。\n\nn 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,...,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg)\n\n线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）\n\n单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg)\n\n#### 头指针与头结点的异同\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg)\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg)\n\n结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p->data 来表示，p->data 的值是一个数据元素，结点 ai 的指针域可以用 p->next 来表示，p->next 的值是一个指针。p->data=ai，p->next->data=ai+1\n\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg)\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（十）","published":1,"updated":"2019-11-12T02:05:15.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom3005lyos6ldybx3tg","content":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。</p>\n<p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p-&gt;data 来表示，p-&gt;data 的值是一个数据元素，结点 ai 的指针域可以用 p-&gt;next 来表示，p-&gt;next 的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><h4 id=\"线性表的链式存储结构\"><a href=\"#线性表的链式存储结构\" class=\"headerlink\" title=\"线性表的链式存储结构\"></a>线性表的链式存储结构</h4><p>链式结构中，除了要存数据元素信息外，还要存储它的后继元素的存储地址。<br>存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称做指针或链。这两部分信息组成数据元素 ai 的存储映像，称为结点（Node）。</p>\n<p>n 个结点（ai 的存储映像）链结成一个链表，即为线性表（a1,a2,…,an）的链式存储结构，因为此链表的每个结点中只包含一个指针域，所以叫做单链表。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0i2307yj20w00aiq2z.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>线性链表的最后一个结点指针为“空”（通常用 NULL 或“^”符号表示）</p>\n<p>单链表的第一个结点前附设一个结点，称为头结点。头结点的数据域可以不存储任何信息</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iazyhtj20w007jt8v.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"头指针与头结点的异同\"><a href=\"#头指针与头结点的异同\" class=\"headerlink\" title=\"头指针与头结点的异同\"></a>头指针与头结点的异同</h4><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iia8d5j20w00jj3zq.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iplt5bj20w009pglp.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>结点由存放数据元素的数据域和存放后继结点地址的指针域组成。假设 p 是指向线性表第 i 个元素的指针，则该结点 ai 的数据域我们可以用 p-&gt;data 来表示，p-&gt;data 的值是一个数据元素，结点 ai 的指针域可以用 p-&gt;next 来表示，p-&gt;next 的值是一个指针。p-&gt;data=ai，p-&gt;next-&gt;data=ai+1</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0iwfjloj20lc08tt8n.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"《大话数据结构》读后总结（四）","date":"2019-02-04T06:57:52.000Z","top":0,"_content":"\n### 一、算法\n\n#### 1、算法效率的度量方法\n\n##### 1.1 事后统计方法\n\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1. 必须依据算法事先编制好程序，花费时间和人力\n\n  2. 时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n\n  3. 算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n\n##### 1.2 事后统计方法\n\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：\n\n  1. 算法采用的策略、方法。\n\n  2. 编译产生的代码质量。\n\n  3. 问题的输入规模。\n\n  4. 机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n\n```c\nint i, sum = 0,n = 100;     /* 执行 1 次 */\nfor (i = 1; i <= n; i++)    /* 执行了 n+1 次 */\n{\n    sum = sum + i;          /* 执行 n 次 */\n}\nprintf(\"%d\", sum);          /* 执行 1 次 */\n```\n\n第二种\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n- 第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；\n- 第二种算法，是 1+1+1=3 次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。\n第三种\n\n```c\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行 n×n 次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n\n这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+...+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是 n，求和算法的第一种，求 1+2+...+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg)\n\n随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/《大话数据结构》读后总结（四）.md","raw":"---\ntitle: 《大话数据结构》读后总结（四）\ndate: 2019-02-04 14:57:52\ntags: [\"数据结构\"]\ncategories: \"大话数据结构\"\ntop: 0\n---\n\n### 一、算法\n\n#### 1、算法效率的度量方法\n\n##### 1.1 事后统计方法\n\n- 通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。\n\n  1. 必须依据算法事先编制好程序，花费时间和人力\n\n  2. 时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。\n\n  3. 算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。\n\n##### 1.2 事后统计方法\n\n- 在计算机程序编制前，依据统计方法对算法进行估算。\n- 经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：\n\n  1. 算法采用的策略、方法。\n\n  2. 编译产生的代码质量。\n\n  3. 问题的输入规模。\n\n  4. 机器执行指令的速度。\n- 抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。\n- 下面用两种求和算法进行举例。\n第一种\n\n```c\nint i, sum = 0,n = 100;     /* 执行 1 次 */\nfor (i = 1; i <= n; i++)    /* 执行了 n+1 次 */\n{\n    sum = sum + i;          /* 执行 n 次 */\n}\nprintf(\"%d\", sum);          /* 执行 1 次 */\n```\n\n第二种\n\n```c\nint sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(\"%d\", sum);        /* 执行一次 */\n```\n\n- 第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；\n- 第二种算法，是 1+1+1=3 次。\n- 事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。\n第三种\n\n```c\nint i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i <= n; i++)\n{\n    for (j = 1; j <= n; j++)\n    {\n        x++;    /* 执行 n×n 次 */\n        sum = sum + x;\n    }\n}\nprintf(\"%d\", sum);    /* 执行一次 */\n```\n\n这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+...+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。\n\n**测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。**\n\n同样问题的输入规模是 n，求和算法的第一种，求 1+2+...+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。\n\n分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。\n![](http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg)\n\n随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"《大话数据结构》读后总结（四）","published":1,"updated":"2019-11-12T02:05:15.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom4005oyos66qy0r0mq","content":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<ol>\n<li><p>必须依据算法事先编制好程序，花费时间和人力</p>\n</li>\n<li><p>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n</li>\n<li><p>算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5><ul>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li><p>算法采用的策略、方法。</p>\n</li>\n<li><p>编译产生的代码质量。</p>\n</li>\n<li><p>问题的输入规模。</p>\n</li>\n<li><p>机器执行指令的速度。</p>\n</li>\n</ol>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, sum = 0,n = 100;     /* 执行 1 次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了 n+1 次 */\n{\n    sum = sum + i;          /* 执行 n 次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行 1 次 */\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<ul>\n<li>第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；</li>\n<li>第二种算法，是 1+1+1=3 次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。<br>第三种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n    for (j = 1; j &lt;= n; j++)\n    {\n        x++;    /* 执行 n×n 次 */\n        sum = sum + x;\n    }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>\n<p>这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+…+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是 n，求和算法的第一种，求 1+2+…+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、算法\"><a href=\"#一、算法\" class=\"headerlink\" title=\"一、算法\"></a>一、算法</h3><h4 id=\"1、算法效率的度量方法\"><a href=\"#1、算法效率的度量方法\" class=\"headerlink\" title=\"1、算法效率的度量方法\"></a>1、算法效率的度量方法</h4><h5 id=\"1-1-事后统计方法\"><a href=\"#1-1-事后统计方法\" class=\"headerlink\" title=\"1.1 事后统计方法\"></a>1.1 事后统计方法</h5><ul>\n<li><p>通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。该方法具有很大缺陷，不予采纳。</p>\n<ol>\n<li><p>必须依据算法事先编制好程序，花费时间和人力</p>\n</li>\n<li><p>时间的比较依赖计算机硬件和软件等环境因素，有时会掩盖算法本身的优劣。</p>\n</li>\n<li><p>算法的测试数据设计困难，并且程序的运行时间往往还与测试数据的规模有很大关系，效率高的算法在小的测试数据面前往往得不到体现。</p>\n</li>\n</ol>\n</li>\n</ul>\n<h5 id=\"1-2-事后统计方法\"><a href=\"#1-2-事后统计方法\" class=\"headerlink\" title=\"1.2 事后统计方法\"></a>1.2 事后统计方法</h5><ul>\n<li>在计算机程序编制前，依据统计方法对算法进行估算。</li>\n<li><p>经过分析，我们发现，一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li><p>算法采用的策略、方法。</p>\n</li>\n<li><p>编译产生的代码质量。</p>\n</li>\n<li><p>问题的输入规模。</p>\n</li>\n<li><p>机器执行指令的速度。</p>\n</li>\n</ol>\n</li>\n<li>抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间，依赖于算法的好坏和问题的输入规模。所谓问题输入规模是指输入量的多少。</li>\n<li>下面用两种求和算法进行举例。<br>第一种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, sum = 0,n = 100;     /* 执行 1 次 */\nfor (i = 1; i &lt;= n; i++)    /* 执行了 n+1 次 */\n{\n    sum = sum + i;          /* 执行 n 次 */\n}\nprintf(&quot;%d&quot;, sum);          /* 执行 1 次 */\n</code></pre>\n<p>第二种</p>\n<pre><code class=\"lang-c\">int sum = 0,n = 100;      /* 执行一次 */\nsum = (1 + n) * n / 2;    /* 执行一次 */\nprintf(&quot;%d&quot;, sum);        /* 执行一次 */\n</code></pre>\n<ul>\n<li>第一种算法，执行了 1+(n+1)+n+1 次 =2n+3 次；</li>\n<li>第二种算法，是 1+1+1=3 次。</li>\n<li>事实上两个算法的第一条和最后一条语句是一样的，所以我们关注的代码其实是中间的那部分，我们把循环看作一个整体，忽略头尾循环判断的开销，那么这两个算法其实就是 n 次与 1 次的差距。<br>第三种</li>\n</ul>\n<pre><code class=\"lang-c\">int i, j, x = 0, sum = 0, n = 100;    /* 执行一次 */\nfor (i = 1; i &lt;= n; i++)\n{\n    for (j = 1; j &lt;= n; j++)\n    {\n        x++;    /* 执行 n×n 次 */\n        sum = sum + x;\n    }\n}\nprintf(&quot;%d&quot;, sum);    /* 执行一次 */\n</code></pre>\n<p>这个例子中，i 从 1 到 100，每次都要让 j 循环 100 次，而当中的 x++ 和 sum=sum+x；其实就是 1+2+3+…+10000，也就是 100^2 次，所以这个算法当中，循环部分的代码整体需要执行 n^2 次。</p>\n<p><strong>测定运行时间最可靠的方法就是计算对运行时间有消耗的基本操作的执行次数。运行时间与这个计数成正比。</strong></p>\n<p>同样问题的输入规模是 n，求和算法的第一种，求 1+2+…+n 需要一段代码运行 n 次。那么这个问题的输入规模使得操作数量是 f(n)=n，显然运行 100 次的同一段代码规模是运算 10 次的 10 倍。而第二种，无论 n 为多少，运行次数都为 1，即 f(n)=1；第三种，运算 100 次是运算 10 次的 1000 倍。因为它是 f(n)=n^2。</p>\n<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。<br><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"http://ww1.sinaimg.cn/large/a616b9a4gy1g4y0b9w2s3j20w00icjry.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure></p>\n<p>随着 n 值的越来越大，它们在时间效率上的差异也就越来越大。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"操作系统之基础篇","top":1,"date":"2016-11-12T06:39:34.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/操作系统之基础篇.md","raw":"---\ntitle: 操作系统之基础篇\ntop: 1\ndate: 2016-11-12 14:39:34\ntags: [\"编程基础\",\"操作系统\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"操作系统之基础篇","published":1,"updated":"2019-11-12T06:43:51.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom5005ryos6sevzn13l","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"操作系统之提升篇","top":1,"date":"2016-01-15T06:39:56.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/操作系统之提升篇.md","raw":"---\ntitle: 操作系统之提升篇\ntop: 1\ndate: 2016-01-15 14:39:56\ntags: [\"编程基础\",\"操作系统\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"操作系统之提升篇","published":1,"updated":"2019-11-12T06:44:04.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom6005vyos6s0qkv7da","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之二分搜索树","top":1,"date":"2019-06-10T03:48:27.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之二分搜索树.md","raw":"---\ntitle: 数据结构之二分搜索树\ntop: 1\ndate: 2019-06-10 11:48:27\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之二分搜索树","published":1,"updated":"2019-11-12T02:05:15.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom7005yyos6w5rcx9dl","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之AVL树","top":1,"date":"2019-06-23T07:58:48.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之AVL树.md","raw":"---\ntitle: 数据结构之AVL树\ntop: 1\ndate: 2019-06-23 15:58:48\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之AVL树","published":1,"updated":"2019-11-12T02:05:15.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom80061yos6iyrwb62h","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之哈希表","top":1,"date":"2019-06-12T07:58:36.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之哈希表.md","raw":"---\ntitle: 数据结构之哈希表\ntop: 1\ndate: 2019-06-12 15:58:36\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之哈希表","published":1,"updated":"2019-11-12T02:05:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqom90064yos6tn4d6e92","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之堆最大堆","top":1,"date":"2019-06-24T08:10:24.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之堆最大堆.md","raw":"---\ntitle: 数据结构之堆最大堆\ntop: 1\ndate: 2019-06-24 16:10:24\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之堆最大堆","published":1,"updated":"2019-11-12T02:05:15.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoma0069yos6q12boshe","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之并查集","top":1,"date":"2019-06-04T07:59:22.000Z","_content":"### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之并查集.md","raw":"---\ntitle: 数据结构之并查集\ntop: 1\ndate: 2019-06-04 15:59:22\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之并查集","published":1,"updated":"2019-11-12T02:05:15.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomb006byos6546fofp8","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之数组","top":1,"date":"2019-06-01T03:29:51.000Z","_content":"### 定义\nphp 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。\ntitle|title|title\n-----|-----|-----\nconte|conte|conte\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|add | 添加元素  |O(n)|在最坏情况下要重新移动所有元素位置|\n|addFirst| 在头部添加元素 |O(n) | 最坏情况|\n|addLast| 在尾部添加元素 |O(1) | 最好情况|\n|get|  获取指定位置元素 |O(1) |数据是连续的，能够直接根据位置获取到元素 |\n|getFirst| 获取首个元素 |O(1) | 同上|\n|getLast| 获取末尾元素 |O(1) |  同上|\n|set| 修改指定索引位置的元素  |O(1) | 同上|\n|contains|  查找数组中是否有元素 |O(1) |需要循环查找|\n|find| 查找数组中元素所在的索引 |O(1) | 需要循环查找|\n|remove| 删除指定元素|O(n)| 在最坏情况下要重新移动所有元素位置|\n|removeFirst| 删除首个元素 |O(n) | 最坏情况|\n|removeLast| 删除末尾元素 |O(1) |  最好情况|\n|removeElement| 删除指定元素 |O(1) | 需要循环查找|\n\n### 总结\n\n数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之数组.md","raw":"---\ntitle: 数据结构之数组\ntop: 1\ndate: 2019-06-01 11:29:51\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\nphp 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。\ntitle|title|title\n-----|-----|-----\nconte|conte|conte\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|add | 添加元素  |O(n)|在最坏情况下要重新移动所有元素位置|\n|addFirst| 在头部添加元素 |O(n) | 最坏情况|\n|addLast| 在尾部添加元素 |O(1) | 最好情况|\n|get|  获取指定位置元素 |O(1) |数据是连续的，能够直接根据位置获取到元素 |\n|getFirst| 获取首个元素 |O(1) | 同上|\n|getLast| 获取末尾元素 |O(1) |  同上|\n|set| 修改指定索引位置的元素  |O(1) | 同上|\n|contains|  查找数组中是否有元素 |O(1) |需要循环查找|\n|find| 查找数组中元素所在的索引 |O(1) | 需要循环查找|\n|remove| 删除指定元素|O(n)| 在最坏情况下要重新移动所有元素位置|\n|removeFirst| 删除首个元素 |O(n) | 最坏情况|\n|removeLast| 删除末尾元素 |O(1) |  最好情况|\n|removeElement| 删除指定元素 |O(1) | 需要循环查找|\n\n### 总结\n\n数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之数组","published":1,"updated":"2019-11-12T02:05:15.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomc006eyos66dmgw8om","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>php 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。<br>title|title|title<br>——-|——-|——-<br>conte|conte|conte</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">add</td>\n<td style=\"text-align:left\">添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addFirst</td>\n<td style=\"text-align:left\">在头部添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addLast</td>\n<td style=\"text-align:left\">在尾部添加元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get</td>\n<td style=\"text-align:left\">获取指定位置元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>数据是连续的，能够直接根据位置获取到元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFirst</td>\n<td style=\"text-align:left\">获取首个元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLast</td>\n<td style=\"text-align:left\">获取末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">修改指定索引位置的元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">contains</td>\n<td style=\"text-align:left\">查找数组中是否有元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:left\">查找数组中元素所在的索引</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remove</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeFirst</td>\n<td style=\"text-align:left\">删除首个元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeLast</td>\n<td style=\"text-align:left\">删除末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeElement</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>php 的数组 array 默认是动态的数据结构，而底层数组应该是在内存中开辟一块固定容量的存储空间，存储一段连续的数据，所以我们只能用 SplFixedArray 限制内存容量。<br>title|title|title<br>——-|——-|——-<br>conte|conte|conte</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">add</td>\n<td style=\"text-align:left\">添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addFirst</td>\n<td style=\"text-align:left\">在头部添加元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">addLast</td>\n<td style=\"text-align:left\">在尾部添加元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">get</td>\n<td style=\"text-align:left\">获取指定位置元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>数据是连续的，能够直接根据位置获取到元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFirst</td>\n<td style=\"text-align:left\">获取首个元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getLast</td>\n<td style=\"text-align:left\">获取末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">set</td>\n<td style=\"text-align:left\">修改指定索引位置的元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>同上</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">contains</td>\n<td style=\"text-align:left\">查找数组中是否有元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">find</td>\n<td style=\"text-align:left\">查找数组中元素所在的索引</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">remove</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>在最坏情况下要重新移动所有元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeFirst</td>\n<td style=\"text-align:left\">删除首个元素</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>最坏情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeLast</td>\n<td style=\"text-align:left\">删除末尾元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>最好情况</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeElement</td>\n<td style=\"text-align:left\">删除指定元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>需要循环查找</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组是最基础的数据结构，所以理解数组的原理和操作时间复杂度是深入学习数据结构和算法的基础。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之映射","top":1,"date":"2019-06-15T03:49:42.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n``` go\ntype Map interface {\n\tAdd(key, value interface{})\n\tContains(key interface{})\n\tGet(key interface{})\n\tSet(key, value interface{})\n\tRemove(key interface{})\n\tGetSize()\n\tIsEmpty()\n}\n```\n\n### 总结\n\n这是 map 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之映射.md","raw":"---\ntitle: 数据结构之映射\ntop: 1\ndate: 2019-06-15 11:49:42\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n``` go\ntype Map interface {\n\tAdd(key, value interface{})\n\tContains(key interface{})\n\tGet(key interface{})\n\tSet(key, value interface{})\n\tRemove(key interface{})\n\tGetSize()\n\tIsEmpty()\n}\n```\n\n### 总结\n\n这是 map 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之映射","published":1,"updated":"2019-11-12T02:05:15.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomd006hyos6si23oqf4","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Map interface {\n    Add(key, value interface{})\n    Contains(key interface{})\n    Get(key interface{})\n    Set(key, value interface{})\n    Remove(key interface{})\n    GetSize()\n    IsEmpty()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是 map 总结</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Map interface {\n    Add(key, value interface{})\n    Contains(key interface{})\n    Get(key interface{})\n    Set(key, value interface{})\n    Remove(key interface{})\n    GetSize()\n    IsEmpty()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是 map 总结</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之字典树","top":1,"date":"2019-06-22T07:58:59.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之字典树.md","raw":"---\ntitle: 数据结构之字典树\ntop: 1\ndate: 2019-06-22 15:58:59\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之字典树","published":1,"updated":"2019-11-12T02:05:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqome006lyos63z4zyw58","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之映射二分搜索树映射","top":1,"date":"2019-06-16T03:49:09.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之映射二分搜索树映射.md","raw":"---\ntitle: 数据结构之映射二分搜索树映射\ntop: 1\ndate: 2019-06-16 11:49:09\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之映射二分搜索树映射","published":1,"updated":"2019-11-12T02:05:15.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomf006nyos6v3ad1zds","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之映射链表映射","top":1,"date":"2019-06-17T03:50:33.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之映射链表映射.md","raw":"---\ntitle: 数据结构之映射链表映射\ntop: 1\ndate: 2019-06-17 11:50:33\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之映射链表映射","published":1,"updated":"2019-11-12T02:05:15.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomg006qyos6gda1mz6o","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之映射AVL树映射","top":1,"date":"2019-06-18T08:04:18.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之映射AVL树映射.md","raw":"---\ntitle: 数据结构之映射AVL树映射\ntop: 1\ndate: 2019-06-18 16:04:18\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之映射AVL树映射","published":1,"updated":"2019-11-12T02:05:15.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomh006tyos6g3dnpvn3","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之栈","top":1,"date":"2019-06-19T11:02:07.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n``` go\ntype Stack interface {\n\tGetSize() int //元素数量\n\tIsEmpty() bool //是否为空\n\tPush(e interface{})//插入元素\n\tPop() interface{}//弹出元素\n\tPeek() interface{}//查看栈顶元素\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之栈.md","raw":"---\ntitle: 数据结构之栈\ntop: 1\ndate: 2019-06-19 19:02:07\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n``` go\ntype Stack interface {\n\tGetSize() int //元素数量\n\tIsEmpty() bool //是否为空\n\tPush(e interface{})//插入元素\n\tPop() interface{}//弹出元素\n\tPeek() interface{}//查看栈顶元素\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之栈","published":1,"updated":"2019-11-12T02:05:15.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomi006xyos6mqterogw","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Stack interface {\n    GetSize() int //元素数量\n    IsEmpty() bool //是否为空\n    Push(e interface{})//插入元素\n    Pop() interface{}//弹出元素\n    Peek() interface{}//查看栈顶元素\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Stack interface {\n    GetSize() int //元素数量\n    IsEmpty() bool //是否为空\n    Push(e interface{})//插入元素\n    Pop() interface{}//弹出元素\n    Peek() interface{}//查看栈顶元素\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之栈数组栈","top":1,"date":"2019-06-21T11:02:54.000Z","_content":"\n### 定义\n\n基于数组 array 实现的先进后出的数据结构。\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|push | 添加元素到栈顶  |O(1)|直接添加元素到数组尾部|\n|pop| 取出栈顶元素 |O(1) |直接查询数组尾部元素|\n|peek| 查询栈顶元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之栈数组栈.md","raw":"---\ntitle: 数据结构之栈数组栈\ntop: 1\ndate: 2019-06-21 19:02:54\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n基于数组 array 实现的先进后出的数据结构。\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|push | 添加元素到栈顶  |O(1)|直接添加元素到数组尾部|\n|pop| 取出栈顶元素 |O(1) |直接查询数组尾部元素|\n|peek| 查询栈顶元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之栈数组栈","published":1,"updated":"2019-11-12T02:05:15.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomj006zyos6hq3ma5qs","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进后出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">push</td>\n<td style=\"text-align:left\">添加元素到栈顶</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n<td style=\"text-align:left\">取出栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接查询数组尾部元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">peek</td>\n<td style=\"text-align:left\">查询栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进后出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">push</td>\n<td style=\"text-align:left\">添加元素到栈顶</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">pop</td>\n<td style=\"text-align:left\">取出栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接查询数组尾部元素</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">peek</td>\n<td style=\"text-align:left\">查询栈顶元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组栈是基于数组实现的栈，只针对数组末尾进行操作，在不考虑扩容的情况下时间复杂度都是 O(1)。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之栈链表栈","top":1,"date":"2019-06-20T03:46:29.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之栈链表栈.md","raw":"---\ntitle: 数据结构之栈链表栈\ntop: 1\ndate: 2019-06-20 11:46:29\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之栈链表栈","published":1,"updated":"2019-11-12T02:05:15.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomk0072yos6926u78gc","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之线段树","top":1,"date":"2019-06-14T07:58:25.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之线段树.md","raw":"---\ntitle: 数据结构之线段树\ntop: 1\ndate: 2019-06-14 15:58:25\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之线段树","published":1,"updated":"2019-11-12T02:05:15.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomm0075yos6ms7xunz0","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之链表","top":1,"date":"2019-06-02T03:45:38.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之链表.md","raw":"---\ntitle: 数据结构之链表\ntop: 1\ndate: 2019-06-02 11:45:38\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之链表","published":1,"updated":"2019-11-12T02:05:15.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomo0079yos6xkyls585","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列","top":1,"date":"2019-06-05T11:03:25.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n```go\ntype Queue interface {\n\tGetSize()\n\tIsEmpty()\n\tEnqueue(e interface{})\n\tDequeue()\n\tGetFront()\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之队列.md","raw":"---\ntitle: 数据结构之队列\ntop: 1\ndate: 2019-06-05 19:03:25\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n```go\ntype Queue interface {\n\tGetSize()\n\tIsEmpty()\n\tEnqueue(e interface{})\n\tDequeue()\n\tGetFront()\n}\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之队列","published":1,"updated":"2019-11-12T02:05:15.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomo007byos62o00yil1","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Queue interface {\n    GetSize()\n    IsEmpty()\n    Enqueue(e interface{})\n    Dequeue()\n    GetFront()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Queue interface {\n    GetSize()\n    IsEmpty()\n    Enqueue(e interface{})\n    Dequeue()\n    GetFront()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之红黑树","top":1,"date":"2019-06-25T08:24:38.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之红黑树.md","raw":"---\ntitle: 数据结构之红黑树\ntop: 1\ndate: 2019-06-25 16:24:38\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之红黑树","published":1,"updated":"2019-11-12T02:05:15.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomp007eyos6ejz8vnwz","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列优先队列","top":1,"date":"2019-06-09T08:05:05.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之队列优先队列.md","raw":"---\ntitle: 数据结构之队列优先队列\ntop: 1\ndate: 2019-06-09 16:05:05\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之队列优先队列","published":1,"updated":"2019-11-12T02:05:15.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomq007hyos6es9tqk1s","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列数组队列","top":1,"date":"2019-06-07T11:03:34.000Z","_content":"\n### 定义\n\n基于数组 array 实现的先进先出的数据结构。\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n```php\n\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|enqueue | 入队  |O(1)|直接添加元素到数组尾部|\n|dequeue| 出队 |O(n) |取出数组头部元素，然后移动其他元素位置 |\n|getFront| 查询队首元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组队列是基于数组实现的队列。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之队列数组队列.md","raw":"---\ntitle: 数据结构之队列数组队列\ntop: 1\ndate: 2019-06-07 19:03:34\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n基于数组 array 实现的先进先出的数据结构。\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n```php\n\n```\n\n### 时间复杂度\n\n|操作|注释|时间复杂度|说明|\n|:-----  |:-----|:-----|-----|\n|enqueue | 入队  |O(1)|直接添加元素到数组尾部|\n|dequeue| 出队 |O(n) |取出数组头部元素，然后移动其他元素位置 |\n|getFront| 查询队首元素 |O(1) |直接取出数组尾部元素|\n\n### 总结\n\n数组队列是基于数组实现的队列。\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之队列数组队列","published":1,"updated":"2019-11-12T02:05:15.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomr007lyos6hp53g8bi","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进先出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-php\">\n\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">enqueue</td>\n<td style=\"text-align:left\">入队</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dequeue</td>\n<td style=\"text-align:left\">出队</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>取出数组头部元素，然后移动其他元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFront</td>\n<td style=\"text-align:left\">查询队首元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组队列是基于数组实现的队列。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>基于数组 array 实现的先进先出的数据结构。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-php\">\n\n</code></pre>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作</th>\n<th style=\"text-align:left\">注释</th>\n<th style=\"text-align:left\">时间复杂度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">enqueue</td>\n<td style=\"text-align:left\">入队</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接添加元素到数组尾部</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dequeue</td>\n<td style=\"text-align:left\">出队</td>\n<td style=\"text-align:left\">O(n)</td>\n<td>取出数组头部元素，然后移动其他元素位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">getFront</td>\n<td style=\"text-align:left\">查询队首元素</td>\n<td style=\"text-align:left\">O(1)</td>\n<td>直接取出数组尾部元素</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>数组队列是基于数组实现的队列。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列链表队列","top":1,"date":"2019-06-06T03:45:32.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之队列链表队列.md","raw":"---\ntitle: 数据结构之队列链表队列\ntop: 1\ndate: 2019-06-06 11:45:32\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之队列链表队列","published":1,"updated":"2019-11-12T02:05:15.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqoms007nyos61z57ocid","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之队列循环队列","top":1,"date":"2019-06-08T11:03:48.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之队列循环队列.md","raw":"---\ntitle: 数据结构之队列循环队列\ntop: 1\ndate: 2019-06-08 19:03:48\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之队列循环队列","published":1,"updated":"2019-11-12T02:05:15.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomu007qyos6ftn0a6vs","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之集合","top":1,"date":"2019-06-03T03:49:36.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n```go\ntype Map interface {\n\tAdd(key, value interface{})\n\tContains(key interface{})\n\tGet(key interface{})\n\tSet(key, value interface{})\n\tRemove(key interface{})\n\tGetSize()\n\tIsEmpty()\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之集合.md","raw":"---\ntitle: 数据结构之集合\ntop: 1\ndate: 2019-06-03 11:49:36\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n```go\ntype Map interface {\n\tAdd(key, value interface{})\n\tContains(key interface{})\n\tGet(key interface{})\n\tSet(key, value interface{})\n\tRemove(key interface{})\n\tGetSize()\n\tIsEmpty()\n}\n```\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之集合","published":1,"updated":"2019-11-12T02:05:15.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomu007tyos6smec5p9k","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Map interface {\n    Add(key, value interface{})\n    Contains(key interface{})\n    Get(key interface{})\n    Set(key, value interface{})\n    Remove(key interface{})\n    GetSize()\n    IsEmpty()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-go\">type Map interface {\n    Add(key, value interface{})\n    Contains(key interface{})\n    Get(key interface{})\n    Set(key, value interface{})\n    Remove(key interface{})\n    GetSize()\n    IsEmpty()\n}\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之集合AVL树集合","top":1,"date":"2019-06-06T08:39:53.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/数据结构之集合AVL树集合.md","raw":"---\ntitle: 数据结构之集合AVL树集合\ntop: 1\ndate: 2019-06-06 16:39:53\ntags:\ncategories:\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"数据结构之集合AVL树集合","published":1,"updated":"2019-11-12T02:05:15.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomw007xyos6iuabpxy4","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之集合二分搜索树集合","top":1,"date":"2019-06-11T03:48:55.000Z","_content":"### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之集合二分搜索树集合.md","raw":"---\ntitle: 数据结构之集合二分搜索树集合\ntop: 1\ndate: 2019-06-11 11:48:55\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之集合二分搜索树集合","published":1,"updated":"2019-11-12T02:05:15.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqomw007zyos6bm00fii7","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"数据结构之集合链表集合","top":1,"date":"2019-06-13T03:50:21.000Z","_content":"\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n```php\n\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","source":"_posts/数据结构之集合链表集合.md","raw":"---\ntitle: 数据结构之集合链表集合\ntop: 1\ndate: 2019-06-13 11:50:21\ntags: [\"数据结构\"]\ncategories: \"数据结构\"\n---\n\n### 定义\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/data-structures)\n\n```php\n\n```\n\n### 总结\n\n### 欢迎扫描下方二维码，持续关注：\n\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步\n","slug":"数据结构之集合链表集合","published":1,"updated":"2019-11-12T02:05:15.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon00082yos62b8jair8","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-php\">\n\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/data-structures\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/data-structures</a>)</p>\n<pre><code class=\"lang-php\">\n\n</code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"算法之冒泡排序","top":1,"date":"2019-04-09T05:21:37.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/算法之冒泡排序.md","raw":"---\ntitle: 算法之冒泡排序\ntop: 1\ndate: 2019-04-09 13:21:37\ntags: [\"算法\"]\ncategories: \"算法\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"算法之冒泡排序","published":1,"updated":"2019-11-12T02:05:15.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon10085yos64irok4by","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"算法之快速排序","top":1,"date":"2019-03-09T05:20:13.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/算法之快速排序.md","raw":"---\ntitle: 算法之快速排序\ntop: 1\ndate: 2019-03-09 13:20:13\ntags: [\"算法\"]\ncategories: \"算法\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"算法之快速排序","published":1,"updated":"2019-11-12T02:05:15.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon20089yos6rw5sih3s","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"算法之插入排序","top":1,"date":"2019-05-09T05:21:51.000Z","_content":"\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/算法之插入排序.md","raw":"---\ntitle: 算法之插入排序\ntop: 1\ndate: 2019-05-09 13:21:51\ntags: [\"算法\"]\ncategories: \"算法\"\n---\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"算法之插入排序","published":1,"updated":"2019-11-12T02:05:15.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon3008cyos64o0vhbqx","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"算法之选择排序","top":1,"date":"2019-01-09T05:20:24.000Z","_content":"\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/算法之选择排序.md","raw":"---\ntitle: 算法之选择排序\ntop: 1\ndate: 2019-01-09 13:20:24\ntags: [\"算法\"]\ncategories: \"算法\"\n---\n\n\n### 代码\n\ngithub 地址：(https://github.com/xushuhui/Algorithms)\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"算法之选择排序","published":1,"updated":"2019-11-12T02:05:15.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon4008fyos66caqkzmc","content":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>github 地址：(<a href=\"https://github.com/xushuhui/Algorithms\" target=\"_blank\" rel=\"noopener\">https://github.com/xushuhui/Algorithms</a>)</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机组成原理之概述篇","top":1,"date":"2016-01-30T06:35:25.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机组成原理之概述篇.md","raw":"---\ntitle: 计算机组成原理之概述篇\ntop: 1\ndate: 2016-01-30 14:35:25\ntags: [\"编程基础\",\"计算机原理\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机组成原理之概述篇","published":1,"updated":"2019-11-12T06:45:19.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon6008iyos6924t0dji","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"编程书籍推荐","top":1,"date":"2016-01-12T05:41:08.000Z","_content":"\n### 书籍推荐\n\n### 《编码：隐匿在计算机软硬件背后的语言》\n![cover](https://img3.doubanio.com/view/subject/l/public/s4379914.jpg)\n\n书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。\n\n### 《鸟哥的linux私房菜：基础学习篇》\n![cover](https://img1.doubanio.com/view/subject/l/public/s4399937.jpg)\n\n《鸟哥的Linux私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习Linux不可多得的一本入门好书。\n\n也可通过本书作者的官方网站阅读书籍的电子版。[电子版](http://cn.linux.vbird.org/linux_basic/linux_basic.php)\n\n[豆瓣链接](https://book.douban.com/subject/4889838/)\n\n### 《深入理解计算机系统（原书第3版）》\n![cover](https://img1.doubanio.com/view/subject/l/public/s29195878.jpg)\n\n《深入理解计算机系统（原书第3版）》这是一本非常出名的书，是理解计算机系统首选书目，是10余万程序员的共同选择。卡内基-梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。\n\n[豆瓣链接](https://book.douban.com/subject/26912767/)\n\n### 《TCP/IP详解 卷1：协议》\n![cover](https://img3.doubanio.com/view/subject/l/public/s1543906.jpg)\n\n很经典的一本书籍，对TCP/IP四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/编程书籍推荐.md","raw":"---\ntitle: 编程书籍推荐\ntop: 1\ndate: 2016-01-12 13:41:08\ntags: [\"编程基础\",\"书籍\"]\ncategories: \"书籍\"\n---\n\n### 书籍推荐\n\n### 《编码：隐匿在计算机软硬件背后的语言》\n![cover](https://img3.doubanio.com/view/subject/l/public/s4379914.jpg)\n\n书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。\n\n### 《鸟哥的linux私房菜：基础学习篇》\n![cover](https://img1.doubanio.com/view/subject/l/public/s4399937.jpg)\n\n《鸟哥的Linux私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习Linux不可多得的一本入门好书。\n\n也可通过本书作者的官方网站阅读书籍的电子版。[电子版](http://cn.linux.vbird.org/linux_basic/linux_basic.php)\n\n[豆瓣链接](https://book.douban.com/subject/4889838/)\n\n### 《深入理解计算机系统（原书第3版）》\n![cover](https://img1.doubanio.com/view/subject/l/public/s29195878.jpg)\n\n《深入理解计算机系统（原书第3版）》这是一本非常出名的书，是理解计算机系统首选书目，是10余万程序员的共同选择。卡内基-梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。\n\n[豆瓣链接](https://book.douban.com/subject/26912767/)\n\n### 《TCP/IP详解 卷1：协议》\n![cover](https://img3.doubanio.com/view/subject/l/public/s1543906.jpg)\n\n很经典的一本书籍，对TCP/IP四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"编程书籍推荐","published":1,"updated":"2019-11-12T06:37:54.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon7008nyos6t22odqq8","content":"<h3 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h3><h3 id=\"《编码：隐匿在计算机软硬件背后的语言》\"><a href=\"#《编码：隐匿在计算机软硬件背后的语言》\" class=\"headerlink\" title=\"《编码：隐匿在计算机软硬件背后的语言》\"></a>《编码：隐匿在计算机软硬件背后的语言》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img3.doubanio.com/view/subject/l/public/s4379914.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。</p>\n<h3 id=\"《鸟哥的linux私房菜：基础学习篇》\"><a href=\"#《鸟哥的linux私房菜：基础学习篇》\" class=\"headerlink\" title=\"《鸟哥的linux私房菜：基础学习篇》\"></a>《鸟哥的linux私房菜：基础学习篇》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img1.doubanio.com/view/subject/l/public/s4399937.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>《鸟哥的Linux私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习Linux不可多得的一本入门好书。</p>\n<p>也可通过本书作者的官方网站阅读书籍的电子版。<a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php\" target=\"_blank\" rel=\"noopener\">电子版</a></p>\n<p><a href=\"https://book.douban.com/subject/4889838/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a></p>\n<h3 id=\"《深入理解计算机系统（原书第3版）》\"><a href=\"#《深入理解计算机系统（原书第3版）》\" class=\"headerlink\" title=\"《深入理解计算机系统（原书第3版）》\"></a>《深入理解计算机系统（原书第3版）》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img1.doubanio.com/view/subject/l/public/s29195878.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>《深入理解计算机系统（原书第3版）》这是一本非常出名的书，是理解计算机系统首选书目，是10余万程序员的共同选择。卡内基-梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。</p>\n<p><a href=\"https://book.douban.com/subject/26912767/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a></p>\n<h3 id=\"《TCP-IP详解-卷1：协议》\"><a href=\"#《TCP-IP详解-卷1：协议》\" class=\"headerlink\" title=\"《TCP/IP详解 卷1：协议》\"></a>《TCP/IP详解 卷1：协议》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img3.doubanio.com/view/subject/l/public/s1543906.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>很经典的一本书籍，对TCP/IP四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h3><h3 id=\"《编码：隐匿在计算机软硬件背后的语言》\"><a href=\"#《编码：隐匿在计算机软硬件背后的语言》\" class=\"headerlink\" title=\"《编码：隐匿在计算机软硬件背后的语言》\"></a>《编码：隐匿在计算机软硬件背后的语言》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img3.doubanio.com/view/subject/l/public/s4379914.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>书中有非常丰富和连贯的例子去讲述计算机的工作原理，用来辅助课程第一部分的学习，以及深化对课程内容的理解都是非常好的。</p>\n<h3 id=\"《鸟哥的linux私房菜：基础学习篇》\"><a href=\"#《鸟哥的linux私房菜：基础学习篇》\" class=\"headerlink\" title=\"《鸟哥的linux私房菜：基础学习篇》\"></a>《鸟哥的linux私房菜：基础学习篇》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img1.doubanio.com/view/subject/l/public/s4399937.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>《鸟哥的Linux私房菜：基础学习篇》的内容非常丰富，并且实用，基本概念的讲解非常细致，深入浅出。各种功能和命令的介绍，都配以大量的实例操作和详尽的解析。是初学者学习Linux不可多得的一本入门好书。</p>\n<p>也可通过本书作者的官方网站阅读书籍的电子版。<a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php\" target=\"_blank\" rel=\"noopener\">电子版</a></p>\n<p><a href=\"https://book.douban.com/subject/4889838/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a></p>\n<h3 id=\"《深入理解计算机系统（原书第3版）》\"><a href=\"#《深入理解计算机系统（原书第3版）》\" class=\"headerlink\" title=\"《深入理解计算机系统（原书第3版）》\"></a>《深入理解计算机系统（原书第3版）》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img1.doubanio.com/view/subject/l/public/s29195878.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>《深入理解计算机系统（原书第3版）》这是一本非常出名的书，是理解计算机系统首选书目，是10余万程序员的共同选择。卡内基-梅隆、北京大学、清华大学、上海交通大学等国内外众多知名高校选用指定教材。从程序员视角全面剖析的实现细节，使读者深刻理解程序的行为，将所有计算机系统的相关知识融会贯通。</p>\n<p><a href=\"https://book.douban.com/subject/26912767/\" target=\"_blank\" rel=\"noopener\">豆瓣链接</a></p>\n<h3 id=\"《TCP-IP详解-卷1：协议》\"><a href=\"#《TCP-IP详解-卷1：协议》\" class=\"headerlink\" title=\"《TCP/IP详解 卷1：协议》\"></a>《TCP/IP详解 卷1：协议》</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://img3.doubanio.com/view/subject/l/public/s1543906.jpg\" alt=\"cover\" title>\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>很经典的一本书籍，对TCP/IP四层模型进行了非常详细的介绍，内容非常丰富，但是讲解相对晦涩，有点难懂，建议在对网络有一定基础以后再阅读该书籍，可以达到更深层次学习的目的。</p>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机组成原理之计算篇","top":1,"date":"2016-01-20T06:38:50.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机组成原理之计算篇.md","raw":"---\ntitle: 计算机组成原理之计算篇\ntop: 1\ndate: 2016-01-20 14:38:50\ntags: [\"编程基础\",\"计算机原理\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机组成原理之计算篇","published":1,"updated":"2019-11-12T06:44:59.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqon8008pyos6vpv74oci","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机组成原理之组成篇","top":1,"date":"2016-01-21T06:35:41.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机组成原理之组成篇.md","raw":"---\ntitle: 计算机组成原理之组成篇\ntop: 1\ndate: 2016-01-21 14:35:41\ntags: [\"编程基础\",\"计算机原理\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机组成原理之组成篇","published":1,"updated":"2019-11-12T06:45:07.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqona008tyos6xftaqfhh","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之应用层篇","top":1,"date":"2016-01-12T06:41:21.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之应用层篇.md","raw":"---\ntitle: 计算机网络之应用层篇\ntop: 1\ndate: 2016-01-12 14:41:21\ntags: [\"编程基础\",\"计算机网络\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之应用层篇","published":1,"updated":"2019-11-12T06:44:43.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqonb008wyos6ad90jr7g","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之概述计算机分类","top":1,"date":"2016-01-13T08:48:37.000Z","_content":"\n### 超级计算机\n- 功能最强、运算速度最快、存储容量最大的计算机\n- 多用于国家高科技领域和尖端技术研究\n- 标记他们运算速度的单位是TFlop/s\n\n### 大型计算机\n- 又称大型机、大型主机、主机等\n- 具有高性能，可处理大量数据与复杂的运算\n- 在大型机市场领域，IBM占据着很大的份额\n- 代表了高维护费用的存储系统\n- 不够灵活，伸缩性弱\n\n### 迷你计算机（服务器）\n- 也称为小型机，普通服务器\n- 不需要特殊的空调场所\n- 具备不错的算力，可以完成较复杂的运算\n\n### 工作站\n- 高端的通用微型计算机，提供比个人计算机更强大的性能\n- 类似于普通台式电脑，体积较大，但性能强劲\n\n### 微型计算机\n- 又称为个人计算机，是最普通的一类计算机\n- 麻雀虽小、五脏俱全\n\n### 计算机体系结构\n#### 冯诺伊曼体系\n- 将程序指令和数据一起存储的计算机设计概念结构\n##### 结构\n- 必须有一个存储器\n- 必须有一个控制器\n- 必须有一个运算器\n- 必须有输入设备\n- 必须有输出设备\n##### 特点\n- 能够把需要的程序和数据送至计算机中\n- 能够长期记忆程序、数据、中间结果及最终运算结果的能力\n- 能够具备算术、逻辑运算和数据传送等数据加工处理的能力\n- 能够按照要求将处理结果输出给用户\n#### 瓶颈\n- CPU和存储器速率之间的问题无法调和\n- CPU经常空转等待数据传输\n\n#### 现代计算机的结构\n- 现代计算机在冯诺依曼体系结构基础上进行修改\n- 解决CPU与存储设备之间的性能差异问题\n- CPU=运算器+控制器+存储器\n- 可以理解为以存储器为核心\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之概述计算机分类.md","raw":"---\ntitle: 计算机网络之概述计算机分类\ntop: 1\ndate: 2016-01-13 16:48:37\ntags:\ncategories:\n---\n\n### 超级计算机\n- 功能最强、运算速度最快、存储容量最大的计算机\n- 多用于国家高科技领域和尖端技术研究\n- 标记他们运算速度的单位是TFlop/s\n\n### 大型计算机\n- 又称大型机、大型主机、主机等\n- 具有高性能，可处理大量数据与复杂的运算\n- 在大型机市场领域，IBM占据着很大的份额\n- 代表了高维护费用的存储系统\n- 不够灵活，伸缩性弱\n\n### 迷你计算机（服务器）\n- 也称为小型机，普通服务器\n- 不需要特殊的空调场所\n- 具备不错的算力，可以完成较复杂的运算\n\n### 工作站\n- 高端的通用微型计算机，提供比个人计算机更强大的性能\n- 类似于普通台式电脑，体积较大，但性能强劲\n\n### 微型计算机\n- 又称为个人计算机，是最普通的一类计算机\n- 麻雀虽小、五脏俱全\n\n### 计算机体系结构\n#### 冯诺伊曼体系\n- 将程序指令和数据一起存储的计算机设计概念结构\n##### 结构\n- 必须有一个存储器\n- 必须有一个控制器\n- 必须有一个运算器\n- 必须有输入设备\n- 必须有输出设备\n##### 特点\n- 能够把需要的程序和数据送至计算机中\n- 能够长期记忆程序、数据、中间结果及最终运算结果的能力\n- 能够具备算术、逻辑运算和数据传送等数据加工处理的能力\n- 能够按照要求将处理结果输出给用户\n#### 瓶颈\n- CPU和存储器速率之间的问题无法调和\n- CPU经常空转等待数据传输\n\n#### 现代计算机的结构\n- 现代计算机在冯诺依曼体系结构基础上进行修改\n- 解决CPU与存储设备之间的性能差异问题\n- CPU=运算器+控制器+存储器\n- 可以理解为以存储器为核心\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之概述计算机分类","published":1,"updated":"2019-11-12T09:20:37.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqond0091yos6wrjnm3ob","content":"<h3 id=\"超级计算机\"><a href=\"#超级计算机\" class=\"headerlink\" title=\"超级计算机\"></a>超级计算机</h3><ul>\n<li>功能最强、运算速度最快、存储容量最大的计算机</li>\n<li>多用于国家高科技领域和尖端技术研究</li>\n<li>标记他们运算速度的单位是TFlop/s</li>\n</ul>\n<h3 id=\"大型计算机\"><a href=\"#大型计算机\" class=\"headerlink\" title=\"大型计算机\"></a>大型计算机</h3><ul>\n<li>又称大型机、大型主机、主机等</li>\n<li>具有高性能，可处理大量数据与复杂的运算</li>\n<li>在大型机市场领域，IBM占据着很大的份额</li>\n<li>代表了高维护费用的存储系统</li>\n<li>不够灵活，伸缩性弱</li>\n</ul>\n<h3 id=\"迷你计算机（服务器）\"><a href=\"#迷你计算机（服务器）\" class=\"headerlink\" title=\"迷你计算机（服务器）\"></a>迷你计算机（服务器）</h3><ul>\n<li>也称为小型机，普通服务器</li>\n<li>不需要特殊的空调场所</li>\n<li>具备不错的算力，可以完成较复杂的运算</li>\n</ul>\n<h3 id=\"工作站\"><a href=\"#工作站\" class=\"headerlink\" title=\"工作站\"></a>工作站</h3><ul>\n<li>高端的通用微型计算机，提供比个人计算机更强大的性能</li>\n<li>类似于普通台式电脑，体积较大，但性能强劲</li>\n</ul>\n<h3 id=\"微型计算机\"><a href=\"#微型计算机\" class=\"headerlink\" title=\"微型计算机\"></a>微型计算机</h3><ul>\n<li>又称为个人计算机，是最普通的一类计算机</li>\n<li>麻雀虽小、五脏俱全</li>\n</ul>\n<h3 id=\"计算机体系结构\"><a href=\"#计算机体系结构\" class=\"headerlink\" title=\"计算机体系结构\"></a>计算机体系结构</h3><h4 id=\"冯诺伊曼体系\"><a href=\"#冯诺伊曼体系\" class=\"headerlink\" title=\"冯诺伊曼体系\"></a>冯诺伊曼体系</h4><ul>\n<li>将程序指令和数据一起存储的计算机设计概念结构<h5 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h5></li>\n<li>必须有一个存储器</li>\n<li>必须有一个控制器</li>\n<li>必须有一个运算器</li>\n<li>必须有输入设备</li>\n<li>必须有输出设备<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5></li>\n<li>能够把需要的程序和数据送至计算机中</li>\n<li>能够长期记忆程序、数据、中间结果及最终运算结果的能力</li>\n<li>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</li>\n<li>能够按照要求将处理结果输出给用户<h4 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h4></li>\n<li>CPU和存储器速率之间的问题无法调和</li>\n<li>CPU经常空转等待数据传输</li>\n</ul>\n<h4 id=\"现代计算机的结构\"><a href=\"#现代计算机的结构\" class=\"headerlink\" title=\"现代计算机的结构\"></a>现代计算机的结构</h4><ul>\n<li>现代计算机在冯诺依曼体系结构基础上进行修改</li>\n<li>解决CPU与存储设备之间的性能差异问题</li>\n<li>CPU=运算器+控制器+存储器</li>\n<li>可以理解为以存储器为核心</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"超级计算机\"><a href=\"#超级计算机\" class=\"headerlink\" title=\"超级计算机\"></a>超级计算机</h3><ul>\n<li>功能最强、运算速度最快、存储容量最大的计算机</li>\n<li>多用于国家高科技领域和尖端技术研究</li>\n<li>标记他们运算速度的单位是TFlop/s</li>\n</ul>\n<h3 id=\"大型计算机\"><a href=\"#大型计算机\" class=\"headerlink\" title=\"大型计算机\"></a>大型计算机</h3><ul>\n<li>又称大型机、大型主机、主机等</li>\n<li>具有高性能，可处理大量数据与复杂的运算</li>\n<li>在大型机市场领域，IBM占据着很大的份额</li>\n<li>代表了高维护费用的存储系统</li>\n<li>不够灵活，伸缩性弱</li>\n</ul>\n<h3 id=\"迷你计算机（服务器）\"><a href=\"#迷你计算机（服务器）\" class=\"headerlink\" title=\"迷你计算机（服务器）\"></a>迷你计算机（服务器）</h3><ul>\n<li>也称为小型机，普通服务器</li>\n<li>不需要特殊的空调场所</li>\n<li>具备不错的算力，可以完成较复杂的运算</li>\n</ul>\n<h3 id=\"工作站\"><a href=\"#工作站\" class=\"headerlink\" title=\"工作站\"></a>工作站</h3><ul>\n<li>高端的通用微型计算机，提供比个人计算机更强大的性能</li>\n<li>类似于普通台式电脑，体积较大，但性能强劲</li>\n</ul>\n<h3 id=\"微型计算机\"><a href=\"#微型计算机\" class=\"headerlink\" title=\"微型计算机\"></a>微型计算机</h3><ul>\n<li>又称为个人计算机，是最普通的一类计算机</li>\n<li>麻雀虽小、五脏俱全</li>\n</ul>\n<h3 id=\"计算机体系结构\"><a href=\"#计算机体系结构\" class=\"headerlink\" title=\"计算机体系结构\"></a>计算机体系结构</h3><h4 id=\"冯诺伊曼体系\"><a href=\"#冯诺伊曼体系\" class=\"headerlink\" title=\"冯诺伊曼体系\"></a>冯诺伊曼体系</h4><ul>\n<li>将程序指令和数据一起存储的计算机设计概念结构<h5 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h5></li>\n<li>必须有一个存储器</li>\n<li>必须有一个控制器</li>\n<li>必须有一个运算器</li>\n<li>必须有输入设备</li>\n<li>必须有输出设备<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5></li>\n<li>能够把需要的程序和数据送至计算机中</li>\n<li>能够长期记忆程序、数据、中间结果及最终运算结果的能力</li>\n<li>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</li>\n<li>能够按照要求将处理结果输出给用户<h4 id=\"瓶颈\"><a href=\"#瓶颈\" class=\"headerlink\" title=\"瓶颈\"></a>瓶颈</h4></li>\n<li>CPU和存储器速率之间的问题无法调和</li>\n<li>CPU经常空转等待数据传输</li>\n</ul>\n<h4 id=\"现代计算机的结构\"><a href=\"#现代计算机的结构\" class=\"headerlink\" title=\"现代计算机的结构\"></a>现代计算机的结构</h4><ul>\n<li>现代计算机在冯诺依曼体系结构基础上进行修改</li>\n<li>解决CPU与存储设备之间的性能差异问题</li>\n<li>CPU=运算器+控制器+存储器</li>\n<li>可以理解为以存储器为核心</li>\n</ul>\n<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之概述计算机发展简史","top":1,"date":"2016-01-12T06:40:27.000Z","_content":"\n\n\n### 计算机发展的四个阶段\n- 1976-1957 电子管计算机\n- 1957-1964 晶体管计算机\n- 1964-1980 集成电路计算机\n- 1980-现在 超大规模集成电路计算机\n### 电子管计算机\n#### 背景\n- 第二次世界大战是电子管技术产生的催化剂（英国为解密德国海军的密文）\n- 战争使用飞机和火箭，需要计算射击参数，射击参数需要几千次运算\n\n埃尼阿克（ENIAC）\n- 18000多个电子管\n- 运行耗电量150千瓦\n- 重量达30吨，占地1500平方英尺\n\n#### 特点\n- 集成度小，空间占用大\n- 功耗高，运行速度慢\n- 操作复杂，更换程序需要接线\n\n### 晶体管计算机\n#### 背景\n- 贝尔实验室的三个科学家发明了晶体管\n\nPDP-1\n- 4k内存，每秒200,000指令\n- 配备512x512的显示器\n\n#### 特点\n- 集成度相对较高，空间占用相对小\n- 功耗相对较低，运行速度较快\n- 操作相对简单，交互更加方便\n\n### 集成电路计算机\n#### 背景\n- 德州仪器的工程师发明了集成电路(IC)\n\n#### 特点\n- 计算机变得更小\n- 功耗变得更低 \n- 计算速度变得更快\n\n### 超大规模集成电路计算机\n#### 特点\n- 一个芯片集成了上百万的晶体管\n- 速度更快，体积更小，价格更低，更能被大众接受\n- 用途丰富：文本处理、表格处理、高交互的游戏与应用\n\n### 未来的计算机\n#### 生物计算机\n- 以蛋白质分子作为主要原材料\n##### 特点\n- 体积小，效率高\n- 不易损坏，生物级别的自动修复\n- 不受信号干扰，无热损耗\n\n#### 量子计算机\n- 遵循量子力学的物理计算机\n\n### 微型计算机发展历史\n#### 单核CPU\n-（1971～1973）500KHz频率的微型计算机（字长8位）\n-（1978～1985）500MHz频率的微型计算机（字长16位）\n-（1985～2000）高于1GHz频率的微型计算机（字长32位）\n-（1973～1978）高于1MHz频率的微型计算机（字长8位）\n-（2000～现在）高于2GHz频率的微型计算机（字长为64位）\n\n#### 多核CPU\n-（2005） Intel奔腾系列双核CPU、AMD速龙系列\n-（2006）Intel酷睿四核CPU\n- Intel酷睿系列十六核CPU\n- Intel至强系列五十六核CPU\n\n\n\n\n\n\n### 计算机层次和编程语言\n\n### 计算机计算单位\n\n### 计算机字符和编码集\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之概述计算机发展简史.md","raw":"---\ntitle: 计算机网络之概述计算机发展简史\ntop: 1\ndate: 2016-01-12 14:40:27\ntags: [\"编程基础\",\"计算机网络\"]\ncategories: \"编程基础\"\n---\n\n\n\n### 计算机发展的四个阶段\n- 1976-1957 电子管计算机\n- 1957-1964 晶体管计算机\n- 1964-1980 集成电路计算机\n- 1980-现在 超大规模集成电路计算机\n### 电子管计算机\n#### 背景\n- 第二次世界大战是电子管技术产生的催化剂（英国为解密德国海军的密文）\n- 战争使用飞机和火箭，需要计算射击参数，射击参数需要几千次运算\n\n埃尼阿克（ENIAC）\n- 18000多个电子管\n- 运行耗电量150千瓦\n- 重量达30吨，占地1500平方英尺\n\n#### 特点\n- 集成度小，空间占用大\n- 功耗高，运行速度慢\n- 操作复杂，更换程序需要接线\n\n### 晶体管计算机\n#### 背景\n- 贝尔实验室的三个科学家发明了晶体管\n\nPDP-1\n- 4k内存，每秒200,000指令\n- 配备512x512的显示器\n\n#### 特点\n- 集成度相对较高，空间占用相对小\n- 功耗相对较低，运行速度较快\n- 操作相对简单，交互更加方便\n\n### 集成电路计算机\n#### 背景\n- 德州仪器的工程师发明了集成电路(IC)\n\n#### 特点\n- 计算机变得更小\n- 功耗变得更低 \n- 计算速度变得更快\n\n### 超大规模集成电路计算机\n#### 特点\n- 一个芯片集成了上百万的晶体管\n- 速度更快，体积更小，价格更低，更能被大众接受\n- 用途丰富：文本处理、表格处理、高交互的游戏与应用\n\n### 未来的计算机\n#### 生物计算机\n- 以蛋白质分子作为主要原材料\n##### 特点\n- 体积小，效率高\n- 不易损坏，生物级别的自动修复\n- 不受信号干扰，无热损耗\n\n#### 量子计算机\n- 遵循量子力学的物理计算机\n\n### 微型计算机发展历史\n#### 单核CPU\n-（1971～1973）500KHz频率的微型计算机（字长8位）\n-（1978～1985）500MHz频率的微型计算机（字长16位）\n-（1985～2000）高于1GHz频率的微型计算机（字长32位）\n-（1973～1978）高于1MHz频率的微型计算机（字长8位）\n-（2000～现在）高于2GHz频率的微型计算机（字长为64位）\n\n#### 多核CPU\n-（2005） Intel奔腾系列双核CPU、AMD速龙系列\n-（2006）Intel酷睿四核CPU\n- Intel酷睿系列十六核CPU\n- Intel至强系列五十六核CPU\n\n\n\n\n\n\n### 计算机层次和编程语言\n\n### 计算机计算单位\n\n### 计算机字符和编码集\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之概述计算机发展简史","published":1,"updated":"2019-11-12T08:55:56.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqond0093yos6fm5ho0d8","content":"<h3 id=\"计算机发展的四个阶段\"><a href=\"#计算机发展的四个阶段\" class=\"headerlink\" title=\"计算机发展的四个阶段\"></a>计算机发展的四个阶段</h3><ul>\n<li>1976-1957 电子管计算机</li>\n<li>1957-1964 晶体管计算机</li>\n<li>1964-1980 集成电路计算机</li>\n<li>1980-现在 超大规模集成电路计算机<h3 id=\"电子管计算机\"><a href=\"#电子管计算机\" class=\"headerlink\" title=\"电子管计算机\"></a>电子管计算机</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4></li>\n<li>第二次世界大战是电子管技术产生的催化剂（英国为解密德国海军的密文）</li>\n<li>战争使用飞机和火箭，需要计算射击参数，射击参数需要几千次运算</li>\n</ul>\n<p>埃尼阿克（ENIAC）</p>\n<ul>\n<li>18000多个电子管</li>\n<li>运行耗电量150千瓦</li>\n<li>重量达30吨，占地1500平方英尺</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>集成度小，空间占用大</li>\n<li>功耗高，运行速度慢</li>\n<li>操作复杂，更换程序需要接线</li>\n</ul>\n<h3 id=\"晶体管计算机\"><a href=\"#晶体管计算机\" class=\"headerlink\" title=\"晶体管计算机\"></a>晶体管计算机</h3><h4 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>贝尔实验室的三个科学家发明了晶体管</li>\n</ul>\n<p>PDP-1</p>\n<ul>\n<li>4k内存，每秒200,000指令</li>\n<li>配备512x512的显示器</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>集成度相对较高，空间占用相对小</li>\n<li>功耗相对较低，运行速度较快</li>\n<li>操作相对简单，交互更加方便</li>\n</ul>\n<h3 id=\"集成电路计算机\"><a href=\"#集成电路计算机\" class=\"headerlink\" title=\"集成电路计算机\"></a>集成电路计算机</h3><h4 id=\"背景-2\"><a href=\"#背景-2\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>德州仪器的工程师发明了集成电路(IC)</li>\n</ul>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>计算机变得更小</li>\n<li>功耗变得更低 </li>\n<li>计算速度变得更快</li>\n</ul>\n<h3 id=\"超大规模集成电路计算机\"><a href=\"#超大规模集成电路计算机\" class=\"headerlink\" title=\"超大规模集成电路计算机\"></a>超大规模集成电路计算机</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>一个芯片集成了上百万的晶体管</li>\n<li>速度更快，体积更小，价格更低，更能被大众接受</li>\n<li>用途丰富：文本处理、表格处理、高交互的游戏与应用</li>\n</ul>\n<h3 id=\"未来的计算机\"><a href=\"#未来的计算机\" class=\"headerlink\" title=\"未来的计算机\"></a>未来的计算机</h3><h4 id=\"生物计算机\"><a href=\"#生物计算机\" class=\"headerlink\" title=\"生物计算机\"></a>生物计算机</h4><ul>\n<li>以蛋白质分子作为主要原材料<h5 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h5></li>\n<li>体积小，效率高</li>\n<li>不易损坏，生物级别的自动修复</li>\n<li>不受信号干扰，无热损耗</li>\n</ul>\n<h4 id=\"量子计算机\"><a href=\"#量子计算机\" class=\"headerlink\" title=\"量子计算机\"></a>量子计算机</h4><ul>\n<li>遵循量子力学的物理计算机</li>\n</ul>\n<h3 id=\"微型计算机发展历史\"><a href=\"#微型计算机发展历史\" class=\"headerlink\" title=\"微型计算机发展历史\"></a>微型计算机发展历史</h3><h4 id=\"单核CPU\"><a href=\"#单核CPU\" class=\"headerlink\" title=\"单核CPU\"></a>单核CPU</h4><p>-（1971～1973）500KHz频率的微型计算机（字长8位）<br>-（1978～1985）500MHz频率的微型计算机（字长16位）<br>-（1985～2000）高于1GHz频率的微型计算机（字长32位）<br>-（1973～1978）高于1MHz频率的微型计算机（字长8位）<br>-（2000～现在）高于2GHz频率的微型计算机（字长为64位）</p>\n<h4 id=\"多核CPU\"><a href=\"#多核CPU\" class=\"headerlink\" title=\"多核CPU\"></a>多核CPU</h4><p>-（2005） Intel奔腾系列双核CPU、AMD速龙系列<br>-（2006）Intel酷睿四核CPU</p>\n<ul>\n<li>Intel酷睿系列十六核CPU</li>\n<li>Intel至强系列五十六核CPU</li>\n</ul>\n<h3 id=\"计算机层次和编程语言\"><a href=\"#计算机层次和编程语言\" class=\"headerlink\" title=\"计算机层次和编程语言\"></a>计算机层次和编程语言</h3><h3 id=\"计算机计算单位\"><a href=\"#计算机计算单位\" class=\"headerlink\" title=\"计算机计算单位\"></a>计算机计算单位</h3><h3 id=\"计算机字符和编码集\"><a href=\"#计算机字符和编码集\" class=\"headerlink\" title=\"计算机字符和编码集\"></a>计算机字符和编码集</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"计算机发展的四个阶段\"><a href=\"#计算机发展的四个阶段\" class=\"headerlink\" title=\"计算机发展的四个阶段\"></a>计算机发展的四个阶段</h3><ul>\n<li>1976-1957 电子管计算机</li>\n<li>1957-1964 晶体管计算机</li>\n<li>1964-1980 集成电路计算机</li>\n<li>1980-现在 超大规模集成电路计算机<h3 id=\"电子管计算机\"><a href=\"#电子管计算机\" class=\"headerlink\" title=\"电子管计算机\"></a>电子管计算机</h3><h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4></li>\n<li>第二次世界大战是电子管技术产生的催化剂（英国为解密德国海军的密文）</li>\n<li>战争使用飞机和火箭，需要计算射击参数，射击参数需要几千次运算</li>\n</ul>\n<p>埃尼阿克（ENIAC）</p>\n<ul>\n<li>18000多个电子管</li>\n<li>运行耗电量150千瓦</li>\n<li>重量达30吨，占地1500平方英尺</li>\n</ul>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>集成度小，空间占用大</li>\n<li>功耗高，运行速度慢</li>\n<li>操作复杂，更换程序需要接线</li>\n</ul>\n<h3 id=\"晶体管计算机\"><a href=\"#晶体管计算机\" class=\"headerlink\" title=\"晶体管计算机\"></a>晶体管计算机</h3><h4 id=\"背景-1\"><a href=\"#背景-1\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>贝尔实验室的三个科学家发明了晶体管</li>\n</ul>\n<p>PDP-1</p>\n<ul>\n<li>4k内存，每秒200,000指令</li>\n<li>配备512x512的显示器</li>\n</ul>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>集成度相对较高，空间占用相对小</li>\n<li>功耗相对较低，运行速度较快</li>\n<li>操作相对简单，交互更加方便</li>\n</ul>\n<h3 id=\"集成电路计算机\"><a href=\"#集成电路计算机\" class=\"headerlink\" title=\"集成电路计算机\"></a>集成电路计算机</h3><h4 id=\"背景-2\"><a href=\"#背景-2\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>德州仪器的工程师发明了集成电路(IC)</li>\n</ul>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>计算机变得更小</li>\n<li>功耗变得更低 </li>\n<li>计算速度变得更快</li>\n</ul>\n<h3 id=\"超大规模集成电路计算机\"><a href=\"#超大规模集成电路计算机\" class=\"headerlink\" title=\"超大规模集成电路计算机\"></a>超大规模集成电路计算机</h3><h4 id=\"特点-3\"><a href=\"#特点-3\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>一个芯片集成了上百万的晶体管</li>\n<li>速度更快，体积更小，价格更低，更能被大众接受</li>\n<li>用途丰富：文本处理、表格处理、高交互的游戏与应用</li>\n</ul>\n<h3 id=\"未来的计算机\"><a href=\"#未来的计算机\" class=\"headerlink\" title=\"未来的计算机\"></a>未来的计算机</h3><h4 id=\"生物计算机\"><a href=\"#生物计算机\" class=\"headerlink\" title=\"生物计算机\"></a>生物计算机</h4><ul>\n<li>以蛋白质分子作为主要原材料<h5 id=\"特点-4\"><a href=\"#特点-4\" class=\"headerlink\" title=\"特点\"></a>特点</h5></li>\n<li>体积小，效率高</li>\n<li>不易损坏，生物级别的自动修复</li>\n<li>不受信号干扰，无热损耗</li>\n</ul>\n<h4 id=\"量子计算机\"><a href=\"#量子计算机\" class=\"headerlink\" title=\"量子计算机\"></a>量子计算机</h4><ul>\n<li>遵循量子力学的物理计算机</li>\n</ul>\n<h3 id=\"微型计算机发展历史\"><a href=\"#微型计算机发展历史\" class=\"headerlink\" title=\"微型计算机发展历史\"></a>微型计算机发展历史</h3><h4 id=\"单核CPU\"><a href=\"#单核CPU\" class=\"headerlink\" title=\"单核CPU\"></a>单核CPU</h4><p>-（1971～1973）500KHz频率的微型计算机（字长8位）<br>-（1978～1985）500MHz频率的微型计算机（字长16位）<br>-（1985～2000）高于1GHz频率的微型计算机（字长32位）<br>-（1973～1978）高于1MHz频率的微型计算机（字长8位）<br>-（2000～现在）高于2GHz频率的微型计算机（字长为64位）</p>\n<h4 id=\"多核CPU\"><a href=\"#多核CPU\" class=\"headerlink\" title=\"多核CPU\"></a>多核CPU</h4><p>-（2005） Intel奔腾系列双核CPU、AMD速龙系列<br>-（2006）Intel酷睿四核CPU</p>\n<ul>\n<li>Intel酷睿系列十六核CPU</li>\n<li>Intel至强系列五十六核CPU</li>\n</ul>\n<h3 id=\"计算机层次和编程语言\"><a href=\"#计算机层次和编程语言\" class=\"headerlink\" title=\"计算机层次和编程语言\"></a>计算机层次和编程语言</h3><h3 id=\"计算机计算单位\"><a href=\"#计算机计算单位\" class=\"headerlink\" title=\"计算机计算单位\"></a>计算机计算单位</h3><h3 id=\"计算机字符和编码集\"><a href=\"#计算机字符和编码集\" class=\"headerlink\" title=\"计算机字符和编码集\"></a>计算机字符和编码集</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之传输层篇","top":1,"date":"2016-01-16T06:41:11.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之传输层篇.md","raw":"---\ntitle: 计算机网络之传输层篇\ntop: 1\ndate: 2016-01-16 14:41:11\ntags: [\"编程基础\",\"计算机网络\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之传输层篇","published":1,"updated":"2019-11-12T06:44:16.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqone0096yos6l88jdoz6","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之概述计算机层次与编程语言","top":1,"date":"2016-01-01T09:21:10.000Z","_content":"###  程序翻译与程序解释\n#### 程序翻译(C/C++,Object-C,Golang)\n- 高级的计算机语言L1（进行逻辑描述）\n- 通过编译器把L1转为低级的计算机语言L0\n- L0是计算机实际执行的语言\n\n\n#### 程序解释(Python,PHP,Javascript)\n- 高级的计算机语言L1作为输入\n- 使用L0实现另一个程序作为解释器\n- 解释器把L1解释成L0\n\n#### 区别\n- 计算机执行的指令都是L0\n- 翻译过程生成新的L0，解释过程不生产新的L0\n- 解释过程由L0编写的解释器去解释L1\n\n### 计算机的层次与编程语言\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之概述计算机层次与编程语言.md","raw":"---\ntitle: 计算机网络之概述计算机层次与编程语言\ntop: 1\ndate: 2016-01-01 17:21:10\ntags:\ncategories:\n---\n###  程序翻译与程序解释\n#### 程序翻译(C/C++,Object-C,Golang)\n- 高级的计算机语言L1（进行逻辑描述）\n- 通过编译器把L1转为低级的计算机语言L0\n- L0是计算机实际执行的语言\n\n\n#### 程序解释(Python,PHP,Javascript)\n- 高级的计算机语言L1作为输入\n- 使用L0实现另一个程序作为解释器\n- 解释器把L1解释成L0\n\n#### 区别\n- 计算机执行的指令都是L0\n- 翻译过程生成新的L0，解释过程不生产新的L0\n- 解释过程由L0编写的解释器去解释L1\n\n### 计算机的层次与编程语言\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之概述计算机层次与编程语言","published":1,"updated":"2019-11-12T09:31:07.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqonf0099yos63jx7iilq","content":"<h3 id=\"程序翻译与程序解释\"><a href=\"#程序翻译与程序解释\" class=\"headerlink\" title=\"程序翻译与程序解释\"></a>程序翻译与程序解释</h3><h4 id=\"程序翻译-C-C-Object-C-Golang\"><a href=\"#程序翻译-C-C-Object-C-Golang\" class=\"headerlink\" title=\"程序翻译(C/C++,Object-C,Golang)\"></a>程序翻译(C/C++,Object-C,Golang)</h4><ul>\n<li>高级的计算机语言L1（进行逻辑描述）</li>\n<li>通过编译器把L1转为低级的计算机语言L0</li>\n<li>L0是计算机实际执行的语言</li>\n</ul>\n<h4 id=\"程序解释-Python-PHP-Javascript\"><a href=\"#程序解释-Python-PHP-Javascript\" class=\"headerlink\" title=\"程序解释(Python,PHP,Javascript)\"></a>程序解释(Python,PHP,Javascript)</h4><ul>\n<li>高级的计算机语言L1作为输入</li>\n<li>使用L0实现另一个程序作为解释器</li>\n<li>解释器把L1解释成L0</li>\n</ul>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ul>\n<li>计算机执行的指令都是L0</li>\n<li>翻译过程生成新的L0，解释过程不生产新的L0</li>\n<li>解释过程由L0编写的解释器去解释L1</li>\n</ul>\n<h3 id=\"计算机的层次与编程语言\"><a href=\"#计算机的层次与编程语言\" class=\"headerlink\" title=\"计算机的层次与编程语言\"></a>计算机的层次与编程语言</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"程序翻译与程序解释\"><a href=\"#程序翻译与程序解释\" class=\"headerlink\" title=\"程序翻译与程序解释\"></a>程序翻译与程序解释</h3><h4 id=\"程序翻译-C-C-Object-C-Golang\"><a href=\"#程序翻译-C-C-Object-C-Golang\" class=\"headerlink\" title=\"程序翻译(C/C++,Object-C,Golang)\"></a>程序翻译(C/C++,Object-C,Golang)</h4><ul>\n<li>高级的计算机语言L1（进行逻辑描述）</li>\n<li>通过编译器把L1转为低级的计算机语言L0</li>\n<li>L0是计算机实际执行的语言</li>\n</ul>\n<h4 id=\"程序解释-Python-PHP-Javascript\"><a href=\"#程序解释-Python-PHP-Javascript\" class=\"headerlink\" title=\"程序解释(Python,PHP,Javascript)\"></a>程序解释(Python,PHP,Javascript)</h4><ul>\n<li>高级的计算机语言L1作为输入</li>\n<li>使用L0实现另一个程序作为解释器</li>\n<li>解释器把L1解释成L0</li>\n</ul>\n<h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h4><ul>\n<li>计算机执行的指令都是L0</li>\n<li>翻译过程生成新的L0，解释过程不生产新的L0</li>\n<li>解释过程由L0编写的解释器去解释L1</li>\n</ul>\n<h3 id=\"计算机的层次与编程语言\"><a href=\"#计算机的层次与编程语言\" class=\"headerlink\" title=\"计算机的层次与编程语言\"></a>计算机的层次与编程语言</h3><h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"},{"title":"计算机网络之网络层篇","top":1,"date":"2016-01-10T06:40:43.000Z","_content":"\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","source":"_posts/计算机网络之网络层篇.md","raw":"---\ntitle: 计算机网络之网络层篇\ntop: 1\ndate: 2016-01-10 14:40:43\ntags: [\"编程基础\",\"计算机网络\"]\ncategories: \"编程基础\"\n---\n\n\n### 欢迎扫描下方二维码，持续关注：\n![](https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg)\n\n互联网工程师（id:phpstcn），我们一起学习，一起进步","slug":"计算机网络之网络层篇","published":1,"updated":"2019-11-12T06:44:36.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck31cqong009dyos68j3yasin","content":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"欢迎扫描下方二维码，持续关注：\"><a href=\"#欢迎扫描下方二维码，持续关注：\" class=\"headerlink\" title=\"欢迎扫描下方二维码，持续关注：\"></a>欢迎扫描下方二维码，持续关注：</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://ww1.sinaimg.cn/large/a616b9a4gy1g4xzv954a4j20760763yo.jpg\" alt title>\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>互联网工程师（id:phpstcn），我们一起学习，一起进步</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck31cqok00009yos6kubjoyz8","category_id":"ck31cqok4000byos65ha30e3f","_id":"ck31cqoka000myos64xtx0vu3"},{"post_id":"ck31cqok9000kyos6c0swnwly","category_id":"ck31cqok4000byos65ha30e3f","_id":"ck31cqokd000ryos6xfj26pqg"},{"post_id":"ck31cqok2000ayos6u3vkuerg","category_id":"ck31cqok4000byos65ha30e3f","_id":"ck31cqokf000vyos6skupdmm0"},{"post_id":"ck31cqokb000pyos63ngzfrep","category_id":"ck31cqoke000tyos6c5x9exjg","_id":"ck31cqokj0016yos6izvydmhl"},{"post_id":"ck31cqoki0012yos6oq9nh1u8","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokm001ayos6x4ym3vqw"},{"post_id":"ck31cqoke000uyos6yq7wplsu","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokn001dyos6hjrnl1eq"},{"post_id":"ck31cqokj0015yos6awckd521","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqoko001fyos6dq71s9s4"},{"post_id":"ck31cqokk0018yos6snznj292","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokp001iyos6u647odnu"},{"post_id":"ck31cqokg000zyos6nvso3k6f","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokq001lyos643ldl1bj"},{"post_id":"ck31cqokl0019yos6nf8h98ss","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokr001pyos68f7xgays"},{"post_id":"ck31cqokm001cyos6udbii1no","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqoks001syos6z5brwrt1"},{"post_id":"ck31cqokn001eyos6m5oxtq1i","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokt001wyos60pchexa2"},{"post_id":"ck31cqoko001hyos6h032di3v","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqoku001zyos6e89yjz9v"},{"post_id":"ck31cqokp001kyos6ybbnoagj","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokv0022yos6pum75hdo"},{"post_id":"ck31cqokr001oyos6pzuykd7a","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokx0026yos60r9ax1k8"},{"post_id":"ck31cqokr001ryos6bcaixhj3","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqoky0029yos6n9jgdmzq"},{"post_id":"ck31cqokt001vyos60womgn17","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqokz002dyos65z845g0g"},{"post_id":"ck31cqoku001yyos643ehdc28","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol1002gyos6hggnrett"},{"post_id":"ck31cqokv0021yos6dvnlm4a9","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol2002kyos6m360an6d"},{"post_id":"ck31cqokw0025yos6uznye151","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol3002nyos6aqk97v06"},{"post_id":"ck31cqokx0028yos6qoyz85nv","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol4002syos60mfmoz2q"},{"post_id":"ck31cqoky002cyos6iboqda6k","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol5002vyos6p1ix74um"},{"post_id":"ck31cqol0002fyos6zjmewo9e","category_id":"ck31cqokh0010yos673ds60r5","_id":"ck31cqol70030yos64bobqytt"},{"post_id":"ck31cqol5002uyos6lqqil3fn","category_id":"ck31cqol4002qyos61lczz67a","_id":"ck31cqol90036yos6g5i1wq48"},{"post_id":"ck31cqol1002jyos6n8brqfd1","category_id":"ck31cqol4002qyos61lczz67a","_id":"ck31cqola003ayos6j6mnh6a8"},{"post_id":"ck31cqol2002myos6w2qzd25u","category_id":"ck31cqol7002zyos6q21im4gi","_id":"ck31cqolc003gyos68m412x8u"},{"post_id":"ck31cqol4002ryos64ucn1we4","category_id":"ck31cqol4002qyos61lczz67a","_id":"ck31cqole003myos6o9xjk315"},{"post_id":"ck31cqol6002yyos6bmx9dklq","category_id":"ck31cqolb003fyos6xommxxkb","_id":"ck31cqolh003tyos6gxisiosf"},{"post_id":"ck31cqole003oyos6hr50it46","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolj003zyos6ytkblhls"},{"post_id":"ck31cqol70032yos6f7s84ki9","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolk0043yos6hg3qnitv"},{"post_id":"ck31cqolf003ryos6ds64kulg","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqoll0047yos6cnkc7okt"},{"post_id":"ck31cqolh003vyos62x242eyo","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolm004byos6up9ur9p7"},{"post_id":"ck31cqol80035yos616fjy6l2","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolo004eyos6lc449q6q"},{"post_id":"ck31cqoli003yyos6lr5co12m","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolq004iyos690wooy7o"},{"post_id":"ck31cqolk0042yos6gym9xcb7","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolr004myos60pgj9kcj"},{"post_id":"ck31cqola0039yos6otv7iuzl","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolu004qyos6q7blzf3y"},{"post_id":"ck31cqoll0046yos673qyguh3","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolv004tyos648k12g93"},{"post_id":"ck31cqolm004ayos6ohfdma1j","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolw004yyos6la171tko"},{"post_id":"ck31cqolb003dyos6uepijkxs","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolx0051yos6ftwr48vh"},{"post_id":"ck31cqolo004dyos69ys9dxdn","category_id":"ck31cqok4000byos65ha30e3f","_id":"ck31cqoly0055yos6cfvgv5fm"},{"post_id":"ck31cqolc003hyos6k9mnq657","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqolz0058yos6yjbzpicl"},{"post_id":"ck31cqolq004lyos66y2kcmo5","category_id":"ck31cqok4000byos65ha30e3f","_id":"ck31cqom0005byos6t7wlzmge"},{"post_id":"ck31cqold003kyos6zg3pn85y","category_id":"ck31cqole003nyos62y0rzvap","_id":"ck31cqom1005fyos689nr4t05"},{"post_id":"ck31cqolw0050yos6cjuo4cfr","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom3005jyos66tlxbicj"},{"post_id":"ck31cqolt004pyos64nmz4cli","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom3005myos6l58wo58u"},{"post_id":"ck31cqolx0054yos62wu0xpld","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom5005pyos6trncff0e"},{"post_id":"ck31cqolu004syos662oqjisv","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom6005syos68xco72by"},{"post_id":"ck31cqom0005ayos61q35e2p5","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom7005wyos6rc5b6bkn"},{"post_id":"ck31cqom1005eyos61vm9etjx","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom8005zyos6x04ehre8"},{"post_id":"ck31cqolv004xyos69h9y3093","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqom90062yos6ijqrcfc1"},{"post_id":"ck31cqom2005iyos6359m981w","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqoma0066yos6il07qal2"},{"post_id":"ck31cqom3005lyos6ldybx3tg","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqomb006ayos6qj6u8i02"},{"post_id":"ck31cqolz0057yos6h9tcmvri","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomc006cyos6ycsmbn6j"},{"post_id":"ck31cqom4005oyos66qy0r0mq","category_id":"ck31cqolv004wyos6p3dm3okh","_id":"ck31cqomd006fyos6mfl6lr27"},{"post_id":"ck31cqom7005yyos6w5rcx9dl","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomd006iyos6sjhq3rzq"},{"post_id":"ck31cqom80061yos6iyrwb62h","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqome006myos6y586fbj7"},{"post_id":"ck31cqom5005ryos6sevzn13l","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqomf006oyos6cpunp8rg"},{"post_id":"ck31cqom90064yos6tn4d6e92","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomh006ryos6vf29fsnf"},{"post_id":"ck31cqoma0069yos6q12boshe","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomi006uyos6jyx4q50z"},{"post_id":"ck31cqom6005vyos6s0qkv7da","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqomj006yyos676tboeac"},{"post_id":"ck31cqomb006byos6546fofp8","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomk0070yos69s0zl60z"},{"post_id":"ck31cqomc006eyos66dmgw8om","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomm0073yos66yjdzydh"},{"post_id":"ck31cqomd006hyos6si23oqf4","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomn0076yos6us61f9p2"},{"post_id":"ck31cqome006lyos63z4zyw58","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomo007ayos6ymy4cjn0"},{"post_id":"ck31cqomf006nyos6v3ad1zds","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomp007cyos6ycshfhx9"},{"post_id":"ck31cqomg006qyos6gda1mz6o","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomq007fyos6r34m4tyo"},{"post_id":"ck31cqomh006tyos6g3dnpvn3","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomr007iyos6k0769m0m"},{"post_id":"ck31cqomi006xyos6mqterogw","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqoms007myos60yx2cu5m"},{"post_id":"ck31cqomj006zyos6hq3ma5qs","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomt007oyos68bul6wuq"},{"post_id":"ck31cqomk0072yos6926u78gc","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomu007ryos634k7yres"},{"post_id":"ck31cqomm0075yos6ms7xunz0","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomv007uyos65n7505ov"},{"post_id":"ck31cqomo0079yos6xkyls585","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomw007yyos62lijzv14"},{"post_id":"ck31cqomo007byos62o00yil1","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqomz0080yos6ltk0wdfn"},{"post_id":"ck31cqomp007eyos6ejz8vnwz","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon00083yos6ht0znvn6"},{"post_id":"ck31cqomq007hyos6es9tqk1s","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon10086yos6sxmbt8tb"},{"post_id":"ck31cqomr007lyos6hp53g8bi","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon2008ayos6h3qsg1wn"},{"post_id":"ck31cqoms007nyos61z57ocid","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon4008dyos6uapdojum"},{"post_id":"ck31cqomu007qyos6ftn0a6vs","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon5008gyos6tbf3hlh8"},{"post_id":"ck31cqomu007tyos6smec5p9k","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon6008kyos68xzbi65w"},{"post_id":"ck31cqomw007zyos6bm00fii7","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon7008oyos6dh2vq5pw"},{"post_id":"ck31cqon00082yos62b8jair8","category_id":"ck31cqom3005kyos666qvz6lk","_id":"ck31cqon8008ryos613tj9ps1"},{"post_id":"ck31cqon4008fyos66caqkzmc","category_id":"ck31cqon3008byos6g0wqwkdr","_id":"ck31cqona008uyos6z0wg5f7u"},{"post_id":"ck31cqon10085yos64irok4by","category_id":"ck31cqon3008byos6g0wqwkdr","_id":"ck31cqonc008yyos6255ddrpo"},{"post_id":"ck31cqon6008iyos6924t0dji","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqond0092yos6bx7927y1"},{"post_id":"ck31cqon20089yos6rw5sih3s","category_id":"ck31cqon3008byos6g0wqwkdr","_id":"ck31cqone0094yos6snycbt3q"},{"post_id":"ck31cqon8008pyos6vpv74oci","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqonf0097yos6jrae1jrs"},{"post_id":"ck31cqona008tyos6xftaqfhh","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqonf009ayos6adooisv5"},{"post_id":"ck31cqon3008cyos64o0vhbqx","category_id":"ck31cqon3008byos6g0wqwkdr","_id":"ck31cqong009eyos6wfloj1ew"},{"post_id":"ck31cqonb008wyos6ad90jr7g","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqonh009fyos6pmiuoy0j"},{"post_id":"ck31cqon7008nyos6t22odqq8","category_id":"ck31cqonc008xyos66e8htfw0","_id":"ck31cqonh009hyos6ew8b1tej"},{"post_id":"ck31cqond0093yos6fm5ho0d8","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqonh009jyos6mk3bheuv"},{"post_id":"ck31cqone0096yos6l88jdoz6","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqonh009myos6gqp7uxxg"},{"post_id":"ck31cqong009dyos68j3yasin","category_id":"ck31cqom7005xyos6vymdm8c6","_id":"ck31cqoni009oyos6du0aox7q"}],"PostTag":[{"post_id":"ck31cqojr0002yos6zf6xvh0m","tag_id":"ck31cqojx0005yos60oebonxb","_id":"ck31cqok4000dyos6ul0eiwgl"},{"post_id":"ck31cqok00009yos6kubjoyz8","tag_id":"ck31cqok4000cyos6irel2ny5","_id":"ck31cqok9000jyos6lkmmybwz"},{"post_id":"ck31cqok2000ayos6u3vkuerg","tag_id":"ck31cqok4000cyos6irel2ny5","_id":"ck31cqokb000oyos690kzp7ml"},{"post_id":"ck31cqokd000qyos6rxno8pt3","tag_id":"ck31cqoka000nyos665d03iw6","_id":"ck31cqokf000wyos6pyakoqok"},{"post_id":"ck31cqok6000fyos6tmwfitby","tag_id":"ck31cqoka000nyos665d03iw6","_id":"ck31cqokh0011yos6kwsn2fxc"},{"post_id":"ck31cqok6000fyos6tmwfitby","tag_id":"ck31cqoke000syos6x8krdepu","_id":"ck31cqoki0013yos6rnuex219"},{"post_id":"ck31cqok9000kyos6c0swnwly","tag_id":"ck31cqok4000cyos6irel2ny5","_id":"ck31cqokp001jyos61t02tjc3"},{"post_id":"ck31cqok9000kyos6c0swnwly","tag_id":"ck31cqokg000yyos6aahrgzby","_id":"ck31cqokq001myos6nebqifco"},{"post_id":"ck31cqok9000kyos6c0swnwly","tag_id":"ck31cqoki0014yos6v7mr0o86","_id":"ck31cqokr001qyos6ewkqgk4n"},{"post_id":"ck31cqok9000kyos6c0swnwly","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqoks001tyos6k3bgi561"},{"post_id":"ck31cqokr001oyos6pzuykd7a","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqoku001xyos6u5yf68wr"},{"post_id":"ck31cqoka000lyos639jrx3wk","tag_id":"ck31cqoko001gyos6uwqgkcip","_id":"ck31cqokv0020yos6eerghphr"},{"post_id":"ck31cqoka000lyos639jrx3wk","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqokw0024yos611tnbtje"},{"post_id":"ck31cqokr001ryos6bcaixhj3","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqokx0027yos6k07kfxbe"},{"post_id":"ck31cqokt001vyos60womgn17","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqoky002byos6757teyck"},{"post_id":"ck31cqoku001yyos643ehdc28","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqokz002eyos6iguak2ir"},{"post_id":"ck31cqokb000pyos63ngzfrep","tag_id":"ck31cqoks001uyos6154x1mjg","_id":"ck31cqol1002iyos6q55j08qu"},{"post_id":"ck31cqokb000pyos63ngzfrep","tag_id":"ck31cqoka000nyos665d03iw6","_id":"ck31cqol2002lyos64qewv1do"},{"post_id":"ck31cqokv0021yos6dvnlm4a9","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol3002pyos6dj67siu3"},{"post_id":"ck31cqokw0025yos6uznye151","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol5002tyos6u4xzj1x4"},{"post_id":"ck31cqoke000uyos6yq7wplsu","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol6002xyos6ielegslg"},{"post_id":"ck31cqokx0028yos6qoyz85nv","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol70031yos645dqaxj1"},{"post_id":"ck31cqoky002cyos6iboqda6k","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol80034yos6oajhg93w"},{"post_id":"ck31cqokg000zyos6nvso3k6f","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqol90037yos68sjwcgi6"},{"post_id":"ck31cqol0002fyos6zjmewo9e","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqola003cyos67lxj19pu"},{"post_id":"ck31cqoki0012yos6oq9nh1u8","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqolb003eyos6pbihw4s9"},{"post_id":"ck31cqol4002ryos64ucn1we4","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqolc003jyos6f4quikha"},{"post_id":"ck31cqokj0015yos6awckd521","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqold003lyos6ikwky5l8"},{"post_id":"ck31cqol5002uyos6lqqil3fn","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqolf003qyos6y7u2w6f0"},{"post_id":"ck31cqokl0019yos6nf8h98ss","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqolg003syos6uf906mw5"},{"post_id":"ck31cqokm001cyos6udbii1no","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqoli003xyos6jdsj1yh1"},{"post_id":"ck31cqokn001eyos6m5oxtq1i","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqolj0040yos6ulv0b0yx"},{"post_id":"ck31cqoko001hyos6h032di3v","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqolk0044yos60y0drj85"},{"post_id":"ck31cqokp001kyos6ybbnoagj","tag_id":"ck31cqokq001nyos6lab32nt9","_id":"ck31cqoll0048yos6po3a6sz3"},{"post_id":"ck31cqol1002jyos6n8brqfd1","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqolo004fyos6niujbtdk"},{"post_id":"ck31cqol1002jyos6n8brqfd1","tag_id":"ck31cqoli003wyos62z720orz","_id":"ck31cqolq004jyos6or8hz7qq"},{"post_id":"ck31cqol1002jyos6n8brqfd1","tag_id":"ck31cqolk0045yos6kmukfdob","_id":"ck31cqols004nyos6y6024y2n"},{"post_id":"ck31cqol2002myos6w2qzd25u","tag_id":"ck31cqoln004cyos670up1nrx","_id":"ck31cqolu004ryos67ipzfmgw"},{"post_id":"ck31cqol2002myos6w2qzd25u","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqolv004vyos6ys0vqswt"},{"post_id":"ck31cqolp004hyos6qyv7ug5x","tag_id":"ck31cqoks001uyos6154x1mjg","_id":"ck31cqolw004zyos6d7bouy6z"},{"post_id":"ck31cqol6002yyos6bmx9dklq","tag_id":"ck31cqolq004kyos69ucmsdkw","_id":"ck31cqolx0053yos6e0yvfjcj"},{"post_id":"ck31cqol70032yos6f7s84ki9","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqom1005dyos6pzonrk9n"},{"post_id":"ck31cqol70032yos6f7s84ki9","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqom2005gyos6lcxiiw5q"},{"post_id":"ck31cqol80035yos616fjy6l2","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqom5005qyos6e8xpeosj"},{"post_id":"ck31cqol80035yos616fjy6l2","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqom6005tyos6l7chkyh6"},{"post_id":"ck31cqola0039yos6otv7iuzl","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqom90063yos6gn1gqk7o"},{"post_id":"ck31cqola0039yos6otv7iuzl","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqoma0067yos6lwpexgwf"},{"post_id":"ck31cqolb003dyos6uepijkxs","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqomd006gyos6f8htyefd"},{"post_id":"ck31cqolb003dyos6uepijkxs","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqomd006jyos6x1fn7wiu"},{"post_id":"ck31cqolc003hyos6k9mnq657","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqomh006syos6z1vi5lys"},{"post_id":"ck31cqolc003hyos6k9mnq657","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqomi006vyos6cxod23pr"},{"post_id":"ck31cqold003kyos6zg3pn85y","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqomm0074yos60spy6ypq"},{"post_id":"ck31cqold003kyos6zg3pn85y","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqomn0077yos6asxshs4n"},{"post_id":"ck31cqole003oyos6hr50it46","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqomq007gyos6ya7l20hk"},{"post_id":"ck31cqole003oyos6hr50it46","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqomr007jyos6wjeeqk2i"},{"post_id":"ck31cqolf003ryos6ds64kulg","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqomu007syos6jedokytx"},{"post_id":"ck31cqolf003ryos6ds64kulg","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqomv007vyos67obfbd1a"},{"post_id":"ck31cqolh003vyos62x242eyo","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqon00084yos60mg8s0ea"},{"post_id":"ck31cqolh003vyos62x242eyo","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqon10087yos6egbp5zd5"},{"post_id":"ck31cqoli003yyos6lr5co12m","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqon6008hyos6qvlb1q49"},{"post_id":"ck31cqoli003yyos6lr5co12m","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqon7008lyos6dsmi0uxt"},{"post_id":"ck31cqolk0042yos6gym9xcb7","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqonb008vyos6z9n2ea2l"},{"post_id":"ck31cqolk0042yos6gym9xcb7","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqonc008zyos60fsk60nj"},{"post_id":"ck31cqoll0046yos673qyguh3","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqonf0098yos67gchai4b"},{"post_id":"ck31cqoll0046yos673qyguh3","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqong009byos658bqhti3"},{"post_id":"ck31cqolm004ayos6ohfdma1j","tag_id":"ck31cqolv004uyos63e3br825","_id":"ck31cqonh009iyos6w658ztbg"},{"post_id":"ck31cqolm004ayos6ohfdma1j","tag_id":"ck31cqolx0052yos6nx6ygjdf","_id":"ck31cqonh009kyos6vganfhes"},{"post_id":"ck31cqolo004dyos69ys9dxdn","tag_id":"ck31cqonh009gyos66prt2l5n","_id":"ck31cqoni009nyos6r9fsf7sx"},{"post_id":"ck31cqolq004lyos66y2kcmo5","tag_id":"ck31cqonh009lyos6s6g6z0a1","_id":"ck31cqoni009qyos64hcync45"},{"post_id":"ck31cqolq004lyos66y2kcmo5","tag_id":"ck31cqokm001byos6bdahrxwv","_id":"ck31cqoni009ryos6m1z6zacz"},{"post_id":"ck31cqolq004lyos66y2kcmo5","tag_id":"ck31cqokg000yyos6aahrgzby","_id":"ck31cqoni009tyos629uja28h"},{"post_id":"ck31cqolt004pyos64nmz4cli","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqoni009uyos6zskjwa1s"},{"post_id":"ck31cqolu004syos662oqjisv","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonj009wyos6l86fi30c"},{"post_id":"ck31cqolv004xyos69h9y3093","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonj009yyos6xrp0qxia"},{"post_id":"ck31cqolw0050yos6cjuo4cfr","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonk00a0yos6zuuscsck"},{"post_id":"ck31cqolx0054yos62wu0xpld","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonk00a2yos6rruqw871"},{"post_id":"ck31cqolz0057yos6h9tcmvri","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonl00a4yos6grohcmbr"},{"post_id":"ck31cqom0005ayos61q35e2p5","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonl00a6yos69cw4xx2z"},{"post_id":"ck31cqom1005eyos61vm9etjx","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonm00a8yos6vzcg9f4a"},{"post_id":"ck31cqom2005iyos6359m981w","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonm00aayos6foqnbmpi"},{"post_id":"ck31cqom3005lyos6ldybx3tg","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonm00acyos6kiggtu0h"},{"post_id":"ck31cqom4005oyos66qy0r0mq","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonn00aeyos6cye3cm86"},{"post_id":"ck31cqom5005ryos6sevzn13l","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqonn00ahyos6up6apgys"},{"post_id":"ck31cqom5005ryos6sevzn13l","tag_id":"ck31cqonn00afyos6cwws4dav","_id":"ck31cqonn00aiyos6mf002jnq"},{"post_id":"ck31cqom6005vyos6s0qkv7da","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqono00alyos62yt0qhyl"},{"post_id":"ck31cqom6005vyos6s0qkv7da","tag_id":"ck31cqonn00afyos6cwws4dav","_id":"ck31cqono00amyos6f2thq7vb"},{"post_id":"ck31cqom7005yyos6w5rcx9dl","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonp00aoyos6wlac94l0"},{"post_id":"ck31cqom80061yos6iyrwb62h","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonp00aqyos6pnhq22sm"},{"post_id":"ck31cqom90064yos6tn4d6e92","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonq00asyos6thgfqydn"},{"post_id":"ck31cqoma0069yos6q12boshe","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonr00auyos6hkw3xvo3"},{"post_id":"ck31cqomb006byos6546fofp8","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonr00awyos6lfibmy71"},{"post_id":"ck31cqomc006eyos66dmgw8om","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonr00ayyos66360bkdd"},{"post_id":"ck31cqomd006hyos6si23oqf4","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqons00b0yos674w7brmw"},{"post_id":"ck31cqome006lyos63z4zyw58","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqons00b2yos6f5kzyug5"},{"post_id":"ck31cqomf006nyos6v3ad1zds","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqont00b4yos6qxu5b86s"},{"post_id":"ck31cqomg006qyos6gda1mz6o","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqont00b6yos6l8j7jucq"},{"post_id":"ck31cqomh006tyos6g3dnpvn3","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonu00b8yos6twtymiz1"},{"post_id":"ck31cqomi006xyos6mqterogw","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonu00bayos6t97fnd2r"},{"post_id":"ck31cqomj006zyos6hq3ma5qs","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonu00bcyos6pawnnrti"},{"post_id":"ck31cqomk0072yos6926u78gc","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonv00beyos6tmua6nij"},{"post_id":"ck31cqomm0075yos6ms7xunz0","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonv00bgyos66n2cvs9r"},{"post_id":"ck31cqomo0079yos6xkyls585","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonw00biyos6tydhbfoq"},{"post_id":"ck31cqomo007byos62o00yil1","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonw00bkyos6drbkong9"},{"post_id":"ck31cqomp007eyos6ejz8vnwz","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonx00bmyos69cvc6s23"},{"post_id":"ck31cqomq007hyos6es9tqk1s","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonx00boyos6148vxuzj"},{"post_id":"ck31cqomr007lyos6hp53g8bi","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqony00bqyos671a57428"},{"post_id":"ck31cqoms007nyos61z57ocid","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqony00bsyos69jm3g1rf"},{"post_id":"ck31cqomu007qyos6ftn0a6vs","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonz00buyos6xj6xvwu2"},{"post_id":"ck31cqomu007tyos6smec5p9k","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonz00bwyos6pjdpi4f4"},{"post_id":"ck31cqomw007zyos6bm00fii7","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqonz00byyos67hpxr24a"},{"post_id":"ck31cqon00082yos62b8jair8","tag_id":"ck31cqoni009pyos6y3ncbff5","_id":"ck31cqoo000c0yos6c5euk6ul"},{"post_id":"ck31cqon10085yos64irok4by","tag_id":"ck31cqoo000bzyos6hsrf2ccz","_id":"ck31cqoo000c2yos6na4l9zuc"},{"post_id":"ck31cqon20089yos6rw5sih3s","tag_id":"ck31cqoo000bzyos6hsrf2ccz","_id":"ck31cqoo100c4yos6afny10xe"},{"post_id":"ck31cqon3008cyos64o0vhbqx","tag_id":"ck31cqoo000bzyos6hsrf2ccz","_id":"ck31cqoo100c6yos6xnjxutpp"},{"post_id":"ck31cqon4008fyos66caqkzmc","tag_id":"ck31cqoo000bzyos6hsrf2ccz","_id":"ck31cqoo200c8yos6s5mzj2ks"},{"post_id":"ck31cqon6008iyos6924t0dji","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo200cbyos6dhxijbb7"},{"post_id":"ck31cqon6008iyos6924t0dji","tag_id":"ck31cqoo200c9yos6en3c49gb","_id":"ck31cqoo200ccyos6wwf2u09p"},{"post_id":"ck31cqon7008nyos6t22odqq8","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo300cfyos63td9ekor"},{"post_id":"ck31cqon7008nyos6t22odqq8","tag_id":"ck31cqoo200cdyos6jfx91cty","_id":"ck31cqoo300cgyos62ku5h7eu"},{"post_id":"ck31cqon8008pyos6vpv74oci","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo400cjyos6y0u1y715"},{"post_id":"ck31cqon8008pyos6vpv74oci","tag_id":"ck31cqoo200c9yos6en3c49gb","_id":"ck31cqoo400ckyos65g5g3964"},{"post_id":"ck31cqona008tyos6xftaqfhh","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo500cnyos6h49psttn"},{"post_id":"ck31cqona008tyos6xftaqfhh","tag_id":"ck31cqoo200c9yos6en3c49gb","_id":"ck31cqoo500coyos6z3ao36of"},{"post_id":"ck31cqonb008wyos6ad90jr7g","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo500cryos6wv5w6dgd"},{"post_id":"ck31cqonb008wyos6ad90jr7g","tag_id":"ck31cqoo500cpyos62171zdz5","_id":"ck31cqoo500csyos675rn7sj1"},{"post_id":"ck31cqond0093yos6fm5ho0d8","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo600cvyos6ue9wmbr9"},{"post_id":"ck31cqond0093yos6fm5ho0d8","tag_id":"ck31cqoo500cpyos62171zdz5","_id":"ck31cqoo600cwyos6pzowrgmg"},{"post_id":"ck31cqone0096yos6l88jdoz6","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo800czyos6fu349wwg"},{"post_id":"ck31cqone0096yos6l88jdoz6","tag_id":"ck31cqoo500cpyos62171zdz5","_id":"ck31cqoo800d0yos6bmrnz91i"},{"post_id":"ck31cqong009dyos68j3yasin","tag_id":"ck31cqonn00adyos6g2s4x679","_id":"ck31cqoo900d2yos6p3s427c8"},{"post_id":"ck31cqong009dyos68j3yasin","tag_id":"ck31cqoo500cpyos62171zdz5","_id":"ck31cqoo900d3yos6repagy7d"}],"Tag":[{"name":"tool","_id":"ck31cqojx0005yos60oebonxb"},{"name":"php","_id":"ck31cqok4000cyos6irel2ny5"},{"name":"golang","_id":"ck31cqoka000nyos665d03iw6"},{"name":"PHP","_id":"ck31cqoke000syos6x8krdepu"},{"name":"php-fpm","_id":"ck31cqokg000yyos6aahrgzby"},{"name":"apache","_id":"ck31cqoki0014yos6v7mr0o86"},{"name":"nginx","_id":"ck31cqokm001byos6bdahrxwv"},{"name":"docker","_id":"ck31cqoko001gyos6uwqgkcip"},{"name":"mysql","_id":"ck31cqokq001nyos6lab32nt9"},{"name":"vscode","_id":"ck31cqoks001uyos6154x1mjg"},{"name":"https","_id":"ck31cqoli003wyos62z720orz"},{"name":"ssl","_id":"ck31cqolk0045yos6kmukfdob"},{"name":"node","_id":"ck31cqoln004cyos670up1nrx"},{"name":"python","_id":"ck31cqolq004kyos69ucmsdkw"},{"name":"redis","_id":"ck31cqolv004uyos63e3br825"},{"name":"NoSQL","_id":"ck31cqolx0052yos6nx6ygjdf"},{"name":"swoole","_id":"ck31cqonh009gyos66prt2l5n"},{"name":"wsl","_id":"ck31cqonh009lyos6s6g6z0a1"},{"name":"数据结构","_id":"ck31cqoni009pyos6y3ncbff5"},{"name":"编程基础","_id":"ck31cqonn00adyos6g2s4x679"},{"name":"操作系统","_id":"ck31cqonn00afyos6cwws4dav"},{"name":"算法","_id":"ck31cqoo000bzyos6hsrf2ccz"},{"name":"计算机原理","_id":"ck31cqoo200c9yos6en3c49gb"},{"name":"书籍","_id":"ck31cqoo200cdyos6jfx91cty"},{"name":"计算机网络","_id":"ck31cqoo500cpyos62171zdz5"}]}}